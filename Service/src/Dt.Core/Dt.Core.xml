<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dt.Core</name>
    </assembly>
    <members>
        <member name="T:Dt.Core.BaseApi">
            <summary>
            Api抽象基类
            </summary>
        </member>
        <member name="F:Dt.Core.BaseApi._c">
            <summary>
            业务线上下文
            </summary>
        </member>
        <member name="T:Dt.Core.LobContext">
            <summary>
            业务线处理上下文
            </summary>
        </member>
        <member name="M:Dt.Core.LobContext.#ctor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            构造方法
            </summary>
            <param name="p_context"></param>
        </member>
        <member name="P:Dt.Core.LobContext.Current">
            <summary>
            获取当前业务线上下文
            </summary>
        </member>
        <member name="P:Dt.Core.LobContext.Context">
            <summary>
            http请求上下文
            </summary>
        </member>
        <member name="P:Dt.Core.LobContext.Db">
            <summary>
            获取mysql默认库
            </summary>
        </member>
        <member name="P:Dt.Core.LobContext.Log">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="P:Dt.Core.LobContext.Local">
            <summary>
            本地事件总线
            </summary>
        </member>
        <member name="P:Dt.Core.LobContext.Remote">
            <summary>
            远程事件总线
            </summary>
        </member>
        <member name="P:Dt.Core.LobContext.Api">
            <summary>
            当前Api方法
            </summary>
        </member>
        <member name="P:Dt.Core.LobContext.ApiName">
            <summary>
            调用的Api名称
            </summary>
        </member>
        <member name="P:Dt.Core.LobContext.Status">
            <summary>
            当前拦截状态
            </summary>
        </member>
        <member name="M:Dt.Core.LobContext.GetUserID">
            <summary>
            获取当前用户标识
            </summary>
        </member>
        <member name="M:Dt.Core.LobContext.GetDbByKey(System.String)">
            <summary>
            根据键名获取Db对象
            </summary>
            <param name="p_dbKey">数据源键名，在json配置DbList节</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.LobContext.IsIntercepted">
            <summary>
            是否已被拦截过，确保只拦截一次
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.LobContext.Complete(System.Boolean)">
            <summary>
            拦截结束，提交或回滚事务、关闭数据库连接
            </summary>
            <param name="p_suc"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.LobContext.Handle(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)">
            <summary>
            处理http rpc请求
            </summary>
            <param name="p_schemes"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.LobContext.Response(Dt.Core.Rpc.ApiResponseType,System.Int64,System.Object)">
            <summary>
            向客户端输出响应
            </summary>
            <param name="p_responseType">结果标志：0成功，1错误，2警告提示</param>
            <param name="p_elapsed">耗时</param>
            <param name="p_content">内容</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.LobContext.ParseParams">
            <summary>
            反序列化json格式的调用参数，请求的第一帧
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.LobContext.IsAuthenticated(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)">
            <summary>
            校验授权
            </summary>
            <param name="p_schemes"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.InterceptStatus">
            <summary>
            拦截状态
            </summary>
        </member>
        <member name="F:Dt.Core.InterceptStatus.Intercepting">
            <summary>
            拦截中
            </summary>
        </member>
        <member name="F:Dt.Core.InterceptStatus.Successful">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Dt.Core.InterceptStatus.Failed">
            <summary>
            过程中异常
            </summary>
        </member>
        <member name="T:Dt.Core.LobInterceptor">
            <summary>
            业务线处理拦截器
            </summary>
        </member>
        <member name="T:Dt.Core.LobLogEnricher">
            <summary>
            业务线处理日志的附加属性
            </summary>
        </member>
        <member name="T:Dt.Core.DataAccess">
            <summary>
            MySql默认库的数据访问Api
            </summary>
        </member>
        <member name="M:Dt.Core.DataAccess.Query(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回结果集
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回Table数据集</returns>
        </member>
        <member name="M:Dt.Core.DataAccess.GetPage(System.Int32,System.Int32,System.String,System.Object)">
            <summary>
            按页查询数据
            </summary>
            <param name="p_starRow">起始行号：mysql中第一行为0行</param>
            <param name="p_pageSize">每页显示行数</param>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回Table数据集</returns>
        </member>
        <member name="M:Dt.Core.DataAccess.GetScalar(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，只返回第一个单元格数据
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一个单元格数据</returns>
        </member>
        <member name="M:Dt.Core.DataAccess.GetRow(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，只返回第一行数据
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一行Row或null</returns>
        </member>
        <member name="M:Dt.Core.DataAccess.Exec(System.String,System.Object)">
            <summary>
            一个事务内执行Sql语句，返回影响的行数，p_params为IEnumerable时执行批量操作
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，为IEnumerable时执行批量操作</param>
            <returns>返回执行后影响的行数</returns>
        </member>
        <member name="M:Dt.Core.DataAccess.BatchExec(System.Collections.Generic.List{Dt.Core.Dict})">
            <summary>
            一个事务内执行多个Sql
            </summary>
            <param name="p_dts">参数列表，每个Dict中包含两个键：text,params</param>
            <returns>true 成功</returns>
        </member>
        <member name="M:Dt.Core.DataAccess.GetSeqVal(System.String)">
            <summary>
            获取序列的下一值
            </summary>
            <param name="p_seqName">序列名称</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mix">
            <summary>
            所有服务的公共Api
            </summary>
        </member>
        <member name="M:Dt.Core.Mix.SetFirstToUpper(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mix.GetTypeStr(System.String,System.String@)">
            <summary>
            返回类型字符串
            </summary>
            <param name="p_dbTypeName"></param>
            <param name="p_val"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Admin">
            <summary>
            内部提供给 admin.html 页面的Api
            </summary>
        </member>
        <member name="M:Dt.Core.Admin.GetInitInfo">
            <summary>
            Admin页面初始化时显示的内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Admin.GetGroupApi(System.String)">
            <summary>
            获取分组Api的html
            </summary>
            <param name="p_group">Api分组名</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Admin.GetClsApi(System.String)">
            <summary>
            获取指定类的Api
            </summary>
            <param name="p_clsName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Admin.GetApiHtml(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            生成Api列表的html
            </summary>
            <param name="p_methods"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Admin.CreateMethodCall(System.String)">
            <summary>
            生成方法测试UI
            </summary>
            <param name="p_alias"></param>
        </member>
        <member name="M:Dt.Core.Admin.GetTopbarHtml">
            <summary>
            导航栏Api的html
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Admin.GetAgentClass(System.String)">
            <summary>
            获取客户端代理类的代码
            </summary>
            <param name="p_clsName">类名</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Admin.LoadComments(System.Type)">
            <summary>
            根据类名过滤xml注释
            </summary>
            <param name="p_type"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Admin.AppendComment(Dt.Core.Rpc.ApiMethod,System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            添加注释
            </summary>
            <param name="p_sm"></param>
            <param name="p_sb"></param>
            <param name="p_results"></param>
        </member>
        <member name="T:Dt.Core.SysTools">
            <summary>
            所有服务内部使用的工具Api
            </summary>
        </member>
        <member name="M:Dt.Core.SysTools.刷新sql缓存">
            <summary>
            重新加载Cache.db中的sql语句
            </summary>
        </member>
        <member name="T:Dt.Core.TestDomain">
            <summary>
            功能测试Api
            </summary>
        </member>
        <member name="M:Dt.Core.TestDomain.CallInline">
            <summary>
            不拦截内嵌方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestDomain.NotIntercept">
            <summary>
            外层不拦截，拦截内嵌方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestDomain.ThrowException">
            <summary>
            调用过程异常
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.TestEventBus">
            <summary>
            功能测试Api
            </summary>
        </member>
        <member name="T:Dt.Core.TestException">
            <summary>
            功能测试Api
            </summary>
        </member>
        <member name="M:Dt.Core.TestException.ThrowException">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestException.ThrowRpcException">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestException.ThrowSerializeException">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.TestLog">
            <summary>
            功能测试Api
            </summary>
        </member>
        <member name="M:Dt.Core.TestLog.LogInfo(System.String)">
            <summary>
            记录普通日志
            </summary>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Core.TestLog.LogWarning">
            <summary>
            记录警告信息
            </summary>
        </member>
        <member name="M:Dt.Core.TestLog.LogError">
            <summary>
            记录出错信息
            </summary>
        </member>
        <member name="T:Dt.Core.TestSerialize">
            <summary>
            功能测试Api
            </summary>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetString">
            <summary>
            返回字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetString(System.String)">
            <summary>
            字符串参数
            </summary>
            <param name="p_str"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetBool">
            <summary>
            返回bool值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetBool(System.Boolean)">
            <summary>
            bool参数
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetInt">
            <summary>
            返回int值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetInt(System.Int32)">
            <summary>
            int参数
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetLong">
            <summary>
            返回long值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetLong(System.Int64)">
            <summary>
            long参数
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetDouble">
            <summary>
            返回double值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetDouble(System.Double)">
            <summary>
            double参数
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetDateTime">
            <summary>
            返回DateTime值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetDateTime(System.DateTime)">
            <summary>
            DateTime参数
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetByteArray">
            <summary>
            返回byte[]值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetByteArray(System.Byte[])">
            <summary>
            byte[]参数
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetStringList">
            <summary>
            返回字符串数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetStringList(System.Collections.Generic.List{System.String})">
            <summary>
            字符串列表
            </summary>
            <param name="p_ls"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetBoolList">
            <summary>
            返回bool值列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetBoolList(System.Collections.Generic.List{System.Boolean})">
            <summary>
            bool值列表
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetIntList">
            <summary>
            返回int值列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetIntList(System.Collections.Generic.List{System.Int32})">
            <summary>
            int列表
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetDoubleList">
            <summary>
            返回double值列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetDoubleList(System.Collections.Generic.List{System.Double})">
            <summary>
            double列表
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetDateTimeList">
            <summary>
            DateTime列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetDateTimeList(System.Collections.Generic.List{System.DateTime})">
            <summary>
            
            </summary>
            <param name="p_times"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetObjectList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetObjectList(System.Collections.Generic.List{System.Object})">
            <summary>
            
            </summary>
            <param name="p_ls"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetTable">
            <summary>
            返回Table到客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetDataTable(Dt.Core.Table)">
            <summary>
            由外部传递Table
            </summary>
            <param name="p_tbl"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetTableDict">
            <summary>
            返回多个Table到客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetTableDict(Dt.Core.Dict)">
            <summary>
            由外部传递多个Table
            </summary>
            <param name="p_dict"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetTableList">
            <summary>
            返回多个Table到客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetTableList(System.Collections.Generic.List{Dt.Core.Table})">
            <summary>
            由外部传递多个Table
            </summary>
            <param name="p_ls"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetBaseDict">
            <summary>
            返回基本数据类型的Dict
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetCombineDict">
            <summary>
            返回基本数据类型的Dict
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SendDict(Dt.Core.Dict)">
            <summary>
            本数据类型的Dict
            </summary>
            <param name="p_dict"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetDictList">
            <summary>
            返回Dict列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SendDictList(System.Collections.Generic.List{Dt.Core.Dict})">
            <summary>
            发送Dict列表
            </summary>
            <param name="p_dicts"></param>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetCustomBase">
            <summary>
            返回基础自定义类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetCustomBase(Dt.Core.Product)">
            <summary>
            由外部传递基础自定义类型
            </summary>
            <param name="p_product"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetCustomCombine">
            <summary>
            返回复杂自定义类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetCustomCombine(Dt.Core.Person)">
            <summary>
            由外部传递复杂自定义类型
            </summary>
            <param name="p_person"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.GetContainCustom">
            <summary>
            返回嵌套自定义类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TestSerialize.SetContainCustom(Dt.Core.Department)">
            <summary>
            由外部传递嵌套自定义类型
            </summary>
            <param name="p_dept"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.TestStreamRpc">
            <summary>
            功能测试Api
            </summary>
        </member>
        <member name="T:Dt.Core.TestSvcRpc">
            <summary>
            功能测试Api
            </summary>
        </member>
        <member name="M:Dt.Core.AtTestRpc.GetString">
            <summary>
            返回字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtTestRpc.SetString(System.String)">
            <summary>
            字符串参数
            </summary>
            <param name="p_str"></param>
        </member>
        <member name="T:Dt.Core.Cell">
            <summary>
            基础数据项，不可独立构造使用
            注意：string类型时值空为string.Empty，使用时无需考虑null的情况
            </summary>
        </member>
        <member name="M:Dt.Core.Cell.#ctor(Dt.Core.Row,System.String,System.Type)">
            <summary>
            指定字段名和类型，只可通过Row构造
            </summary>
            <param name="p_row">所属行</param>
            <param name="p_cellName">字段名，不可为空，作为键值</param>
            <param name="p_cellType">数据项值的类型</param>
        </member>
        <member name="M:Dt.Core.Cell.#ctor(System.String,System.Object,Dt.Core.Row)">
            <summary>
            指定字段名和初始值
            </summary>
            <param name="p_cellName">字段名</param>
            <param name="p_value">初始值</param>
            <param name="p_row">所属行</param>
        </member>
        <member name="P:Dt.Core.Cell.ID">
            <summary>
            获取数据项字段名
            </summary>
        </member>
        <member name="P:Dt.Core.Cell.Type">
            <summary>
            获取数据项值的类型
            </summary>
        </member>
        <member name="P:Dt.Core.Cell.Val">
            <summary>
            获取设置数据项值
            </summary>
        </member>
        <member name="P:Dt.Core.Cell.IsChanged">
            <summary>
            获取当前数据项是否已发生更改。
            </summary>
        </member>
        <member name="P:Dt.Core.Cell.OriginalVal">
            <summary>
            获取该数据项未发生更改前的值
            </summary>
            <remark>
            如果调用 AcceptChanges 方法，则 originalValue 属性的值将变成当前 Val 属性的值
            如果调用了 RejectChanges 方法，则该数据项的值将变为当前 OriginalVal 属性的值
            </remark>
        </member>
        <member name="P:Dt.Core.Cell.Row">
            <summary>
            获取当前列所属的行
            </summary>
        </member>
        <member name="P:Dt.Core.Cell.Tag">
            <summary>
            获取或设置用于存储与此对象相关的任意对象值
            </summary>
        </member>
        <member name="M:Dt.Core.Cell.AcceptChanges">
            <summary>
            提交自上次调用以来对该数据项进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Core.Cell.RejectChanges">
            <summary>
            回滚自该表加载以来或上次调用 AcceptChanges 以来对该数据项进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Core.Cell.InitVal(System.Object)">
            <summary>
            设置单元格默认值，恢复IsChanged=false状态
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.Cell.GetVal``1">
            <summary>
            获取当前数据项的值
            <para>string类型为null时返回string.Empty</para>
            <para>其它类型为null时返回default(T)，即引用类型返回 null，数值类型返回零</para>
            <para>有其它需要时请自行处理</para>
            <para>另外，只提供从其它类型到int,double,DateTime,string的类型转换</para>
            </summary>
            <typeparam name="T">将值转换为指定的类型</typeparam>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Dt.Core.Cell.GetOriginalVal``1">
            <summary>
            获取原始值
            <para>string类型为null时返回string.Empty</para>
            <para>其它类型为null时返回default(T)，即引用类型返回 null，数值类型返回零</para>
            <para>有其它需要时请自行处理</para>
            <para>另外，只提供从其它类型到int,double,DateTime,string的类型转换</para>
            </summary>
            <typeparam name="T">将值转换为指定的类型</typeparam>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Dt.Core.Cell.ResetType(System.Type)">
            <summary>
            重置数据项的值类型
            </summary>
            <param name="p_tgtType">转换到的目标类型</param>
            <returns>true 重置成功</returns>
        </member>
        <member name="M:Dt.Core.Cell.SetValueInternal(System.Object,System.Boolean)">
            <summary>
            内部赋值
            </summary>
            <param name="p_val"></param>
            <param name="p_checkChange">是否逐级检查IsChanged状态</param>
        </member>
        <member name="M:Dt.Core.Cell.GetValInternal``1(System.Object)">
            <summary>
            将值转换为指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_val"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Cell.ThrowDataCellException(System.Object,System.String)">
            <summary>
            抛出赋值异常
            </summary>
            <param name="p_val"></param>
            <param name="p_type"></param>
        </member>
        <member name="T:Dt.Core.CellList">
            <summary>
            内部维护数据项列表类
            </summary>
        </member>
        <member name="M:Dt.Core.CellList.#ctor">
            <summary>
            构造方法，键比较时忽略大小写
            </summary>
        </member>
        <member name="P:Dt.Core.CellList.Item(System.String)">
            <summary>
            通过列名获取数据项
            </summary>
            <param name="p_colName">列名</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.CellList.Add(Dt.Core.Cell)">
            <summary>
            屏蔽外部直接添加
            </summary>
            <param name="p_cell"></param>
        </member>
        <member name="M:Dt.Core.CellList.Remove(System.String)">
            <summary>
            屏蔽外部直接删除
            </summary>
            <param name="p_name"></param>
        </member>
        <member name="M:Dt.Core.CellList.Remove(Dt.Core.Cell)">
            <summary>
            屏蔽外部直接删除
            </summary>
            <param name="p_cell"></param>
        </member>
        <member name="M:Dt.Core.CellList.RemoveAt(System.Int32)">
            <summary>
            屏蔽外部直接删除
            </summary>
            <param name="p_index"></param>
        </member>
        <member name="M:Dt.Core.CellList.GetKeyForItem(Dt.Core.Cell)">
            <summary>
            列名作为键值
            </summary>
            <param name="p_item">当前数据项</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Column">
            <summary>
            数据列
            </summary>
        </member>
        <member name="M:Dt.Core.Column.#ctor(System.String,System.Type)">
            <summary>
            列名不可为空，列类型默认为string
            </summary>
            <param name="p_colName">列名</param>
            <param name="p_colType">列数据类型</param>
        </member>
        <member name="P:Dt.Core.Column.ID">
            <summary>
            列字段名
            </summary>
        </member>
        <member name="P:Dt.Core.Column.Type">
            <summary>
             列类型
            </summary>
        </member>
        <member name="T:Dt.Core.ColumnList">
            <summary>
            数据表中的列集合，可以按索引或列名获取Column对象
            </summary>
        </member>
        <member name="M:Dt.Core.ColumnList.#ctor(Dt.Core.Table)">
            <summary>
            构造方法，键比较时忽略大小写
            </summary>
        </member>
        <member name="M:Dt.Core.ColumnList.Add(Dt.Core.Column)">
            <summary>
            添加列，同步到所有Row
            </summary>
            <param name="p_col">列</param>
        </member>
        <member name="M:Dt.Core.ColumnList.Remove(System.String)">
            <summary>
            删除列，同步到所有Row
            </summary>
            <param name="p_colName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ColumnList.Remove(Dt.Core.Column)">
            <summary>
            删除列，同步到所有Row
            </summary>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ColumnList.RemoveAt(System.Int32)">
            <summary>
            删除列，同步到Row
            </summary>
            <param name="p_index"></param>
        </member>
        <member name="M:Dt.Core.ColumnList.RemoveColumnData(System.String)">
            <summary>
            删除列数据
            </summary>
            <param name="p_colName"></param>
        </member>
        <member name="M:Dt.Core.ColumnList.GetKeyForItem(Dt.Core.Column)">
            <summary>
            根据数据列获得列字段名
            </summary>
            <param name="item">数据列</param>
            <returns>列字段名</returns>
        </member>
        <member name="T:Dt.Core.Dict">
            <summary>
            可序列化的键值集合，键忽略大小写
            值为string时等同StringPair
            可以描述存储过程、Sql语句参数列表
            值为嵌套的Dict时可描述复杂的数据结构
            各值可为不同类型
            </summary>
        </member>
        <member name="M:Dt.Core.Dict.#ctor">
            <summary>
            构造方法，键比较时忽略大小写
            </summary>
        </member>
        <member name="M:Dt.Core.Dict.#ctor(System.Int32)">
            <summary>
            构造方法，指定容量
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Dt.Core.Dict.Str(System.String)">
            <summary>
            返回字符串值
            </summary>
            <param name="p_key">键名</param>
            <returns>字符串值</returns>
        </member>
        <member name="M:Dt.Core.Dict.Dt(System.String)">
            <summary>
            返回Dict对象
            </summary>
            <param name="p_key">键名</param>
            <returns>Dict</returns>
        </member>
        <member name="M:Dt.Core.Dict.StrList(System.String)">
            <summary>
            返回字符串列表
            </summary>
            <param name="p_key">键名</param>
            <returns>字符串列表</returns>
        </member>
        <member name="M:Dt.Core.Dict.StrArray(System.String)">
            <summary>
            返回字符串数组
            </summary>
            <param name="p_key">键名</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Dt.Core.Dict.Bool(System.String)">
            <summary>
            返回bool值
            </summary>
            <param name="p_key">键名</param>
            <returns>bool值</returns>
        </member>
        <member name="M:Dt.Core.Dict.BoolList(System.String)">
            <summary>
            返回bool值列表
            </summary>
            <param name="p_key">键名</param>
            <returns>bool值列表</returns>
        </member>
        <member name="M:Dt.Core.Dict.BoolArray(System.String)">
            <summary>
            返回bool值数组
            </summary>
            <param name="p_key">键名</param>
            <returns>bool值数组</returns>
        </member>
        <member name="M:Dt.Core.Dict.Double(System.String)">
            <summary>
            返回double值
            </summary>
            <param name="p_key">键名</param>
            <returns>double值</returns>
        </member>
        <member name="M:Dt.Core.Dict.DoubleList(System.String)">
            <summary>
            返回double值列表
            </summary>
            <param name="p_key">键名</param>
            <returns>double值列表</returns>
        </member>
        <member name="M:Dt.Core.Dict.DoubleArray(System.String)">
            <summary>
            返回double值数组
            </summary>
            <param name="p_key">键名</param>
            <returns>double值数组</returns>
        </member>
        <member name="M:Dt.Core.Dict.Int(System.String)">
            <summary>
            返回整数值
            </summary>
            <param name="p_key">列名</param>
            <returns>整数值</returns>
        </member>
        <member name="M:Dt.Core.Dict.IntList(System.String)">
            <summary>
            返回整数值列表
            </summary>
            <param name="p_key">列名</param>
            <returns>整数值列表</returns>
        </member>
        <member name="M:Dt.Core.Dict.IntArray(System.String)">
            <summary>
            返回整数值数组
            </summary>
            <param name="p_key">列名</param>
            <returns>整数值数组</returns>
        </member>
        <member name="M:Dt.Core.Dict.Long(System.String)">
            <summary>
            返回long值
            </summary>
            <param name="p_key">键名</param>
            <returns>long值</returns>
        </member>
        <member name="M:Dt.Core.Dict.Date(System.String)">
            <summary>
            返回DateTime值
            </summary>
            <param name="p_key">键名</param>
            <returns>DateTime值</returns>
        </member>
        <member name="M:Dt.Core.Dict.Char(System.String)">
            <summary>
            返回char值
            </summary>
            <param name="p_key">键名</param>
            <returns>char值</returns>
        </member>
        <member name="M:Dt.Core.Dict.ByteArray(System.String)">
            <summary>
            返回byte[]值
            </summary>
            <param name="p_key">键名</param>
            <returns>byte[]值</returns>
        </member>
        <member name="M:Dt.Core.Dict.GetVal``1(System.String)">
            <summary>
            返回指定键的值
            </summary>
            <param name="p_key">键名</param>
            <returns>值</returns>
        </member>
        <member name="T:Dt.Core.Row">
            <summary>
            数据行管理类
            </summary>
        </member>
        <member name="M:Dt.Core.Row.#ctor">
            <summary>
            用来构造独立行，脱离Table使用
            </summary>
        </member>
        <member name="P:Dt.Core.Row.Item(System.String)">
            <summary>
            根据列名获取设置列值
            <para>1. 触发属性值变化事件，改变IsChanged状态</para>
            <para>2. 设置列的默认值时，请使用InitVal方法</para>
            </summary>
            <param name="p_colName">列名</param>
            <returns>列值</returns>
        </member>
        <member name="P:Dt.Core.Row.Item(System.Int32)">
            <summary>
            根据索引获取设置列值
            <para>1. 触发属性值变化事件，改变IsChanged状态</para>
            <para>2. 设置列的默认值时，请使用InitVal方法</para>
            </summary>
            <param name="p_index">列索引</param>
            <returns>列值</returns>
        </member>
        <member name="P:Dt.Core.Row.Cells">
            <summary>
            获取当前所有数据项
            </summary>
        </member>
        <member name="P:Dt.Core.Row.IsChanged">
            <summary>
            获取当前行是否已发生更改。
            </summary>
        </member>
        <member name="P:Dt.Core.Row.IsAdded">
            <summary>
            获取设置当前行是否为新增
            </summary>
        </member>
        <member name="P:Dt.Core.Row.ChangedCells">
            <summary>
            获得已改变的Cell
            </summary>
            <returns>Cell列表</returns>
        </member>
        <member name="P:Dt.Core.Row.Index">
            <summary>
            获取在Table中的序号
            </summary>
        </member>
        <member name="P:Dt.Core.Row.Description">
            <summary>
            获取业务对象的描述信息
            </summary>
        </member>
        <member name="P:Dt.Core.Row.Table">
            <summary>
            当前行所属父集合
            </summary>
        </member>
        <member name="P:Dt.Core.Row.Tag">
            <summary>
            获取设置用于存储与此对象相关的任意对象值
            </summary>
        </member>
        <member name="M:Dt.Core.Row.AcceptChanges">
            <summary>
            提交自上次调用以来对该行进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Core.Row.RejectChanges">
            <summary>
            回滚自该表加载以来或上次调用 AcceptChanges 以来对该行进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Core.Row.Clone(System.Boolean)">
            <summary>
            深度复制行对象，返回独立行，未设置IsAdded标志！
            </summary>
            <param name="p_acceptChange">提交修改标志，默认true, 即复制后AcceptChanges()</param>
            <returns>返回独立行</returns>
        </member>
        <member name="M:Dt.Core.Row.Contains(System.String)">
            <summary>
            判断是否包含给定的列
            </summary>
            <param name="p_columnName">列名</param>
            <returns>true 包含</returns>
        </member>
        <member name="M:Dt.Core.Row.Remove">
            <summary>
            删除当前行
            </summary>
        </member>
        <member name="M:Dt.Core.Row.Copy(Dt.Core.Row)">
            <summary>
            复制给定行数据的对应列值
            </summary>
            <param name="p_src"></param>
        </member>
        <member name="M:Dt.Core.Row.ToDict">
            <summary>
            Row转换成Dict对象
            </summary>
            <returns>Dict对象</returns>
        </member>
        <member name="M:Dt.Core.Row.InitVal(System.Object)">
            <summary>
            批量设置单元格默认值，恢复单元格IsChanged=false状态，为简化编码支持匿名对象
            </summary>
            <param name="p_anonyVal">含值的对象，将对象属性值作为初始值</param>
        </member>
        <member name="M:Dt.Core.Row.InitVal(System.String,System.Object)">
            <summary>
            设置单元格默认值，恢复单元格IsChanged=false状态
            </summary>
            <param name="p_colName">列名</param>
            <param name="p_val">列值</param>
        </member>
        <member name="M:Dt.Core.Row.InitVal(System.Int32,System.Object)">
            <summary>
            按照索引设置单元格默认值，恢复单元格IsChanged=false状态
            </summary>
            <param name="p_index">列索引</param>
            <param name="p_val">列值</param>
        </member>
        <member name="M:Dt.Core.Row.ResetType(System.String,System.Type)">
            <summary>
            重置列类型
            </summary>
            <param name="p_colName">列名</param>
            <param name="p_tgtType">转换到的目标类型</param>
            <returns>true 重置成功</returns>
        </member>
        <member name="M:Dt.Core.Row.Str(System.Int32)">
            <summary>
            根据索引获取指定列的字符串值，为null时返回string.Empty！！！
            </summary>
            <param name="p_index">索引</param>
            <returns>字符串值</returns>
        </member>
        <member name="M:Dt.Core.Row.Str(System.String)">
            <summary>
            根据列名获取指定列的字符串值，为null时返回string.Empty！！！
            </summary>
            <param name="p_columnName">列名</param>
            <returns>字符串值</returns>
        </member>
        <member name="M:Dt.Core.Row.IsEmpty(System.Int32)">
            <summary>
            指定列的字符串值是否为空
            </summary>
            <param name="p_index">索引</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.IsEmpty(System.String)">
            <summary>
            指定列的字符串值是否为空
            </summary>
            <param name="p_columnName">列名</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.IsZero(System.Int32)">
            <summary>
            指定列的字符串值是否为0
            </summary>
            <param name="p_index">索引</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.IsZero(System.String)">
            <summary>
            指定列的字符串值是否为0
            </summary>
            <param name="p_columnName">列名</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.Bool(System.Int32)">
            <summary>
            指定列的值是否为1或true
            </summary>
            <param name="p_index">索引</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.Bool(System.String)">
            <summary>
            指定列的值是否为1或true
            </summary>
            <param name="p_columnName">列名</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.Double(System.Int32)">
            <summary>
            根据索引获取指定列的double值，为null时返回零即default(double)！！！
            </summary>
            <param name="p_index">索引</param>
            <returns>double值</returns>
        </member>
        <member name="M:Dt.Core.Row.Double(System.String)">
            <summary>
            根据列名获取指定列的double值，为null时返回零即default(double)！！！
            </summary>
            <param name="p_columnName">列名</param>
            <returns>double值</returns>
        </member>
        <member name="M:Dt.Core.Row.Int(System.Int32)">
            <summary>
            根据索引获取指定列的整数值，为null时返回零即default(int)！！！
            </summary>
            <param name="p_index">索引</param>
            <returns>整数值</returns>
        </member>
        <member name="M:Dt.Core.Row.Int(System.String)">
            <summary>
            根据列名获取指定列的整数值，为null时返回零即default(int)！！！
            </summary>
            <param name="p_columnName">列名</param>
            <returns>整数值</returns>
        </member>
        <member name="M:Dt.Core.Row.Date(System.Int32)">
            <summary>
            根据索引获取指定列的日期值，为null时返回DateTime.MinValue，即default(DateTime)！！！
            </summary>
            <param name="p_index">索引</param>
            <returns>日期值</returns>
        </member>
        <member name="M:Dt.Core.Row.Date(System.String)">
            <summary>
            根据列名获取指定列的日期值，为null时返回DateTime.MinValue，即default(DateTime)！！！
            </summary>
            <param name="p_columnName">列名</param>
            <returns>日期值</returns>
        </member>
        <member name="M:Dt.Core.Row.GetVal``1(System.Int32)">
            <summary>
            根据索引获取指定列的值，若指定类型和当前类型匹配：
            <para>string类型为null时返回string.Empty</para>
            <para>其它类型为null时返回default(T)，即引用类型返回 null，数值类型会返回零</para>
            <para>有其它需要时请自行处理</para>
            <para>另外，只提供从其它类型到string类型转换</para>
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="p_index">索引</param>
            <returns>返回已转换为指定类型的值</returns>
        </member>
        <member name="M:Dt.Core.Row.GetVal``1(System.String)">
            <summary>
            根据列名获取指定列的值，若指定类型和当前类型匹配：
            <para>string类型为null时返回string.Empty</para>
            <para>其它类型为null时返回default(T)，即引用类型返回 null，数值类型会返回零</para>
            <para>有其它需要时请自行处理</para>
            <para>另外，只提供从其它类型到string类型转换</para>
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="p_columnName">列名</param>
            <returns>返回已转换为指定类型的值</returns>
        </member>
        <member name="M:Dt.Core.Row.GetOriginalVal``1(System.String)">
            <summary>
            根据列名获取指定列的原始值
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="p_columnName">列名</param>
            <returns>返回已转换为指定类型的值</returns>
        </member>
        <member name="M:Dt.Core.Row.CheckChanges">
            <summary>
            检查当前行数据是否有变化，同时更新IsChanged属性
            </summary>
        </member>
        <member name="T:Dt.Core.Table">
            <summary>
            数据表，行集合(行为同构)，提供简单的数据表管理功能
            </summary>
        </member>
        <member name="P:Dt.Core.Table.Name">
            <summary>
            获取设置表名
            </summary>
        </member>
        <member name="P:Dt.Core.Table.SerializeChanged">
            <summary>
            是否只序列化需要增删改的行
            </summary>
        </member>
        <member name="P:Dt.Core.Table.IsChanged">
            <summary>
            获取是否存在行被修改或删除
            </summary>
        </member>
        <member name="P:Dt.Core.Table.ChangedRows">
            <summary>
            获取数据已被修改的行列表
            </summary>
        </member>
        <member name="P:Dt.Core.Table.Columns">
            <summary>
            列结构集合
            </summary>
        </member>
        <member name="P:Dt.Core.Table.Tag">
            <summary>
            获取设置用于存储与此对象相关的任意对象值
            </summary>
        </member>
        <member name="M:Dt.Core.Table.Add(System.String,System.Type)">
            <summary>
            添加列，主要为支持手动创建Table时初始化器的写法！
            </summary>
            <param name="p_colName">列名</param>
            <param name="p_colType">列数据类型, 默认typeof(string)</param>
        </member>
        <member name="M:Dt.Core.Table.Create(System.String)">
            <summary>
            根据表名创建空Table
            </summary>
            <param name="p_tblName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.Create(Dt.Core.Table)">
            <summary>
            通过复制创建空Table（不复制数据！）
            </summary>
            <param name="p_tbl"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.Create(Dt.Core.Row)">
            <summary>
            根据行创建空Table
            </summary>
            <param name="p_row"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.NewRow(System.Object[])">
            <summary>
            添加新行并设置初始值，无参数时为空行，有参数时分两种情况，主要为简化编码：
            <para>1. 只一个参数且为匿名对象时，将匿名对象的属性作为初始值进行赋值，属性名称不区分大小写</para>
            <para>2. 按参数顺序进行赋值，跳过参数为null的情况，支持部分列值，支持列值的类型转换</para>
            </summary>
            <param name="p_params">按顺序的列值或匿名对象</param>
            <returns>返回新行</returns>
        </member>
        <member name="M:Dt.Core.Table.CreateRow(System.Object[])">
            <summary>
            创建独立行并设置初始值，未添加到当前Table！未设置IsAdded标志！无参数时为空行，有参数时分两种情况，主要为简化编码：
            <para>1. 只一个参数且为匿名对象时，将匿名对象的属性作为初始值进行赋值，属性名称不区分大小写</para>
            <para>2. 按参数顺序进行赋值，跳过参数为null的情况，支持部分列值，支持列值的类型转换</para>
            </summary>
            <param name="p_params">按顺序的列值或匿名对象</param>
            <returns>返回独立行</returns>
        </member>
        <member name="M:Dt.Core.Table.Add(Dt.Core.Row)">
            <summary>
            将行添加到表，不检查结构，不改变状态
            </summary>
            <param name="p_row"></param>
        </member>
        <member name="M:Dt.Core.Table.Insert(System.Int32,Dt.Core.Row)">
            <summary>
            插入行，不检查结构，不改变状态
            </summary>
            <param name="p_index"></param>
            <param name="p_row"></param>
        </member>
        <member name="M:Dt.Core.Table.ResetType(System.String,System.Type)">
            <summary>
            重置列类型
            </summary>
            <param name="p_colName">列名</param>
            <param name="p_tgtType">转换到的目标类型</param>
            <returns>true 重置成功</returns>
        </member>
        <member name="M:Dt.Core.Table.AcceptChanges">
            <summary>
            提交自上次调用以来对该表进行的所有更改，清空已删除的行，重置各行IsAdded和IsChanged状态
            </summary>
        </member>
        <member name="M:Dt.Core.Table.RejectChanges">
            <summary>
            回滚自该表加载以来或上次调用以来对该表进行的所有更改，恢复所有被删除的行。
            </summary>
        </member>
        <member name="M:Dt.Core.Table.Clone">
            <summary>
            复制表结构及数据，深度克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.SerializeJsonRow(Dt.Core.Row,Newtonsoft.Json.JsonWriter)">
            <summary>
            序列化行数据
            </summary>
            <param name="p_dataRow"></param>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Core.Table.GetColTypeAlias(System.Type)">
            <summary>
            Type -> string
            </summary>
            <param name="p_type"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.GetColType(System.String)">
            <summary>
            string -> Type
            </summary>
            <param name="p_name"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Glb">
            <summary>
            全局静态类
            </summary>
        </member>
        <member name="P:Dt.Core.Glb.SvcName">
            <summary>
            获取服务名称，取自服务程序集命名空间的末尾段，小写
            </summary>
        </member>
        <member name="P:Dt.Core.Glb.ID">
            <summary>
            获取服务实例ID，k8s部署在同一Node上多个Pod副本时区分用，每次启动生成新ID，终生不变
            </summary>
        </member>
        <member name="P:Dt.Core.Glb.Stub">
            <summary>
            获取服务存根
            </summary>
        </member>
        <member name="P:Dt.Core.Glb.Config">
            <summary>
            获取系统配置
            </summary>
        </member>
        <member name="P:Dt.Core.Glb.Sql">
            <summary>
            查询Sql语句，默认从缓存字典中查询，service.json中CacheSql为false时直接从表xxx_sql查询！
            <para>输入参数为键名(无空格) 或 Sql语句，含空格时不需查询，直接返回Sql语句</para>
            </summary>
        </member>
        <member name="P:Dt.Core.Glb.HttpContext">
            <summary>
            获取当前请求的HttpContext
            </summary>
        </member>
        <member name="P:Dt.Core.Glb.Now">
            <summary>
            获取数据库服务器的当前时间，根据时差计算所得
            </summary>
        </member>
        <member name="P:Dt.Core.Glb.AppName">
            <summary>
            获取应用名称
            </summary>
        </member>
        <member name="P:Dt.Core.Glb.IsInDocker">
            <summary>
            服务是否运行在Docker容器
            </summary>
        </member>
        <member name="F:Dt.Core.Glb.AnyoneID">
            <summary>
            任何人角色ID
            </summary>
        </member>
        <member name="F:Dt.Core.Glb.ApiResourceName">
            <summary>
            ApiResource的默认名称
            </summary>
        </member>
        <member name="M:Dt.Core.Glb.GetCfg``1(System.String,``0)">
            <summary>
            获取系统配置中指定键的值
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="p_key">键名</param>
            <param name="p_defaultValue">键不存在时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Glb.GetCfg``1(System.String)">
            <summary>
            获取系统配置中指定键的值
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="p_key">键名</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Glb.OnConfigChanged(System.Object)">
            <summary>
            系统配置(json文件)修改事件
            </summary>
            <param name="p_state"></param>
        </member>
        <member name="M:Dt.Core.Glb.GetSvc``1">
            <summary>
            在全局服务容器中获取指定类型的服务对象，服务类型不存在时异常
            </summary>
            <typeparam name="T">服务类型</typeparam>
            <returns>服务对象</returns>
        </member>
        <member name="M:Dt.Core.Glb.GetSvc(System.Type)">
            <summary>
            在全局服务容器中获取指定类型的服务对象，服务类型不存在时异常
            </summary>
            <param name="p_svcType"></param>
            <returns>服务对象</returns>
        </member>
        <member name="M:Dt.Core.Glb.GetSvcs``1">
            <summary>
            在全局服务容器中获取指定类型的所有服务对象
            </summary>
            <typeparam name="T">服务类型</typeparam>
            <returns>所有服务对象</returns>
        </member>
        <member name="M:Dt.Core.Glb.GetSvcs(System.Type)">
            <summary>
            在全局服务容器中获取指定类型的所有服务对象
            </summary>
            <param name="p_svcType">服务类型</param>
            <returns>所有服务对象</returns>
        </member>
        <member name="T:Dt.Core.Db">
            <summary>
            MySql数据库访问类，全部采用异步操作
            基于开源项目 MySqlConnector 和 Dapper
            </summary>
        </member>
        <member name="M:Dt.Core.Db.#ctor">
            <summary>
            默认连接串 + 自动关闭连接
            </summary>
        </member>
        <member name="M:Dt.Core.Db.#ctor(System.Boolean)">
            <summary>
            默认连接串 + 设置是否自动关闭连接
            </summary>
            <param name="p_autoClose">调用每个公共方法后是否自动关闭连接，false时切记最后手动关闭！</param>
        </member>
        <member name="M:Dt.Core.Db.#ctor(System.String,System.Boolean)">
            <summary>
            其他数据源连接串 + 设置是否自动关闭连接
            </summary>
            <param name="p_dbKey">数据源键名，在json配置DbList节</param>
            <param name="p_autoClose">调用每个公共方法后是否自动关闭连接，false时切记最后手动关闭！</param>
        </member>
        <member name="M:Dt.Core.Db.Table(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回结果集
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回Table数据集</returns>
        </member>
        <member name="M:Dt.Core.Db.List``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回泛型列表
            </summary>
            <typeparam name="T">ORM类型</typeparam>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回泛型列表</returns>
        </member>
        <member name="M:Dt.Core.Db.ForEach``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回泛型枚举，高性能
            </summary>
            <typeparam name="T">ORM类型</typeparam>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回泛型枚举</returns>
        </member>
        <member name="M:Dt.Core.Db.List(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回dynamic对象列表
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回dynamic对象列表</returns>
        </member>
        <member name="M:Dt.Core.Db.ForEach(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回dynamic对象枚举，高性能
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回dynamic对象枚举</returns>
        </member>
        <member name="M:Dt.Core.Db.List(System.Type,System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回指定类型的对象列表
            </summary>
            <param name="p_type">ORM类型</param>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回指定类型的对象列表</returns>
        </member>
        <member name="M:Dt.Core.Db.ForEach(System.Type,System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回指定类型对象的枚举，高性能
            </summary>
            <param name="p_type">ORM类型</param>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回指定类型对象的枚举</returns>
        </member>
        <member name="M:Dt.Core.Db.Scalar``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，只返回第一个单元格数据
            </summary>
            <typeparam name="T">单元格数据类型</typeparam>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一个单元格数据</returns>
        </member>
        <member name="M:Dt.Core.Db.First``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，只返回第一行数据
            </summary>
            <typeparam name="T">ORM类型</typeparam>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一行数据对象，无数据时返回空</returns>
        </member>
        <member name="M:Dt.Core.Db.First(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，只返回第一行数据
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一行数据的dynamic对象</returns>
        </member>
        <member name="M:Dt.Core.Db.FirstRow(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，只返回第一行数据
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一行Row或null</returns>
        </member>
        <member name="M:Dt.Core.Db.Map``3(System.String,System.Func{``0,``1,``2},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 列表
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象列表</returns>
        </member>
        <member name="M:Dt.Core.Db.ForEach``3(System.String,System.Func{``0,``1,``2},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 的枚举，高性能
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象枚举</returns>
        </member>
        <member name="M:Dt.Core.Db.Map``4(System.String,System.Func{``0,``1,``2,``3},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 列表
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象列表</returns>
        </member>
        <member name="M:Dt.Core.Db.ForEach``4(System.String,System.Func{``0,``1,``2,``3},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 的枚举，高性能
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象枚举</returns>
        </member>
        <member name="M:Dt.Core.Db.Map``5(System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 列表
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象列表</returns>
        </member>
        <member name="M:Dt.Core.Db.ForEach``5(System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 的枚举，高性能
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象枚举</returns>
        </member>
        <member name="M:Dt.Core.Db.Map``6(System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 列表
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象列表</returns>
        </member>
        <member name="M:Dt.Core.Db.ForEach``6(System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 的枚举，高性能
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象枚举</returns>
        </member>
        <member name="M:Dt.Core.Db.Map``7(System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 列表
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象列表</returns>
        </member>
        <member name="M:Dt.Core.Db.ForEach``7(System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 的枚举，高性能
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象枚举</returns>
        </member>
        <member name="M:Dt.Core.Db.Map``8(System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 列表
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象列表</returns>
        </member>
        <member name="M:Dt.Core.Db.ForEach``8(System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 的枚举，高性能
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象枚举</returns>
        </member>
        <member name="M:Dt.Core.Db.Map``1(System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 列表
            </summary>
            <typeparam name="TReturn"></typeparam>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_types">返回的多个类型</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象列表</returns>
        </member>
        <member name="M:Dt.Core.Db.ForEach``1(System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.String)">
            <summary>
            以参数值方式执行Sql语句，返回多个类型对象通过回调合并成 TReturn 的枚举，高性能
            </summary>
            <typeparam name="TReturn"></typeparam>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_types">返回的多个类型</param>
            <param name="p_map">合并结果的回调方法</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <param name="p_splitOn">映射到多个对象的切分列名，支持一个或多个切分列，多个时用逗号隔开</param>
            <returns>返回指定类型的对象枚举</returns>
        </member>
        <member name="M:Dt.Core.Db.Exec(System.String,System.Object,System.Boolean)">
            <summary>
            以参数值方式执行Sql语句，返回影响的行数，p_params为IEnumerable时执行批量操作
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，为IEnumerable时执行批量操作</param>
            <param name="p_beginTrans">是否启动事务，默认false</param>
            <returns>执行后影响的行数</returns>
        </member>
        <member name="M:Dt.Core.Db.Close(System.Boolean)">
            <summary>
            _autoClose为false时需要手动关闭连接，
            </summary>
            <param name="p_commitTrans">若有事务，true表提交，false表回滚</param>
        </member>
        <member name="M:Dt.Core.Db.BeginTrans">
            <summary>
            开始事务，打开连接
            </summary>
        </member>
        <member name="M:Dt.Core.Db.CommitTrans">
            <summary>
            提交事务，释放连接
            </summary>
        </member>
        <member name="M:Dt.Core.Db.RollbackTrans">
            <summary>
            回滚事务，释放连接
            </summary>
        </member>
        <member name="M:Dt.Core.Db.OpenConnection">
            <summary>
            打开数据库连接，若已打开(嵌套在事务)无操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Db.ReleaseConnection">
            <summary>
            关闭数据库连接（未启动事务的前提下）
            </summary>
        </member>
        <member name="M:Dt.Core.Db.CreateCommand(System.String,System.Object,System.Boolean)">
            <summary>
            创建Dapper的命令定义
            </summary>
            <param name="p_keyOrSql"></param>
            <param name="p_params"></param>
            <param name="p_deferred"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Db.BuildSql(System.String,System.Object)">
            <summary>
            生成执行时候的sql语句。
            注意：对于二进制编码数组的情况在实际应用时可能需要调整。
            </summary>
            <param name="p_sql"></param>
            <param name="p_params"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Db.ReplaceSql(System.String,System.String,System.Object)">
            <summary>
            替换sql中的占位符
            </summary>
            <param name="p_sql"></param>
            <param name="p_key">占位符</param>
            <param name="p_value"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Db.GetSqlException(Dapper.CommandDefinition,System.Exception)">
            <summary>
            输出异常信息
            </summary>
            <param name="p_cmd"></param>
            <param name="p_ex"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.DbSchema">
            <summary>
            MySql默认数据库的表结构
            </summary>
        </member>
        <member name="P:Dt.Core.DbSchema.Schema">
            <summary>
            默认库的所有表结构
            </summary>
        </member>
        <member name="P:Dt.Core.DbSchema.Database">
            <summary>
            默认库名
            </summary>
        </member>
        <member name="M:Dt.Core.DbSchema.Init">
            <summary>
            加载默认库的所有表结构，初次Mysql连接
            </summary>
        </member>
        <member name="M:Dt.Core.DbSchema.LoadSchema">
            <summary>
            加载系统用户和应用用户的表结构信息（已调整到最优）
            </summary>
            <returns>返回加载结果信息</returns>
        </member>
        <member name="M:Dt.Core.DbSchema.GetTableSchema(System.String)">
            <summary>
            获取表结构信息
            </summary>
            <param name="p_tblName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DbSchema.Close">
            <summary>
            关闭MySql连接池，释放资源
            </summary>
        </member>
        <member name="T:Dt.Core.TableSchema">
            <summary>
            存储表结构信息，分主键列列表和普通列列表
            </summary>
        </member>
        <member name="P:Dt.Core.TableSchema.PrimaryKey">
            <summary>
            主键列列表
            </summary>
        </member>
        <member name="P:Dt.Core.TableSchema.Columns">
            <summary>
            普通列列表
            </summary>
        </member>
        <member name="T:Dt.Core.TableCol">
            <summary>
            列描述类
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.DbTypeName">
            <summary>
            mysql中数据类型名称
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.Length">
            <summary>
            列长度，只字符类型有效
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.Nullable">
            <summary>
            列是否允许为空
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.Comments">
            <summary>
            列注释
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.Type">
            <summary>
            列类型
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.TypeName">
            <summary>
            列类型名称
            </summary>
        </member>
        <member name="T:Dt.Core.DbTypeConverter">
            <summary>
            DbType Type value DbTypeName TypeName之间的转换
            </summary>
        </member>
        <member name="M:Dt.Core.DbTypeConverter.GetDbTypeByValue(System.Object)">
            <summary>
            value -> DbType
            </summary>
            <param name="p_value"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DbTypeConverter.GetTypeByDbType(System.Data.DbType)">
            <summary>
            DbType -> Type
            </summary>
            <param name="p_dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DbTypeConverter.GetTypeByDbTypeName(System.String)">
            <summary>
            DbTypeName -> Type
            </summary>
            <param name="p_dbTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DbTypeConverter.GetTypeNameByDbTypeName(System.String)">
            <summary>
            DbTypeName -> TypeName
            </summary>
            <param name="p_dbTypeName"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.ISvcStub">
            <summary>
            服务存根接口
            </summary>
        </member>
        <member name="M:Dt.Core.ISvcStub.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            定义全局服务
            </summary>
            <param name="p_services"></param>
        </member>
        <member name="M:Dt.Core.ISvcStub.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            定义请求管道的中间件和初始化服务
            </summary>
            <param name="p_app"></param>
        </member>
        <member name="T:Dt.Core.Launcher">
            <summary>
            启动微服务
            </summary>
        </member>
        <member name="M:Dt.Core.Launcher.Run(Dt.Core.ISvcStub,System.String[])">
            <summary>
            初始化服务，任一环节失败即启动失败
            + 创建日志对象
            + 读取配置
            + 缓存默认库表结构、同步时间
            + 缓存Sql语句
            + 启动http服务器
            此方法不可异步，否则启动有问题！！！
            </summary>
            <param name="p_stub">服务存根</param>
            <param name="p_args">启动参数</param>
        </member>
        <member name="M:Dt.Core.Launcher.CreateLogger">
            <summary>
            创建日志对象
            </summary>
        </member>
        <member name="M:Dt.Core.Launcher.LoadConfig">
            <summary>
            读取配置
            </summary>
        </member>
        <member name="M:Dt.Core.Launcher.RunWebHost(System.String[])">
            <summary>
            启动Kestrel
            </summary>
            <param name="p_args">启动参数</param>
        </member>
        <member name="M:Dt.Core.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            定义全局服务
            </summary>
            <param name="p_services"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            定义请求管道的中间件
            </summary>
            <param name="p_app"></param>
        </member>
        <member name="T:Dt.Core.Cache.BaseCache">
            <summary>
            基于Redis的缓存接口
            </summary>
        </member>
        <member name="F:Dt.Core.Cache.BaseCache._db">
            <summary>
            Redis访问
            </summary>
        </member>
        <member name="F:Dt.Core.Cache.BaseCache._keyPrefix">
            <summary>
            缓存键前缀，如"ur:u"，用分号隔开段
            </summary>
        </member>
        <member name="M:Dt.Core.Cache.BaseCache.Count">
            <summary>
            统计本类型缓存的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Cache.BaseCache.Remove(System.String)">
            <summary>
            删除缓存对象
            </summary>
            <param name="p_key">不带前缀的键名</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Cache.BaseCache.BatchRemove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存对象
            </summary>
            <param name="p_keys"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Cache.BaseCache.Clear">
            <summary>
            清空本类型缓存
            </summary>
        </member>
        <member name="M:Dt.Core.Cache.BaseCache.GetFullKey(System.String)">
            <summary>
            获取完整键名
            </summary>
            <param name="p_key"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Cache.HashCache">
            <summary>
            值为键值对集合的缓存基类
            </summary>
        </member>
        <member name="M:Dt.Core.Cache.HashCache.#ctor(System.String)">
            <summary>
            值为键值对集合的缓存基类
            </summary>
            <param name="p_keyPrefix">缓存键前缀，如"ur:u"，用分号隔开段</param>
        </member>
        <member name="M:Dt.Core.Cache.HashCache.Get``1(System.String)">
            <summary>
            根据键查询缓存对象s
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="p_key">不带前缀的键</param>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Dt.Core.Cache.HashCache.BatchGet``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            按键名批量查询缓存对象
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="p_keys">不带前缀的键名列表</param>
            <returns>缓存对象列表</returns>
        </member>
        <member name="M:Dt.Core.Cache.HashCache.Set``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            将对象添加到缓存
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="p_key">不带前缀的键名列表</param>
            <param name="p_value">待缓存对象</param>
            <param name="p_expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Cache.HashCache.GetField``1(System.String,System.String)">
            <summary>
            获取指定键名的hash中field对应的value
            </summary>
            <typeparam name="T">field类型</typeparam>
            <param name="p_key">不带前缀的键名</param>
            <param name="p_field">hash中的field，大小写敏感</param>
            <returns>field对应的value</returns>
        </member>
        <member name="M:Dt.Core.Cache.HashCache.SetField(System.String,System.String,System.Object)">
            <summary>
            设置指定键名的hash中field对应的value
            </summary>
            <param name="p_key">不带前缀的键名</param>
            <param name="p_field">hash中的field，大小写敏感</param>
            <param name="p_value">field对应的value</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Cache.ListCache`1">
            <summary>
            值为值为按插入顺序排序的字符串列表的缓存基类
            </summary>
            <typeparam name="TCacheItem">缓存类型，可以为任意类型</typeparam>
        </member>
        <member name="T:Dt.Core.Cache.Redis">
            <summary>
            Redis的基础管理
            </summary>
        </member>
        <member name="P:Dt.Core.Cache.Redis.Db">
            <summary>
            获取Redis数据库
            </summary>
        </member>
        <member name="M:Dt.Core.Cache.Redis.KeyDeleteWithPrefix(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            在库中删除指定前缀的所有键值
            </summary>
            <param name="p_db"></param>
            <param name="p_prefix">缓存键前缀</param>
        </member>
        <member name="M:Dt.Core.Cache.Redis.KeyCount(StackExchange.Redis.IDatabase,System.String)">
            <summary>
            统计具有指定前缀的行数
            </summary>
            <param name="p_db"></param>
            <param name="p_prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Cache.Redis.Keys(System.String)">
            <summary>
            返回模式匹配的所有键，影响性能，慎用！！！
            </summary>
            <param name="p_patternKey"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Cache.Redis.ClearDb">
            <summary>
            清空当前库
            </summary>
        </member>
        <member name="T:Dt.Core.Cache.SetCache`1">
            <summary>
            值为无序字符串集合的缓存基类
            </summary>
            <typeparam name="TCacheItem">缓存类型，可以为任意类型</typeparam>
        </member>
        <member name="T:Dt.Core.Cache.SortedSetCache`1">
            <summary>
            值为按权重参数排序的字符串有序集合的缓存基类
            </summary>
            <typeparam name="TCacheItem">缓存类型，可以为任意类型</typeparam>
        </member>
        <member name="T:Dt.Core.Cache.StringCache">
            <summary>
            值为字符串的缓存基类
            </summary>
        </member>
        <member name="M:Dt.Core.Cache.StringCache.#ctor(System.String)">
            <summary>
            值为字符串的缓存基类
            </summary>
            <param name="p_keyPrefix">缓存键前缀，如"ur:u"，用分号隔开段</param>
        </member>
        <member name="M:Dt.Core.Cache.StringCache.Get``1(System.String)">
            <summary>
            根据键查询缓存对象
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="p_key">不带前缀的键</param>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Dt.Core.Cache.StringCache.Set``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            将对象添加到缓存
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="p_key">不带前缀的键名列表</param>
            <param name="p_value">待缓存对象</param>
            <param name="p_expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Cache.StringCache.BatchGet``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            按键名批量查询缓存对象
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="p_keys">不带前缀的键名列表</param>
            <returns>缓存对象列表</returns>
        </member>
        <member name="T:Dt.Core.Entity">
            <summary>
            支持组合主键的实体基类
            </summary>
        </member>
        <member name="M:Dt.Core.Entity.ToString">
            <summary>
            输出组合主键
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Entity`1">
            <summary>
            只包含"Id"主键的实体基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:Dt.Core.Entity`1.Id">
            <summary>
            实体的唯一主键
            </summary>
        </member>
        <member name="M:Dt.Core.Entity`1.Equals(System.Object)">
            <summary>
            判断两实体是否相同
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Entity`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Dt.Core.Entity`1.ToString">
            <summary>
            输出实体描述
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.EntityHelper">
            <summary>
            实体的帮助方法
            </summary>
        </member>
        <member name="M:Dt.Core.EntityHelper.FindPrimaryKeyType``1">
            <summary>
            Tries to find the primary key type of the given entity type.
            May return null if given type does not implement <see cref="T:Dt.Core.IEntity`1"/>
            </summary>
        </member>
        <member name="M:Dt.Core.EntityHelper.FindPrimaryKeyType(System.Type)">
            <summary>
            Tries to find the primary key type of the given entity type.
            May return null if given type does not implement <see cref="T:Dt.Core.IEntity`1"/>
            </summary>
        </member>
        <member name="T:Dt.Core.IAggregateRoot">
            <summary>
            聚合根类，主键任意也可以是组合主键，为方便集成尽量使用<see cref="T:Dt.Core.IAggregateRoot`1"/>
            </summary>
        </member>
        <member name="T:Dt.Core.IAggregateRoot`1">
            <summary>
            聚合根类，只包含"Id"主键
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="T:Dt.Core.IEntity">
            <summary>
            实体类，主键任意也可以是组合主键，为方便集成尽量使用<see cref="T:Dt.Core.IEntity`1"/>
            </summary>
        </member>
        <member name="M:Dt.Core.IEntity.GetKeys">
            <summary>
            返回实体的主键列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.IEntity`1">
            <summary>
            实体类，只包含"Id"主键
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:Dt.Core.IEntity`1.Id">
            <summary>
            实体的唯一主键
            </summary>
        </member>
        <member name="T:Dt.Core.DomainSvc">
            <summary>
            领域服务基类
            </summary>
        </member>
        <member name="T:Dt.Core.EventBus.IEvent">
            <summary>
            事件
            </summary>
        </member>
        <member name="T:Dt.Core.EventBus.IEventHandler">
            <summary>
            事件处理
            </summary>
        </member>
        <member name="T:Dt.Core.EventBus.ILocalHandler`1">
            <summary>
            本地事件处理接口
            </summary>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:Dt.Core.EventBus.ILocalHandler`1.Handle(`0)">
            <summary>
            事件处理
            </summary>
            <param name="p_event">事件内容</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.EventBus.IRequest`1">
            <summary>
            请求/响应模式的事件
            </summary>
            <typeparam name="TResponse">返回值类型</typeparam>
        </member>
        <member name="T:Dt.Core.EventBus.IRequestHandler`2">
            <summary>
            请求/响应模式的事件处理接口
            </summary>
            <typeparam name="TRequest">事件处理的输入类型</typeparam>
            <typeparam name="TResponse">事件处理的输出类型</typeparam>
        </member>
        <member name="M:Dt.Core.EventBus.IRequestHandler`2.Handle(`0)">
            <summary>
            处理请求
            </summary>
            <param name="p_request">请求内容</param>
            <returns>返回响应值</returns>
        </member>
        <member name="T:Dt.Core.EventBus.LocalEventBus">
            <summary>
            本地事件总线
            </summary>
        </member>
        <member name="F:Dt.Core.EventBus.LocalEventBus.NoticeEvents">
            <summary>
            键为事件类型名称，值为ILocalHandler泛型
            </summary>
        </member>
        <member name="F:Dt.Core.EventBus.LocalEventBus.RequestEvents">
            <summary>
            键为事件类型，值为Handler类型
            </summary>
        </member>
        <member name="M:Dt.Core.EventBus.LocalEventBus.Publish(Dt.Core.EventBus.IEvent)">
            <summary>
            发布本地事件，不等待
            </summary>
            <param name="p_event">事件内容</param>
        </member>
        <member name="M:Dt.Core.EventBus.LocalEventBus.Call``1(Dt.Core.EventBus.IRequest{``0})">
            <summary>
            发布请求/响应模式的事件
            </summary>
            <typeparam name="TResponse">返回类型</typeparam>
            <param name="p_request">请求内容</param>
            <returns>返回响应值</returns>
        </member>
        <member name="T:Dt.Core.EventBus.EventWrapper">
            <summary>
            远程事件传输的包装类
            </summary>
        </member>
        <member name="P:Dt.Core.EventBus.EventWrapper.EventName">
            <summary>
            事件类型名称
            </summary>
        </member>
        <member name="P:Dt.Core.EventBus.EventWrapper.Data">
            <summary>
            事件内容
            </summary>
        </member>
        <member name="T:Dt.Core.EventBus.IRemoteHandler`1">
            <summary>
            远程事件处理接口
            </summary>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:Dt.Core.EventBus.IRemoteHandler`1.Handle(`0)">
            <summary>
            事件处理
            </summary>
            <param name="p_event">事件内容</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.EventBus.RabbitMQConnection">
            <summary>
            管理与RabbitMQ的连接，单例
            </summary>
        </member>
        <member name="P:Dt.Core.EventBus.RabbitMQConnection.IsConnected">
            <summary>
            是否已连接RabbitMQ
            </summary>
        </member>
        <member name="M:Dt.Core.EventBus.RabbitMQConnection.TryConnect">
            <summary>
            执行连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.EventBus.RabbitMQConnection.CreateModel">
            <summary>
            创建通道
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.EventBus.RemoteEventBus">
            <summary>
            基于RabbitMQ的事件总线
            </summary>
        </member>
        <member name="F:Dt.Core.EventBus.RemoteEventBus.Events">
            <summary>
            键为事件类型名称，值为IRemoteHandler泛型
            </summary>
        </member>
        <member name="M:Dt.Core.EventBus.RemoteEventBus.Broadcast(Dt.Core.EventBus.IEvent,System.Boolean)">
            <summary>
            向应用内的所有服务进行广播
            </summary>
            <param name="p_event">事件内容</param>
            <param name="p_isAllSvcInst">true表示所有服务的所有副本，false表示当服务有多个副本时只投递给其中一个</param>
        </member>
        <member name="M:Dt.Core.EventBus.RemoteEventBus.Multicast(Dt.Core.EventBus.IEvent,System.String)">
            <summary>
            向某个服务的所有服务副本进行组播
            </summary>
        </member>
        <member name="M:Dt.Core.EventBus.RemoteEventBus.Push(Dt.Core.EventBus.IEvent,System.String)">
            <summary>
            向某个服务发布事件，有多个服务副本时采用均衡算法将消息投递给其中一个
            </summary>
            <param name="p_event"></param>
            <param name="p_svcName"></param>
        </member>
        <member name="M:Dt.Core.EventBus.RemoteEventBus.Publish(Dt.Core.EventBus.IEvent,System.String)">
            <summary>
            发布远程事件
            </summary>
            <param name="p_event"></param>
            <param name="p_routingKey"></param>
        </member>
        <member name="T:Dt.Core.DtMiddleware">
            <summary>
            系统内置中间件，完成：
            JWT格式的本地认证；
            内部特殊路径处理；
            </summary>
        </member>
        <member name="M:Dt.Core.DtMiddleware.ResponseAdminPage(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取管理页面
            </summary>
            <param name="p_context"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DtMiddleware.ResponseErrorPage(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取出错页面
            </summary>
            <param name="p_context"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.EndMiddleware">
            <summary>
            末尾中间件，处理未找到请求目标的情况
            </summary>
        </member>
        <member name="T:Dt.Core.ApiAttribute">
            <summary>
            可远程调用Api的标志
            </summary>
        </member>
        <member name="M:Dt.Core.ApiAttribute.#ctor(System.Boolean,System.String,Dt.Core.AgentMode)">
            <summary>
            
            </summary>
            <param name="p_isTransactional">是否为每个方法启动事务，默认false</param>
            <param name="p_group">所属分组</param>
            <param name="p_agentMode">生成代理代码的模式，默认固定服务名模式</param>
        </member>
        <member name="P:Dt.Core.ApiAttribute.Group">
            <summary>
            所属分组
            </summary>
        </member>
        <member name="P:Dt.Core.ApiAttribute.AgentMode">
            <summary>
            生成代理代码的模式
            </summary>
        </member>
        <member name="P:Dt.Core.ApiAttribute.IsTransactional">
            <summary>
            是否为每个方法启动事务，默认false
            </summary>
        </member>
        <member name="T:Dt.Core.AgentMode">
            <summary>
            生成代理代码的模式
            </summary>
        </member>
        <member name="F:Dt.Core.AgentMode.Default">
            <summary>
            固定服务名
            </summary>
        </member>
        <member name="F:Dt.Core.AgentMode.Generic">
            <summary>
            泛型模式
            </summary>
        </member>
        <member name="F:Dt.Core.AgentMode.Custom">
            <summary>
            自定义服务名
            </summary>
        </member>
        <member name="T:Dt.Core.SvcAttribute">
            <summary>
            服务标志
            </summary>
        </member>
        <member name="M:Dt.Core.SvcAttribute.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            
            </summary>
            <param name="p_lifetime">服务的生命周期，默认Transient</param>
        </member>
        <member name="P:Dt.Core.SvcAttribute.Lifetime">
            <summary>
            服务的生命周期
            </summary>
        </member>
        <member name="T:Dt.Core.TransactionAttribute">
            <summary>
            自动为方法启用事务的标志
            </summary>
        </member>
        <member name="P:Dt.Core.TransactionAttribute.IsTransactional">
            <summary>
            是否自动为方法启用事务
            </summary>
        </member>
        <member name="T:Dt.Core.CustomAgentAttribute">
            <summary>
            自定义Agent方法代码
            </summary>
        </member>
        <member name="P:Dt.Core.CustomAgentAttribute.Code">
            <summary>
            自定义Agent方法代码
            </summary>
        </member>
        <member name="T:Dt.Core.JsonObjAttribute">
            <summary>
            类型可序列化属性
            </summary>
        </member>
        <member name="T:Dt.Core.AliasAttribute">
            <summary>
            基类属性
            </summary>
        </member>
        <member name="P:Dt.Core.AliasAttribute.Alias">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="M:Dt.Core.AliasAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="p_alias">名称</param>
        </member>
        <member name="M:Dt.Core.Check.NotNull``1(``0)">
            <summary>
            为null时抛出异常
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_value"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Check.NotNullOrEmpty(System.String)">
            <summary>
            字符串为null或空时抛出异常
            </summary>
            <param name="p_value"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Check.NotNullOrWhiteSpace(System.String)">
            <summary>
            字符串为null或只空格时抛出异常
            </summary>
            <param name="p_value"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Check.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            集合为null或空时抛出异常
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_value"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Id">
            <summary>
            Snowflake算法
            </summary>
        </member>
        <member name="M:Dt.Core.Id.New">
            <summary>
            产生新ID
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Kit">
            <summary>
            工具类
            </summary>
        </member>
        <member name="M:Dt.Core.Kit.GetMD5(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Silo">
            <summary>
            内部使用的全局静态类
            </summary>
        </member>
        <member name="P:Dt.Core.Silo.Methods">
            <summary>
            获取Api字典
            </summary>
        </member>
        <member name="P:Dt.Core.Silo.GroupMethods">
            <summary>
            获取Api分组列表
            </summary>
        </member>
        <member name="M:Dt.Core.Silo.GetMethod(System.String)">
            <summary>
            获取Api描述
            </summary>
            <param name="p_methodName">Api名称</param>
            <returns>Api描述</returns>
        </member>
        <member name="M:Dt.Core.Silo.GetMethodCall(System.String)">
            <summary>
            根据Api名称构造调用时的json串
            </summary>
            <param name="p_methodName">Api名称</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Silo.LoadCacheSql">
            <summary>
            缓存当前服务的所有Sql语句，表名xxx_sql
            </summary>
        </member>
        <member name="M:Dt.Core.Silo.CacheSql">
            <summary>
            缓存Sql串
            </summary>
        </member>
        <member name="M:Dt.Core.Silo.OnConfigChanged">
            <summary>
            系统配置(json文件)修改事件
            </summary>
        </member>
        <member name="M:Dt.Core.Silo.GetDictSql(System.String)">
            <summary>
            查询缓存中的Sql语句
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <returns>Sql语句</returns>
        </member>
        <member name="M:Dt.Core.Silo.GetDebugSql(System.String)">
            <summary>
            直接从库中查询Sql语句，只在调试时单机用！
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <returns>Sql语句</returns>
        </member>
        <member name="M:Dt.Core.Silo.GetSerializableType(System.String)">
            <summary>
            查询可序列化类型，未找到时自动抛出异常
            </summary>
            <param name="p_alias"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Silo.GetSerializableTypeAlias(System.Type)">
            <summary>
            查询某类型序列化时的别名
            </summary>
            <param name="p_type"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Silo.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入服务，提取程序集中的Api列表、可序列化类型列表、领域服务列表，注册服务，添加拦截
            </summary>
            <param name="p_services"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Silo.ExtractApi(System.Type,Dt.Core.ApiAttribute,Autofac.ContainerBuilder)">
            <summary>
            提取类型中的Api，注册服务，添加拦截
            </summary>
            <param name="p_type"></param>
            <param name="p_apiAttr"></param>
            <param name="p_builder"></param>
        </member>
        <member name="M:Dt.Core.Silo.IsEventHandler(System.Type,Autofac.ContainerBuilder)">
            <summary>
            注册事件处理
            </summary>
            <param name="p_type"></param>
            <param name="p_builder"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.IRpcJson">
            <summary>
            按照Rpc Json数据结构进行序列化和反序列化接口
            </summary>
        </member>
        <member name="M:Dt.Core.IRpcJson.ReadRpcJson(Newtonsoft.Json.JsonReader)">
            <summary>
            反序列化读取Rpc Json数据
            </summary>
        </member>
        <member name="M:Dt.Core.IRpcJson.WriteRpcJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            将对象按照Rpc Json数据结构进行序列化
            </summary>
        </member>
        <member name="M:Dt.Core.JsonRpcSerializer.Serialize(System.Object,Newtonsoft.Json.JsonWriter)">
            <summary>
            序列化
            </summary>
            <param name="p_value"></param>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Core.JsonRpcSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>
            反序列化
            </summary>
            <param name="p_reader"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.RpcJson">
            <summary>
            属性自定义json序列化/反序列化，属性类型需实现IRpcJson接口
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.DuplexStream">
            <summary>
            双工流
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.DuplexStream.RequestWriter">
            <summary>
            向服务器的写入流
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.DuplexStream.ResponseReader">
            <summary>
            读取服务器的返回流
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.RequestWriter">
            <summary>
            向服务器的写入流
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.RequestWriter.Write(System.Object)">
            <summary>
            向服务端写入一帧
            </summary>
            <param name="p_message">支持序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RequestWriter.Complete">
            <summary>
            请求流结束
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.Rpc.RequestWriter.IsWriteInProgress">
            <summary>
            上次异步写入是否结束
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.ResponseReader">
            <summary>
            读取服务器的返回流
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.ResponseReader.MoveNext">
            <summary>
            读取从服务器返回的下一帧数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.ResponseReader.Val``1">
            <summary>
            获取当前帧的指定类型值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.RpcResult">
            <summary>
            远程回调结果包装类
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.RpcResult.ResultType">
            <summary>
            结果类型
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.RpcResult.Value">
            <summary>
            结果值
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.RpcResult.Info">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.RpcResult.Elapsed">
            <summary>
            耗时
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.RpcResult.Trace">
            <summary>
            监控结果内容
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.RpcResultType">
            <summary>
            反序列化结果的种类
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcResultType.Value">
            <summary>
            普通结果值
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcResultType.Error">
            <summary>
            服务端错误信息
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcResultType.Message">
            <summary>
            业务警告信息
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.BaseRpc">
            <summary>
            远程调用基类
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.BaseRpc.#ctor(System.String,System.String,System.Object[])">
            <summary>
            构造方法
            </summary>
            <param name="p_serviceName">服务名称</param>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数列表</param>
        </member>
        <member name="M:Dt.Core.Rpc.BaseRpc.GetHttpClient(System.String)">
            <summary>
            每种服务缓存一个HttpClient
            </summary>
            <param name="p_serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.BaseRpc.GetRpcData(System.String,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            序列化RPC调用，按需压缩
            </summary>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.ClientStreamRpc">
            <summary>
            客户端发送请求数据流的远程调用
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.ClientStreamRpc.#ctor(System.String,System.String,System.Object[])">
            <summary>
            构造方法
            </summary>
            <param name="p_serviceName">服务名称</param>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数列表</param>
        </member>
        <member name="M:Dt.Core.Rpc.ClientStreamRpc.Call">
            <summary>
            启动Http2协议的远程调用，客户端发送请求数据流
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.Rpc.ClientStreamRpc.RequestStream">
            <summary>
            请求流
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.ClientStreamRpc.RequestCompleted">
            <summary>
            请求流是否已关闭
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.ClientStreamRpc.FinishRequest">
            <summary>
            请求流发送结束
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.DuplexStreamRpc">
            <summary>
            客户端发送请求数据流，服务端返回数据流响应的远程调用
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.DuplexStreamRpc.#ctor(System.String,System.String,System.Object[])">
            <summary>
            构造方法
            </summary>
            <param name="p_serviceName">服务名称</param>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数列表</param>
        </member>
        <member name="M:Dt.Core.Rpc.DuplexStreamRpc.Call">
            <summary>
            启动Http2协议的远程调用，客户端与服务端双工流
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.ServerStreamRpc">
            <summary>
            客户端发送一个请求，服务端返回数据流响应的远程调用
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.ServerStreamRpc.#ctor(System.String,System.String,System.Object[])">
            <summary>
            构造方法
            </summary>
            <param name="p_serviceName">服务名称</param>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数列表</param>
        </member>
        <member name="M:Dt.Core.Rpc.ServerStreamRpc.Call">
            <summary>
            启动Http2协议的远程调用，客户端发送一个请求，服务端返回数据流响应
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.UnaryRpc">
            <summary>
            基于Http2的请求/响应模式的远程调用
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.UnaryRpc.#ctor(System.String,System.String,System.Object[])">
            <summary>
            构造方法
            </summary>
            <param name="p_serviceName">服务名称</param>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数列表</param>
        </member>
        <member name="M:Dt.Core.Rpc.UnaryRpc.Call``1">
            <summary>
            发送json格式的Http Rpc远程调用
            </summary>
            <typeparam name="T">结果对象的类型</typeparam>
            <returns>返回远程调用结果</returns>
        </member>
        <member name="T:Dt.Core.Rpc.RpcException">
            <summary>
            业务处理异常类型
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.RpcKit">
            <summary>
            Rpc工具方法
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcKit.HeaderSize">
            <summary>
            数据包头长度，1字节压缩标志 + 4字节内容长度
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcKit.MinCompressLength">
            <summary>
            进行内容压缩的最小长度
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcKit.ShakeHands">
            <summary>
            心跳内容：***
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.WriteFrame(System.IO.Pipelines.PipeWriter,System.Object)">
            <summary>
            将对象打包成一帧写入管道
            </summary>
            <param name="p_writer"></param>
            <param name="p_message"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.WriteHeartbeat(System.IO.Pipelines.PipeWriter)">
            <summary>
            向管道写入心跳帧
            </summary>
            <param name="p_writer"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.WriteFrame(System.IO.Pipelines.PipeWriter,System.Byte[],System.Boolean)">
            <summary>
            封装Frame写入管道
            </summary>
            <param name="p_writer"></param>
            <param name="p_data"></param>
            <param name="p_compress"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.WriteFrame(System.IO.Stream,System.Object)">
            <summary>
            将对象打包成一帧写入流
            </summary>
            <param name="p_stream"></param>
            <param name="p_message"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.WriteFrame(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            封装Frame写入流
            </summary>
            <param name="p_stream"></param>
            <param name="p_data"></param>
            <param name="p_compress"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.ReadFrame(System.IO.Pipelines.PipeReader)">
            <summary>
            从管道中读取一帧，返回的数据不包括Frame头，已自动解压
            </summary>
            <param name="p_reader"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.ReadFrame(System.IO.Stream)">
            <summary>
            从流中读取一帧，返回的数据不包括Frame头，已自动解压
            </summary>
            <param name="p_stream"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.ReadHeartbeat(System.IO.Stream)">
            <summary>
            从流中读取心跳帧
            </summary>
            <param name="p_stream"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.GetVal``1(System.Object)">
            <summary>
            类型转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_val"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.ParseFrame(System.Buffers.ReadOnlySequence{System.Byte}@,System.Byte[]@)">
            <summary>
            读取Frame的内容，不包括Frame头，自动解压
            </summary>
            <param name="p_buffer"></param>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.SerializeObj(System.Object,System.Byte[]@)">
            <summary>
            对象序列化，超过长度限制时执行压缩
            </summary>
            <param name="p_message"></param>
            <param name="p_data"></param>
            <returns>true 已压缩</returns>
        </member>
        <member name="T:Dt.Core.Rpc.ApiCallMode">
            <summary>
            Api调用模式
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.ApiCallMode.Unary">
            <summary>
            普通请求/响应模式
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.ApiCallMode.ServerStream">
            <summary>
            客户端发送一个请求，服务端返回数据流响应
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.ApiCallMode.ClientStream">
            <summary>
            客户端发送请求数据流，服务端返回一个响应
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.ApiCallMode.DuplexStream">
            <summary>
            客户端发送请求数据流，服务端返回数据流响应
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.ApiMethod">
            <summary>
            Api方法描述类
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.ApiMethod.Method">
            <summary>
            Api方法
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.ApiMethod.CallMode">
            <summary>
            Api调用模式
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.ApiMethod.IsTransactional">
            <summary>
            是否自动为方法启用事务
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.ApiResponseType">
            <summary>
            Api调用结果种类
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.ApiResponseType.Success">
            <summary>
            调用成功
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.ApiResponseType.Error">
            <summary>
            调用过程中出错
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.ApiResponseType.Warning">
            <summary>
            调用过程中产生业务警告提示
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.ClientStreamHandler">
            <summary>
            客户端发送请求数据流，服务端返回响应的处理类
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.ClientStreamHandler.CallMethod">
            <summary>
            调用服务方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.DuplexStreamHandler">
            <summary>
            客户端发送请求数据流，服务端返回数据流的处理类
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.DuplexStreamHandler.CallMethod">
            <summary>
            调用服务方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.RpcHandler">
            <summary>
            请求处理基类
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.RpcHandler.Call">
            <summary>
            执行Http Rpc调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcHandler.CallMethod">
            <summary>
            调用服务方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcHandler.LogCallError(System.Exception)">
            <summary>
            记录调用过程的错误日志
            </summary>
            <param name="p_ex"></param>
        </member>
        <member name="T:Dt.Core.Rpc.ServerStreamHandler">
            <summary>
            客户端发送一个请求，服务端返回数据流的处理类
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.ServerStreamHandler.CallMethod">
            <summary>
            调用服务方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.UnaryHandler">
            <summary>
            请求/响应模式的处理类
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.UnaryHandler.CallMethod">
            <summary>
            调用服务方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.RequestReader">
            <summary>
            读取客户端请求流
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.RequestReader.MoveNext">
            <summary>
            读取客户端请求流的下一帧数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RequestReader.Val``1">
            <summary>
            获取当前帧的指定类型值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.ResponseWriter">
            <summary>
            返回客户端的响应流
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.ResponseWriter.Write(System.Object)">
            <summary>
            向客户端写入一帧
            </summary>
            <param name="p_message">支持序列化的对象</param>
            <returns></returns>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacRegistration">
            <summary>
            Extension methods for registering ASP.NET Core dependencies with Autofac.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacRegistration.Populate(Autofac.ContainerBuilder,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})">
            <summary>
            Populates the Autofac container builder with the set of registered service descriptors
            and makes <see cref="T:System.IServiceProvider"/> and <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/>
            available in the container.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> into which the registrations should be made.
            </param>
            <param name="descriptors">
            The set of service descriptors to register in the container.
            </param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacRegistration.Populate(Autofac.ContainerBuilder,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor},System.Object)">
            <summary>
            Populates the Autofac container builder with the set of registered service descriptors
            and makes <see cref="T:System.IServiceProvider"/> and <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/>
            available in the container. Using this overload is incompatible with the ASP.NET Core
            support for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1"/>.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> into which the registrations should be made.
            </param>
            <param name="descriptors">
            The set of service descriptors to register in the container.
            </param>
            <param name="lifetimeScopeTagForSingletons">
            If provided and not <see langword="null"/> then all registrations with lifetime <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> are registered
            using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])" />
            with provided <paramref name="lifetimeScopeTagForSingletons"/>
            instead of using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.SingleInstance"/>.
            </param>
            <remarks>
            <para>
            Specifying a <paramref name="lifetimeScopeTagForSingletons"/> addresses a specific case where you have
            an application that uses Autofac but where you need to isolate a set of services in a child scope. For example,
            if you have a large application that self-hosts ASP.NET Core items, you may want to isolate the ASP.NET
            Core registrations in a child lifetime scope so they don't show up for the rest of the application.
            This overload allows that. Note it is the developer's responsibility to execute this and create an
            <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider"/> using the child lifetime scope.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacRegistration.ConfigureLifecycle``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Object)">
            <summary>
            Configures the lifecycle on a service registration.
            </summary>
            <typeparam name="TActivatorData">The activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">The object registration style.</typeparam>
            <param name="registrationBuilder">The registration being built.</param>
            <param name="lifecycleKind">The lifecycle specified on the service registration.</param>
            <param name="lifetimeScopeTagForSingleton">
            If not <see langword="null"/> then all registrations with lifetime <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> are registered
            using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])" />
            with provided <paramref name="lifetimeScopeTagForSingleton"/>
            instead of using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.SingleInstance"/>.
            </param>
            <returns>
            The <paramref name="registrationBuilder" />, configured with the proper lifetime scope,
            and available for additional configuration.
            </returns>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacRegistration.Register(Autofac.ContainerBuilder,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor},System.Object)">
            <summary>
            Populates the Autofac container builder with the set of registered service descriptors.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> into which the registrations should be made.
            </param>
            <param name="descriptors">
            The set of service descriptors to register in the container.
            </param>
            <param name="lifetimeScopeTagForSingletons">
            If not <see langword="null"/> then all registrations with lifetime <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> are registered
            using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])" />
            with provided <paramref name="lifetimeScopeTagForSingletons"/>
            instead of using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.SingleInstance"/>.
            </param>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider">
            <summary>
            Autofac implementation of the ASP.NET Core <see cref="T:System.IServiceProvider"/>.
            </summary>
            <seealso cref="T:System.IServiceProvider" />
            <seealso cref="T:Microsoft.Extensions.DependencyInjection.ISupportRequiredService" />
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.#ctor(Autofac.ILifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider"/> class.
            </summary>
            <param name="lifetimeScope">
            The lifetime scope from which services will be resolved.
            </param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.GetRequiredService(System.Type)">
            <summary>
            Gets service of type <paramref name="serviceType" /> from the
            <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider" /> and requires it be present.
            </summary>
            <param name="serviceType">
            An object that specifies the type of service object to get.
            </param>
            <returns>
            A service object of type <paramref name="serviceType" />.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException">
            Thrown if the <paramref name="serviceType" /> isn't registered with the container.
            </exception>
            <exception cref="T:Autofac.Core.DependencyResolutionException">
            Thrown if the object can't be resolved from the container.
            </exception>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">
            An object that specifies the type of service object to get.
            </param>
            <returns>
            A service object of type <paramref name="serviceType" />; or <see langword="null" />
            if there is no service object of type <paramref name="serviceType" />.
            </returns>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory">
            <summary>
            A factory for creating a <see cref="T:Autofac.ContainerBuilder"/> and an <see cref="T:System.IServiceProvider" />.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.#ctor(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory"/> class.
            </summary>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/> that adds component registrations to the conatiner.</param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates a container builder from an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The collection of services.</param>
            <returns>A container builder that can be used to create an <see cref="T:System.IServiceProvider" />.</returns>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(Autofac.ContainerBuilder)">
            <summary>
            Creates an <see cref="T:System.IServiceProvider" /> from the container builder.
            </summary>
            <param name="containerBuilder">The container builder.</param>
            <returns>An <see cref="T:System.IServiceProvider" />.</returns>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacServiceScope">
            <summary>
            Autofac implementation of the ASP.NET Core <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope"/>.
            </summary>
            <seealso cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope" />
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceScope.#ctor(Autofac.ILifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceScope"/> class.
            </summary>
            <param name="lifetimeScope">
            The lifetime scope from which services should be resolved for this service scope.
            </param>
        </member>
        <member name="P:Autofac.Extensions.DependencyInjection.AutofacServiceScope.ServiceProvider">
            <summary>
            Gets an <see cref="T:System.IServiceProvider" /> corresponding to this service scope.
            </summary>
            <value>
            An <see cref="T:System.IServiceProvider" /> that can be used to resolve dependencies from the scope.
            </value>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceScope.Dispose">
            <summary>
            Disposes of the lifetime scope and resolved disposable services.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceScope.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacServiceScopeFactory">
            <summary>
            Autofac implementation of the ASP.NET Core <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/>.
            </summary>
            <seealso cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory" />
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceScopeFactory.#ctor(Autofac.ILifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceScopeFactory"/> class.
            </summary>
            <param name="lifetimeScope">The lifetime scope.</param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceScopeFactory.CreateScope">
            <summary>
            Creates an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope" /> which contains an
            <see cref="T:System.IServiceProvider" /> used to resolve dependencies within
            the scope.
            </summary>
            <returns>
            An <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope" /> controlling the lifetime of the scope. Once
            this is disposed, any scoped services that have been resolved
            from the <see cref="P:Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider" />
            will also be disposed.
            </returns>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extension methods on <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1"/>.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.ServiceCollectionExtensions.AddAutofac(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Adds the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory"/> to the service collection.
            </summary>
            <param name="services">The service collection to add the factory to.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/> that adds component registrations to the container.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="T:Autofac.Extras.DynamicProxy.InterceptAttribute">
            <summary>
            Indicates that a type should be intercepted.
            </summary>
        </member>
        <member name="P:Autofac.Extras.DynamicProxy.InterceptAttribute.InterceptorService">
            <summary>
            Gets the interceptor service.
            </summary>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.InterceptAttribute.#ctor(Autofac.Core.Service)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extras.DynamicProxy.InterceptAttribute"/> class.
            </summary>
            <param name="interceptorService">The interceptor service.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="interceptorService" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.InterceptAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extras.DynamicProxy.InterceptAttribute"/> class.
            </summary>
            <param name="interceptorServiceName">Name of the interceptor service.</param>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.InterceptAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extras.DynamicProxy.InterceptAttribute"/> class.
            </summary>
            <param name="interceptorServiceType">The typed interceptor service.</param>
        </member>
        <member name="T:Autofac.Extras.DynamicProxy.RegistrationExtensions">
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.RegistrationExtensions.EnableClassInterceptors``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1})">
            <summary>
            Enable class interception on the target type. Interceptors will be determined
            via Intercept attributes on the class or added with InterceptedBy().
            Only virtual methods can be intercepted this way.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to apply interception to.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.RegistrationExtensions.EnableClassInterceptors``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Enable class interception on the target type. Interceptors will be determined
            via Intercept attributes on the class or added with InterceptedBy().
            Only virtual methods can be intercepted this way.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TConcreteReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to apply interception to.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.RegistrationExtensions.EnableClassInterceptors``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1},Castle.DynamicProxy.ProxyGenerationOptions,System.Type[])">
            <summary>
            Enable class interception on the target type. Interceptors will be determined
            via Intercept attributes on the class or added with InterceptedBy().
            Only virtual methods can be intercepted this way.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to apply interception to.</param>
            <param name="options">Proxy generation options to apply.</param>
            <param name="additionalInterfaces">Additional interface types. Calls to their members will be proxied as well.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.RegistrationExtensions.EnableClassInterceptors``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Castle.DynamicProxy.ProxyGenerationOptions,System.Type[])">
            <summary>
            Enable class interception on the target type. Interceptors will be determined
            via Intercept attributes on the class or added with InterceptedBy().
            Only virtual methods can be intercepted this way.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TConcreteReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to apply interception to.</param>
            <param name="options">Proxy generation options to apply.</param>
            <param name="additionalInterfaces">Additional interface types. Calls to their members will be proxied as well.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.RegistrationExtensions.EnableInterfaceInterceptors``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Enable interface interception on the target type. Interceptors will be determined
            via Intercept attributes on the class or interface, or added with InterceptedBy() calls.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to apply interception to.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.RegistrationExtensions.EnableInterfaceInterceptors``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
            Enable interface interception on the target type. Interceptors will be determined
            via Intercept attributes on the class or interface, or added with InterceptedBy() calls.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to apply interception to.</param>
            <param name="options">Proxy generation options to apply.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.RegistrationExtensions.InterceptedBy``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Service[])">
            <summary>
            Allows a list of interceptor services to be assigned to the registration.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="builder">Registration to apply interception to.</param>
            <param name="interceptorServices">The interceptor services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="interceptorServices"/>.</exception>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.RegistrationExtensions.InterceptedBy``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String[])">
            <summary>
            Allows a list of interceptor services to be assigned to the registration.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="builder">Registration to apply interception to.</param>
            <param name="interceptorServiceNames">The names of the interceptor services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="interceptorServiceNames"/>.</exception>
        </member>
        <member name="M:Autofac.Extras.DynamicProxy.RegistrationExtensions.InterceptedBy``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type[])">
            <summary>
            Allows a list of interceptor services to be assigned to the registration.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="builder">Registration to apply interception to.</param>
            <param name="interceptorServiceTypes">The types of the interceptor services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="interceptorServiceTypes"/>.</exception>
        </member>
    </members>
</doc>
