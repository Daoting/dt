<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dt.Core</name>
    </assembly>
    <members>
        <member name="T:Dt.Core.AtKit">
            <summary>
            静态工具类，功能杂项
            </summary>
        </member>
        <member name="F:Dt.Core.AtKit.ReaderSettings">
            <summary>
            XmlReader默认设置
            </summary>
        </member>
        <member name="F:Dt.Core.AtKit.WriterSettings">
            <summary>
            XmlWriter默认设置
            </summary>
        </member>
        <member name="F:Dt.Core.AtKit.GB">
            <summary>
            1GB
            </summary>
        </member>
        <member name="F:Dt.Core.AtKit.MB">
            <summary>
            1MB
            </summary>
        </member>
        <member name="F:Dt.Core.AtKit.KB">
            <summary>
            1KB
            </summary>
        </member>
        <member name="M:Dt.Core.AtKit.Msg(System.String,System.Int32)">
            <summary>
            发布消息提示
            </summary>
            <param name="p_content">显示内容</param>
            <param name="p_delaySeconds">几秒后自动关闭，默认3秒，0表示不自动关闭</param>
        </member>
        <member name="M:Dt.Core.AtKit.Warn(System.String,System.Int32)">
            <summary>
            警告提示
            </summary>
            <param name="p_content">显示内容</param>
            <param name="p_delaySeconds">几秒后自动关闭，默认5秒，0表示不自动关闭</param>
        </member>
        <member name="M:Dt.Core.AtKit.Notify(Dt.Core.NotifyInfo)">
            <summary>
            发布消息提示
            </summary>
            <param name="p_notify">消息提示实例</param>
        </member>
        <member name="M:Dt.Core.AtKit.Toast(System.String,System.String,System.String,System.String)">
            <summary>
            显示系统通知
            </summary>
            <param name="p_content">内容</param>
            <param name="p_viewID">点击时的启动视图</param>
            <param name="p_title">视图标题</param>
            <param name="p_icon">视图图标</param>
        </member>
        <member name="M:Dt.Core.AtKit.Tile(System.String[])">
            <summary>
            更新磁贴内容，最多支持四行信息
            </summary>
            <param name="p_msgs"></param>
        </member>
        <member name="M:Dt.Core.AtKit.Tile(System.Double)">
            <summary>
            更新磁贴数字
            </summary>
            <param name="p_num"></param>
        </member>
        <member name="M:Dt.Core.AtKit.CloseNotify(Dt.Core.NotifyInfo)">
            <summary>
            关闭消息提示，通常在连接按钮中执行关闭
            </summary>
            <param name="p_notify"></param>
        </member>
        <member name="M:Dt.Core.AtKit.Trace(System.String,System.String)">
            <summary>
            向监视窗口输出信息
            </summary>
            <param name="p_title">输出内容标题</param>
            <param name="p_content">内容</param>
        </member>
        <member name="M:Dt.Core.AtKit.Trace(Dt.Core.TraceOutType,System.String,System.String,System.String)">
            <summary>
            向监视窗口输出信息
            </summary>
            <param name="p_type">输出类别</param>
            <param name="p_title">标题</param>
            <param name="p_content">内容</param>
            <param name="p_serviceName">服务名称</param>
        </member>
        <member name="M:Dt.Core.AtKit.Trace(Dt.Core.Row)">
            <summary>
            向监视窗口输出信息
            </summary>
            <param name="p_row">数据行</param>
        </member>
        <member name="P:Dt.Core.AtKit.StopTrace">
            <summary>
            是否停止监视输出，内部用
            </summary>
        </member>
        <member name="P:Dt.Core.AtKit.TraceList">
            <summary>
            获取监视信息列表
            </summary>
        </member>
        <member name="M:Dt.Core.AtKit.Confirm(System.String,System.String)">
            <summary>
            显示确认对话框
            </summary>
            <param name="p_content">消息内容</param>
            <param name="p_title">标题</param>
            <returns>true表确认</returns>
        </member>
        <member name="M:Dt.Core.AtKit.Error(System.String,System.String)">
            <summary>
            显示错误对话框
            </summary>
            <param name="p_content">消息内容</param>
            <param name="p_title">标题</param>
        </member>
        <member name="P:Dt.Core.AtKit.NewID">
            <summary>
            获取新Guid
            </summary>
        </member>
        <member name="M:Dt.Core.AtKit.GetPinYin(System.String)">
            <summary>
            获取给定字符串的拼音码(小写)
            </summary>
            <param name="p_chiness">字符串</param>
        </member>
        <member name="M:Dt.Core.AtKit.GetWuBi(System.String)">
            <summary>
            获取给定字符串的五笔码(小写)
            </summary>
            <param name="p_chiness">字符串</param>
        </member>
        <member name="M:Dt.Core.AtKit.GetFileSizeDesc(System.UInt64)">
            <summary>
            将字节长度转成描述信息
            </summary>
            <param name="p_size"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtKit.GetVarcharLength(System.String)">
            <summary>
            计算字符串在oracle中占的长度
            </summary>
            <param name="p_content">要计算的字符串 </param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtKit.ConvertSpecialStr(System.String)">
            <summary>
            转换特殊字符 导出Xaml时用
            </summary>
            <param name="p_txt"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtKit.ConvertType``1(System.Object)">
            <summary>
            转换对象的类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_val"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtKit.GetByteCount(System.String)">
            <summary>
            获得给定字符串的字节个数
            </summary>
            <param name="p_txt"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtKit.GetMD5(System.String)">
            <summary>
             获取给定字符串的MD5码
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtKit.Parse(System.Object,Dt.Core.Mask.MaskType,System.String,System.Boolean,System.Char,System.Boolean)">
            <summary>
            执行掩码解析
            </summary>
            <param name="p_srcValue">数据值</param>
            <param name="p_maskType">掩码类型</param>
            <param name="p_mask">掩码格式</param>
            <param name="p_showPlaceHolders">是否显示占位符</param>
            <param name="p_placeHolder">占位符样式</param>
            <param name="p_saveLiteral">是否保存掩码后的文字</param>
            <returns>解析后的表达式</returns>
        </member>
        <member name="M:Dt.Core.AtKit.ParseNumeric(System.Object,System.String)">
            <summary>
            解析数字型内容
            </summary>
            <param name="p_srcValue">掩码类型</param>
            <param name="p_mask">掩码格式</param>
            <returns>解析后的表达式</returns>
        </member>
        <member name="M:Dt.Core.AtKit.ParseRegEx(System.Object,System.String,System.Boolean,System.Char)">
            <summary>
            解析正则表达内容
            </summary>
            <param name="p_srcValue">数据值</param>
            <param name="p_mask">掩码格式</param>
            <param name="p_showPlaceHolders">是否显示占位符</param>
            <param name="p_placeHolder">占位符样式</param>
            <returns>解析后的表达式</returns>
        </member>
        <member name="M:Dt.Core.AtKit.ParseRegular(System.Object,System.String,System.Char,System.Boolean)">
            <summary>
            解析Regular简单正则表达式
            </summary>
            <param name="p_srcValue">数据值</param>
            <param name="p_mask">掩码格式</param>
            <param name="p_placeHolder">占位符样式</param>
            <param name="p_saveLiteral">是否保存掩码后的文字</param>
            <returns>格式字符串</returns>
        </member>
        <member name="M:Dt.Core.AtKit.ParseSimple(System.Object,System.String,System.Char,System.Boolean)">
            <summary>
            解析简单型表达式
            </summary>
            <param name="p_srcValue">数据值</param>
            <param name="p_mask">掩码格式</param>
            <param name="p_placeHolder">占位符样式</param>
            <param name="p_saveLiteral">是否保存掩码后的文字</param>
            <returns>解析后的表达式</returns>
        </member>
        <member name="M:Dt.Core.AtKit.ParseDateTime(System.Object,System.String)">
            <summary>
            解析日期时间型表达式
            </summary>
            <param name="p_srcValue">数据值</param>
            <param name="p_mask">掩码格式</param>
            <returns>解析后的表达式</returns>
        </member>
        <member name="M:Dt.Core.AtKit.IsDecimal(System.String)">
            <summary>
            输入字符串是否为纯数字
            </summary>
            <param name="testedString">输入字符串</param>
            <returns>是否纯数字</returns>
        </member>
        <member name="M:Dt.Core.AtKit.ParseLegacy(System.Object,System.String,System.Char,Dt.Core.Mask.LegacyMaskInfo)">
            <summary>
            解析简单型表达式
            </summary>
            <param name="p_srcValue">数据值</param>
            <param name="p_mask">掩码格式</param>
            <param name="p_placeHolder">占位符样式</param>
            <param name="p_info">简单正则表达式信息</param>
            <returns>解析后的表达式</returns>
        </member>
        <member name="M:Dt.Core.AtKit.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtKit.Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtKit.RunAsync(System.Action)">
            <summary>
            确保在UI线程异步调用给定方法
            </summary>
            <param name="p_action"></param>
        </member>
        <member name="M:Dt.Core.AtKit.RunTask(System.Action)">
            <summary>
            确保在UI线程异步调用给定方法，返回可等待任务
            </summary>
            <param name="p_action"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtKit.RunSync(System.Action)">
            <summary>
            确保在UI线程同步调用给定方法
            </summary>
            <param name="p_action"></param>
        </member>
        <member name="M:Dt.Core.AtKit.CreateTraceTable">
            <summary>
            创建Trace数据源表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtKit.GetChineseCode(System.String,System.Boolean)">
            <summary>
            获取给定字符串的字母编码(小写)
            </summary>
            <param name="p_chiness">字符串</param>
            <param name="p_isPinYin">是否为拼音</param>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.AtKit.SpellCode">
            <summary>
            汉字拼音首字母字典
            </summary>
        </member>
        <member name="P:Dt.Core.AtKit.WuBiCode">
            <summary>
            五笔字母字典
            </summary>
        </member>
        <member name="T:Dt.Core.AtModel">
            <summary>
            本地sqlite模型库
            </summary>
        </member>
        <member name="M:Dt.Core.AtModel.EachColumns(System.String)">
            <summary>
            查询指定表的所有列
            </summary>
            <param name="p_tblName"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.AtState">
            <summary>
            本地sqlite状态库
            </summary>
        </member>
        <member name="M:Dt.Core.AtState.GetCookie(System.String)">
            <summary>
            查询本地存储的Cookie值
            </summary>
            <param name="p_key"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtState.SaveCookie(System.String,System.String)">
            <summary>
            保存Cookie的键值
            </summary>
            <param name="p_key"></param>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.AtState.DeleteCookie(System.String)">
            <summary>
            删除指定Cookie
            </summary>
            <param name="p_key"></param>
        </member>
        <member name="M:Dt.Core.AtState.GetAutoStart">
            <summary>
            查询自启动信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.AtState.SaveAutoStart(Dt.Core.AutoStartInfo)">
            <summary>
            保存自启动信息
            </summary>
            <param name="p_info"></param>
        </member>
        <member name="M:Dt.Core.AtState.DelAutoStart">
            <summary>
            删除自启动信息
            </summary>
        </member>
        <member name="T:Dt.Core.Sqlite_state">
            <summary>
            Sqlite_为前缀，后面为文件名
            </summary>
        </member>
        <member name="T:Dt.Core.AtSys">
            <summary>
            系统相关管理类
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.System">
            <summary>
            获取平台种类
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.IsPhoneUI">
            <summary>
            获取系统是否采用手机的UI模式
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.IsTouchMode">
            <summary>
            获取系统是否为触摸模式
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.Now">
            <summary>
            获取服务器端当前时间，根据时差计算所得
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.Stub">
            <summary>
            获取系统存根
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.Callback">
            <summary>
            系统回调
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.TraceRpc">
            <summary>
            获取设置是否监控Rpc调用结果，TraceBox中控制输出
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.RootPath">
            <summary>
            本地文件的根路径
            uwp：C:\Users\...\LocalState
            android：/data/user/0/App.Droid/files
            ios：/Users/usrname/Library/Developer/CoreSimulator/Devices/xxx/data/Containers/Data/Application/yyy/Library/Data
            wasm：/local
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.CachePath">
            <summary>
            本地缓存文件的存放路径
            uwp：C:\Users\...\LocalState\.doc
            android：/data/user/0/App.Droid/files/.doc
            ios：/Users/usrname/Library/Developer/CoreSimulator/Devices/xxx/data/Containers/Data/Application/yyy/Library/Data/.doc
            wasm：/local/.doc
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.DataPath">
            <summary>
            本地sqlite数据文件的存放路径
            uwp：C:\Users\...\LocalState\.data
            android：/data/user/0/App.Droid/files/.data
            ios：/Users/usrname/Library/Developer/CoreSimulator/Devices/xxx/data/Containers/Data/Application/yyy/Library/Data/.data
            wasm：/local/.doc
            </summary>
        </member>
        <member name="M:Dt.Core.AtSys.ClearCacheFiles">
            <summary>
            清空所有存放在.doc路径的缓存文件
            </summary>
        </member>
        <member name="M:Dt.Core.AtSys.DeleteCacheFile(System.String)">
            <summary>
            删除存放在.doc路径的本地文件
            </summary>
            <param name="p_fileName">文件名</param>
        </member>
        <member name="P:Dt.Core.AtSys.Login">
            <summary>
            显示登录页面，参数：是否为弹出式
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.Logout">
            <summary>
            注销后重新登录
            </summary>
        </member>
        <member name="P:Dt.Core.AtSys.ShowTraceBox">
            <summary>
            显示监视窗口
            </summary>
        </member>
        <member name="M:Dt.Core.AtSys.Startup(Dt.Core.IStub,Dt.Core.ICallback)">
            <summary>
            系统初始化
            </summary>
            <param name="p_stub">系统存根</param>
            <param name="p_callback"></param>
        </member>
        <member name="M:Dt.Core.AtSys.SyncTime(System.DateTime)">
            <summary>
            同步服务器时间
            </summary>
            <param name="p_serverTime"></param>
        </member>
        <member name="M:Dt.Core.AtSys.OnSuspending(System.Object,Windows.ApplicationModel.SuspendingEventArgs)">
            <summary>
            三平台都能正常触发！必须耗时小！
            Running -> Suspended    手机或PC平板模式下不占据屏幕时触发
            此时不知道应用程序将被终止还是可恢复
            </summary>
            <param name="sender">挂起的请求的源。</param>
            <param name="e">有关挂起的请求的详细信息。</param>
        </member>
        <member name="M:Dt.Core.AtSys.OnResuming(System.Object,System.Object)">
            <summary>
            三平台都能正常触发！
            Suspended -> Running    手机或PC平板模式下再次占据屏幕时触发
            执行恢复状态、恢复会话等操作
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Core.AtUser">
            <summary>
            当前登录用户相关信息
            </summary>
        </member>
        <member name="P:Dt.Core.AtUser.ID">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Dt.Core.AtUser.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:Dt.Core.AtUser.Phone">
            <summary>
            手机号码
            </summary>
        </member>
        <member name="P:Dt.Core.AtUser.Photo">
            <summary>
            头像
            </summary>
        </member>
        <member name="P:Dt.Core.AtUser.IsLogon">
            <summary>
            是否已登录
            </summary>
        </member>
        <member name="M:Dt.Core.AtUser.Init(Dt.Core.Dict)">
            <summary>
            登录后初始化用户信息
            </summary>
            <param name="p_info"></param>
        </member>
        <member name="M:Dt.Core.AtUser.Reset">
            <summary>
            注销时清空用户信息
            </summary>
        </member>
        <member name="F:Dt.Core.AtUser.DefaultPhoto">
            <summary>
            缺省头像文件的路径
            </summary>
        </member>
        <member name="M:Dt.Core.AtUser.HasPrv(System.String)">
            <summary>
            判断当前登录用户是否具有指定权限
            </summary>
            <param name="p_id">权限ID</param>
            <returns>true 表示有权限</returns>
        </member>
        <member name="M:Dt.Core.AtUser.GetParam``1(System.String)">
            <summary>
            获取参数值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_paramID"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.BaseCommand">
            <summary>
            普通命令基类，实现ICommand接口
            </summary>
        </member>
        <member name="M:Dt.Core.BaseCommand.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Dt.Core.BaseCommand.#ctor(Dt.Core.CmdHistory)">
            <summary>
            构造方法
            </summary>
            <param name="p_history">历史命令</param>
        </member>
        <member name="M:Dt.Core.BaseCommand.#ctor(System.Action{System.Object},System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="p_executeCallback">命令回调方法</param>
            <param name="p_allowExecute">初始状态</param>
        </member>
        <member name="P:Dt.Core.BaseCommand.AllowExecute">
            <summary>
            获取设置当前状态下是否可执行命令
            </summary>
        </member>
        <member name="M:Dt.Core.BaseCommand.DoExecute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="M:Dt.Core.BaseCommand.DoUndo(System.Object)">
            <summary>
            执行撤消
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="E:Dt.Core.BaseCommand.CanExecuteChanged">
            <summary>
            当出现影响是否应执行该命令的更改时发生
            </summary>
        </member>
        <member name="M:Dt.Core.BaseCommand.CanExecute(System.Object)">
            <summary>
            定义用于确定此命令是否可以在其当前状态下执行的方法
            </summary>
            <param name="p_parameter">执行参数</param>
            <returns>是否允许执行</returns>
        </member>
        <member name="M:Dt.Core.BaseCommand.Execute(System.Object)">
            <summary>
            定义在调用此命令时调用的方法
            </summary>
            <param name="p_parameter">执行参数</param>
        </member>
        <member name="M:Dt.Core.BaseCommand.Undo(System.Object)">
            <summary>
            撤消
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="M:Dt.Core.BaseCommand.Redo(System.Object)">
            <summary>
            重做
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="M:Dt.Core.BaseCommand.OnCanExecuteChanged">
            <summary>
            触发CanExecuteChanged事件
            </summary>
        </member>
        <member name="T:Dt.Core.CmdAction">
            <summary>
            可撤消、重做的命令动作描述类
            </summary>
        </member>
        <member name="M:Dt.Core.CmdAction.#ctor(Dt.Core.BaseCommand,System.Object)">
            <summary>
            
            </summary>
            <param name="p_cmd"></param>
            <param name="p_args"></param>
        </member>
        <member name="M:Dt.Core.CmdAction.Undo">
            <summary>
            撤消
            </summary>
        </member>
        <member name="M:Dt.Core.CmdAction.Redo">
            <summary>
            重做
            </summary>
        </member>
        <member name="T:Dt.Core.CmdHistory">
            <summary>
            命令的撤消与重做管理类
            </summary>
        </member>
        <member name="E:Dt.Core.CmdHistory.CmdChanged">
            <summary>
            命令变化事件
            </summary>
        </member>
        <member name="M:Dt.Core.CmdHistory.RecordAction(Dt.Core.CmdAction)">
            <summary>
            添加可撤消的动作
            </summary>
            <param name="p_action"></param>
        </member>
        <member name="M:Dt.Core.CmdHistory.Undo">
            <summary>
            执行撤消操作
            </summary>
        </member>
        <member name="M:Dt.Core.CmdHistory.Redo">
            <summary>
            执行重做操作
            </summary>
        </member>
        <member name="M:Dt.Core.CmdHistory.Clear">
            <summary>
            清空所有撤消、重做的动作
            </summary>
        </member>
        <member name="P:Dt.Core.CmdHistory.CanRedo">
            <summary>
            是否可重做
            </summary>
        </member>
        <member name="P:Dt.Core.CmdHistory.CanUndo">
            <summary>
            是否可撤消
            </summary>
        </member>
        <member name="T:Dt.Core.DataCmd">
            <summary>
            支持命令模式的ViewModel基类
            </summary>
        </member>
        <member name="M:Dt.Core.DataCmd.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:Dt.Core.DataCmd.Title">
            <summary>
            获取设置标题
            </summary>
        </member>
        <member name="P:Dt.Core.DataCmd.Icon">
            <summary>
            获取设置图标(可以为ImageSource, Segoe UI Symbol)
            </summary>
        </member>
        <member name="P:Dt.Core.DataCmd.Note">
            <summary>
            获取设置描述信息
            </summary>
        </member>
        <member name="P:Dt.Core.DataCmd.Callback">
            <summary>
            获取设置命令的回调方法
            </summary>
        </member>
        <member name="P:Dt.Core.DataCmd.CanExec">
            <summary>
            获取设置判断命令是否可执行的回调方法
            </summary>
        </member>
        <member name="P:Dt.Core.DataCmd.Command">
            <summary>
            获取设置要触发执行的命令
            </summary>
        </member>
        <member name="P:Dt.Core.DataCmd.Tag">
            <summary>
            获取设置自定义对象
            </summary>
        </member>
        <member name="M:Dt.Core.DataCmd.Exec">
            <summary>
            执行命令回调
            </summary>
        </member>
        <member name="T:Dt.Core.HisPropertyCmd">
            <summary>
            可撤消和重做的属性变化历史命令
            </summary>
        </member>
        <member name="M:Dt.Core.HisPropertyCmd.#ctor(Dt.Core.CmdHistory)">
            <summary>
            构造方法
            </summary>
            <param name="p_his"></param>
        </member>
        <member name="P:Dt.Core.HisPropertyCmd.IsSetting">
            <summary>
            获取是否正在重置属性值
            </summary>
        </member>
        <member name="M:Dt.Core.HisPropertyCmd.DoExecute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="M:Dt.Core.HisPropertyCmd.DoUndo(System.Object)">
            <summary>
            执行撤消
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="T:Dt.Core.HisPropertyCmdArgs">
            <summary>
            属性变化历史命令参数
            </summary>
        </member>
        <member name="P:Dt.Core.HisPropertyCmdArgs.Redo">
            <summary>
            获取命令的目标对象
            </summary>
        </member>
        <member name="P:Dt.Core.HisPropertyCmdArgs.Undo">
            <summary>
            获取当前命令的目标对象属性变化参数
            </summary>
        </member>
        <member name="T:Dt.Core.RedoCmd">
            <summary>
            重做命令
            </summary>
        </member>
        <member name="M:Dt.Core.RedoCmd.#ctor(Dt.Core.CmdHistory)">
            <summary>
            构造方法
            </summary>
            <param name="p_his"></param>
        </member>
        <member name="M:Dt.Core.RedoCmd.DoExecute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="T:Dt.Core.RelayCommand">
            <summary>
            回调命令类，封装对外部回调方法的调用，与DataCmd配合使用
            </summary>
        </member>
        <member name="M:Dt.Core.RelayCommand.#ctor(Dt.Core.DataCmd)">
            <summary>
            构造方法
            </summary>
            <param name="p_model"></param>
        </member>
        <member name="P:Dt.Core.RelayCommand.Callback">
            <summary>
            获取设置命令的回调方法
            </summary>
        </member>
        <member name="P:Dt.Core.RelayCommand.CanExec">
            <summary>
            获取设置判断命令是否可执行的回调方法
            </summary>
        </member>
        <member name="M:Dt.Core.RelayCommand.RaiseCanExecuteChanged">
            <summary>
            触发CanExecuteChanged事件
            </summary>
        </member>
        <member name="E:Dt.Core.RelayCommand.CanExecuteChanged">
            <summary>
            CanExecute更改时发生
            </summary>
        </member>
        <member name="M:Dt.Core.RelayCommand.CanExecute(System.Object)">
            <summary>
            定义用于确定此命令是否可以在其当前状态下执行的方法
            </summary>
            <param name="parameter">此命令使用的数据</param>
            <returns>如果可以执行此命令，则为 true；否则为 false</returns>
        </member>
        <member name="M:Dt.Core.RelayCommand.Execute(System.Object)">
            <summary>
            调用此命令时调用的方法
            </summary>
            <param name="parameter">命令参数</param>
        </member>
        <member name="T:Dt.Core.UndoCmd">
            <summary>
            撤消命令
            </summary>
        </member>
        <member name="M:Dt.Core.UndoCmd.#ctor(Dt.Core.CmdHistory)">
            <summary>
            构造方法
            </summary>
            <param name="p_his"></param>
        </member>
        <member name="M:Dt.Core.UndoCmd.DoExecute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="T:Dt.Core.EnumDataSource">
            <summary>
            提供枚举类型的集合数据源，主要适用于ComboBox中绑定，两种用法：
            1. EnumDataSource.FromType()返回数据源
            2. new EnumDataSource() { EnumType = typeof(XX) }
            </summary>
        </member>
        <member name="E:Dt.Core.EnumDataSource.CollectionChanged">
            <summary>
            集合变化事件
            </summary>
        </member>
        <member name="M:Dt.Core.EnumDataSource.FromType``1">
            <summary>
            返回EnumMemberViewModel的集合，可以用来绑定到ComboBox的ItemsSource
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <returns>EnumMemberViewModel的可枚举集合</returns>
        </member>
        <member name="M:Dt.Core.EnumDataSource.FromType(System.Type)">
            <summary>
            返回EnumMemberViewModel的集合，可以用来绑定到ComboBox的ItemsSource
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.EnumDataSource.EnumType">
            <summary>
            获取设置枚举类型
            </summary>
        </member>
        <member name="M:Dt.Core.EnumDataSource.GetEnumerator">
            <summary>
            
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Dt.Core.EnumMember">
            <summary>
            单个枚举成员的信息
            </summary>
        </member>
        <member name="M:Dt.Core.EnumMember.#ctor(System.Object,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Dt.Core.EnumMember.Name">
            <summary>
            获取当前枚举成员的名称
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Dt.Core.EnumMember.Value">
            <summary>
            获取当前枚举成员的值
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Dt.Core.EnumMember.ToString">
            <summary>
            返回名称
            </summary>
            <returns>
            名称
            </returns>
        </member>
        <member name="T:Dt.Core.GroupData`1">
            <summary>
            分组数据源集合类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dt.Core.GroupData`1.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Dt.Core.GroupData`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构造方法
            </summary>
            <param name="p_title">组名</param>
            <param name="p_items">数据集合</param>
        </member>
        <member name="P:Dt.Core.GroupData`1.Title">
            <summary>
            获取设置数据源集合的组名
            </summary>
        </member>
        <member name="T:Dt.Core.INotifyList">
            <summary>
            具有集合变化通知的列表
            </summary>
        </member>
        <member name="M:Dt.Core.INotifyList.AddRange(System.Collections.IList)">
            <summary>
            在末尾批量添加数据，统一触发 NotifyCollectionChangedAction.Add
            </summary>
            <param name="p_items"></param>
        </member>
        <member name="M:Dt.Core.INotifyList.InsertRange(System.Int32,System.Collections.IList)">
            <summary>
            在指定的索引处批量插入数据，统一触发 NotifyCollectionChangedAction.Add
            </summary>
            <param name="p_index">插入位置，范围在0到当前总数之间</param>
            <param name="p_items">数据行</param>
        </member>
        <member name="M:Dt.Core.INotifyList.RemoveRange(System.Collections.IList)">
            <summary>
            批量删除给定的行，统一触发 NotifyCollectionChangedAction.Remove
            </summary>
            <param name="p_items">数据行</param>
            <returns>实际删除的行数</returns>
        </member>
        <member name="M:Dt.Core.INotifyList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            批量删除指定范围的行，统一触发 NotifyCollectionChangedAction.Remove
            </summary>
            <param name="p_index">起始索引</param>
            <param name="p_count">行数</param>
        </member>
        <member name="M:Dt.Core.INotifyList.Defer">
            <summary>
            获取延迟触发CollectionChanged事件的控制对象，控制对象Dispose后触发 NotifyCollectionChangedAction.Reset
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.ItemList`1">
            <summary>
            泛型集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Dt.Core.ItemList`1.ItemsChanged">
            <summary>
            集合更改事件
            </summary>
        </member>
        <member name="M:Dt.Core.ItemList`1.Defer">
            <summary>
            延迟触发ItemsChanged事件
            using (_items.Defer())
            {
                _items.Clear();
                foreach (var col in p_cols)
                {
                    _items.Add(col);
                }
            }
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.ItemList`1.Item(System.Int32)">
            <summary>
            返回指定索引的项
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.ItemList`1.Count">
            <summary>
            集合元素总数
            </summary>
        </member>
        <member name="P:Dt.Core.ItemList`1.IsReadOnly">
            <summary>
            集合是否为只读
            </summary>
        </member>
        <member name="M:Dt.Core.ItemList`1.Add(`0)">
            <summary>
            添加新项
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Dt.Core.ItemList`1.Clear">
            <summary>
            清空集合
            </summary>
        </member>
        <member name="M:Dt.Core.ItemList`1.Contains(`0)">
            <summary>
            是否包含指定项
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ItemList`1.CopyTo(`0[],System.Int32)">
            <summary>
            将集合复制到新列表
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Dt.Core.ItemList`1.GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ItemList`1.IndexOf(`0)">
            <summary>
            获取项的索引
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ItemList`1.Insert(System.Int32,`0)">
            <summary>
            在指定位置插入新项
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Dt.Core.ItemList`1.Remove(`0)">
            <summary>
            移除指定项
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ItemList`1.RemoveAt(System.Int32)">
            <summary>
            移除指定索引处的项
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Dt.Core.ItemList`1.RaiseVectorChanged(Windows.Foundation.Collections.CollectionChange,System.Int32)">
            <summary>
            触发集合更改事件
            </summary>
            <param name="change"></param>
            <param name="index"></param>
        </member>
        <member name="P:Dt.Core.ItemList`1.Updating">
            <summary>
            通过Defer()实现延时更新
            </summary>
        </member>
        <member name="T:Dt.Core.ItemListChangedHandler">
            <summary>
            集合更改事件原型
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Core.ItemListChangedArgs">
            <summary>
            集合改变参数
            </summary>
        </member>
        <member name="P:Dt.Core.ItemListChangedArgs.CollectionChange">
            <summary>
            集合更改类型
            </summary>
        </member>
        <member name="P:Dt.Core.ItemListChangedArgs.Index">
            <summary>
            集合更改发生的位置
            </summary>
        </member>
        <member name="T:Dt.Core.Nl`1">
            <summary>
            具有集合变化通知的泛型列表，NotifyList缩写
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dt.Core.Nl`1.#ctor">
            <summary>
            具有集合变化通知的泛型列表
            </summary>
        </member>
        <member name="M:Dt.Core.Nl`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            初始化时复制列表
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Dt.Core.Nl`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化时复制列表
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Dt.Core.Nl`1.AddRange(System.Collections.IList)">
            <summary>
            在末尾批量添加数据，统一触发 NotifyCollectionChangedAction.Add
            </summary>
            <param name="p_items"></param>
        </member>
        <member name="M:Dt.Core.Nl`1.InsertRange(System.Int32,System.Collections.IList)">
            <summary>
            在指定的索引处批量插入数据，统一触发 NotifyCollectionChangedAction.Add
            </summary>
            <param name="p_index">插入位置，范围在0到当前总数之间</param>
            <param name="p_items">数据行</param>
        </member>
        <member name="M:Dt.Core.Nl`1.RemoveRange(System.Collections.IList)">
            <summary>
            批量删除给定的行，统一触发 NotifyCollectionChangedAction.Remove
            </summary>
            <param name="p_items">数据行</param>
            <returns>实际删除的行数</returns>
        </member>
        <member name="M:Dt.Core.Nl`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            批量删除指定范围的行，统一触发 NotifyCollectionChangedAction.Remove
            </summary>
            <param name="p_index">起始索引</param>
            <param name="p_count">行数</param>
        </member>
        <member name="M:Dt.Core.Nl`1.Defer">
            <summary>
            延迟触发CollectionChanged事件
            </summary>
            <returns></returns>
            <example>
            <code>
            using (tbl.Defer())
            {
                foreach (var row in data)
                {
                    tbl.Add(row);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Dt.Core.Nl`1.Updating">
            <summary>
            通过Defer实现延时更新
            </summary>
        </member>
        <member name="M:Dt.Core.Nl`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            重新触发CollectionChanged的方法
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Core.NlEx">
            <summary>
            扩展方法
            </summary>
        </member>
        <member name="M:Dt.Core.NlEx.ToNl``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转换成Nl对象
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Cell">
            <summary>
            客户端数据项
            </summary>
            <summary>
            基础数据项，不可独立构造使用
            注意：string类型时值空为string.Empty，使用时无需考虑null的情况
            </summary>
        </member>
        <member name="E:Dt.Core.Cell.PropertyChanged">
            <summary>
            属性 Val,IsChanged 变化事件
            </summary>
        </member>
        <member name="M:Dt.Core.Cell.#ctor(Dt.Core.Row,System.String,System.Type,System.Object)">
            <summary>
            指定字段名、类型、初始值(可选)，只可通过Row构造
            </summary>
            <param name="p_row">所属行</param>
            <param name="p_cellName">字段名，不可为空，作为键值</param>
            <param name="p_cellType">数据项值的类型</param>
            <param name="p_value">初始值，null时取default值</param>
        </member>
        <member name="P:Dt.Core.Cell.ID">
            <summary>
            获取数据项字段名
            </summary>
        </member>
        <member name="P:Dt.Core.Cell.Type">
            <summary>
            获取数据项值的类型
            </summary>
        </member>
        <member name="P:Dt.Core.Cell.Val">
            <summary>
            获取设置数据项值，主要绑定用！非绑定时设置值请使用 SetVal 方法，内部在处理Hook异常时有区别！！！
            </summary>
        </member>
        <member name="P:Dt.Core.Cell.IsChanged">
            <summary>
            获取当前数据项是否已发生更改。
            </summary>
        </member>
        <member name="P:Dt.Core.Cell.OriginalVal">
            <summary>
            获取该数据项未发生更改前的值
            </summary>
            <remark>
            如果调用 AcceptChanges 方法，则 originalValue 属性的值将变成当前 Val 属性的值
            如果调用了 RejectChanges 方法，则该数据项的值将变为当前 OriginalVal 属性的值
            </remark>
        </member>
        <member name="P:Dt.Core.Cell.Row">
            <summary>
            获取当前列所属的行
            </summary>
        </member>
        <member name="P:Dt.Core.Cell.Tag">
            <summary>
            获取或设置用于存储与此对象相关的任意对象值
            </summary>
        </member>
        <member name="P:Dt.Core.Cell.Hook">
            <summary>
            设置值时的外部钩子，通常为业务处理方法，可通过触发异常的方式使赋值失败
            钩子方法规范：
            私有方法，SetXXX中的XXX为Cell.ID
            一个入参，和Cell.Type相同
            无返回值，不允许外部动态改变赋值，因出问题不好查找，绑定时UI也未回绑
            </summary>
        </member>
        <member name="M:Dt.Core.Cell.AcceptChanges">
            <summary>
            提交自上次调用以来对该数据项进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Core.Cell.RejectChanges">
            <summary>
            回滚自该表加载以来或上次调用 AcceptChanges 以来对该数据项进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Core.Cell.InitVal(System.Object)">
            <summary>
            设置单元格默认值，恢复IsChanged=false状态
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.Cell.SetVal(System.Object)">
            <summary>
            非绑定时设置单元格值，和Val属性在处理Hook异常时有区别！！！
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Core.Cell.GetVal``1">
            <summary>
            获取当前数据项的值
            <para>string类型为null时返回string.Empty</para>
            <para>其它类型为null时返回default(T)，即引用类型返回 null，数值类型返回零</para>
            <para>有其它需要时请自行处理</para>
            <para>另外，只提供从其它类型到int,double,DateTime,string的类型转换</para>
            </summary>
            <typeparam name="T">将值转换为指定的类型</typeparam>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Dt.Core.Cell.GetOriginalVal``1">
            <summary>
            获取原始值
            <para>string类型为null时返回string.Empty</para>
            <para>其它类型为null时返回default(T)，即引用类型返回 null，数值类型返回零</para>
            <para>有其它需要时请自行处理</para>
            <para>另外，只提供从其它类型到int,double,DateTime,string的类型转换</para>
            </summary>
            <typeparam name="T">将值转换为指定的类型</typeparam>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Dt.Core.Cell.ResetType(System.Type)">
            <summary>
            重置数据项的值类型
            </summary>
            <param name="p_tgtType">转换到的目标类型</param>
            <returns>true 重置成功</returns>
        </member>
        <member name="M:Dt.Core.Cell.IsID(System.String[])">
            <summary>
            ID是否匹配给定列表中的任一名称，忽略大小写
            </summary>
            <param name="p_ids">一个或多个id名称</param>
            <returns>true 匹配任一</returns>
        </member>
        <member name="M:Dt.Core.Cell.SetValueInternal(System.Object,System.Boolean,System.Boolean)">
            <summary>
            内部赋值
            </summary>
            <param name="p_val"></param>
            <param name="p_checkChange">是否逐级检查IsChanged状态</param>
            <param name="p_isBinding">是否为绑定状态</param>
        </member>
        <member name="M:Dt.Core.Cell.GetValInternal(System.Object,System.Type)">
            <summary>
            将值转换为指定类型
            </summary>
            <param name="p_val">值</param>
            <param name="p_tgtType">目标类型</param>
            <returns>转换结果</returns>
        </member>
        <member name="T:Dt.Core.Table">
            <summary>
            客户端数据表部分
            </summary>
            <summary>
            数据表，行集合(行为同构)，提供简单的数据表管理功能
            </summary>
        </member>
        <member name="M:Dt.Core.Table.AddRange(System.Collections.IList)">
            <summary>
            在末尾批量添加数据，统一触发 NotifyCollectionChangedAction.Add
            </summary>
            <param name="p_items"></param>
        </member>
        <member name="M:Dt.Core.Table.InsertRange(System.Int32,System.Collections.IList)">
            <summary>
            在指定的索引处批量插入数据，统一触发 NotifyCollectionChangedAction.Add
            </summary>
            <param name="p_index">插入位置，范围在0到当前总数之间</param>
            <param name="p_items">数据行</param>
        </member>
        <member name="M:Dt.Core.Table.RemoveRange(System.Collections.IList)">
            <summary>
            批量删除给定的行，统一触发 NotifyCollectionChangedAction.Reset
            </summary>
            <param name="p_items">数据行</param>
            <returns>实际删除的行数</returns>
        </member>
        <member name="M:Dt.Core.Table.RemoveRange(System.Int32,System.Int32)">
            <summary>
            批量删除指定范围的行，统一触发 NotifyCollectionChangedAction.Remove
            </summary>
            <param name="p_index">起始索引</param>
            <param name="p_count">行数</param>
        </member>
        <member name="M:Dt.Core.Table.Defer">
            <summary>
            延迟触发CollectionChanged事件
            </summary>
            <returns></returns>
            <example>
            <code>
            using (tbl.Defer())
            {
                foreach (var row in data)
                {
                    tbl.Add(row);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Dt.Core.Table.Updating">
            <summary>
            通过Defer实现延时更新
            </summary>
        </member>
        <member name="M:Dt.Core.Table.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            重新触发CollectionChanged的方法
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Dt.Core.Table.Changed">
            <summary>
            内部单元格的值发生变化
            </summary>
        </member>
        <member name="P:Dt.Core.Table.SerializeChanged">
            <summary>
            是否只序列化需要增删改的行
            </summary>
        </member>
        <member name="P:Dt.Core.Table.IsChanged">
            <summary>
            获取是否存在行被修改或删除
            </summary>
        </member>
        <member name="P:Dt.Core.Table.ChangedRows">
            <summary>
            获取数据已被修改的行列表
            </summary>
        </member>
        <member name="P:Dt.Core.Table.ChangedAndAddedRows">
            <summary>
            获取修改的和新增的行列表
            </summary>
        </member>
        <member name="P:Dt.Core.Table.Columns">
            <summary>
            列结构集合
            </summary>
        </member>
        <member name="P:Dt.Core.Table.ExistAdded">
            <summary>
            获取是否存在新增的行
            </summary>
        </member>
        <member name="P:Dt.Core.Table.Tag">
            <summary>
            获取设置用于存储与此对象相关的任意对象值
            </summary>
        </member>
        <member name="M:Dt.Core.Table.Add(System.String,System.Type)">
            <summary>
            添加列，主要为支持手动创建Table时初始化器的写法！如：
            Table tbl = new Table
            {
                { "id" },
                { "xm" },
                { "bh", typeof(int)
            };
            </summary>
            <param name="p_colName">列名</param>
            <param name="p_colType">列数据类型, 默认typeof(string)</param>
        </member>
        <member name="M:Dt.Core.Table.Create(System.String)">
            <summary>
            根据表名创建空Table
            </summary>
            <param name="p_tblName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.Create(Dt.Core.Table)">
            <summary>
            通过复制创建空Table（不复制数据！）
            </summary>
            <param name="p_tbl"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.Create(Dt.Core.Row)">
            <summary>
            根据行创建空Table
            </summary>
            <param name="p_row"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.Create(System.IO.Stream)">
            <summary>
            根据json文件流内容创建Table对象
            </summary>
            <param name="p_stream">json流</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.Create``1(System.IO.Stream)">
            <summary>
            根据json流内容创建Table对象
            </summary>
            <typeparam name="T">Table类型</typeparam>
            <param name="p_stream"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.CreateFromJson(System.String)">
            <summary>
            根据json字符串创建Table对象
            </summary>
            <param name="p_json"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.CreateFromJson``1(System.String)">
            <summary>
            根据json字符串创建Table对象
            </summary>
            <typeparam name="T">Table类型</typeparam>
            <param name="p_json"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.AddRow(System.Object)">
            <summary>
            添加新行并设置初始值，参数null时为空行
            <para>有参数时将参数的属性值作为初始值，前提是属性名和列名相同(不区分大小写)且类型相同</para>
            <para>支持匿名对象，主要为简化编码</para>
            <para>不再支持多参数按顺序赋值！</para>
            </summary>
            <param name="p_init">含初始值的对象，一般为匿名对象</param>
            <returns>返回新行</returns>
        </member>
        <member name="M:Dt.Core.Table.NewRow(System.Object)">
            <summary>
            创建独立行并设置初始值，未添加到当前Table！已设置IsAdded标志！参数null时为空行
            <para>有参数时将参数的属性值作为初始值，前提是属性名和列名相同(不区分大小写)且类型相同</para>
            <para>支持匿名对象，主要为简化编码</para>
            <para>不再支持多参数按顺序赋值！</para>
            </summary>
            <param name="p_init">含初始值的对象，一般为匿名对象</param>
            <returns>返回独立行</returns>
        </member>
        <member name="M:Dt.Core.Table.NewRow(System.String,System.Object)">
            <summary>
            创建独立行并设置初始值，已设置IsAdded标志！参数null时为空行
            <para>有参数时将参数的属性值作为初始值，前提是属性名和列名相同(不区分大小写)且类型相同</para>
            <para>支持匿名对象，主要为简化编码</para>
            </summary>
            <param name="p_tblName">表名</param>
            <param name="p_init">含初始值的对象，一般为匿名对象</param>
            <returns>返回独立行</returns>
        </member>
        <member name="M:Dt.Core.Table.Add(Dt.Core.Row)">
            <summary>
            将行添加到表，不检查结构，不改变状态
            </summary>
            <param name="p_row"></param>
        </member>
        <member name="M:Dt.Core.Table.Insert(System.Int32,Dt.Core.Row)">
            <summary>
            插入行，不检查结构，不改变状态
            </summary>
            <param name="p_index"></param>
            <param name="p_row"></param>
        </member>
        <member name="M:Dt.Core.Table.Remove(Dt.Core.Row)">
            <summary>
            删除行，更新数据变化状态
            </summary>
            <param name="p_row">行实体</param>
        </member>
        <member name="M:Dt.Core.Table.RemoveAt(System.Int32)">
            <summary>
            删除行，更新数据变化状态
            </summary>
            <param name="p_index"></param>
        </member>
        <member name="M:Dt.Core.Table.Clear">
            <summary>
            清空所有行
            </summary>
        </member>
        <member name="M:Dt.Core.Table.ResetType(System.String,System.Type)">
            <summary>
            重置列类型
            </summary>
            <param name="p_colName">列名</param>
            <param name="p_tgtType">转换到的目标类型</param>
            <returns>true 重置成功</returns>
        </member>
        <member name="M:Dt.Core.Table.AcceptChanges">
            <summary>
            提交自上次调用以来对该表进行的所有更改，清空已删除的行，重置各行IsAdded和IsChanged状态
            </summary>
        </member>
        <member name="M:Dt.Core.Table.RejectChanges">
            <summary>
            回滚自该表加载以来或上次调用以来对该表进行的所有更改，恢复所有被删除的行。
            </summary>
        </member>
        <member name="M:Dt.Core.Table.Clone">
            <summary>
            深度克隆表结构及数据，返回同类型的Table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.CloneTo``1">
            <summary>
            将表结构及数据深度克隆到新实体类型的表，返回新实体表，一般类型转换时用
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>返回新实体表</returns>
        </member>
        <member name="M:Dt.Core.Table.CloneTo(System.Type)">
            <summary>
            将表结构及数据深度克隆到新实体类型的表，返回新实体表，一般类型转换时用
            </summary>
            <param name="p_rowType">实体类型</param>
            <returns>返回新实体表</returns>
        </member>
        <member name="M:Dt.Core.Table.CheckChanges">
            <summary>
            检查当前行数据是否有变化
            </summary>
        </member>
        <member name="M:Dt.Core.Table.OnValueChanged(Dt.Core.Cell)">
            <summary>
            触发单元格值变化事件
            </summary>
            <param name="p_cell"></param>
        </member>
        <member name="M:Dt.Core.Table.CreateRowInstance">
            <summary>
            创建行，重写可创建Row的派生行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.GetColTypeAlias(System.Type)">
            <summary>
            Type -> string，大小写敏感
            </summary>
            <param name="p_type"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.GetColType(System.String)">
            <summary>
            string -> Type，大小写敏感
            </summary>
            <param name="p_name"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table.CreateMatrix(System.String,System.String,System.String)">
            <summary>
            将当前表数据转成矩阵形式的表，如：
            xm       subject    score
            张建国   语文       35
            张建国   数学       78
            张建国   外语       87
            于凤琴   语文       98
            于凤琴   数学       86
            于凤琴   外语       68
            
            转成
            
            xm       语文    数学    外语
            张建国   35      78      87
            于凤琴   98      86      68
            </summary>
            <param name="p_rowHeader">行头列名</param>
            <param name="p_colHeader">自动创建列的列名</param>
            <param name="p_valCol">取值列名</param>
            <returns>转置后的Table</returns>
        </member>
        <member name="M:Dt.Core.Table.StartRecordDelRows">
            <summary>
            开始记录被删除的行，IsAdded为true的行不参加，当被删除的行重新添加时移除记录
            </summary>
        </member>
        <member name="M:Dt.Core.Table.StopRecordDelRows">
            <summary>
            停止记录被删除的行
            </summary>
        </member>
        <member name="P:Dt.Core.Table.DeletedRows">
            <summary>
            获取已被删除的行列表
            </summary>
        </member>
        <member name="P:Dt.Core.Table.ExistDeleted">
            <summary>
            获取是否存在被删除的行
            </summary>
        </member>
        <member name="M:Dt.Core.Table.Dt#Core#IRpcJson#ReadRpcJson(System.Text.Json.Utf8JsonReader@)">
            <summary>
            反序列化读取Rpc Json数据
            </summary>
        </member>
        <member name="M:Dt.Core.Table.Dt#Core#IRpcJson#WriteRpcJson(System.Text.Json.Utf8JsonWriter)">
            <summary>
            将对象按照Rpc Json数据结构进行序列化
            </summary>
        </member>
        <member name="M:Dt.Core.Table.SerializeJsonRow(Dt.Core.Row,System.Text.Json.Utf8JsonWriter)">
            <summary>
            序列化行数据
            </summary>
            <param name="p_dataRow"></param>
            <param name="p_writer"></param>
        </member>
        <member name="T:Dt.Core.DataProvider`1">
            <summary>
            客户端数据提供者，和服务端DataProvider方法基本相同
            </summary>
            <typeparam name="TSvc">类型名称当服务名用</typeparam>
        </member>
        <member name="M:Dt.Core.DataProvider`1.Query(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回结果集
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回Table数据</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.Query``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回实体列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回实体列表</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.GetAll``1">
            <summary>
            返回所有实体列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.GetPage(System.Int32,System.Int32,System.String,System.Object)">
            <summary>
            按页查询数据
            </summary>
            <param name="p_starRow">起始行号：mysql中第一行为0行</param>
            <param name="p_pageSize">每页显示行数</param>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回Table数据</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.GetPage``1(System.Int32,System.Int32,System.String,System.Object)">
            <summary>
            按页查询数据
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_starRow">起始行号：mysql中第一行为0行</param>
            <param name="p_pageSize">每页显示行数</param>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回Table数据集</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.GetScalar``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，只返回第一个单元格数据
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一个单元格数据</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.First(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，只返回第一行数据
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一行Row或null</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.First``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回第一个实体对象，实体属性由Sql决定，不存在时返回null
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回实体对象或null</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.FirstCol``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回符合条件的第一列数据，并转换为指定类型
            </summary>
            <typeparam name="T">第一列数据类型</typeparam>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一列数据的泛型列表</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.GetByID``1(System.String)">
            <summary>
            根据主键获得实体对象(包含所有列值)，仅支持单主键id，不存在时返回null
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_id">主键</param>
            <returns>返回实体对象或null</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.GetByID``1(System.Int64)">
            <summary>
            根据主键获得实体对象(包含所有列值)，仅支持单主键id，不存在时返回null
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_id">主键</param>
            <returns>返回实体对象或null</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.NewID(System.Int32)">
            <summary>
            获取新ID，默认无标志位
            </summary>
            <param name="p_flag">取值范围0-7时，将产生含3位标志位的新ID，如userid采用标志位可识别出用户类型，默认无标志位</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.NewSeq(System.String)">
            <summary>
            获取新序列值
            </summary>
            <param name="p_seqName">序列名称，不可为空</param>
            <returns>新序列值</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.Save``1(``0,System.Boolean)">
            <summary>
            保存实体数据
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_entity">待保存的实体</param>
            <param name="p_isNotify">是否提示保存结果</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.BatchSave(System.Collections.IList,System.Boolean)">
            <summary>
            一个事务内批量保存实体数据，根据实体状态执行增改，Table&lt;Entity&gt;支持删除，列表类型支持：
            <para>Table&lt;Entity&gt;，单表增删改</para>
            <para>List&lt;Entity&gt;，单表增改</para>
            <para>IList，多表增删改，成员可为Entity,List&lt;Entity&gt;,Table&lt;Entity&gt;的混合</para>
            </summary>
            <param name="p_list">待保存列表</param>
            <param name="p_isNotify">是否提示保存结果</param>
            <returns>true 保存成功</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.SaveBySvc``1(``0,System.Boolean)">
            <summary>
            将实体数据传输到服务端，由服务端DataProvider保存实体，用于需要触发领域事件或同步缓存的情况
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_entity">待保存的实体</param>
            <param name="p_isNotify">是否提示保存结果</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.BatchSaveSameType(System.Collections.IList,System.Boolean)">
            <summary>
            单表增删改，列表中的实体类型相同
            </summary>
            <param name="p_list"></param>
            <param name="p_isNotify"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.BatchSaveMultiTypes(System.Collections.IList,System.Boolean)">
            <summary>
            多表增删改
            </summary>
            <param name="p_list"></param>
            <param name="p_isNotify"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.OnSaving(Dt.Core.EntitySchema,System.Object)">
            <summary>
            保存前外部校验，不合格在外部抛出异常
            </summary>
            <param name="p_model"></param>
            <param name="p_entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.Delete``1(``0,System.Boolean)">
            <summary>
            删除实体，依靠数据库的级联删除自动删除子实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_entity">待删除的行</param>
            <param name="p_isNotify">是否提示删除结果</param>
            <returns>true 删除成功</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.BatchDelete(System.Collections.IList,System.Boolean)">
            <summary>
            批量删除实体，单表或多表，列表类型支持：
            <para>Table&lt;Entity&gt;，单表删除</para>
            <para>List&lt;Entity&gt;，单表删除</para>
            <para>IList，多表删除，成员可为Entity,List&lt;Entity&gt;,Table&lt;Entity&gt;的混合</para>
            </summary>
            <param name="p_list">待删除实体列表</param>
            <param name="p_isNotify">是否提示删除结果</param>
            <returns>true 删除成功</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.DeleteBySvc``1(``0,System.Boolean)">
            <summary>
            将实体数据传输到服务端，由服务端DataProvider删除实体，用于需要触发领域事件或同步缓存的情况
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_entity">待删除的行</param>
            <param name="p_isNotify">是否提示删除结果</param>
            <returns>true 删除成功</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.DelByID``1(System.String,System.Boolean)">
            <summary>
            根据主键删除实体对象，仅支持单主键id，依靠数据库的级联删除自动删除子实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_id">主键</param>
            <param name="p_isNotify">是否提示删除结果</param>
            <returns>true 删除成功</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.DelByID``1(System.Int64,System.Boolean)">
            <summary>
            根据主键删除实体对象，仅支持单主键id，依靠数据库的级联删除自动删除子实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_id">主键</param>
            <param name="p_isNotify">是否提示删除结果</param>
            <returns>true 删除成功</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.BatchDeleteSameType(System.Collections.IList,System.Boolean)">
            <summary>
            单表批量删除
            </summary>
            <param name="p_list"></param>
            <param name="p_isNotify"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.BatchDeleteMultiTypes(System.Collections.IList,System.Boolean)">
            <summary>
            多表批量删除
            </summary>
            <param name="p_list"></param>
            <param name="p_isNotify"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.OnDeleting(Dt.Core.EntitySchema,System.Object)">
            <summary>
            删除前外部校验，不合格在外部抛出异常
            </summary>
            <param name="p_model"></param>
            <param name="p_entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.Exec(System.String,System.Object)">
            <summary>
            一个事务内执行Sql语句，返回影响的行数，p_params为IEnumerable时执行批量操作
            </summary>
            <param name="p_keyOrSql">Sql字典中的键名(无空格) 或 Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，为IEnumerable时执行批量操作</param>
            <returns>返回执行后影响的行数</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.BatchExec(System.Collections.Generic.List{Dt.Core.Dict})">
            <summary>
            一个事务内执行多个Sql
            </summary>
            <param name="p_dts">参数列表，每个Dict中包含两个键：text,params，text为sql语句params类型为Dict或List{Dict}</param>
            <returns>返回执行后影响的行数</returns>
        </member>
        <member name="M:Dt.Core.DataProvider`1.ExchangeDispidx``1(``0,``0)">
            <summary>
            互换两行的显示位置，确保包含 id,dispidx 列
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_src"></param>
            <param name="p_tgt"></param>
            <returns>true 互换成功</returns>
        </member>
        <member name="T:Dt.Core.Entity">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="M:Dt.Core.Entity.AttachHook">
            <summary>
            反序列化时附加Hook方法
            </summary>
        </member>
        <member name="M:Dt.Core.Entity.Equals(System.Object)">
            <summary>
            判断两实体是否相同
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Entity.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Dt.Core.Entity.ToString">
            <summary>
            输出实体描述
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.AliasAttribute">
            <summary>
            基类属性
            </summary>
        </member>
        <member name="P:Dt.Core.AliasAttribute.Alias">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="M:Dt.Core.AliasAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="p_alias">名称</param>
        </member>
        <member name="T:Dt.Core.ViewAttribute">
            <summary>
            视图类属性
            </summary>
        </member>
        <member name="M:Dt.Core.ViewAttribute.#ctor(System.String)">
            <summary>
            构造视图类属性
            </summary>
            <param name="p_alias">名称</param>
        </member>
        <member name="T:Dt.Core.JsonObjAttribute">
            <summary>
            可序列化类型
            </summary>
        </member>
        <member name="P:Dt.Core.JsonObjAttribute.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.JsonObjAttribute.#ctor(System.String)">
            <summary>
            构造可序列化类型
            </summary>
            <param name="p_alias">名称</param>
        </member>
        <member name="T:Dt.Core.TargetSystem">
            <summary>
            系统平台种类
            </summary>
        </member>
        <member name="F:Dt.Core.TargetSystem.Windows">
            <summary>
            Windows系统
            </summary>
        </member>
        <member name="F:Dt.Core.TargetSystem.iOS">
            <summary>
            iphone
            </summary>
        </member>
        <member name="F:Dt.Core.TargetSystem.Android">
            <summary>
            安卓系统
            </summary>
        </member>
        <member name="F:Dt.Core.TargetSystem.Web">
            <summary>
            Webassembly系统
            </summary>
        </member>
        <member name="T:Dt.Core.TraceOutType">
            <summary>
            输出信息的种类
            </summary>
        </member>
        <member name="F:Dt.Core.TraceOutType.Normal">
            <summary>
            普通信息
            </summary>
        </member>
        <member name="F:Dt.Core.TraceOutType.RpcCall">
            <summary>
            远程调用请求信息
            </summary>
        </member>
        <member name="F:Dt.Core.TraceOutType.RpcRecv">
            <summary>
            远程调用响应信息
            </summary>
        </member>
        <member name="F:Dt.Core.TraceOutType.WsCall">
            <summary>
            WebSocket远程调用
            </summary>
        </member>
        <member name="F:Dt.Core.TraceOutType.WsRecv">
            <summary>
            WebSocket响应信息
            </summary>
        </member>
        <member name="F:Dt.Core.TraceOutType.ServerPush">
            <summary>
            服务器推送
            </summary>
        </member>
        <member name="F:Dt.Core.TraceOutType.RpcException">
            <summary>
            远程调用异常信息
            </summary>
        </member>
        <member name="F:Dt.Core.TraceOutType.UnhandledException">
            <summary>
            未处理异常信息
            </summary>
        </member>
        <member name="T:Dt.Core.ICallback">
            <summary>
            系统回调接口
            </summary>
        </member>
        <member name="M:Dt.Core.ICallback.Login(System.Boolean)">
            <summary>
            显示登录页面
            </summary>
            <param name="p_isPopup">是否为弹出式</param>
        </member>
        <member name="M:Dt.Core.ICallback.Logout">
            <summary>
            注销后重新登录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ICallback.Confirm(System.String,System.String)">
            <summary>
            显示确认对话框
            </summary>
            <param name="p_content">消息内容</param>
            <param name="p_title">标题</param>
            <returns>true表确认</returns>
        </member>
        <member name="M:Dt.Core.ICallback.Error(System.String,System.String)">
            <summary>
            显示错误对话框
            </summary>
            <param name="p_content">消息内容</param>
            <param name="p_title">标题</param>
        </member>
        <member name="M:Dt.Core.ICallback.ShowTraceBox">
            <summary>
            显示监视窗口
            </summary>
        </member>
        <member name="M:Dt.Core.ICallback.OnSuspending">
            <summary>
            挂起时的处理，必须耗时小！
            手机或PC平板模式下不占据屏幕时触发，此时不确定被终止还是可恢复
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ICallback.OnResuming">
            <summary>
            恢复会话时的处理，手机或PC平板模式下再次占据屏幕时触发
            </summary>
        </member>
        <member name="T:Dt.Core.ICell">
            <summary>
            单元格数据接口
            </summary>
        </member>
        <member name="E:Dt.Core.ICell.PropertyChanged">
            <summary>
            属性 Val,IsChanged 变化事件
            </summary>
        </member>
        <member name="P:Dt.Core.ICell.ID">
            <summary>
            获取数据项名称
            </summary>
        </member>
        <member name="P:Dt.Core.ICell.Type">
            <summary>
            获取数据项值的类型
            </summary>
        </member>
        <member name="P:Dt.Core.ICell.Val">
            <summary>
            获取设置数据项值
            </summary>
        </member>
        <member name="P:Dt.Core.ICell.IsChanged">
            <summary>
            获取当前数据项是否已发生更改。
            </summary>
        </member>
        <member name="P:Dt.Core.ICell.OriginalVal">
            <summary>
            获取该数据项未发生更改前的值
            </summary>
        </member>
        <member name="M:Dt.Core.ICell.AcceptChanges">
            <summary>
            提交自上次调用以来对该数据项进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Core.ICell.RejectChanges">
            <summary>
            回滚自该表加载以来或上次调用 AcceptChanges 以来对该数据项进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Core.ICell.GetVal``1">
            <summary>
            获取当前数据项的值
            </summary>
            <typeparam name="T">将值转换为指定的类型</typeparam>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Dt.Core.ICell.IsID(System.String[])">
            <summary>
            ID是否匹配给定列表中的任一名称，忽略大小写
            </summary>
            <param name="p_ids">一个或多个id名称</param>
            <returns>true 匹配任一</returns>
        </member>
        <member name="T:Dt.Core.IStub">
            <summary>
            系统存根接口
            </summary>
        </member>
        <member name="P:Dt.Core.IStub.ServerUrl">
            <summary>
            服务器地址，末尾不包含'/'
            </summary>
        </member>
        <member name="P:Dt.Core.IStub.Title">
            <summary>
            系统标题
            </summary>
        </member>
        <member name="P:Dt.Core.IStub.LoginPage">
            <summary>
            登录页面
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.IStub.OnStartup(Dt.Core.StartupInfo)">
            <summary>
            系统启动
            </summary>
            <param name="p_info">提示信息</param>
        </member>
        <member name="M:Dt.Core.IStub.ReceiveShare(Dt.Core.ShareInfo)">
            <summary>
            接收分享内容
            </summary>
            <param name="p_info">分享内容描述</param>
        </member>
        <member name="M:Dt.Core.IStub.OnLogout">
            <summary>
            系统注销时的处理
            </summary>
        </member>
        <member name="M:Dt.Core.IStub.OnSuspending">
            <summary>
            挂起时的处理，必须耗时小！
            手机或PC平板模式下不占据屏幕时触发，此时不确定被终止还是可恢复
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.IStub.OnResuming">
            <summary>
            恢复会话时的处理，手机或PC平板模式下再次占据屏幕时触发
            </summary>
        </member>
        <member name="P:Dt.Core.IStub.ViewTypes">
            <summary>
            视图字典
            </summary>
        </member>
        <member name="P:Dt.Core.IStub.PushHandlers">
            <summary>
            处理服务器推送的类型字典
            </summary>
        </member>
        <member name="P:Dt.Core.IStub.SerializeTypes">
            <summary>
            自定义可序列化类型字典
            </summary>
        </member>
        <member name="P:Dt.Core.IStub.SqliteDb">
            <summary>
            本地库的结构信息，键为小写的库文件名(不含扩展名)，值为该库信息，包括版本号和表结构的映射类型
            </summary>
        </member>
        <member name="T:Dt.Core.ITreeData">
            <summary>
            树状数据接口
            </summary>
        </member>
        <member name="M:Dt.Core.ITreeData.GetTreeRoot">
            <summary>
            获取树根节点数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ITreeData.GetTreeItemChildren(System.Object)">
            <summary>
            获取指定节点的子节点数据
            </summary>
            <param name="p_parent"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.AsyncLocker">
            <summary>
            异步资源锁，用法：
            AsyncLocker _locker = new AsyncLocker();
            using (await _locker.LockAsync())
            {
                await Func();
            }
            </summary>
        </member>
        <member name="M:Dt.Core.AsyncLocker.LockAsync">
            <summary>
            异步加锁
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.AsyncLocker.IsLocked">
            <summary>
            当前是否已锁定
            </summary>
        </member>
        <member name="T:Dt.Core.Locker">
            <summary>
            资源锁
            </summary>
        </member>
        <member name="M:Dt.Core.Locker.Lock">
            <summary>
            加锁
            </summary>
        </member>
        <member name="M:Dt.Core.Locker.Unlock">
            <summary>
            解锁
            </summary>
        </member>
        <member name="M:Dt.Core.Locker.DoLockedAction(System.Action)">
            <summary>
            锁定并执行调用方法
            </summary>
            <param name="action">调用方法</param>
        </member>
        <member name="M:Dt.Core.Locker.DoIfNotLocked(System.Action)">
            <summary>
            若未有锁则执行方法
            </summary>
            <param name="action">调用方法</param>
        </member>
        <member name="P:Dt.Core.Locker.IsLocked">
            <summary>
            当前是否已锁定
            </summary>
        </member>
        <member name="T:Dt.Core.Model.ClientLog">
            <summary>
            客户端日志
            </summary>
        </member>
        <member name="P:Dt.Core.Model.ClientLog.ID">
            <summary>
            日志主键
            </summary>
        </member>
        <member name="P:Dt.Core.Model.ClientLog.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Dt.Core.Model.ClientLog.Content">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Dt.Core.Model.ClientLog.Ctime">
            <summary>
            日志记录时间
            </summary>
        </member>
        <member name="T:Dt.Core.Model.LogEventLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Dt.Core.Model.LogEventLevel.Debug">
            <summary>
            调试级别日志
            </summary>
        </member>
        <member name="F:Dt.Core.Model.LogEventLevel.Warning">
            <summary>
            警告级别日志
            </summary>
        </member>
        <member name="F:Dt.Core.Model.LogEventLevel.Error">
            <summary>
            错误级别日志
            </summary>
        </member>
        <member name="T:Dt.Core.Model.ClientCookie">
            <summary>
            客户端Cookie字典
            </summary>
        </member>
        <member name="P:Dt.Core.Model.ClientCookie.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Dt.Core.Model.ClientCookie.Val">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Dt.Core.Model.DataVersion">
            <summary>
            用户缓存数据的版本号
            </summary>
        </member>
        <member name="P:Dt.Core.Model.DataVersion.ID">
            <summary>
            数据类型，如菜单、权限等
            </summary>
        </member>
        <member name="P:Dt.Core.Model.DataVersion.Ver">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:Dt.Core.Model.OmColumn">
            <summary>
            系统列定义，在模型库中
            </summary>
        </member>
        <member name="P:Dt.Core.Model.OmColumn.ID">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Dt.Core.Model.OmColumn.TabName">
            <summary>
            所属表名
            </summary>
        </member>
        <member name="P:Dt.Core.Model.OmColumn.ColName">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Dt.Core.Model.OmColumn.DbType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Dt.Core.Model.OmColumn.IsPrimary">
            <summary>
            是否为主键
            </summary>
        </member>
        <member name="P:Dt.Core.Model.OmColumn.Length">
            <summary>
            列长度，只字符类型有效
            </summary>
        </member>
        <member name="P:Dt.Core.Model.OmColumn.Nullable">
            <summary>
            列是否允许为空
            </summary>
        </member>
        <member name="P:Dt.Core.Model.OmColumn.Comments">
            <summary>
            列注释
            </summary>
        </member>
        <member name="T:Dt.Core.Model.UserParams">
            <summary>
            用户参数
            </summary>
        </member>
        <member name="T:Dt.Core.Model.UserPrivilege">
            <summary>
            用户具有的权限
            </summary>
        </member>
        <member name="P:Dt.Core.Model.UserPrivilege.Prv">
            <summary>
            权限
            </summary>
        </member>
        <member name="T:Dt.Core.Log">
            <summary>
            客户端日志，用法和服务端Serilog一致
            </summary>
        </member>
        <member name="M:Dt.Core.Log.Debug(System.String)">
            <summary>
            输出调试级别日志，不保存
            </summary>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Core.Log.Debug(System.Exception,System.String)">
            <summary>
            输出调试级别日志，不保存
            </summary>
            <param name="p_ex"></param>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Core.Log.Warning(System.String)">
            <summary>
            输出并保存警告级别日志
            </summary>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Core.Log.Warning(System.Exception,System.String)">
            <summary>
            输出并保存警告级别日志
            </summary>
            <param name="p_ex"></param>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Core.Log.Error(System.String)">
            <summary>
            输出并保存错误级别日志
            </summary>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Core.Log.Error(System.Exception,System.String)">
            <summary>
            输出并保存错误级别日志
            </summary>
            <param name="p_ex"></param>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Core.Log.OutputAndSave(Dt.Core.Model.LogEventLevel,System.String,System.Exception)">
            <summary>
            输出并保存客户端日志
            </summary>
            <param name="p_level"></param>
            <param name="p_msg"></param>
            <param name="p_ex"></param>
        </member>
        <member name="T:Dt.Core.Sqlite.SqliteAttribute">
            <summary>
            类型和sqlite表的映射
            </summary>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteAttribute.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="p_dbName">sqlite库文件名，不包括扩展名</param>
        </member>
        <member name="P:Dt.Core.Sqlite.SqliteAttribute.DbName">
            <summary>
            sqlite库文件名，小写不包括扩展名
            </summary>
        </member>
        <member name="T:Dt.Core.Sqlite.PrimaryKeyAttribute">
            <summary>
            主键标签
            </summary>
        </member>
        <member name="T:Dt.Core.Sqlite.AutoIncrementAttribute">
            <summary>
            字段自增标签
            </summary>
        </member>
        <member name="T:Dt.Core.Sqlite.IndexedAttribute">
            <summary>
            索引列标签
            </summary>
        </member>
        <member name="T:Dt.Core.Sqlite.IgnoreAttribute">
            <summary>
            此属性不映射字段标签
            </summary>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteCommandEx.ExecuteQuery``1">
            <summary>
            执行查询，返回数据集
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteCommandEx.ExecuteQuery">
            <summary>
            执行查询，返回数据集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteCommandEx.ForEach``1">
            <summary>
            延时返回查询对象，利于性能提升
            </summary>
            <typeparam name="TRow"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteCommandEx.ExecuteScalar``1">
            <summary>
            取得查询数据库中单个值。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteCommandEx.GetFirstCol``1">
            <summary>
            返回第一列数据，并转换为指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteCommandEx.EachFirstCol``1">
            <summary>
            返回第一列枚举，高性能
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Sqlite.SqliteConnectionEx">
            <summary>
            SqliteConnection功能扩展类
            </summary>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.Query(System.String,System.Object)">
            <summary>
            SQL查询，返回Table
            </summary>
            <param name="p_sql">sql语句</param>
            <param name="p_params">参数值列表</param>
            <returns>Table</returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.Query``1(System.String,System.Object)">
            <summary>
            SQL查询，返回对象列表
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <param name="p_sql">sql语句</param>
            <param name="p_params">参数值列表</param>
            <returns>对象列表</returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.ForEach``1(System.String,System.Object)">
            <summary>
            查询，返回可枚举对象列表
            </summary>
            <typeparam name="TRow"></typeparam>
            <param name="p_sql"></param>
            <param name="p_params"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.GetScalar``1(System.String,System.Object)">
            <summary>
            查询单个值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_sql"></param>
            <param name="p_params"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.GetFirstCol``1(System.String,System.Object)">
            <summary>
            返回符合条件的第一列数据，并转换为指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_sql"></param>
            <param name="p_params"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.EachFirstCol``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回第一列枚举，高性能
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_sql"></param>
            <param name="p_params"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.QueryTblsName">
            <summary>
            获取库中的所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.Save``1(``0)">
            <summary>
            保存实体数据，根据实体状态确定插入或更新
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="p_entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.BatchSave(System.Collections.IList)">
            <summary>
            一个事务内批量保存实体数据，根据实体状态执行增改，Table&lt;Entity&gt;支持删除，列表类型支持：
            <para>Table&lt;Entity&gt;，单表增删改</para>
            <para>List&lt;Entity&gt;，单表增改</para>
            <para>IList，多表增删改，成员可为Entity,List&lt;Entity&gt;,Table&lt;Entity&gt;的混合</para>
            </summary>
            <param name="p_list">待保存列表</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.Delete``1(``0)">
            <summary>
            删除实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_entity">待删除的行</param>
            <returns>true 删除成功</returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.DelByPK``1(System.Object)">
            <summary>
            根据主键删除实体对象，仅支持单主键，主键列名内部确定
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_id">主键值</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.BatchDelete(System.Collections.IList)">
            <summary>
            批量删除实体，单表或多表，列表类型支持：
            <para>Table&lt;Entity&gt;，单表删除</para>
            <para>List&lt;Entity&gt;，单表删除</para>
            <para>IList，多表删除，成员可为Entity,List&lt;Entity&gt;,Table&lt;Entity&gt;的混合</para>
            </summary>
            <param name="p_list">待删除实体列表</param>
            <returns>true 删除成功</returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.Execute(System.String,System.Object)">
            <summary>
            执行查询操作，返回影响的数据行数
            </summary>
            <param name="p_sql"></param>
            <param name="p_params"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.BatchExecute(System.String,System.Collections.Generic.List{Dt.Core.Dict})">
            <summary>
            批量执行
            </summary>
            <param name="p_sql"></param>
            <param name="p_list"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.RunInTransaction(System.Action)">
            <summary>
            在事务中执行过程
            </summary>
            <param name="p_action"></param>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.InitDb(System.Collections.Generic.IList{System.Type})">
            <summary>
            初始化库表结构
            </summary>
            <param name="p_types">映射类型</param>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.CreateTable(System.Type)">
            <summary>
            根据类型创建表结构
            </summary>
            <param name="p_type"></param>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.GetMapping(System.Type)">
            <summary>
            根据类型获取TableMapping
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.GetColVal(Dt.Core.Row,Dt.Core.Sqlite.TableMapping.Column)">
            <summary>
            获取列值
            </summary>
            <param name="p_row"></param>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteConnectionEx.WrapParams(Microsoft.Data.Sqlite.SqliteParameterCollection,System.Object)">
            <summary>
            重新包装sqlitecommand的参数
            </summary>
            <param name="p_collection"></param>
            <param name="p_param"></param>
        </member>
        <member name="T:Dt.Core.Sqlite.SqliteEntitySchema">
            <summary>
            实体结构定义
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.SqliteEntitySchema.OnSaving">
            <summary>
            保存前的处理，抛出异常时取消保存，实体中的方法规范：私有方法OnSaving，无入参，返回值void 或 Task
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.SqliteEntitySchema.OnDeleting">
            <summary>
            删除前的处理，抛出异常时取消删除，实体中的方法规范：私有方法OnDeleting，无入参，返回值void 或 Task
            </summary>
        </member>
        <member name="M:Dt.Core.Sqlite.SqliteEntitySchema.Get(System.Type)">
            <summary>
            获取实体类型的定义
            </summary>
            <param name="p_type">实体类型</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Sqlite.TableMapping">
            <summary>
            表与类的映射ORM
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.Columns">
            <summary>
            所有列
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.PK">
            <summary>
            主键列
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.SqlGetByPK">
            <summary>
            根据主键列获取数据的sql
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.HasAutoIncPK">
            <summary>
            是否有自增主键
            </summary>
        </member>
        <member name="M:Dt.Core.Sqlite.TableMapping.SetAutoIncPK(System.Object,System.Int64)">
            <summary>
            设置自增主键的值
            </summary>
            <param name="obj"></param>
            <param name="id"></param>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.InsertColumns">
            <summary>
            获取除自增列外的所有列
            </summary>
        </member>
        <member name="M:Dt.Core.Sqlite.TableMapping.FindColumnWithPropertyName(System.String)">
            <summary>
            查找列
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.TableMapping.FindColumn(System.String)">
            <summary>
            查找列
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.TableMapping.GetCreateSql">
            <summary>
            获取create table语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.TableMapping.GetInsertSql(System.Boolean)">
            <summary>
            获取insert语句
            </summary>
            <param name="p_autoUpdate">是否包含OR REPLACE</param>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.Column.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.Column.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.Column.ColumnType">
            <summary>
            列类型
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.Column.IsAutoInc">
            <summary>
            是否为自增列
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.Column.IsPK">
            <summary>
            是否为主键列
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.Column.Indices">
            <summary>
            列的所有索引项
            </summary>
        </member>
        <member name="P:Dt.Core.Sqlite.TableMapping.Column.IsNullable">
            <summary>
            列是否可空
            </summary>
        </member>
        <member name="M:Dt.Core.Sqlite.TableMapping.SqlDecl(Dt.Core.Sqlite.TableMapping.Column)">
            <summary>
            获取创建表时列的描述串
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.TableMapping.SqlType(Dt.Core.Sqlite.TableMapping.Column)">
            <summary>
            获取列的数据类型
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.TableMapping.IsPK(System.Reflection.MemberInfo)">
            <summary>
            是否为主键列
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.TableMapping.IsAutoInc(System.Reflection.MemberInfo)">
            <summary>
            是否为自增列
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Sqlite.TableMapping.GetIndices(System.Reflection.MemberInfo)">
            <summary>
            获取列的所有索引项
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.SqliteProvider`1">
            <summary>
            Sqlite本地数据提供者，为保证使用习惯一致，和DataProvider方法基本相同
            为方便使用都采用静态方法，巧妙使用泛型传递库名
            </summary>
            <typeparam name="Sqlite_name">类型名称：Sqlite_xxx，xxx为库文件名称(无扩展名)，Sqlite_为前缀</typeparam>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.Query(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回结果集
            </summary>
            <param name="p_sql">Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回Table数据</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.Query``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回实体列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_sql">Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回实体列表</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.GetAll``1">
            <summary>
            返回所有实体列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.Each(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回Row枚举，高性能
            </summary>
            <param name="p_sql">Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回Row枚举</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.Each``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回实体枚举，高性能
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_sql">Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回实体枚举</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.GetScalar``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，只返回第一个单元格数据
            </summary>
            <param name="p_sql">Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一个单元格数据</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.First(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，只返回第一行数据
            </summary>
            <param name="p_sql">Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一行Row或null</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.First``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回第一个实体对象，实体属性由Sql决定，不存在时返回null
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_sql">Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回实体对象或null</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.FirstCol``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回符合条件的第一列数据，并转换为指定类型
            </summary>
            <typeparam name="T">第一列数据类型</typeparam>
            <param name="p_sql">Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一列数据的泛型列表</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.EachFirstCol``1(System.String,System.Object)">
            <summary>
            以参数值方式执行Sql语句，返回第一列枚举，高性能
            </summary>
            <typeparam name="T">第一列数据类型</typeparam>
            <param name="p_sql">Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，默认null</param>
            <returns>返回第一列数据的泛型枚举</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.GetByID``1(System.Object)">
            <summary>
            根据主键获得实体对象(包含所有列值)，仅支持单主键id，不存在时返回null
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_id">主键</param>
            <returns>返回实体对象或null</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.GetPrimaryKey(System.Type)">
            <summary>
            获取表的主键名称
            </summary>
            <param name="p_type">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.Save``1(``0,System.Boolean)">
            <summary>
            保存实体数据
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_entity">待保存的实体</param>
            <param name="p_isNotify">是否提示保存结果</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.BatchSave(System.Collections.IList,System.Boolean)">
            <summary>
            一个事务内批量保存实体数据，根据实体状态执行增改，Table&lt;Entity&gt;支持删除，列表类型支持：
            <para>Table&lt;Entity&gt;，单表增删改</para>
            <para>List&lt;Entity&gt;，单表增改</para>
            <para>IList，多表增删改，成员可为Entity,List&lt;Entity&gt;,Table&lt;Entity&gt;的混合</para>
            </summary>
            <param name="p_list">待保存列表</param>
            <param name="p_isNotify">是否提示保存结果</param>
            <returns>true 保存成功</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.OnSaving(Dt.Core.Sqlite.SqliteEntitySchema,System.Object)">
            <summary>
            保存前外部校验，不合格在外部抛出异常
            </summary>
            <param name="p_model"></param>
            <param name="p_entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.Delete``1(``0,System.Boolean)">
            <summary>
            删除实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_entity">待删除的行</param>
            <param name="p_isNotify">是否提示删除结果</param>
            <returns>true 删除成功</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.BatchDelete(System.Collections.IList,System.Boolean)">
            <summary>
            批量删除实体，单表或多表，列表类型支持：
            <para>Table&lt;Entity&gt;，单表删除</para>
            <para>List&lt;Entity&gt;，单表删除</para>
            <para>IList，多表删除，成员可为Entity,List&lt;Entity&gt;,Table&lt;Entity&gt;的混合</para>
            </summary>
            <param name="p_list">待删除实体列表</param>
            <param name="p_isNotify">是否提示删除结果</param>
            <returns>true 删除成功</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.DelByID``1(System.Object,System.Boolean)">
            <summary>
            根据主键值删除实体对象，仅支持单主键，主键列名内部确定
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="p_id">主键值</param>
            <param name="p_isNotify">是否提示删除结果</param>
            <returns>true 删除成功</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.OnDeleting(Dt.Core.Sqlite.SqliteEntitySchema,System.Object)">
            <summary>
            删除前外部校验，不合格在外部抛出异常
            </summary>
            <param name="p_model"></param>
            <param name="p_entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.Exec(System.String,System.Object)">
            <summary>
            一个事务内执行Sql语句，返回影响的行数，p_params为IEnumerable时执行批量操作
            </summary>
            <param name="p_sql">Sql语句</param>
            <param name="p_params">参数值，支持Dict或匿名对象，为IEnumerable时执行批量操作</param>
            <returns>返回执行后影响的行数</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.BatchExec(System.String,System.Collections.Generic.List{Dt.Core.Dict})">
            <summary>
            一个事务内批量执行SQL语句，如单表的批量插入
            </summary>
            <param name="p_sql">Sql语句</param>
            <param name="p_list">参数值列表</param>
            <returns>返回执行后影响的行数</returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.GetAllTables">
            <summary>
            获取库中的所有表名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.OpenDb">
            <summary>
            打开Sqlite库，自动创建、同步库表结构
            </summary>
        </member>
        <member name="M:Dt.Core.SqliteProvider`1.CloseDb">
            <summary>
            关闭Sqlite库
            </summary>
        </member>
        <member name="T:Dt.Core.SqliteDbs">
            <summary>
            管理所有已打开的Sqlite库，不可合并到SqliteProvider！
            </summary>
        </member>
        <member name="F:Dt.Core.SqliteDbs.All">
            <summary>
            所有已打开的Sqlite库
            </summary>
        </member>
        <member name="M:Dt.Core.SqliteDbs.GetDb(System.String)">
            <summary>
            获取已打开的Sqlite库
            </summary>
            <param name="p_dbName">库名</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.SqliteDbs.GetAllDbInfo">
            <summary>
            获取所有已打开库的描述信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.SqliteTblsInfo">
            <summary>
            sqlite库的描述信息
            </summary>
        </member>
        <member name="P:Dt.Core.SqliteTblsInfo.Version">
            <summary>
            库结构的版本
            </summary>
        </member>
        <member name="P:Dt.Core.SqliteTblsInfo.Tables">
            <summary>
            表结构的映射类型
            </summary>
        </member>
        <member name="E:Dt.Core.ViewModel.PropertyChanged">
            <summary>
            INotifyPropertyChanged接口事件
            </summary>
        </member>
        <member name="M:Dt.Core.ViewModel.SetProperty``1(``0@,``0,System.String)">
            <summary>
            检查新值和原有值是否相同，不同则赋值并触发属性变化事件
            </summary>
            <typeparam name="T">属性类型</typeparam>
            <param name="storage">属性的引用</param>
            <param name="value">属性新值</param>
            <param name="propertyName">通知更改时的属性名称，可自动给出</param>
            <returns>True表示属性变化, false表示无更改.</returns>
        </member>
        <member name="M:Dt.Core.ViewModel.OnPropertyChanged(System.String)">
            <summary>
            触发属性变化事件
            </summary>
            <param name="propertyName">通知更改时的属性名称<see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="T:Dt.Core.AutoStartInfo">
            <summary>
            自启动信息描述
            </summary>
        </member>
        <member name="P:Dt.Core.AutoStartInfo.WinType">
            <summary>
            获取设置自启动的窗口类型
            </summary>
        </member>
        <member name="P:Dt.Core.AutoStartInfo.Params">
            <summary>
            获取设置初始参数
            </summary>
        </member>
        <member name="P:Dt.Core.AutoStartInfo.ParamsType">
            <summary>
            获取设置初始参数类型
            </summary>
        </member>
        <member name="P:Dt.Core.AutoStartInfo.Title">
            <summary>
            获取设置Win标题
            </summary>
        </member>
        <member name="P:Dt.Core.AutoStartInfo.Icon">
            <summary>
            获取设置图标名称
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElement_AmPm">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_AmPm.#ctor(System.String,System.Globalization.DateTimeFormatInfo)">
            <summary>
            构造函数
            </summary>
            <param name="mask">掩码表达式</param>
            <param name="dateTimeFormatInfo">格式信息</param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_AmPm.ApplyElement(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_AmPm.CreateElementEditor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeElementEditorAmPm">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeElementEditorAmPm.AMValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeElementEditorAmPm.PMValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeElementEditorAmPm._AMDesignator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeElementEditorAmPm._PMDesignator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditorAmPm.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="mask">掩码表达式</param>
            <param name="initialValue"></param>
            <param name="am"></param>
            <param name="pm"></param>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeElementEditorAmPm.DisplayText">
            <summary>
            显示内容
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeElementEditorAmPm.FinalOperatorInsert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditorAmPm.Delete">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditorAmPm.GetResult">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditorAmPm.Insert(System.String)">
            <summary>
            
            </summary>
            <param name="inserted"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditorAmPm.SpinDown">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditorAmPm.SpinUp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElement_d">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_d.#ctor(System.String,System.Globalization.DateTimeFormatInfo,Dt.Core.Mask.DateTimeMaskFormatElementContext)">
            <summary>
            构造函数
            </summary>
            <param name="mask">掩码表达式</param>
            <param name="dateTimeFormatInfo">格式信息</param>
            <param name="context"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_d.ApplyElement(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_d.CreateElementEditor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElement_h12">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_h12.#ctor(System.String,System.Globalization.DateTimeFormatInfo)">
            <summary>
            构造函数
            </summary>
            <param name="mask">掩码表达式</param>
            <param name="dateTimeFormatInfo">格式信息</param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_h12.ApplyElement(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_h12.CreateElementEditor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElement_H24">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_H24.#ctor(System.String,System.Globalization.DateTimeFormatInfo)">
            <summary>
            构造函数
            </summary>
            <param name="mask">掩码表达式</param>
            <param name="dateTimeFormatInfo">格式信息</param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_H24.ApplyElement(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_H24.CreateElementEditor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElement_Millisecond">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Millisecond.#ctor(System.String,System.Globalization.DateTimeFormatInfo)">
            <summary>
            构造函数
            </summary>
            <param name="mask">掩码表达式</param>
            <param name="dateTimeFormatInfo">格式信息</param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Millisecond.ApplyElement(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Millisecond.CreateElementEditor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElement_Min">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Min.#ctor(System.String,System.Globalization.DateTimeFormatInfo)">
            <summary>
            构造函数
            </summary>
            <param name="mask">掩码表达式</param>
            <param name="dateTimeFormatInfo">格式信息</param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Min.ApplyElement(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Min.CreateElementEditor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElement_Month">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskFormatElement_Month.MonthNames">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Month.#ctor(System.String,System.Globalization.DateTimeFormatInfo,Dt.Core.Mask.DateTimeMaskFormatGlobalContext)">
            <summary>
            构造函数
            </summary>
            <param name="mask">掩码表达式</param>
            <param name="dateTimeFormatInfo">格式信息</param>
            <param name="globalContext"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Month.ApplyElement(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Month.CreateElementEditor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Month.Format(System.DateTime)">
            <summary>
            
            </summary>
            <param name="formattedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMonthElementEditor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMonthElementEditor.DisplayText">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMonthElementEditor.#ctor(System.Int32,System.Int32,System.String[])">
            <summary>
            
            </summary>
            <param name="initialValue"></param>
            <param name="minDigits"></param>
            <param name="monthsNames"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMonthElementEditor.Insert(System.String)">
            <summary>
            
            </summary>
            <param name="inserted"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElement_s">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_s.#ctor(System.String,System.Globalization.DateTimeFormatInfo)">
            <summary>
            
            </summary>
            <param name="mask"></param>
            <param name="dateTimeFormatInfo"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_s.ApplyElement(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_s.CreateElementEditor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElement_Year">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Year.#ctor(System.String,System.Globalization.DateTimeFormatInfo)">
            <summary>
            
            </summary>
            <param name="mask"></param>
            <param name="dateTimeFormatInfo"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Year.ApplyElement(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement_Year.CreateElementEditor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeYearElementEditor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeYearElementEditor.MinDigits">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeYearElementEditor.#ctor(System.Int32,System.Int32,System.Globalization.DateTimeFormatInfo)">
            <summary>
            
            </summary>
            <param name="initialYear"></param>
            <param name="maskLength"></param>
            <param name="dateTimeFormatInfo"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeYearElementEditor.GetResult">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElementLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskFormatElementLiteral._fLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskFormatElementLiteral.Literal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElementLiteral.#ctor(System.String,System.Globalization.DateTimeFormatInfo)">
            <summary>
            
            </summary>
            <param name="mask"></param>
            <param name="dateTimeFormatInfo"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElementLiteral.Format(System.DateTime)">
            <summary>
            
            </summary>
            <param name="formattedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeNumericRangeElementEditor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeNumericRangeElementEditor._digitsEntered">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeNumericRangeElementEditor.CurrentValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeNumericRangeElementEditor.DisplayText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeNumericRangeElementEditor.FinalOperatorInsert">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeNumericRangeElementEditor.MaxDigits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeNumericRangeElementEditor.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeNumericRangeElementEditor.MinDigits">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeNumericRangeElementEditor.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeNumericRangeElementEditor.Touched">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeNumericRangeElementEditor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="minDigits"></param>
            <param name="maxDigits"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeNumericRangeElementEditor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="initialValue"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="minDigits"></param>
            <param name="maxDigits"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeNumericRangeElementEditor.Delete">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeNumericRangeElementEditor.GetResult">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeNumericRangeElementEditor.Insert(System.String)">
            <summary>
            
            </summary>
            <param name="inserted"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeNumericRangeElementEditor.SpinDown">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeNumericRangeElementEditor.SpinUp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeNumericRangeElementEditor.SetUntouchedValue(System.Int32)">
            <summary>
            
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeNumericRangeFormatElementEditable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeNumericRangeFormatElementEditable.#ctor(System.String,System.Globalization.DateTimeFormatInfo,Dt.Core.Mask.DateTimePart)">
            <summary>
            
            </summary>
            <param name="mask"></param>
            <param name="dateTimeFormatInfo"></param>
            <param name="dateTimePart"></param>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElement">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskFormatElement._DateTimeFormatInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskFormatElement._DateTimePart">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement.#ctor(System.Globalization.DateTimeFormatInfo,Dt.Core.Mask.DateTimePart)">
            <summary>
            
            </summary>
            <param name="dateTimeFormatInfo"></param>
            <param name="dateTimePart"></param>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskFormatElement.Editable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElement.Format(System.DateTime)">
            <summary>
            
            </summary>
            <param name="formattedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElementNonEditable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskFormatElementNonEditable.Mask">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElementNonEditable.#ctor(System.String,System.Globalization.DateTimeFormatInfo,Dt.Core.Mask.DateTimePart)">
            <summary>
            
            </summary>
            <param name="mask"></param>
            <param name="dateTimeFormatInfo"></param>
            <param name="dateTimePart"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElementNonEditable.Format(System.DateTime)">
            <summary>
            
            </summary>
            <param name="formattedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElementEditable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElementEditable.#ctor(System.String,System.Globalization.DateTimeFormatInfo,Dt.Core.Mask.DateTimePart)">
            <summary>
            
            </summary>
            <param name="mask"></param>
            <param name="dateTimeFormatInfo"></param>
            <param name="dateTimePart"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElementEditable.ApplyElement(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatElementEditable.CreateElementEditor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="editedDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatInfo.RemoveTimePartFromTheMask(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="patchedMask"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskFormatInfo._innerList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatInfo.#ctor(System.String,System.Globalization.DateTimeFormatInfo)">
            <summary>
            
            </summary>
            <param name="mask"></param>
            <param name="dateTimeFormatInfo"></param>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskFormatInfo.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskFormatInfo.DateTimeParts">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskFormatInfo.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatInfo.Format(System.DateTime)">
            <summary>
            
            </summary>
            <param name="formatted"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskFormatInfo.Format(System.DateTime,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="formatted"></param>
            <param name="startFormatIndex"></param>
            <param name="endFormatIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatElementContext">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskFormatElementContext._YearProcessed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskFormatElementContext._MonthProcessed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskFormatElementContext._DayProcessed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskFormatGlobalContext">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskFormatGlobalContext.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.DateTimePart">
            <summary>
            显示格式
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimePart.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimePart.Date">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimePart.Time">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimePart.Both">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeMaskManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager.AlwaysTodayOnClearSelectAll">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager.DoNotClearValueOnInsertAfterSelectAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.GetGoodCalendarDateTimeFormatInfo(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="inputCulture"></param>
            <returns></returns>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager._AllowNull">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager._fCurrentElementEditor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager._fCurrentValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager._fFormatInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager._fInitialDateTimeFormatInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager._fInitialEditValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager._fInitialMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager._fSelectedFormatInfoIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager._fUndoValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DateTimeMaskManager._IsOperatorMask">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.#ctor(System.String,System.Boolean,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            
            </summary>
            <param name="mask"></param>
            <param name="isOperatorMask"></param>
            <param name="culture"></param>
            <param name="allowNull"></param>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.CurrentValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.DisplayCursorPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.DisplaySelectionAnchor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.DisplayText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.FormatInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.IsEditValueDifferFromEditText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.IsElementEdited">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.IsPlainTextLike">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.NonEmptyCurrentValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.SelectedElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.SelectedFormatInfoIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.UndoValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.SetInitialEditValue(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="initialEditValue"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.SetInitialEditValue(System.Object)">
            <summary>
            
            </summary>
            <param name="initialEditValue"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.SetInitialEditText(System.String)">
            <summary>
            
            </summary>
            <param name="initialEditText"></param>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.Backspace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.ClearAfterSelectAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.CursorEnd(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.CursorHome(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.CursorLeft(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <param name="isNeededKeyCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.CursorRight(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <param name="isNeededKeyCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.CursorToDisplayPosition(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="newPosition"></param>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.Delete">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.FlushPendingEditActions">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.GetCurrentEditText">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.GetCurrentEditValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.Insert(System.String)">
            <summary>
            
            </summary>
            <param name="insertion"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.PrepareForCursorMoveAfterSelectAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.PrepareForInsertAfterSelectAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.SpinDown">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.SpinUp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.Undo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeMaskManager.CanUndo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.ApplyCurrentElementEditor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.GetCurrentElementEditor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.KillCurrentElementEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.CorrectInsertValue(System.DateTime)">
            <summary>
            
            </summary>
            <param name="inserted"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeMaskManager.GetClearValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DateTimeElementEditor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeElementEditor.DisplayText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.DateTimeElementEditor.FinalOperatorInsert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditor.Delete">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditor.GetResult">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditor.Insert(System.String)">
            <summary>
            
            </summary>
            <param name="inserted"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditor.SpinDown">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DateTimeElementEditor.SpinUp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.LegacyMaskChar">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskChar.#ctor(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="capturing"></param>
            <param name="caseConversion"></param>
            <param name="minMatches"></param>
            <param name="maxMatches"></param>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskChar.CapturingExpression">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskChar.IsLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskChar.MaxMatches">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskChar.MinMatches">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskChar.PatchMatches(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskChar.GetDisplayText(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="elementValue"></param>
            <param name="blank"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskChar.GetEditText(System.String,System.Char,System.Boolean)">
            <summary>
            
            </summary>
            <param name="elementValue"></param>
            <param name="blank"></param>
            <param name="saveLiteral"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.LegacyMaskInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetRegularMaskInfo(System.String,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="mask"></param>
            <param name="maskCulture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetSimpleMaskInfo(System.String,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="mask"></param>
            <param name="maskCulture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.PatchZeroLengthMaskInfo(Dt.Core.Mask.LegacyMaskInfo,System.Char)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="caseConversion"></param>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskInfo.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskInfo.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="primitiveIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetDisplayText(System.String[],System.Char)">
            <summary>
            
            </summary>
            <param name="elements"></param>
            <param name="blank"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetEditText(System.String[],System.Char,System.Boolean)">
            <summary>
            
            </summary>
            <param name="elements"></param>
            <param name="blank"></param>
            <param name="saveLiteral"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetElementsEmpty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetElementsFromEditText(System.String,System.Char,System.Boolean)">
            <summary>
            
            </summary>
            <param name="editText"></param>
            <param name="blank"></param>
            <param name="saveLiteral"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetFirstEditableIndex">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetIsEditable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetLastEditableIndex">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetNextEditableElement(System.Int32)">
            <summary>
            
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetPosition(System.String[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="elements"></param>
            <param name="element"></param>
            <param name="insideElement"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.GetPrevEditableElement(System.Int32)">
            <summary>
            
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskInfo.PatchQuantifier(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="T:Dt.Core.Mask.LegacyMaskLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskLiteral.CapturingExpression">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskLiteral.IsLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskLiteral.MaxMatches">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskLiteral.MinMatches">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskLiteral.#ctor(System.Char)">
            <summary>
            
            </summary>
            <param name="literal"></param>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskLiteral.GetDisplayText(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="elementValue"></param>
            <param name="blank"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskLiteral.GetEditText(System.String,System.Char,System.Boolean)">
            <summary>
            
            </summary>
            <param name="elementValue"></param>
            <param name="blank"></param>
            <param name="saveLiteral"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.LegacyMaskManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.#ctor(Dt.Core.Mask.LegacyMaskInfo,System.Char,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="blank"></param>
            <param name="saveLiteral"></param>
            <param name="ignoreMaskBlank"></param>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskManager.CurrentState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskManager.IsEditValueDifferFromEditText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskManager.IsFinal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskManager.IsMatch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskManager.IsPlainTextLike">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.SetInitialEditValue(System.Object)">
            <summary>
            
            </summary>
            <param name="initialEditValue"></param>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.SetInitialEditText(System.String)">
            <summary>
            
            </summary>
            <param name="initialEditText"></param>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.Backspace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.CursorEnd(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.CursorHome(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.CursorLeft(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <param name="isNeededKeyCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.CursorRight(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <param name="isNeededKeyCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.CursorToDisplayPosition(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="newPosition"></param>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.Delete">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.GetCursorPosition(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.GetDisplayText(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.GetEditText(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.GetEditValue(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.GetSelectionAnchor(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManager.Insert(System.String)">
            <summary>
            
            </summary>
            <param name="insertion"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.LegacyMaskManagerState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.LegacyMaskManagerState.CursorPositionElement">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.LegacyMaskManagerState.CursorPositionInsideElement">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.LegacyMaskManagerState.Elements">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.LegacyMaskManagerState.Info">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.LegacyMaskManagerState.SelectionAnchorElement">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.LegacyMaskManagerState.SelectionAnchorInsideElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskManagerState.DisplayCursorPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskManagerState.DisplaySelectionAnchor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.#ctor(Dt.Core.Mask.LegacyMaskInfo)">
            <summary>
            
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.#ctor(Dt.Core.Mask.LegacyMaskInfo,System.String[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="elements"></param>
            <param name="cursorPositionElement"></param>
            <param name="cursorPositionInsideElement"></param>
            <param name="selectionAnchorElement"></param>
            <param name="selectionAnchorInsideElement"></param>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.Backspace">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.CursorEnd(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.CursorHome(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.CursorLeft">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.CursorRight">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.CursorTo(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="newPosition"></param>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.Delete">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.GetDisplayText(System.Char)">
            <summary>
            
            </summary>
            <param name="blank"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.GetEditText(System.Char,System.Boolean)">
            <summary>
            
            </summary>
            <param name="blank"></param>
            <param name="saveLiteral"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.Insert(System.String)">
            <summary>
            
            </summary>
            <param name="insertion"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.IsEmpty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.IsFinal(System.Char)">
            <summary>
            
            </summary>
            <param name="blank"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.IsMatch(System.Char)">
            <summary>
            
            </summary>
            <param name="blank"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskManagerState.IsSame(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="comparedState"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.LegacyMaskPrimitive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskPrimitive.CapturingExpression">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskPrimitive.IsLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskPrimitive.MaxMatches">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.LegacyMaskPrimitive.MinMatches">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskPrimitive.GetAcceptableChar(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskPrimitive.IsAcceptable(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskPrimitive.IsAcceptableStrong(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskPrimitive.#ctor(System.Char)">
            <summary>
            
            </summary>
            <param name="caseConversion"></param>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskPrimitive.GetDisplayText(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="elementValue"></param>
            <param name="blank"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.LegacyMaskPrimitive.GetEditText(System.String,System.Char,System.Boolean)">
            <summary>
            
            </summary>
            <param name="elementValue"></param>
            <param name="blank"></param>
            <param name="saveLiteral"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.MaskLogicResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskLogicResult.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="editText"></param>
            <param name="cursorPosition"></param>
        </member>
        <member name="P:Dt.Core.Mask.MaskLogicResult.CursorPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskLogicResult.EditText">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.MaskManager">
            <summary>
            掩码员抽象基类
            子类有 MaskManagerStated, DateTimeMaskManager
            </summary>
        </member>
        <member name="E:Dt.Core.Mask.MaskManager.EditTextChanged">
            <summary>
            文本变化事件
            </summary>
        </member>
        <member name="E:Dt.Core.Mask.MaskManager.EditTextChanging">
             <summary>
            准备文本变化事件
             </summary>
        </member>
        <member name="E:Dt.Core.Mask.MaskManager.LocalEditAction">
            <summary>
            编辑事件(虽未修改)
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.CanUndo">
            <summary>
            是否可撤消
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.DisplayCursorPosition">
            <summary>
            当前光标位置
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.DisplaySelectionAnchor">
            <summary>
            选择区域的开始位置（在开头或结尾）
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.DisplaySelectionStart">
            <summary>
            选择区域的起始位置
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.DisplaySelectionEnd">
            <summary>
            选择区域的结束位置
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.DisplaySelectionLength">
            <summary>
            选中区域长度
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.DisplayText">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.IsEditValueDifferFromEditText">
            <summary>
            值与文本是否相同
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.IsFinal">
            <summary>
            光标是否在最后
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.IsMatch">
            <summary>
            是否匹配
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.IsPlainTextLike">
            <summary>
            是否为纯文本
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManager.IsSelection">
            <summary>
            是否存在选中内容
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.SetInitialEditValue(System.Object)">
            <summary>
            设置初始值
            </summary>
            <param name="initialEditValue"></param>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.SetInitialEditText(System.String)">
            <summary>
            设置初始文本
            </summary>
            <param name="initialEditText"></param>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.GetCurrentEditValue">
            <summary>
            获取掩码员的当前值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.GetCurrentEditText">
            <summary>
            获取当前文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.Insert(System.String)">
            <summary>
            新输入
            </summary>
            <param name="insertion"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.ClearAfterSelectAll">
            <summary>
            全选清除
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.Backspace">
            <summary>
            退格操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.Delete">
            <summary>
            删除操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.FlushPendingEditActions">
            <summary>
            刷新未提交的操作内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.SpinDown">
            <summary>
            下调
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.SpinUp">
            <summary>
            上调
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.Undo">
            <summary>
            撤消操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.PrepareForInsertAfterSelectAll">
            <summary>
            全选准备插入
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.CursorEnd(System.Boolean)">
            <summary>
            光标置最后
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.CursorHome(System.Boolean)">
            <summary>
            光标置最前
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.CursorLeft(System.Boolean)">
            <summary>
            左移光标
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.CursorLeft(System.Boolean,System.Boolean)">
            <summary>
            左移光标
            </summary>
            <param name="forceSelection"></param>
            <param name="isNeededKeyCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.CursorRight(System.Boolean)">
            <summary>
            右移光标
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.CursorRight(System.Boolean,System.Boolean)">
            <summary>
            右移光标
            </summary>
            <param name="forceSelection"></param>
            <param name="isNeededKeyCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.PrepareForCursorMoveAfterSelectAll">
            <summary>
            选中所有
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.CursorToDisplayPosition(System.Int32,System.Boolean)">
            <summary>
            移动光标位置，并可在原位置和当前位置之间置选中状态
            </summary>
            <param name="newPosition"></param>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.RaiseEditTextChanging(System.Object)">
            <summary>
            引发编辑文本变化事件
            </summary>
            <param name="newEditValue"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.RaiseEditTextChanged">
            <summary>
            触发文本变化事件
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskManager.RaiseModifyWithoutEditValueChange">
            <summary>
            引发编辑事件，提供给外部决定是否可编辑，目前只提供给DatTimeMaskManager使用
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.MaskChangingEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Core.Mask.MaskChangingEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskChangingEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Dt.Core.Mask.MaskChangingEventArgs.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="cancel"></param>
        </member>
        <member name="P:Dt.Core.Mask.MaskChangingEventArgs.NewValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskChangingEventArgs.OldValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.MaskManagerState">
            <summary>
            掩码状态基类
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerState.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerState.IsSame(Dt.Core.Mask.MaskManagerState)">
            <summary>
            比较掩码状态是否和当前状态相同
            </summary>
            <param name="comparedState">掩码状态实例</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.MaskManagerStated">
            <summary>
            有状态的掩码员抽象基类
            子类有 RegExpMaskManager, LegacyMaskManager, NumericMaskManager
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.#ctor(Dt.Core.Mask.MaskManagerState)">
            <summary>
            根据给的掩码状态构造掩码员
            </summary>
            <param name="initialState"></param>
        </member>
        <member name="P:Dt.Core.Mask.MaskManagerStated.CanUndo">
            <summary>
            是否可撤消
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManagerStated.CurrentState">
            <summary>
            当前掩码状态
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManagerStated.DisplayCursorPosition">
            <summary>
            光标位置
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManagerStated.DisplaySelectionAnchor">
            <summary>
            选中区域的起始位置
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.MaskManagerStated.DisplayText">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.GetCurrentEditValue">
            <summary>
            获取掩码员的当前值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.GetCurrentEditText">
            <summary>
            获取当前文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.SpinDown">
            <summary>
            下调(向下方向键)转为光标右移
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.SpinUp">
            <summary>
            上调(向上方向键)转为光标左移
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.Undo">
            <summary>
            撤消操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.SetInitialState(Dt.Core.Mask.MaskManagerState)">
            <summary>
            设置初始掩码状态
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.Apply(Dt.Core.Mask.MaskManagerState,Dt.Core.Mask.MaskManagerStated.StateChangeType)">
            <summary>
            应用新状态的修改
            </summary>
            <param name="newState">新状态</param>
            <param name="changeType">状态变换种类</param>
            <returns>应用是否成功</returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.Apply(Dt.Core.Mask.MaskManagerState,Dt.Core.Mask.MaskManagerStated.StateChangeType,System.Boolean)">
            <summary>
            应用新状态的修改
            </summary>
            <param name="newState">新状态</param>
            <param name="changeType">状态变换种类</param>
            <param name="isNeededKeyCheck"></param>
            <returns>应用是否成功</returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.ApplyInternal(Dt.Core.Mask.MaskManagerState,Dt.Core.Mask.MaskManagerStated.StateChangeType)">
            <summary>
            记录状态及状态变换类别
            </summary>
            <param name="newState"></param>
            <param name="changeType"></param>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.VerifyCache">
            <summary>
            同步状态缓存
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.GetEditValue(Dt.Core.Mask.MaskManagerState)">
            <summary>
            根据掩码状态获取当前值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.GetEditText(Dt.Core.Mask.MaskManagerState)">
            <summary>
            根据掩码状态获取当前文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.GetCursorPosition(Dt.Core.Mask.MaskManagerState)">
            <summary>
            根据掩码状态获取当前光标位置
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.GetDisplayText(Dt.Core.Mask.MaskManagerState)">
            <summary>
            获取给定掩码状态的显示文本
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.GetSelectionAnchor(Dt.Core.Mask.MaskManagerState)">
            <summary>
            选择区域的起始位置
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.MaskManagerStated.IsValid(Dt.Core.Mask.MaskManagerState)">
            <summary>
            是否有效
            </summary>
            <param name="newState"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.MaskManagerStated.StateChangeType">
            <summary>
            状态变换种类
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.MaskManagerStated.StateChangeType.Insert">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.MaskManagerStated.StateChangeType.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.MaskManagerStated.StateChangeType.Terminator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.MaskType">
            <summary>
            掩码类型
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.MaskType.Simple">
            <summary>
            支持简单型表达式，适合处理有固定长度或固定格式的字符串，如电话号码、邮箱等
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.MaskType.DateTime">
            <summary>
            时间掩码
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.MaskType.DateTimeAdvancingCaret">
            <summary>
            智能补充式时间掩码
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.MaskType.Numeric">
            <summary>
            数字类型
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.MaskType.RegEx">
            <summary>
            全功能正则表达式
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.MaskType.Regular">
            <summary>
            支持简单的正则表达式，通常用来指定某范围的可选字符，或某位置的字符个数等，
            缺少动态内容替换功能，也缺少自动完成功能
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.NumericFormatter">
            <summary>
            数值格式化
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.NumericFormatter.Expand(System.String,System.Globalization.CultureInfo)">
            <summary>
            根据掩码表达式构造不同类型的格式串
            </summary>
            <param name="formatString">掩码表达式</param>
            <param name="culture">区域信息</param>
            <returns>格式字符串</returns>
        </member>
        <member name="F:Dt.Core.Mask.NumericFormatter._Is100Multiplied">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.NumericFormatter.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            构造方法
            </summary>
            <param name="formatString">格式串</param>
            <param name="formattingCulture"></param>
        </member>
        <member name="P:Dt.Core.Mask.NumericFormatter.MaxDigitsAfterDecimalSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.NumericFormatter.MaxDigitsBeforeDecimalSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.NumericFormatter.MinDigitsAfterDecimalSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.NumericFormatter.MinDigitsBeforeDecimalSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.NumericFormatter.Format(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericFormatter.GetPositionFormatted(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="sourcePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericFormatter.GetPositionSource(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="source">源数据串</param>
            <param name="formattedPosition"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.CharEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.CharEnumerator.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Dt.Core.Mask.CharEnumerator.Clone">
            <summary>
            克隆数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.CharEnumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.CharEnumerator.MoveNext">
            <summary>
            下移
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.CharEnumerator.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.CharEnumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.NumericMaskLogic">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskLogic.Div100(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskLogic.Mul100(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskLogic.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="maxDigitsBeforeDecimalSeparator"></param>
            <param name="minDigitsBeforeDecimalSeparator"></param>
            <param name="minDigitsAfterDecimalSeparator"></param>
            <param name="maxDigitsAfterDecimalSeparator"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskLogic.GetEditResult(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="head"></param>
            <param name="replaced"></param>
            <param name="tail"></param>
            <param name="inserted"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskLogic.GetSpinResult(System.String,System.String,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="head"></param>
            <param name="tail"></param>
            <param name="isModuloDecrement"></param>
            <param name="canChSign"></param>
            <param name="chSign"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskLogic.Init(System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="maxDigitsBeforeDecimalSeparator"></param>
            <param name="minDigitsBeforeDecimalSeparator"></param>
            <param name="minDigitsAfterDecimalSeparator"></param>
            <param name="maxDigitsAfterDecimalSeparator"></param>
            <param name="culture"></param>
        </member>
        <member name="T:Dt.Core.Mask.NumericMaskManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.NumericMaskManager._AllowNull">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            数字型掩码管理者
            </summary>
            <param name="formatString">掩码表达式</param>
            <param name="managerCultureInfo">区域信息</param>
            <param name="allowNull">是否允许空</param>
        </member>
        <member name="P:Dt.Core.Mask.NumericMaskManager.CurrentState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.NumericMaskManager.IsEditValueDifferFromEditText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.NumericMaskManager.IsFinal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.NumericMaskManager.IsPlainTextLike">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.SetInitialEditValue(System.Object)">
            <summary>
            设置初始值
            </summary>
            <param name="initialEditValue"></param>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.SetInitialEditText(System.String)">
            <summary>
            设置初始文本
            </summary>
            <param name="initialEditText"></param>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.Backspace">
            <summary>
            回退处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.ClearAfterSelectAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.CursorEnd(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.CursorHome(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.CursorLeft(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <param name="isNeededKeyCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.CursorRight(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <param name="isNeededKeyCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.CursorToDisplayPosition(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="newPosition"></param>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.Delete">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.Insert(System.String)">
            <summary>
            
            </summary>
            <param name="insertion"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.PrepareForInsertAfterSelectAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.SpinDown">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.SpinUp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.GetCursorPosition(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.GetDisplayText(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.GetEditText(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.GetEditValue(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.GetSelectionAnchor(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManager.IsValid(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="newState"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.NumericMaskManagerState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.NumericMaskManagerState.NullInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.NumericMaskManagerState.IsNegative">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.NumericMaskManagerState.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManagerState.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            数字型掩码状态
            </summary>
            <param name="editText">掩码表达式</param>
            <param name="cursorPosition">区域信息</param>
            <param name="selectionAnchor"></param>
            <param name="isNegative">是否被拒绝</param>
        </member>
        <member name="M:Dt.Core.Mask.NumericMaskManagerState.IsSame(Dt.Core.Mask.MaskManagerState)">
            <summary>
            比较掩码状态是否和当前状态相同
            </summary>
            <param name="comparedState">掩码状态实例</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.RegExpAutoCompleteInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpAutoCompleteInfo.AutoCompleteChar">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpAutoCompleteInfo.DfaAutoCompleteType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.RegExpAutoCompleteInfo.#ctor(Dt.Core.Mask.DfaAutoCompleteType,System.Char)">
            <summary>
            
            </summary>
            <param name="autoCompleteType"></param>
            <param name="autoCompleteChar"></param>
        </member>
        <member name="T:Dt.Core.Mask.DfaAutoCompleteType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DfaAutoCompleteType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DfaAutoCompleteType.ExactChar">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DfaAutoCompleteType.Final">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DfaAutoCompleteType.FinalOrExactBeforeNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DfaAutoCompleteType.FinalOrExactBeforeFinal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.DfaAutoCompleteType.FinalOrExactBeforeFinalOrNone">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.RegExpBracketTransitionRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.RegExpBracketTransitionRange._From">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.RegExpBracketTransitionRange._To">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.RegExpBracketTransitionRange.#ctor(System.Char,System.Char)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="T:Dt.Core.Mask.RegExpDfa">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.IsMatch(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.op_BitwiseAnd(Dt.Core.Mask.RegExpDfa,Dt.Core.Mask.RegExpDfa)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.op_BitwiseOr(Dt.Core.Mask.RegExpDfa,Dt.Core.Mask.RegExpDfa)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.Parse(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
            <param name="reverseAutomate"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.Power(Dt.Core.Mask.RegExpDfa,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="operand"></param>
            <param name="minMatches"></param>
            <param name="maxMatches"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.Mask.RegExpDfa.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpDfa.EmptyTransitionDfa">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.#ctor(Dt.Core.Mask.Transition)">
            <summary>
            
            </summary>
            <param name="initialTransition"></param>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.GetAllStates">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.GetAutoCompleteInfo(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.GetOptimisticHint(System.String)">
            <summary>
            
            </summary>
            <param name="displayText"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.GetPlaceHolders(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="displayText"></param>
            <param name="anySymbolHolder"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.GetPlaceHoldersInfo(System.String)">
            <summary>
            
            </summary>
            <param name="displayText"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.IsFinal(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.IsMatch(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.IsValidStart(System.String)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfa.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.RegExpDfaWave">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpDfaWave.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfaWave.#ctor(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="finalState"></param>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfaWave.AddStateWithEmptyTransitionsTargets(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfaWave.Contains(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfaWave.GetAutoCompleteInfo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfaWave.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfaWave.GetNextWave(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfaWave.GetOptimisticHint">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfaWave.GetPlaceHoldersInfo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfaWave.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpDfaWave.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.RegExpMaskLogic">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskLogic.#ctor(Dt.Core.Mask.RegExpDfa,System.Boolean)">
            <summary>
            
            </summary>
            <param name="regExp"></param>
            <param name="isAutoComplete"></param>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskLogic.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            
            </summary>
            <param name="regExp"></param>
            <param name="culture"></param>
            <param name="isAutoComplete"></param>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskLogic.GetBackspaceResult(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="head"></param>
            <param name="tail"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskLogic.GetDeleteResult(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="head"></param>
            <param name="tail"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskLogic.GetMaskedText(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="anySymbolHolder"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskLogic.GetReplaceResult(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="head"></param>
            <param name="replaced"></param>
            <param name="tail"></param>
            <param name="inserted"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskLogic.IsFinal(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskLogic.IsMatch(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskLogic.IsValidCursorPosition(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="testedPositionInEditText"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskLogic.IsValidStart(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskLogic.OptimisticallyExpand(System.String)">
            <summary>
            
            </summary>
            <param name="baseText"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.RegExpMaskManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpMaskManager.CurrentState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpMaskManager.IsFinal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpMaskManager.IsMatch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpMaskManager.IsPlainTextLike">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpMaskManager.IsEditValueDifferFromEditText">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Char,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="regExp"></param>
            <param name="reverseDfa"></param>
            <param name="isAutoComplete"></param>
            <param name="isOptimistic"></param>
            <param name="showPlaceHolders"></param>
            <param name="anySymbolPlaceHolder"></param>
            <param name="managerCultureInfo"></param>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.SetInitialEditValue(System.Object)">
            <summary>
            设置初始值
            </summary>
            <param name="initialEditValue"></param>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.SetInitialEditText(System.String)">
            <summary>
            设置初始文本
            </summary>
            <param name="initialEditText"></param>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.Insert(System.String)">
            <summary>
            新输入
            </summary>
            <param name="insertion"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.Backspace">
            <summary>
            退格操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.Delete">
            <summary>
            删除操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.CursorEnd(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.CursorHome(System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.CursorLeft(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <param name="isNeededKeyCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.CursorRight(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="forceSelection"></param>
            <param name="isNeededKeyCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.CursorToDisplayPosition(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="newPosition"></param>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.GetCursorPosition(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.GetDisplayText(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.GetEditText(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.GetEditValue(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.GetSelectionAnchor(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.Apply(System.String,System.Int32,System.Int32,Dt.Core.Mask.MaskManagerStated.StateChangeType)">
            <summary>
            
            </summary>
            <param name="editText"></param>
            <param name="cursorPosition"></param>
            <param name="selectionAnchor"></param>
            <param name="changeType"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.Apply(Dt.Core.Mask.MaskLogicResult,Dt.Core.Mask.MaskManagerStated.StateChangeType)">
            <summary>
            
            </summary>
            <param name="result"></param>
            <param name="changeType"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.IsValidCursorPosition(System.Int32)">
            <summary>
            
            </summary>
            <param name="testedPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.MoveCursorTo(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="newPosition"></param>
            <param name="forceSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManager.MoveCursorTo(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="newPosition"></param>
            <param name="forceSelection"></param>
            <param name="isNeededKeyCheck"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.RegExpMaskManagerState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.RegExpMaskManagerState.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManagerState.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            RegExp掩码状态管理者
            </summary>
            <param name="editText">掩码表达式</param>
            <param name="cursorPosition">区域信息</param>
            <param name="selectionAnchor"></param>
        </member>
        <member name="P:Dt.Core.Mask.RegExpMaskManagerState.CursorPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpMaskManagerState.EditText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpMaskManagerState.SelectionAnchor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.RegExpMaskManagerState.IsSame(Dt.Core.Mask.MaskManagerState)">
            <summary>
            
            </summary>
            <param name="comparedState"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.RegExpNamedMasks">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Core.Mask.RegExpNamedMasks.DefaultCulture">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.Escape(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.Escape(System.String[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="inputStrings"></param>
            <param name="ignoreZeros"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetAbbreviatedDayNames(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetAbbreviatedMonthNames(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetAMDesignator(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetCurrencyDecimalSeparator(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetCurrencyPattern(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetCurrencySymbol(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetDateSeparator(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetDayNames(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetMonthNames(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetNamedMask(System.String)">
            <summary>
            
            </summary>
            <param name="maskName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetNamedMask(System.String,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="maskName"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetNumberDecimalSeparator(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetNumberPattern(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetPMDesignator(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.GetTimeSeparator(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpNamedMasks.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.AbbreviatedDayNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.AbbreviatedMonthNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.AMDesignator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.CurrencyDecimalSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.CurrencyPattern">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.CurrencySymbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.DateSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.DayNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.MonthNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.NumberDecimalSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.NumberPattern">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.PMDesignator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpNamedMasks.TimeSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.RegExpState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.RegExpState.Transitions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.RegExpState.AddTransition(Dt.Core.Mask.Transition)">
            <summary>
            
            </summary>
            <param name="transition"></param>
        </member>
        <member name="M:Dt.Core.Mask.RegExpState.CanReach(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.RegExpState.GetReachableStates">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.AnySymbolTransition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.AnySymbolTransition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.AnySymbolTransition.Copy(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.AnySymbolTransition.GetSampleChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.AnySymbolTransition.IsMatch(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.AnySymbolTransition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.BracketTransition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.BracketTransition.#ctor(System.Boolean,Dt.Core.Mask.RegExpBracketTransitionRange[])">
            <summary>
            
            </summary>
            <param name="notMatch"></param>
            <param name="ranges"></param>
        </member>
        <member name="P:Dt.Core.Mask.BracketTransition.IsExact">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.BracketTransition.Copy(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.BracketTransition.GetSampleChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.BracketTransition.IsMatch(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.BracketTransition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.DecimalDigitTransition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.DecimalDigitTransition.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="notMatch"></param>
        </member>
        <member name="M:Dt.Core.Mask.DecimalDigitTransition.Copy(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DecimalDigitTransition.GetSampleChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DecimalDigitTransition.IsMatch(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.DecimalDigitTransition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.EmptyTransition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.EmptyTransition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.EmptyTransition.#ctor(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Dt.Core.Mask.EmptyTransition.Copy(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.EmptyTransition.GetSampleChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.EmptyTransition.IsMatch(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.EmptyTransition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.Mask.EmptyTransition.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Core.Mask.OneSymbolTransition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.OneSymbolTransition.#ctor(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="P:Dt.Core.Mask.OneSymbolTransition.IsExact">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.OneSymbolTransition.Copy(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.OneSymbolTransition.GetSampleChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.OneSymbolTransition.IsMatch(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.OneSymbolTransition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.UnicodeCategoryTransition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.UnicodeCategoryTransition.GetValues(System.Type)">
            <summary>
            
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.UnicodeCategoryTransition.GetUnicodeCategoryListFromCharacterClassName(System.String)">
            <summary>
            
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.UnicodeCategoryTransition.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="category"></param>
            <param name="notMatch"></param>
        </member>
        <member name="M:Dt.Core.Mask.UnicodeCategoryTransition.Copy(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.UnicodeCategoryTransition.GetSampleChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.UnicodeCategoryTransition.IsMatch(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.UnicodeCategoryTransition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.WhiteSpaceTransition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.WhiteSpaceTransition.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="notMatch"></param>
        </member>
        <member name="M:Dt.Core.Mask.WhiteSpaceTransition.Copy(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.WhiteSpaceTransition.GetSampleChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.WhiteSpaceTransition.IsMatch(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.WhiteSpaceTransition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.WordTransition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.WordTransition.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="notMatch"></param>
        </member>
        <member name="M:Dt.Core.Mask.WordTransition.Copy(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.WordTransition.GetSampleChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.WordTransition.IsMatch(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.WordTransition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Mask.Transition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.Transition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.Transition.#ctor(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:Dt.Core.Mask.Transition.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.Transition.IsExact">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Core.Mask.Transition.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Core.Mask.Transition.Copy(Dt.Core.Mask.RegExpState)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.Transition.GetSampleChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Mask.Transition.IsMatch(System.Char)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.NotifyInfo">
            <summary>
            消息提示内容结构
            </summary>
        </member>
        <member name="P:Dt.Core.NotifyInfo.Message">
            <summary>
            提示内容
            </summary>
        </member>
        <member name="P:Dt.Core.NotifyInfo.NotifyType">
            <summary>
            提示框类型
            </summary>
        </member>
        <member name="P:Dt.Core.NotifyInfo.Link">
            <summary>
            链接描述
            </summary>
        </member>
        <member name="P:Dt.Core.NotifyInfo.DelaySeconds">
            <summary>
            几秒后自动关闭，0表示不自动关闭
            </summary>
        </member>
        <member name="P:Dt.Core.NotifyInfo.Tag">
            <summary>
            附加信息
            </summary>
        </member>
        <member name="P:Dt.Core.NotifyInfo.LinkCallback">
            <summary>
            点击链接时的回调方法
            </summary>
        </member>
        <member name="P:Dt.Core.NotifyInfo.Close">
            <summary>
            关闭消息提示
            </summary>
        </member>
        <member name="T:Dt.Core.NotifyType">
            <summary>
            提示框类型
            </summary>
        </member>
        <member name="F:Dt.Core.NotifyType.Information">
            <summary>
            无警示级别，对于无需交互的操作结果，
            如保存成功（失败）、删除成功（失败）、发送成功（失败）、复制成功等
            </summary>
        </member>
        <member name="F:Dt.Core.NotifyType.Warning">
            <summary>
            普通警示级别
            </summary>
        </member>
        <member name="T:Dt.Core.ShareInfo">
            <summary>
            接收分享的内容描述
            </summary>
        </member>
        <member name="P:Dt.Core.ShareInfo.DataType">
            <summary>
            分享内容的类型
            </summary>
        </member>
        <member name="P:Dt.Core.ShareInfo.Content">
            <summary>
            文本内容，非文件内容
            </summary>
        </member>
        <member name="P:Dt.Core.ShareInfo.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Dt.Core.ShareInfo.FileName">
            <summary>
            分享的文件名，包括扩展名
            </summary>
        </member>
        <member name="P:Dt.Core.ShareInfo.FileExt">
            <summary>
            分享文件的扩展名，最前面.
            </summary>
        </member>
        <member name="P:Dt.Core.ShareInfo.FileLength">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="M:Dt.Core.ShareInfo.GetStream">
            <summary>
            文件流
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ShareInfo.ShareCompleted">
            <summary>
            分享结束
            </summary>
        </member>
        <member name="T:Dt.Core.ShareDataType">
            <summary>
            分享内容的类型
            </summary>
        </member>
        <member name="T:Dt.Core.StartupInfo">
            <summary>
            启动内容
            </summary>
        </member>
        <member name="M:Dt.Core.StartupInfo.SetMessage(System.String)">
            <summary>
            设置提示信息
            </summary>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Core.StartupInfo.LoadRootUI(Windows.UI.Xaml.UIElement)">
            <summary>
            加载根元素UI
            </summary>
            <param name="p_content"></param>
        </member>
        <member name="T:Dt.Core.SysVisual">
            <summary>
            系统可视树管理类，三层：桌面层/页面层、对话框层、提示信息层
            </summary>
        </member>
        <member name="F:Dt.Core.SysVisual._maxPhoneUIWidth">
            <summary>
            PhoneUI模式的最大宽度
            </summary>
        </member>
        <member name="F:Dt.Core.SysVisual._rootGrid">
            <summary>
            Window.Current.Content内容，根Grid
            </summary>
        </member>
        <member name="F:Dt.Core.SysVisual._dlgCanvas">
            <summary>
            对话框面板
            </summary>
        </member>
        <member name="F:Dt.Core.SysVisual._notifyPanel">
            <summary>
            提示信息面板
            </summary>
        </member>
        <member name="F:Dt.Core.SysVisual._rootContent">
            <summary>
            内容元素，桌面、Frame、登录页面等，在最底层
            </summary>
        </member>
        <member name="F:Dt.Core.SysVisual.StatusBarHeight">
            <summary>
            phone状态栏高度
            </summary>
        </member>
        <member name="P:Dt.Core.SysVisual.RootContent">
            <summary>
            获取设置桌面层/页面层的内容元素，桌面、Frame、登录页面，在最底层
            </summary>
        </member>
        <member name="P:Dt.Core.SysVisual.RootFrame">
            <summary>
            PhoneUI模式的根Frame
            </summary>
        </member>
        <member name="P:Dt.Core.SysVisual.NotifyList">
            <summary>
            获取提示信息列表，避免启动时AtKit的初始化
            </summary>
        </member>
        <member name="P:Dt.Core.SysVisual.UIModeChanged">
            <summary>
            UI模式切换的回调方法，Phone UI 与 PC UI 切换
            </summary>
        </member>
        <member name="P:Dt.Core.SysVisual.Dispatcher">
            <summary>
            UI调度对象，uno中无法通过CoreApplication.MainView.CoreWindow.Dispatcher获取
            </summary>
        </member>
        <member name="P:Dt.Core.SysVisual.ExistDlg">
            <summary>
            是否存在对话框
            </summary>
        </member>
        <member name="M:Dt.Core.SysVisual.AddDlg(Windows.UI.Xaml.UIElement)">
            <summary>
            将对话框添加到可视树
            </summary>
            <param name="p_dlg">对话框</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.SysVisual.RemoveDlg(Windows.UI.Xaml.UIElement)">
            <summary>
            从可视树移除对话框
            </summary>
            <param name="p_dlg">对话框</param>
        </member>
        <member name="M:Dt.Core.SysVisual.ToggleDlgWinVeil(Windows.UI.Xaml.UIElement)">
            <summary>
            切换win模式下遮罩
            </summary>
            <param name="p_dlg"></param>
        </member>
        <member name="M:Dt.Core.SysVisual.ContainsDlg(Windows.UI.Xaml.UIElement)">
            <summary>
            是否存在某对话框
            </summary>
            <param name="p_dlg">对话框</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.SysVisual.GetTopDlg">
            <summary>
            获取最上面的对话框
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.SysVisual.AddDlgResizeFlag(Windows.UI.Xaml.UIElement)">
            <summary>
            将调整对话框大小的外框添加到可视树
            </summary>
            <param name="p_border">外框</param>
        </member>
        <member name="M:Dt.Core.SysVisual.RemoveDlgResizeFlag(Windows.UI.Xaml.UIElement)">
            <summary>
            从可视树移除调整大小的外框
            </summary>
            <param name="p_border">外框</param>
        </member>
        <member name="P:Dt.Core.SysVisual.BlankPressed">
            <summary>
            在空白处点击(所有对话框外部)，如打开多个菜单项对话框，点击空白处关闭所有
            </summary>
        </member>
        <member name="P:Dt.Core.SysVisual.DlgCount">
            <summary>
            对话框个数
            </summary>
        </member>
        <member name="M:Dt.Core.SysVisual.OnPanelPointerPressed(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            始终处理所有点击事件，以便处理点击对话框外部
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Core.SysVisual.InsertNotifyItem(System.Int32,Windows.UI.Xaml.UIElement)">
            <summary>
            UI添加一条提示信息
            </summary>
            <param name="p_index"></param>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Core.SysVisual.RemoveNotifyItem(System.Int32)">
            <summary>
            UI删除一条提示信息
            </summary>
            <param name="p_index"></param>
        </member>
        <member name="M:Dt.Core.SysVisual.ClearAllNotify">
            <summary>
            UI清空所有提示信息
            </summary>
        </member>
        <member name="P:Dt.Core.SysVisual.ViewWidth">
            <summary>
            可视区域宽度
            手机：页面宽度
            PC上：除标题栏和外框的窗口内部宽度
            </summary>
        </member>
        <member name="P:Dt.Core.SysVisual.ViewHeight">
            <summary>
            可视区域高度
            手机：不包括状态栏的高度
            PC上：除标题栏和外框的窗口内部高度
            </summary>
        </member>
        <member name="M:Dt.Core.SysVisual.OnWindowSizeChanged(System.Object,Windows.UI.Core.WindowSizeChangedEventArgs)">
            <summary>
            系统区域大小变化时UI自适应
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Core.SysVisual.ApplyNotifyStyle">
            <summary>
            调整提示信息层样式
            </summary>
        </member>
        <member name="T:Dt.Core.IDlgOuterPressed">
            <summary>
            对话框处理点击接口
            </summary>
        </member>
        <member name="P:Dt.Core.IDlgOuterPressed.ShowWinVeil">
            <summary>
            获取设置win模式是否显示遮罩
            </summary>
        </member>
        <member name="M:Dt.Core.IDlgOuterPressed.OnOuterPressed(Windows.Foundation.Point)">
            <summary>
            点击对话框外部
            </summary>
            <param name="p_point">点击位置点坐标</param>
        </member>
        <member name="T:Dt.Core.Rpc.NativeMessageHandler">
            <summary>
            android中使用OkHttp3实现Http2通信
            参考：https://github.com/alexrainman/ModernHttpClient
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.ProgressDelegate">
            <summary>
            
            </summary>
            <param name="p_bytesStep">本次发送字节数</param>
            <param name="p_bytesSent">共发送字节数</param>
            <param name="p_totalBytesToSend">总字节数</param>
        </member>
        <member name="T:Dt.Core.Rpc.DuplexStream">
            <summary>
            双工流
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.DuplexStream.RequestWriter">
            <summary>
            向服务器的写入流
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.DuplexStream.ResponseReader">
            <summary>
            读取服务器的返回流
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.RequestWriter">
            <summary>
            向服务器的写入流
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.RequestWriter.Write(System.Object)">
            <summary>
            向服务端写入一帧
            </summary>
            <param name="p_message">支持序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RequestWriter.Complete">
            <summary>
            结束请求流
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.ResponseReader">
            <summary>
            读取服务器的返回流
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.ResponseReader.MoveNext">
            <summary>
            读取从服务器返回的下一帧数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.ResponseReader.Val``1">
            <summary>
            获取当前帧的指定类型值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.ResponseReader.Close">
            <summary>
            关闭流
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.RpcClientKit">
            <summary>
            Rpc客户端工具方法
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.RpcClientKit.WriteFrame(System.IO.Stream,System.Object)">
            <summary>
            将对象打包成一帧写入流
            </summary>
            <param name="p_stream"></param>
            <param name="p_message"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcClientKit.WriteFrame(System.IO.Stream,System.Byte[],System.Boolean)">
            <summary>
            封装Frame写入流
            </summary>
            <param name="p_stream"></param>
            <param name="p_data"></param>
            <param name="p_compress"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcClientKit.ReadFrame(System.IO.Stream)">
            <summary>
            从流中读取一帧，返回的数据不包括Frame头，已解压，自动过滤心跳帧
            </summary>
            <param name="p_stream"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.RpcResult">
            <summary>
            远程回调结果包装类
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.RpcResult.ResultType">
            <summary>
            结果类型
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.RpcResult.Info">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.RpcResult.Elapsed">
            <summary>
            耗时
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.RpcResultType">
            <summary>
            反序列化结果的种类
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcResultType.Value">
            <summary>
            普通结果值
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcResultType.Error">
            <summary>
            服务端错误信息
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcResultType.Message">
            <summary>
            业务警告信息
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.BaseRpc">
            <summary>
            远程调用基类
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.BaseRpc.#ctor(System.String,System.String,System.Object[])">
            <summary>
            构造方法
            </summary>
            <param name="p_serviceName">服务名称</param>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数列表</param>
        </member>
        <member name="P:Dt.Core.Rpc.BaseRpc.Client">
            <summary>
            获取单例HttpClient
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.BaseRpc.RefreshHeader">
            <summary>
            刷新HttpClient头的用户信息
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.BaseRpc.CreateRequestMessage">
            <summary>
            创建http2协议的Request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.BaseRpc.GetRpcData(System.String,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            序列化RPC调用，按需压缩
            </summary>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.ClientStreamRpc">
            <summary>
            客户端发送请求数据流的远程调用
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.ClientStreamRpc.#ctor(System.String,System.String,System.Object[])">
            <summary>
            构造方法
            </summary>
            <param name="p_serviceName">服务名称</param>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数列表</param>
        </member>
        <member name="M:Dt.Core.Rpc.ClientStreamRpc.Call">
            <summary>
            启动Http2协议的远程调用，客户端发送请求数据流
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dt.Core.Rpc.ClientStreamRpc.RequestStream">
            <summary>
            请求流
            </summary>
        </member>
        <member name="P:Dt.Core.Rpc.ClientStreamRpc.RequestCompleted">
            <summary>
            请求流是否已关闭
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.ClientStreamRpc.FinishRequest">
            <summary>
            请求流发送结束
            </summary>
        </member>
        <member name="T:Dt.Core.Rpc.DuplexStreamRpc">
            <summary>
            客户端发送请求数据流，服务端返回数据流响应的远程调用
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.DuplexStreamRpc.#ctor(System.String,System.String,System.Object[])">
            <summary>
            构造方法
            </summary>
            <param name="p_serviceName">服务名称</param>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数列表</param>
        </member>
        <member name="M:Dt.Core.Rpc.DuplexStreamRpc.Call">
            <summary>
            启动Http2协议的远程调用，客户端与服务端双工流
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.ServerStreamRpc">
            <summary>
            客户端发送一个请求，服务端返回数据流响应的远程调用
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.ServerStreamRpc.#ctor(System.String,System.String,System.Object[])">
            <summary>
            构造方法
            </summary>
            <param name="p_serviceName">服务名称</param>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数列表</param>
        </member>
        <member name="M:Dt.Core.Rpc.ServerStreamRpc.Call">
            <summary>
            启动Http2协议的远程调用，客户端发送一个请求，服务端返回数据流响应
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.UnaryRpc">
            <summary>
            基于Http2的请求/响应模式的远程调用
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.UnaryRpc.#ctor(System.String,System.String,System.Object[])">
            <summary>
            构造方法
            </summary>
            <param name="p_serviceName">服务名称</param>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数列表</param>
        </member>
        <member name="M:Dt.Core.Rpc.UnaryRpc.Call``1">
            <summary>
            发送json格式的Http Rpc远程调用
            </summary>
            <typeparam name="T">结果对象的类型</typeparam>
            <returns>返回远程调用结果</returns>
        </member>
        <member name="M:Dt.Core.Rpc.UnaryRpc.ParseResult``1(System.Byte[])">
            <summary>
            解析结果，Utf8JsonReader不能用在异步方法内！
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Rpc.RpcKit">
            <summary>
            Rpc工具类
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcKit.HeaderSize">
            <summary>
            数据包头长度，1字节压缩标志 + 4字节内容长度
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcKit.MinCompressLength">
            <summary>
            进行内容压缩的最小长度
            </summary>
        </member>
        <member name="F:Dt.Core.Rpc.RpcKit.ShakeHands">
            <summary>
            心跳内容：***
            </summary>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.SerializeObj(System.Object,System.Byte[]@)">
            <summary>
            对象序列化，超过长度限制时执行压缩
            </summary>
            <param name="p_message"></param>
            <param name="p_data"></param>
            <returns>true 已压缩</returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.GetVal``1(System.Object)">
            <summary>
            类型转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_val"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.GetCallBytes(System.String,System.Collections.Generic.ICollection{System.Object},System.Boolean)">
            <summary>
            获取Rpc调用时json格式的字节数组
            </summary>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数</param>
            <param name="p_indented">序列化json时是否含有缩进</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.GetCallString(System.String,System.Collections.Generic.ICollection{System.Object},System.Boolean)">
            <summary>
            获取Rpc调用时json字符串
            </summary>
            <param name="p_methodName">方法名</param>
            <param name="p_params">参数</param>
            <param name="p_indented">序列化json时是否含有缩进</param>
            <returns>json串</returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.GetObjectBytes(System.Object)">
            <summary>
            获取通过网络传输对象时的json格式的字节数组
            </summary>
            <param name="p_obj">待传输对象</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.GetObjectString(System.Object)">
            <summary>
            获取通过网络传输对象时的json串
            </summary>
            <param name="p_obj">待传输对象</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.ParseString``1(System.String)">
            <summary>
            json串解析成内部支持的对象
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="p_json">json串</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Rpc.RpcKit.ParseBytes``1(System.Byte[])">
            <summary>
            json字节数组解析成内部支持的对象
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Dict">
            <summary>
            可序列化的键值集合，键忽略大小写
            可以描述存储过程、Sql语句参数列表
            值为嵌套的Dict时可描述复杂的数据结构
            各值可为不同类型
            </summary>
        </member>
        <member name="M:Dt.Core.Dict.#ctor">
            <summary>
            构造方法，键比较时忽略大小写
            </summary>
        </member>
        <member name="M:Dt.Core.Dict.#ctor(System.Int32)">
            <summary>
            构造方法，指定容量
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Dt.Core.Dict.Str(System.String)">
            <summary>
            返回字符串值
            </summary>
            <param name="p_key">键名</param>
            <returns>字符串值</returns>
        </member>
        <member name="M:Dt.Core.Dict.Tbl(System.String)">
            <summary>
            返回Table对象
            </summary>
            <param name="p_key">键名</param>
            <returns>Table</returns>
        </member>
        <member name="M:Dt.Core.Dict.Dt(System.String)">
            <summary>
            返回Dict对象
            </summary>
            <param name="p_key">键名</param>
            <returns>Dict</returns>
        </member>
        <member name="M:Dt.Core.Dict.StrList(System.String)">
            <summary>
            返回字符串列表
            </summary>
            <param name="p_key">键名</param>
            <returns>字符串列表</returns>
        </member>
        <member name="M:Dt.Core.Dict.StrArray(System.String)">
            <summary>
            返回字符串数组
            </summary>
            <param name="p_key">键名</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Dt.Core.Dict.Bool(System.String)">
            <summary>
            返回bool值
            </summary>
            <param name="p_key">键名</param>
            <returns>bool值</returns>
        </member>
        <member name="M:Dt.Core.Dict.BoolList(System.String)">
            <summary>
            返回bool值列表
            </summary>
            <param name="p_key">键名</param>
            <returns>bool值列表</returns>
        </member>
        <member name="M:Dt.Core.Dict.BoolArray(System.String)">
            <summary>
            返回bool值数组
            </summary>
            <param name="p_key">键名</param>
            <returns>bool值数组</returns>
        </member>
        <member name="M:Dt.Core.Dict.Double(System.String)">
            <summary>
            返回double值
            </summary>
            <param name="p_key">键名</param>
            <returns>double值</returns>
        </member>
        <member name="M:Dt.Core.Dict.DoubleList(System.String)">
            <summary>
            返回double值列表
            </summary>
            <param name="p_key">键名</param>
            <returns>double值列表</returns>
        </member>
        <member name="M:Dt.Core.Dict.DoubleArray(System.String)">
            <summary>
            返回double值数组
            </summary>
            <param name="p_key">键名</param>
            <returns>double值数组</returns>
        </member>
        <member name="M:Dt.Core.Dict.Int(System.String)">
            <summary>
            返回整数值
            </summary>
            <param name="p_key">列名</param>
            <returns>整数值</returns>
        </member>
        <member name="M:Dt.Core.Dict.IntList(System.String)">
            <summary>
            返回整数值列表
            </summary>
            <param name="p_key">列名</param>
            <returns>整数值列表</returns>
        </member>
        <member name="M:Dt.Core.Dict.IntArray(System.String)">
            <summary>
            返回整数值数组
            </summary>
            <param name="p_key">列名</param>
            <returns>整数值数组</returns>
        </member>
        <member name="M:Dt.Core.Dict.Long(System.String)">
            <summary>
            返回long值
            </summary>
            <param name="p_key">键名</param>
            <returns>long值</returns>
        </member>
        <member name="M:Dt.Core.Dict.Date(System.String)">
            <summary>
            返回DateTime值
            </summary>
            <param name="p_key">键名</param>
            <returns>DateTime值</returns>
        </member>
        <member name="M:Dt.Core.Dict.Char(System.String)">
            <summary>
            返回char值
            </summary>
            <param name="p_key">键名</param>
            <returns>char值</returns>
        </member>
        <member name="M:Dt.Core.Dict.ByteArray(System.String)">
            <summary>
            返回byte[]值
            </summary>
            <param name="p_key">键名</param>
            <returns>byte[]值</returns>
        </member>
        <member name="M:Dt.Core.Dict.GetVal``1(System.String)">
            <summary>
            返回指定键的值
            </summary>
            <param name="p_key">键名</param>
            <returns>值</returns>
        </member>
        <member name="T:Dt.Core.CellList">
            <summary>
            内部维护数据项列表类
            </summary>
        </member>
        <member name="M:Dt.Core.CellList.#ctor">
            <summary>
            构造方法，键比较时忽略大小写
            </summary>
        </member>
        <member name="P:Dt.Core.CellList.Item(System.String)">
            <summary>
            通过列名获取数据项
            </summary>
            <param name="p_colName">列名</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.CellList.Add(Dt.Core.Cell)">
            <summary>
            屏蔽外部直接添加
            </summary>
            <param name="p_cell"></param>
        </member>
        <member name="M:Dt.Core.CellList.Remove(System.String)">
            <summary>
            屏蔽外部直接删除
            </summary>
            <param name="p_name"></param>
        </member>
        <member name="M:Dt.Core.CellList.Remove(Dt.Core.Cell)">
            <summary>
            屏蔽外部直接删除
            </summary>
            <param name="p_cell"></param>
        </member>
        <member name="M:Dt.Core.CellList.RemoveAt(System.Int32)">
            <summary>
            屏蔽外部直接删除
            </summary>
            <param name="p_index"></param>
        </member>
        <member name="M:Dt.Core.CellList.GetKeyForItem(Dt.Core.Cell)">
            <summary>
            列名作为键值
            </summary>
            <param name="p_item">当前数据项</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.Column">
            <summary>
            数据列，已移除列默认值功能！
            </summary>
        </member>
        <member name="M:Dt.Core.Column.#ctor(System.String,System.Type)">
            <summary>
            列名不可为空，列类型默认为string
            </summary>
            <param name="p_colName">列名</param>
            <param name="p_colType">列数据类型</param>
        </member>
        <member name="P:Dt.Core.Column.ID">
            <summary>
            列字段名
            </summary>
        </member>
        <member name="P:Dt.Core.Column.Type">
            <summary>
             列类型
            </summary>
        </member>
        <member name="T:Dt.Core.ColumnList">
            <summary>
            数据表中的列集合，可以按索引或列名获取Column对象
            </summary>
        </member>
        <member name="M:Dt.Core.ColumnList.#ctor(Dt.Core.Table)">
            <summary>
            构造方法，键比较时忽略大小写
            </summary>
        </member>
        <member name="M:Dt.Core.ColumnList.Add(Dt.Core.Column)">
            <summary>
            添加列，同步到所有Row
            </summary>
            <param name="p_col">列</param>
        </member>
        <member name="M:Dt.Core.ColumnList.Remove(System.String)">
            <summary>
            删除列，同步到所有Row
            </summary>
            <param name="p_colName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ColumnList.Remove(Dt.Core.Column)">
            <summary>
            删除列，同步到所有Row
            </summary>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.ColumnList.RemoveAt(System.Int32)">
            <summary>
            删除列，同步到Row
            </summary>
            <param name="p_index"></param>
        </member>
        <member name="M:Dt.Core.ColumnList.RemoveColumnData(System.String)">
            <summary>
            删除列数据
            </summary>
            <param name="p_colName"></param>
        </member>
        <member name="M:Dt.Core.ColumnList.GetKeyForItem(Dt.Core.Column)">
            <summary>
            根据数据列获得列字段名
            </summary>
            <param name="item">数据列</param>
            <returns>列字段名</returns>
        </member>
        <member name="T:Dt.Core.Row">
            <summary>
            数据行管理类
            </summary>
        </member>
        <member name="M:Dt.Core.Row.#ctor">
            <summary>
            用来构造独立行，脱离Table使用
            </summary>
        </member>
        <member name="E:Dt.Core.Row.Changed">
            <summary>
            内部单元格的值发生变化
            </summary>
        </member>
        <member name="P:Dt.Core.Row.Item(System.String)">
            <summary>
            根据列名获取设置列值
            <para>1. 触发属性值变化事件，改变IsChanged状态</para>
            <para>2. 设置列的默认值时，请使用InitVal方法</para>
            </summary>
            <param name="p_colName">列名</param>
            <returns>列值</returns>
        </member>
        <member name="P:Dt.Core.Row.Item(System.Int32)">
            <summary>
            根据索引获取设置列值
            <para>1. 触发属性值变化事件，改变IsChanged状态</para>
            <para>2. 设置列的默认值时，请使用InitVal方法</para>
            </summary>
            <param name="p_index">列索引</param>
            <returns>列值</returns>
        </member>
        <member name="P:Dt.Core.Row.ID">
            <summary>
            获取设置id列的值，常用的实体属性
            </summary>
        </member>
        <member name="P:Dt.Core.Row.Cells">
            <summary>
            获取当前所有数据项
            </summary>
        </member>
        <member name="P:Dt.Core.Row.IsChanged">
            <summary>
            获取当前行是否已发生更改。
            </summary>
        </member>
        <member name="P:Dt.Core.Row.IsAdded">
            <summary>
            获取设置当前行是否为新增
            </summary>
        </member>
        <member name="P:Dt.Core.Row.ChangedCells">
            <summary>
            获得已改变的Cell
            </summary>
            <returns>Cell列表</returns>
        </member>
        <member name="P:Dt.Core.Row.Index">
            <summary>
            获取在Table中的序号
            </summary>
        </member>
        <member name="P:Dt.Core.Row.Description">
            <summary>
            获取业务对象的描述信息
            </summary>
        </member>
        <member name="P:Dt.Core.Row.Table">
            <summary>
            当前行所属父集合
            </summary>
        </member>
        <member name="P:Dt.Core.Row.Tag">
            <summary>
            获取设置用于存储与此对象相关的任意对象值
            </summary>
        </member>
        <member name="M:Dt.Core.Row.AcceptChanges">
            <summary>
            提交自上次调用以来对该行进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Core.Row.RejectChanges">
            <summary>
            回滚自该表加载以来或上次调用 AcceptChanges 以来对该行进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Core.Row.AddCell``1(System.String,``0)">
            <summary>
            添加新数据项
            </summary>
            <typeparam name="T">Cell的数据类型</typeparam>
            <param name="p_cellName">字段名，不可为空，作为键值</param>
            <param name="p_value">初始值</param>
        </member>
        <member name="M:Dt.Core.Row.Clone">
            <summary>
            深度克隆行对象，返回同类型的独立行
            </summary>
            <returns>返回独立行</returns>
        </member>
        <member name="M:Dt.Core.Row.CloneTo``1">
            <summary>
            将当前对象深度克隆到指定类型的新实体对象，返回新独立实体，一般类型转换时用
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns>返回新独立实体</returns>
        </member>
        <member name="M:Dt.Core.Row.CloneTo(System.Type)">
            <summary>
            将当前对象深度克隆到指定类型的新实体对象，返回新独立实体，一般类型转换时用
            </summary>
            <param name="p_type">实体类型</param>
            <returns>返回新独立实体</returns>
        </member>
        <member name="M:Dt.Core.Row.Contains(System.String)">
            <summary>
            判断是否包含给定的列
            </summary>
            <param name="p_columnName">列名</param>
            <returns>true 包含</returns>
        </member>
        <member name="M:Dt.Core.Row.Remove">
            <summary>
            删除当前行
            </summary>
        </member>
        <member name="M:Dt.Core.Row.ToDict">
            <summary>
            Row转换成Dict对象
            </summary>
            <returns>Dict对象</returns>
        </member>
        <member name="M:Dt.Core.Row.InitVal(System.Object)">
            <summary>
            批量设置单元格默认值，恢复单元格IsChanged=false状态，为简化编码支持匿名对象
            </summary>
            <param name="p_anonyVal">含值的对象，将对象属性值作为初始值</param>
        </member>
        <member name="M:Dt.Core.Row.InitVal(System.String,System.Object)">
            <summary>
            设置单元格默认值，恢复单元格IsChanged=false状态
            </summary>
            <param name="p_colName">列名</param>
            <param name="p_val">列值</param>
        </member>
        <member name="M:Dt.Core.Row.InitVal(System.Int32,System.Object)">
            <summary>
            按照索引设置单元格默认值，恢复单元格IsChanged=false状态
            </summary>
            <param name="p_index">列索引</param>
            <param name="p_val">列值</param>
        </member>
        <member name="M:Dt.Core.Row.Copy(Dt.Core.Row)">
            <summary>
            复制给定行数据的对应列值
            </summary>
            <param name="p_src"></param>
        </member>
        <member name="M:Dt.Core.Row.ResetType(System.String,System.Type)">
            <summary>
            重置列类型
            </summary>
            <param name="p_colName">列名</param>
            <param name="p_tgtType">转换到的目标类型</param>
            <returns>true 重置成功</returns>
        </member>
        <member name="M:Dt.Core.Row.Str(System.Int32)">
            <summary>
            根据索引获取指定列的字符串值，为null时返回string.Empty！！！
            </summary>
            <param name="p_index">索引</param>
            <returns>字符串值</returns>
        </member>
        <member name="M:Dt.Core.Row.Str(System.String)">
            <summary>
            根据列名获取指定列的字符串值，为null时返回string.Empty！！！
            </summary>
            <param name="p_columnName">列名</param>
            <returns>字符串值</returns>
        </member>
        <member name="M:Dt.Core.Row.IsEmpty(System.Int32)">
            <summary>
            指定列的字符串值是否为空
            </summary>
            <param name="p_index">索引</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.IsEmpty(System.String)">
            <summary>
            指定列的字符串值是否为空
            </summary>
            <param name="p_columnName">列名</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.IsZero(System.Int32)">
            <summary>
            指定列的字符串值是否为0
            </summary>
            <param name="p_index">索引</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.IsZero(System.String)">
            <summary>
            指定列的字符串值是否为0
            </summary>
            <param name="p_columnName">列名</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.Bool(System.Int32)">
            <summary>
            指定列的值是否为1或true
            </summary>
            <param name="p_index">索引</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.Bool(System.String)">
            <summary>
            指定列的值是否为1或true
            </summary>
            <param name="p_columnName">列名</param>
            <returns>true 表示列值为空</returns>
        </member>
        <member name="M:Dt.Core.Row.Double(System.Int32)">
            <summary>
            根据索引获取指定列的double值，为null时返回零即default(double)！！！
            </summary>
            <param name="p_index">索引</param>
            <returns>double值</returns>
        </member>
        <member name="M:Dt.Core.Row.Double(System.String)">
            <summary>
            根据列名获取指定列的double值，为null时返回零即default(double)！！！
            </summary>
            <param name="p_columnName">列名</param>
            <returns>double值</returns>
        </member>
        <member name="M:Dt.Core.Row.Int(System.Int32)">
            <summary>
            根据索引获取指定列的整数值，为null时返回零即default(int)！！！
            </summary>
            <param name="p_index">索引</param>
            <returns>整数值</returns>
        </member>
        <member name="M:Dt.Core.Row.Int(System.String)">
            <summary>
            根据列名获取指定列的整数值，为null时返回零即default(int)！！！
            </summary>
            <param name="p_columnName">列名</param>
            <returns>整数值</returns>
        </member>
        <member name="M:Dt.Core.Row.Long(System.Int32)">
            <summary>
            根据索引获取指定列的64位整数值，为null时返回零即default(long)！！！
            </summary>
            <param name="p_index">索引</param>
            <returns>整数值</returns>
        </member>
        <member name="M:Dt.Core.Row.Long(System.String)">
            <summary>
            根据列名获取指定列的64位整数值，为null时返回零即default(long)！！！
            </summary>
            <param name="p_columnName">列名</param>
            <returns>整数值</returns>
        </member>
        <member name="M:Dt.Core.Row.Date(System.Int32)">
            <summary>
            根据索引获取指定列的日期值，为null时返回DateTime.MinValue，即default(DateTime)！！！
            </summary>
            <param name="p_index">索引</param>
            <returns>日期值</returns>
        </member>
        <member name="M:Dt.Core.Row.Date(System.String)">
            <summary>
            根据列名获取指定列的日期值，为null时返回DateTime.MinValue，即default(DateTime)！！！
            </summary>
            <param name="p_columnName">列名</param>
            <returns>日期值</returns>
        </member>
        <member name="M:Dt.Core.Row.Nullable``1(System.Int32)">
            <summary>
            根据索引获取指定列的可空类型值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="p_index">索引</param>
            <returns>可空类型值</returns>
        </member>
        <member name="M:Dt.Core.Row.Nullable``1(System.String)">
            <summary>
            根据列名获取指定列的可空类型值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="p_columnName">列名</param>
            <returns>可空类型值</returns>
        </member>
        <member name="M:Dt.Core.Row.GetVal``1(System.Int32)">
            <summary>
            根据索引获取指定列的值，若指定类型和当前类型匹配：
            <para>string类型为null时返回string.Empty</para>
            <para>其它类型为null时返回default(T)，即引用类型返回 null，数值类型会返回零</para>
            <para>有其它需要时请自行处理</para>
            <para>另外，只提供从其它类型到string类型转换</para>
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="p_index">索引</param>
            <returns>返回已转换为指定类型的值</returns>
        </member>
        <member name="M:Dt.Core.Row.GetVal``1(System.String)">
            <summary>
            根据列名获取指定列的值，若指定类型和当前类型匹配：
            <para>string类型为null时返回string.Empty</para>
            <para>其它类型为null时返回default(T)，即引用类型返回 null，数值类型会返回零</para>
            <para>有其它需要时请自行处理</para>
            <para>另外，只提供从其它类型到string类型转换</para>
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="p_columnName">列名</param>
            <returns>返回已转换为指定类型的值</returns>
        </member>
        <member name="M:Dt.Core.Row.GetOriginalVal``1(System.String)">
            <summary>
            根据列名获取指定列的原始值
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="p_columnName">列名</param>
            <returns>返回已转换为指定类型的值</returns>
        </member>
        <member name="M:Dt.Core.Row.CheckChanges">
            <summary>
            检查当前行数据是否有变化，同时更新IsChanged属性
            </summary>
        </member>
        <member name="M:Dt.Core.Row.OnValueChanged(Dt.Core.Cell)">
            <summary>
            触发单元格值变化事件
            </summary>
            <param name="p_cell"></param>
        </member>
        <member name="M:Dt.Core.Row.AttachHook">
            <summary>
            反序列化时Entity附加Hook方法
            </summary>
        </member>
        <member name="E:Dt.Core.Row.PropertyChanged">
            <summary>
            属性 IsChanged 变化事件
            </summary>
        </member>
        <member name="T:Dt.Core.Table`1">
            <summary>
            泛型数据表，因涉及对UI的MVVM支持、序列化支持、DDD支持，设计时继承关系比较诡异，正常应该为Table的基类！
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Dt.Core.Table`1.CreateRowInstance">
            <summary>
            创建行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table`1.Create">
            <summary>
            创建空Table
            </summary>
            <returns>空表</returns>
        </member>
        <member name="P:Dt.Core.Table`1.Items">
            <summary>
            实体列表，只为在 linq 中能识别实体类型用！如：
            <para>from item in _atvs.Items</para>
            </summary>
        </member>
        <member name="P:Dt.Core.Table`1.Item(System.Int32)">
            <summary>
            通过索引获取的类型为TRow
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.Table`1.GetEnumerator">
            <summary>
            确保 foreach 时类型为TRow
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.TableSchema">
            <summary>
            存储表结构信息，分主键列列表和普通列列表
            </summary>
        </member>
        <member name="P:Dt.Core.TableSchema.Name">
            <summary>
            表名，小写
            </summary>
        </member>
        <member name="P:Dt.Core.TableSchema.PrimaryKey">
            <summary>
            主键列列表
            </summary>
        </member>
        <member name="P:Dt.Core.TableSchema.Columns">
            <summary>
            普通列列表
            </summary>
        </member>
        <member name="P:Dt.Core.TableSchema.SqlSelect">
            <summary>
            根据主键查询实体的sql，只支持单主键
            </summary>
        </member>
        <member name="P:Dt.Core.TableSchema.SqlDelete">
            <summary>
            根据主键删除实体的sql，只支持单主键
            </summary>
        </member>
        <member name="M:Dt.Core.TableSchema.GetSaveSql(Dt.Core.Row)">
            <summary>
            生成保存实体的sql及参数，返回Dict的结构：包含两个键text和params，text值为sql字符串，params值为sql参数Dict
            </summary>
            <param name="p_row">待保存的行</param>
            <returns>返回提交参数</returns>
        </member>
        <member name="M:Dt.Core.TableSchema.GetBatchSaveSql(System.Collections.IList)">
            <summary>
            生成保存实体列表的sql及参数，Dict结构：text(值为sql模板)，params(值为List`Dict`，每个Dict为sql参数)
            </summary>
            <param name="p_rows">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TableSchema.GetDeleteSql(System.Collections.IList)">
            <summary>
            生成删除行数据的sql，Dict结构：text(值为sql模板)，params(值为List`Dict`，每个Dict为sql参数)
            </summary>
            <param name="p_rows"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TableSchema.GetSelectAllSql">
            <summary>
            选择所有数据的sql
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.TableSchema.GenRowParm(Dt.Core.Dict)">
            <summary>
            将纵向保存的列值转换成横向保存的列值。
            </summary>
            <param name="p_parm">dict[string,array]</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.TableCol">
            <summary>
            列描述类
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.Name">
            <summary>
            列名，数据库中的原始写法，未调整到小写
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.Type">
            <summary>
            列类型
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.Length">
            <summary>
            列长度，只字符类型有效
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.Nullable">
            <summary>
            列是否允许为空
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.Default">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:Dt.Core.TableCol.Comments">
            <summary>
            列注释
            </summary>
        </member>
        <member name="T:Dt.Core.TblAttribute">
            <summary>
            实体类映射表标签
            </summary>
        </member>
        <member name="P:Dt.Core.TblAttribute.Name">
            <summary>
            实体类对应的表名
            </summary>
        </member>
        <member name="T:Dt.Core.EntitySchema">
            <summary>
            实体结构定义
            </summary>
        </member>
        <member name="P:Dt.Core.EntitySchema.Schema">
            <summary>
            表结构
            </summary>
        </member>
        <member name="P:Dt.Core.EntitySchema.OnSaving">
            <summary>
            保存前的处理，抛出异常时取消保存，实体中的方法规范：私有方法OnSaving，无入参，返回值void 或 Task
            </summary>
        </member>
        <member name="P:Dt.Core.EntitySchema.OnDeleting">
            <summary>
            删除前的处理，抛出异常时取消删除，实体中的方法规范：私有方法OnDeleting，无入参，返回值void 或 Task
            </summary>
        </member>
        <member name="M:Dt.Core.EntitySchema.Get(System.Type)">
            <summary>
            获取实体类型的定义
            </summary>
            <param name="p_type">实体类型</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.EnumEx">
            <summary>
            枚举扩展类
            </summary>
        </member>
        <member name="M:Dt.Core.EnumEx.GetValues(System.Enum)">
            <summary>
            得到类型的字段数组
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.EnumEx.GetTypedValues``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.EnumEx.GetValues(System.Type)">
            <summary>
            根据枚举类型获取字段数据数组
            </summary>
            <param name="enumType">枚举类型</param>
            <returns>字段值数组</returns>
        </member>
        <member name="M:Dt.Core.EnumEx.EnumTryParse``1(System.String,``0@)">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="valueAsString"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.EnumEx.EnumTryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="valueAsString"></param>
            <param name="ignoreCase"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.ObjectEx">
            <summary>
            扩展类
            </summary>
        </member>
        <member name="M:Dt.Core.ObjectEx.To``1(System.Object)">
            <summary>
            类型转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_obj"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.KnownException">
            <summary>
            程序中已做判断的异常
            </summary>
        </member>
        <member name="T:Dt.Core.LetterInfo">
            <summary>
            聊天信息描述
            </summary>
        </member>
        <member name="P:Dt.Core.LetterInfo.ID">
            <summary>
            信息标识
            </summary>
        </member>
        <member name="P:Dt.Core.LetterInfo.SenderID">
            <summary>
            发送者标识
            </summary>
        </member>
        <member name="P:Dt.Core.LetterInfo.SenderName">
            <summary>
            发送者名称
            </summary>
        </member>
        <member name="P:Dt.Core.LetterInfo.LetterType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:Dt.Core.LetterInfo.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Dt.Core.LetterInfo.SendTime">
            <summary>
            发送时间
            </summary>
        </member>
        <member name="T:Dt.Core.LetterType">
            <summary>
            信息种类
            </summary>
        </member>
        <member name="F:Dt.Core.LetterType.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:Dt.Core.LetterType.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="F:Dt.Core.LetterType.Image">
            <summary>
            图片
            </summary>
        </member>
        <member name="F:Dt.Core.LetterType.Voice">
            <summary>
            声音
            </summary>
        </member>
        <member name="F:Dt.Core.LetterType.Video">
            <summary>
            视频
            </summary>
        </member>
        <member name="F:Dt.Core.LetterType.Link">
            <summary>
            链接
            </summary>
        </member>
        <member name="F:Dt.Core.LetterType.Undo">
            <summary>
            撤回
            </summary>
        </member>
        <member name="T:Dt.Core.MsgInfo">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:Dt.Core.MsgInfo.MethodName">
            <summary>
            在线时调用客户端的方法名
            </summary>
        </member>
        <member name="P:Dt.Core.MsgInfo.Params">
            <summary>
            在线时调用客户端方法的参数
            </summary>
        </member>
        <member name="P:Dt.Core.MsgInfo.Title">
            <summary>
            离线推送时的消息标题
            </summary>
        </member>
        <member name="P:Dt.Core.MsgInfo.Content">
            <summary>
            离线推送时的消息内容
            </summary>
        </member>
        <member name="M:Dt.Core.MsgInfo.GetOnlineMsg">
            <summary>
            获取在线推送的内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.MsgInfo.GetToastMsg">
            <summary>
            获取Toast内容xml
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.ServerException">
            <summary>
            服务器异常
            </summary>
        </member>
        <member name="T:Dt.Core.Throw">
            <summary>
            抛出异常
            </summary>
        </member>
        <member name="M:Dt.Core.Throw.If(System.Boolean,System.String)">
            <summary>
            条件true时抛出异常，业务处理异常请指定异常消息，未指定异常消息时只抛出异常位置辅助判断
            </summary>
            <param name="p_assert">true时抛出异常</param>
            <param name="p_msg">异常消息</param>
        </member>
        <member name="M:Dt.Core.Throw.IfNull``1(``0,System.String)">
            <summary>
            参数为null时抛出异常，业务处理异常请指定异常消息，未指定异常消息时只抛出异常位置辅助判断
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p_value">待判断对象</param>
            <param name="p_msg">异常消息</param>
        </member>
        <member name="M:Dt.Core.Throw.IfNullOrEmpty(System.String,System.String)">
            <summary>
            字符串null或空时抛出异常，业务处理异常请指定异常消息，未指定异常消息时只抛出异常位置辅助判断
            </summary>
            <param name="p_value">待判断串</param>
            <param name="p_msg">异常消息</param>
        </member>
        <member name="M:Dt.Core.Throw.Msg(System.String)">
            <summary>
            直接抛出异常，业务处理异常请指定异常消息，未指定异常消息时只抛出异常位置辅助判断
            </summary>
            <param name="p_msg">异常消息</param>
        </member>
        <member name="M:Dt.Core.Throw.ThrowMsg(System.String)">
            <summary>
            uno中在UI主线程调用时，如在Button.Click事件方法中调用，若方法是同步，不catch也没能抛出未处理异常！诡异
            </summary>
            <param name="p_msg"></param>
        </member>
        <member name="T:Dt.Core.IRpcJson">
            <summary>
            按照Rpc Json数据结构进行序列化和反序列化接口
            </summary>
        </member>
        <member name="M:Dt.Core.IRpcJson.ReadRpcJson(System.Text.Json.Utf8JsonReader@)">
            <summary>
            反序列化读取Rpc Json数据
            </summary>
        </member>
        <member name="M:Dt.Core.IRpcJson.WriteRpcJson(System.Text.Json.Utf8JsonWriter)">
            <summary>
            将对象按照Rpc Json数据结构进行序列化
            </summary>
        </member>
        <member name="T:Dt.Core.JsonOptions">
            <summary>
            Json序列化选项
            </summary>
        </member>
        <member name="F:Dt.Core.JsonOptions.UnsafeWriter">
            <summary>
            JsonWriter序列化时不对中文和转义字符进行编码
            </summary>
        </member>
        <member name="F:Dt.Core.JsonOptions.IndentedWriter">
            <summary>
            JsonWriter序列化时不对中文和转义字符进行编码，含有缩进
            </summary>
        </member>
        <member name="F:Dt.Core.JsonOptions.UnsafeSerializer">
            <summary>
            序列化时不对中文和转义字符进行编码
            </summary>
        </member>
        <member name="F:Dt.Core.JsonOptions.IndentedSerializer">
            <summary>
            序列化时不对中文和转义字符进行编码，含有缩进
            </summary>
        </member>
        <member name="T:Dt.Core.JsonRpcSerializer">
            <summary>
            Json Rpc序列化、反序列化
            </summary>
        </member>
        <member name="M:Dt.Core.JsonRpcSerializer.Serialize(System.Object,System.Text.Json.Utf8JsonWriter)">
            <summary>
            序列化
            </summary>
            <param name="p_value"></param>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Core.JsonRpcSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="p_reader"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.JsonRpcSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="p_reader"></param>
            <param name="p_tgtType">目标类型，默认null，无目标类型，列表、字节数组不支持类型转换</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Core.RpcJsonConverter`1">
            <summary>
            属性自定义json序列化/反序列化，属性类型需实现IRpcJson接口
            </summary>
        </member>
        <member name="T:Dt.Core.RpcJsonAttribute">
            <summary>
            使用内部IRpcJson接口自定义json序列化/反序列化，如在属性类型为Table,Row,Dict时添加此标签，即可按内部方式，秒！
            </summary>
        </member>
        <member name="T:Dt.Core.SerializeTypeAlias">
            <summary>
            序列化时类型/名称映射表，只针对枚举、数组、自定义类型
            </summary>
        </member>
        <member name="M:Dt.Core.SerializeTypeAlias.GetType(System.String)">
            <summary>
            查询可序列化类型，未找到时自动抛出异常
            </summary>
            <param name="p_alias">类型别名</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.SerializeTypeAlias.GetAlias(System.Type)">
            <summary>
            查询某类型序列化时的别名
            </summary>
            <param name="p_type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Core.SerializeTypeAlias.Merge(System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            合并可序列化类型字典
            </summary>
            <param name="p_dict"></param>
        </member>
        <member name="M:Dt.Core.SerializeTypeAlias.Add(System.String,System.Type)">
            <summary>
            增加自定义序列化类型
            </summary>
            <param name="p_alias">类型别名</param>
            <param name="p_type">类型</param>
        </member>
        <member name="T:Dt.Core.GlobalStaticResources">
            <summary>
            Contains all the static resources defined for the application
            </summary>
        </member>
    </members>
</doc>
