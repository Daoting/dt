<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dt.Base</name>
    </assembly>
    <members>
        <member name="T:Dt.Base.AtApp">
            <summary>
            客户端整个生命周期管理类
            </summary>
        </member>
        <member name="M:Dt.Base.AtApp.Run``1(System.String,Dt.Core.ShareInfo)">
            <summary>
            应用程序启动
            </summary>
            <typeparam name="T">存根类型</typeparam>
            <param name="p_launchArgs">启动参数</param>
            <param name="p_shareInfo">接收分享的内容描述</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtApp.OpenModelDb(System.String)">
            <summary>
            更新打开模型文件
            1. 与本地不同时下载新模型文件；
            2. 打开模型库；
            </summary>
            <param name="p_svcName">服务名，</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtApp.PromptForUpdateModel(System.String)">
            <summary>
            提示需要更新模型
            </summary>
            <param name="p_msg">提示消息</param>
        </member>
        <member name="M:Dt.Base.AtApp.LoginSuccess(Dt.Core.Dict,Dt.Base.Dlg)">
            <summary>
            登录成功后的处理
            </summary>
            <param name="p_info">用户信息</param>
            <param name="p_dlg"></param>
        </member>
        <member name="M:Dt.Base.AtApp.OpenView(System.String,System.String,Dt.Base.Icons,System.Object)">
            <summary>
            根据视图名称激活旧窗口或打开新窗口
            </summary>
            <param name="p_viewName">窗口视图名称</param>
            <param name="p_title">标题</param>
            <param name="p_icon">图标</param>
            <param name="p_params">启动参数</param>
            <returns>返回打开的窗口或视图，null表示打开失败</returns>
        </member>
        <member name="M:Dt.Base.AtApp.OpenWin(System.Type,System.String,Dt.Base.Icons,System.Object)">
            <summary>
            根据窗口/视图类型和参数激活旧窗口、打开新窗口 或 自定义启动(IView)
            </summary>
            <param name="p_type">窗口/视图类型</param>
            <param name="p_title">标题</param>
            <param name="p_icon">图标</param>
            <param name="p_params">初始参数</param>
            <returns>返回打开的窗口或视图，null表示打开失败</returns>
        </member>
        <member name="M:Dt.Base.AtApp.GetViewType(System.String)">
            <summary>
            获取视图类型
            </summary>
            <param name="p_typeName">类型名称</param>
            <returns>返回类型</returns>
        </member>
        <member name="M:Dt.Base.AtApp.LoadRootUI">
            <summary>
            加载根内容 Desktop 或 Frame
            </summary>
        </member>
        <member name="P:Dt.Base.AtApp.RootFrame">
            <summary>
            PhoneUI模式的根Frame
            </summary>
        </member>
        <member name="P:Dt.Base.AtApp.ViewWidth">
            <summary>
            可视区域宽度
            手机：页面宽度
            PC上：除标题栏和外框的窗口内部宽度
            </summary>
        </member>
        <member name="P:Dt.Base.AtApp.ViewHeight">
            <summary>
            可视区域高度
            手机：不包括状态栏的高度
            PC上：除标题栏和外框的窗口内部高度
            </summary>
        </member>
        <member name="M:Dt.Base.AtApp.OnUIModeChanged">
            <summary>
            WinUI模式 和 PhoneUI模式切换
            </summary>
        </member>
        <member name="T:Dt.Base.AtFile">
            <summary>
            文件服务Api代理类（自动生成）
            </summary>
        </member>
        <member name="M:Dt.Base.AtFile.Exists(System.String)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="p_filePath">文件ID：卷名/两级目录/xxx.ext</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtFile.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="p_filePath">文件ID：卷名/两级目录/xxx.ext</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.AtMsg">
            <summary>
            消息服务Api代理类（自动生成）
            </summary>
        </member>
        <member name="M:Dt.Base.AtMsg.Register(Dt.Core.Dict)">
            <summary>
            客户端注册在线推送
            </summary>
            <param name="p_deviceInfo">客户端设备信息</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtMsg.IsOnline(System.Int64)">
            <summary>
            判断用户是否在线，查询所有副本
            </summary>
            <param name="p_userID"></param>
            <returns>null 不在线</returns>
        </member>
        <member name="M:Dt.Base.AtMsg.GetOnlineCount">
            <summary>
            实时获取所有副本的在线用户总数
            </summary>
            <returns>Dict结构：key为副本id，value为副本会话总数</returns>
        </member>
        <member name="M:Dt.Base.AtMsg.SendMsg(System.Int64,System.String)">
            <summary>
            向某用户的客户端推送系统消息
            </summary>
            <param name="p_userID"></param>
            <param name="p_msg"></param>
            <returns>true 在线推送</returns>
        </member>
        <member name="M:Dt.Base.AtMsg.BatchSendMsg(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            向用户列表的所有客户端推送系统消息
            </summary>
            <param name="p_userIDs">用户列表</param>
            <param name="p_msg">待推送信息</param>
            <returns>在线推送列表</returns>
        </member>
        <member name="M:Dt.Base.AtMsg.SendMsgToOnline(System.String)">
            <summary>
            向所有副本的所有在线用户广播信息
            </summary>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Base.AtMsg.SendLetter(System.Int64,Dt.Core.LetterInfo)">
            <summary>
            向某用户的客户端推送聊天信息，可通过指定LetterInfo.LetterType为Undo撤回信息
            </summary>
            <param name="p_userID">目标用户</param>
            <param name="p_letter">聊天信息</param>
            <returns>true 在线推送</returns>
        </member>
        <member name="M:Dt.Base.AtMsg.BatchSendLetter(System.Collections.Generic.List{System.Int64},Dt.Core.LetterInfo)">
            <summary>
            向用户列表的所有客户端推送聊天信息，可通过指定LetterInfo.LetterType为Undo撤回信息
            </summary>
            <param name="p_userIDs">用户列表</param>
            <param name="p_letter">聊天信息</param>
            <returns>在线推送列表</returns>
        </member>
        <member name="M:Dt.Base.AtMsg.SendCmd(System.Int64,Dt.Core.MsgInfo)">
            <summary>
            向某用户的客户端推送指令信息
            </summary>
            <param name="p_userID"></param>
            <param name="p_msg"></param>
            <returns>true 在线推送</returns>
        </member>
        <member name="M:Dt.Base.AtMsg.BatchSendCmd(System.Collections.Generic.List{System.Int64},Dt.Core.MsgInfo)">
            <summary>
            向用户列表的所有客户端推送指令信息
            </summary>
            <param name="p_userIDs">用户列表</param>
            <param name="p_msg">待推送信息</param>
            <returns>在线推送列表</returns>
        </member>
        <member name="M:Dt.Base.AtMsg.Publish(System.Int64,System.String,System.String)">
            <summary>
            发布订阅信息
            </summary>
            <param name="p_subscribeID">订阅号标识</param>
            <param name="p_msg">信息内容</param>
            <param name="p_offlineTip">离线推送时的提示信息</param>
            <returns>在线收到的人数</returns>
        </member>
        <member name="T:Dt.Base.AtRes">
            <summary>
            资源管理类
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.TransparentBrush">
            <summary>
            透明色
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.BlackBrush">
            <summary>
            黑色
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.BlueBrush">
            <summary>
            蓝色
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.BrownBrush">
            <summary>
            深褐色
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.CyanBrush">
            <summary>
            青色
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.DarkGrayBrush">
            <summary>
            深灰
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.GrayBrush">
            <summary>
            灰色
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.GreenBrush">
            <summary>
            绿色
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.LightGrayBrush">
            <summary>
            浅灰
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.MagentaBrush">
            <summary>
            品红
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.OrangeBrush">
            <summary>
            桔色
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.PurpleBrush">
            <summary>
            紫色
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.RedBrush">
            <summary>
            红色
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.WhiteBrush">
            <summary>
            白色
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.YellowBrush">
            <summary>
            黄色
            </summary>
        </member>
        <member name="M:Dt.Base.AtRes.GetBrushByName(System.String)">
            <summary>
            根据标准颜色的名称获取画刷
            </summary>
            <param name="p_colorName">颜色的名称</param>
            <returns>返回画刷</returns>
        </member>
        <member name="P:Dt.Base.AtRes.字符按钮">
            <summary>
            字符按钮样式
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.浅色按钮">
            <summary>
            浅色按钮样式
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.PhonSearchButton">
            <summary>
            Phone模式的搜索栏按钮
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.DefaultFontSize">
            <summary>
            默认字体大小
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.IconFont">
            <summary>
            图标字体
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.标题">
            <summary>
            标题样式
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.小字">
            <summary>
            小字样式
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.字符">
            <summary>
            字符文本样式
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.LvTextBlock">
            <summary>
            Lv中默认文本
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.RowOuterHeight">
            <summary>
            默认行外高，含边框1
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.RowInnerHeight">
            <summary>
            默认行内容高度
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.NaviTransition">
            <summary>
            页面导航动画
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.ForwardTransition">
            <summary>
            前进效果动画
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.BackTransition">
            <summary>
            返回效果动画
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.AddDeleteTransition">
            <summary>
            返回效果动画
            </summary>
        </member>
        <member name="M:Dt.Base.AtRes.GetIcon(Dt.Base.Icons,System.Int32,Windows.UI.Xaml.Media.Brush)">
            <summary>
            根据图标类型生成图标文字
            </summary>
            <param name="p_icon">图标资源名称</param>
            <param name="p_size">大小</param>
            <param name="p_brush">画刷颜色</param>
            <returns>图标文字</returns>
        </member>
        <member name="M:Dt.Base.AtRes.GetIconChar(Dt.Base.Icons)">
            <summary>
            获取图标的unicode字符
            </summary>
            <param name="p_icon"></param>
            <returns>unicode字符</returns>
        </member>
        <member name="M:Dt.Base.AtRes.ParseIcon(System.String)">
            <summary>
            根据图标名称获取图标枚举类型
            </summary>
            <param name="p_icon">图标名称</param>
            <returns>图标枚举类型</returns>
        </member>
        <member name="M:Dt.Base.AtRes.ParseIconChar(System.String)">
            <summary>
            根据图标名称获取unicode字符
            </summary>
            <param name="p_icon">图标名称</param>
            <returns>unicode字符</returns>
        </member>
        <member name="M:Dt.Base.AtRes.ParseGeometry(System.String)">
            <summary>
            解析Path.Data字符串内容，返回Geometry
            </summary>
            <param name="p_data"></param>
            <returns>返回Geometry对象</returns>
        </member>
        <member name="M:Dt.Base.AtRes.ParsePath(System.String)">
            <summary>
            根据path的定义字符串形成path
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtRes.CloneGeometry(Windows.UI.Xaml.Media.PathGeometry)">
            <summary>
            深度克隆PathGeometry
            </summary>
            <param name="p_pathGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtRes.CloneSegments(Windows.UI.Xaml.Media.PathSegmentCollection)">
            <summary>
            深度克隆PathSegment集合
            </summary>
            <param name="p_pathSegColl"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtRes.ClonePoints(Windows.UI.Xaml.Media.PointCollection)">
            <summary>
            复制点集合
            </summary>
            <param name="p_pts"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtRes.GetCharIdx(System.String)">
            <summary>
            取得字符串中第一个不是数字和点的字符的位置。
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.AtRes.VirFileTemplate">
            <summary>
            FileItem默认模板
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.VirImageTemplate">
            <summary>
            FileItem图片模板
            </summary>
        </member>
        <member name="P:Dt.Base.AtRes.VirVideoTemplate">
            <summary>
            FileItem视频模板
            </summary>
        </member>
        <member name="M:Dt.Base.AtRes.HexStringToColor(System.String)">
            <summary>
            由标准Color形式字符串转换成Color对象，
            </summary>
            <param name="p_hexColor">color 的字符串表示</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.ChartExtensions">
            <summary>
            Chart扩展方法
            </summary>
        </member>
        <member name="M:Dt.Base.ChartExtensions.LoadTable(Dt.Base.Chart,Dt.Core.Table,System.String,System.String)">
            <summary>
            加载表格数据源图表
            </summary>
            <param name="p_chart"></param>
            <param name="p_tbl">数据源</param>
            <param name="p_colX">x轴取值列名</param>
            <param name="p_colY">y轴取值列名</param>
        </member>
        <member name="M:Dt.Base.ChartExtensions.LoadTable(Dt.Base.Chart,Dt.Core.Table,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            加载表格数据源图表
            </summary>
            <param name="p_chart"></param>
            <param name="p_tbl">数据源</param>
            <param name="p_colX">x轴取值列名</param>
            <param name="p_colY">y轴系列取值列名，每个列名对应一系列</param>
        </member>
        <member name="M:Dt.Base.ChartExtensions.LoadMatrix(Dt.Base.Chart,Dt.Core.Table,System.String,System.String,System.String)">
            <summary>
            加载矩阵数据源图表，动态生成系列
            </summary>
            <param name="p_chart"></param>
            <param name="p_tbl">数据源</param>
            <param name="p_colX">x轴取值列名</param>
            <param name="p_colSeries">系列对应的列名</param>
            <param name="p_colY">y轴取值列名</param>
        </member>
        <member name="T:Dt.Base.CoercePropertyMetadata">
            <summary>
            添加了中间层数据加工的属性元
            </summary>
        </member>
        <member name="M:Dt.Base.CoercePropertyMetadata.#ctor(System.Object,Windows.UI.Xaml.PropertyChangedCallback,Dt.Base.CoerceValueCallback)">
            <summary>
            构造方法
            </summary>
            <param name="p_defaultValue">应用此 PropertyMetadata 的属性的默认值</param>
            <param name="p_propertyChangedCallback">用于为属性更改行为进行调用的回调</param>
            <param name="p_coerceValueCallback">对值加工回调</param>
        </member>
        <member name="M:Dt.Base.CoercePropertyMetadata.Create(Windows.UI.Xaml.PropertyChangedCallback,Dt.Base.CoerceValueCallback)">
            <summary>
            为基类动态构造PropertyChangedCallback类型的回调方法（动态生成方法）
            该方法在依赖属性系统中的属性值发生变化时调用
            </summary>
            <param name="p_propertyChangedCallback">依赖项有效属性值更改时调用的回调。</param>
            <param name="p_coerceValueCallback">值加工回调</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.DependencyPropertyExtensions">
            <summary>
            注册附加依赖属性
            </summary>
        </member>
        <member name="F:Dt.Base.DependencyPropertyExtensions.IsCoercingProperty">
            <summary>
            元素的属性值是否正在进行强制设置
            </summary>
        </member>
        <member name="F:Dt.Base.DependencyPropertyExtensions.StopCoerceProperty">
            <summary>
            是否停止中间层数据加工
            </summary>
        </member>
        <member name="T:Dt.Base.CoerceValueCallback">
            <summary>
            中间层数据加工回调原型
            </summary>
            <param name="element">
            该属性所在的对象。在调用该回调时，属性系统将会传递该值。
            </param>
            <param name="baseValue">该属性在尝试执行任何强制转换之前的新值。</param>
            <returns>强制转换后的值（采用适当的类型）。</returns>
        </member>
        <member name="T:Dt.Base.AutoDateTimeConverter">
            <summary>
            自适应时间转换器，如 昨天，09:13, 2015-04-09
            </summary>
        </member>
        <member name="M:Dt.Base.AutoDateTimeConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            将布尔值转成Visibility枚举值
            </summary>
            <param name="value">正传递到目标的源数据</param>
            <param name="targetType">目标依赖项属性需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到目标依赖项属性的值</returns>
        </member>
        <member name="M:Dt.Base.AutoDateTimeConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            单向绑定
            </summary>
            <param name="value">正传递到源的目标数据</param>
            <param name="targetType">源对象需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到源对象的值</returns>
        </member>
        <member name="T:Dt.Base.BoolToggleConverter">
            <summary>
            对bool取反
            </summary>
        </member>
        <member name="M:Dt.Base.BoolToggleConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            对bool取反
            </summary>
            <param name="value">正传递到目标的源数据</param>
            <param name="targetType">目标依赖项属性需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到目标依赖项属性的值</returns>
        </member>
        <member name="M:Dt.Base.BoolToggleConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            对bool取反
            </summary>
            <param name="value">正传递到源的目标数据</param>
            <param name="targetType">源对象需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到源对象的值</returns>
        </member>
        <member name="T:Dt.Base.BoolToVisibilityConverter">
            <summary>
            表示将布尔值与 Visibility 枚举值相互转换的转换器。
            </summary>
        </member>
        <member name="T:Dt.Base.BoolToVisibilityReverseConverter">
            <summary>
            先将bool值取反，再转换成Visibility
            </summary>
        </member>
        <member name="T:Dt.Base.ColorToBrushConverter">
            <summary>
            将颜色值转换为画刷类
            </summary>
        </member>
        <member name="M:Dt.Base.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            将颜色值转换为画刷
            </summary>
            <param name="value">正传递到目标的源数据</param>
            <param name="targetType">目标依赖项属性需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到目标依赖项属性的值</returns>
        </member>
        <member name="M:Dt.Base.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            未实现
            </summary>
            <param name="value">正传递到源的目标数据</param>
            <param name="targetType">源对象需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到源对象的值</returns>
        </member>
        <member name="T:Dt.Base.DateConverter">
            <summary>
            日期转换器
            </summary>
        </member>
        <member name="P:Dt.Base.DateConverter.Format">
            <summary>
            获取设置格式串
            </summary>
        </member>
        <member name="M:Dt.Base.DateConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            将布尔值转成Visibility枚举值
            </summary>
            <param name="value">正传递到目标的源数据</param>
            <param name="targetType">目标依赖项属性需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到目标依赖项属性的值</returns>
        </member>
        <member name="M:Dt.Base.DateConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            单向绑定
            </summary>
            <param name="value">正传递到源的目标数据</param>
            <param name="targetType">源对象需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到源对象的值</returns>
        </member>
        <member name="T:Dt.Base.DisplayMemberValueConverter">
            <summary>
            将对象转为字符串的类
            </summary>
        </member>
        <member name="M:Dt.Base.DisplayMemberValueConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            将对象转为字符串
            </summary>
            <param name="value">正传递到目标的源数据</param>
            <param name="targetType">目标依赖项属性需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到目标依赖项属性的值</returns>
        </member>
        <member name="M:Dt.Base.DisplayMemberValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            未实现
            </summary>
            <param name="value">正传递到源的目标数据</param>
            <param name="targetType">源对象需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到源对象的值</returns>
        </member>
        <member name="T:Dt.Base.FileLengthConverter">
            <summary>
            文件长度自动转换为K,M,G
            </summary>
        </member>
        <member name="T:Dt.Base.FlagColorConverter">
            <summary>
            将值转换成两种类型画刷
            </summary>
        </member>
        <member name="P:Dt.Base.FlagColorConverter.TrueBrush">
            <summary>
            获取设置值为1或true时返回的画刷
            </summary>
        </member>
        <member name="P:Dt.Base.FlagColorConverter.FalseBrush">
            <summary>
            获取设置值为0或false时返回的画刷
            </summary>
        </member>
        <member name="T:Dt.Base.IconToUnicodeConverter">
            <summary>
            Icons枚举值转unicode字符
            </summary>
        </member>
        <member name="T:Dt.Base.IconNameToUnicodeConverter">
            <summary>
            Icons枚举值名称转unicode字符
            </summary>
        </member>
        <member name="T:Dt.Base.IconToNameConverter">
            <summary>
            用于显示icon的name
            </summary>
        </member>
        <member name="T:Dt.Base.MenuNoteConverter">
            <summary>
            menu下面的功能信息提示信息转换器，在dt.core中只返回string类型的提示信息，要转成textblock。
            </summary>
        </member>
        <member name="T:Dt.Base.NullToStarConverter">
            <summary>
            目标为null时返回GridLength为*，非null为Auto
            </summary>
        </member>
        <member name="T:Dt.Base.NullToZeroConverter">
            <summary>
            目标为null时返回GridLength为0，非null为*
            </summary>
        </member>
        <member name="T:Dt.Base.NullToVisibilityConverter">
            <summary>
            目标无内容时控制是否显示
            </summary>
        </member>
        <member name="P:Dt.Base.NullToVisibilityConverter.Visible">
            <summary>
            获取设置目标无内容时是否显示
            </summary>
        </member>
        <member name="M:Dt.Base.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            返回是否显示
            </summary>
            <param name="value">正传递到目标的源数据</param>
            <param name="targetType">目标依赖项属性需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到目标依赖项属性的值</returns>
        </member>
        <member name="M:Dt.Base.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            单向绑定
            </summary>
            <param name="value">正传递到源的目标数据</param>
            <param name="targetType">源对象需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到源对象的值</returns>
        </member>
        <member name="T:Dt.Base.NumericConverter">
            <summary>
            数值显示转换类
            </summary>
        </member>
        <member name="P:Dt.Base.NumericConverter.Scale">
            <summary>
            获取设置保留小数位
            </summary>
        </member>
        <member name="P:Dt.Base.NumericConverter.IsPercentage">
            <summary>
            获取设置是否显示为百分数
            </summary>
        </member>
        <member name="M:Dt.Base.NumericConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            在将源数据传递到目标以在 UI 中显示之前，对源数据进行修改
            </summary>
            <param name="value">正传递到目标的源数据</param>
            <param name="targetType">目标依赖项属性需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到目标依赖项属性的值</returns>
        </member>
        <member name="M:Dt.Base.NumericConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            在将目标数据传递到源对象之前，对目标数据进行修改
            </summary>
            <param name="value">正传递到源的目标数据</param>
            <param name="targetType">源对象需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到源对象的值</returns>
        </member>
        <member name="T:Dt.Base.ObjectToVisibilityConverter">
            <summary>
            将object与 Visibility 枚举值相互转换的转换器。
            </summary>
        </member>
        <member name="M:Dt.Base.ObjectToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            将object转成Visibility枚举值，字符串"1"或"true"返回Visible，其它情况Collapsed
            </summary>
            <param name="value">正传递到目标的源数据</param>
            <param name="targetType">目标依赖项属性需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到目标依赖项属性的值</returns>
        </member>
        <member name="M:Dt.Base.ObjectToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            将Visibility枚举值转成布尔值
            </summary>
            <param name="value">正传递到源的目标数据</param>
            <param name="targetType">源对象需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到源对象的值</returns>
        </member>
        <member name="T:Dt.Base.RObjectToVisibilityConverter">
            <summary>
            将object取反与 Visibility 枚举值相互转换的转换器。
            </summary>
        </member>
        <member name="M:Dt.Base.RObjectToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            将object转成Visibility枚举值，字符串"0"或"false"返回Visible，其它情况Collapsed
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RObjectToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            将Visibility枚举值转成布尔值
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.TextVisibleConverter">
            <summary>
            两种情况：
            有文本内容时显示，无文本内容时隐藏(不占空间)
            </summary>
        </member>
        <member name="P:Dt.Base.TextVisibleConverter.Visible">
            <summary>
            获取设置目标有文本内容时是否显示
            </summary>
        </member>
        <member name="M:Dt.Base.TextVisibleConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            返回是否显示
            </summary>
            <param name="value">正传递到目标的源数据</param>
            <param name="targetType">目标依赖项属性需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到目标依赖项属性的值</returns>
        </member>
        <member name="M:Dt.Base.TextVisibleConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            单向绑定
            </summary>
            <param name="value">正传递到源的目标数据</param>
            <param name="targetType">源对象需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到源对象的值</returns>
        </member>
        <member name="T:Dt.Base.VerticalTextConverter">
            <summary>
            切换垂直显示的文本
            </summary>
        </member>
        <member name="T:Dt.Base.VisibilityToggleConverter">
            <summary>
            对Visibility取反
            </summary>
        </member>
        <member name="M:Dt.Base.VisibilityToggleConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            对Visibility取反
            </summary>
            <param name="value">正传递到目标的源数据</param>
            <param name="targetType">目标依赖项属性需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到目标依赖项属性的值</returns>
        </member>
        <member name="M:Dt.Base.VisibilityToggleConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            对Visibility取反
            </summary>
            <param name="value">正传递到源的目标数据</param>
            <param name="targetType">源对象需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到源对象的值</returns>
        </member>
        <member name="T:Dt.Base.DefaultCallback">
            <summary>
            默认系统回调
            </summary>
        </member>
        <member name="M:Dt.Base.DefaultCallback.Login(System.Boolean)">
            <summary>
            显示登录页面
            </summary>
            <param name="p_isPopup">是否为弹出式</param>
        </member>
        <member name="M:Dt.Base.DefaultCallback.Logout">
            <summary>
            注销后重新登录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.DefaultCallback.Confirm(System.String,System.String)">
            <summary>
            显示确认对话框
            </summary>
            <param name="p_content">消息内容</param>
            <param name="p_title">标题</param>
            <returns>true表确认</returns>
        </member>
        <member name="M:Dt.Base.DefaultCallback.Error(System.String,System.String)">
            <summary>
            显示错误对话框
            </summary>
            <param name="p_content">消息内容</param>
            <param name="p_title">标题</param>
        </member>
        <member name="M:Dt.Base.DefaultCallback.ShowTraceBox">
            <summary>
            显示监视窗口
            </summary>
        </member>
        <member name="M:Dt.Base.DefaultCallback.OnSuspending">
            <summary>
            挂起时的处理，必须耗时小！
            手机或PC平板模式下不占据屏幕时触发，此时不确定被终止还是可恢复
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.DefaultCallback.OnResuming">
            <summary>
            恢复会话时的处理，手机或PC平板模式下再次占据屏幕时触发
            </summary>
        </member>
        <member name="T:Dt.Base.AsyncCancelEventArgs">
            <summary>
            可撤消的异步等待事件参数
            <para>using (e.Wait())</para>
            <para>{</para>
            <para>    await Fun();</para>
            <para>}</para>
            </summary>
        </member>
        <member name="M:Dt.Base.AsyncCancelEventArgs.Wait">
            <summary>
            异步等待
            using (e.Wait())
            {
                await Fun();
            }
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AsyncCancelEventArgs.EnsureAllCompleted">
            <summary>
            等待外部处理的所有任务都结束，触发事件时内部用
            </summary>
        </member>
        <member name="M:Dt.Base.AsyncCancelEventArgs.AddTask(System.Threading.Tasks.Task)">
            <summary>
            附加多个处理时可能有多个异步等待
            </summary>
            <param name="p_task"></param>
        </member>
        <member name="T:Dt.Base.AsyncEventArgs">
            <summary>
            异步任务等待事件参数
            <para>using (e.Wait())</para>
            <para>{</para>
            <para>    await Fun();</para>
            <para>}</para>
            </summary>
        </member>
        <member name="M:Dt.Base.AsyncEventArgs.Wait">
            <summary>
            异步等待
            <para>using (e.Wait())</para>
            <para>{</para>
            <para>    await Fun();</para>
            <para>}</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AsyncEventArgs.EnsureAllCompleted">
            <summary>
            等待外部处理的所有任务都结束，触发事件时内部用
            </summary>
        </member>
        <member name="M:Dt.Base.AsyncEventArgs.AddTask(System.Threading.Tasks.Task)">
            <summary>
            附加多个处理时可能有多个异步等待
            </summary>
            <param name="p_task"></param>
        </member>
        <member name="T:Dt.Base.Ex">
            <summary>
            附件依赖项属性
            </summary>
        </member>
        <member name="F:Dt.Base.Ex.MenuProperty">
            <summary>
            上下文菜单
            </summary>
        </member>
        <member name="M:Dt.Base.Ex.GetMenu(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            获取指定元素的上下文菜单
            </summary>
        </member>
        <member name="M:Dt.Base.Ex.SetMenu(Windows.UI.Xaml.FrameworkElement,Dt.Base.Menu)">
            <summary>
            设置指定元素的上下文菜单
            </summary>
        </member>
        <member name="F:Dt.Base.Ex.LvMultiSelectProperty">
            <summary>
            双向绑定 Lv.SelectionMode 和 Mi.IsChecked，附加到Mi上
            </summary>
        </member>
        <member name="M:Dt.Base.Ex.GetLvMultiSelect(Dt.Base.Mi)">
            <summary>
            获取Mi要绑定的Lv
            </summary>
        </member>
        <member name="M:Dt.Base.Ex.SetLvMultiSelect(Dt.Base.Mi,Dt.Base.Lv)">
            <summary>
            设置Mi要绑定的Lv
            </summary>
        </member>
        <member name="F:Dt.Base.Ex.TagClsProperty">
            <summary>
            附加标签的类型名称，包括命名空间，不同程序集引用时需要提供程序集名称，不提供按调用方所在的程序集
            </summary>
        </member>
        <member name="M:Dt.Base.Ex.GetTagCls(Windows.UI.Xaml.DependencyObject)">
            <summary>
            获取附加标签的类型名称
            </summary>
        </member>
        <member name="M:Dt.Base.Ex.SetTagCls(Windows.UI.Xaml.DependencyObject,System.String)">
            <summary>
            设置附加标签的类型名称
            </summary>
        </member>
        <member name="F:Dt.Base.Ex.TagObjProperty">
            <summary>
            内部保存标签实例
            </summary>
        </member>
        <member name="M:Dt.Base.Ex.GetTagClsObj(Windows.UI.Xaml.DependencyObject,System.Boolean)">
            <summary>
            根据附加标签的类型名称创建类型实例
            </summary>
            <param name="element"></param>
            <param name="p_newObj">是否每次调用都实例化新对象</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Ex.GetTagClsType(Windows.UI.Xaml.DependencyObject)">
            <summary>
            根据附加标签的类型名称获取类型
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Ex.GetSplitWidth(Dt.Base.Win)">
            <summary>
            获取Win停靠在两侧时的宽度
            </summary>
        </member>
        <member name="M:Dt.Base.Ex.SetSplitWidth(Dt.Base.Win,System.Double)">
            <summary>
            设置Win停靠在两侧时的宽度
            </summary>
        </member>
        <member name="T:Dt.Base.ToggleSelectionModeConverter">
            <summary>
            SelectionMode多选/单选 -> bool
            </summary>
        </member>
        <member name="F:Dt.Base.Attached.CursorProperty">
            <summary>
            光标附加依赖项属性
            </summary>
        </member>
        <member name="M:Dt.Base.Attached.GetCursor(Windows.UI.Xaml.DependencyObject)">
            <summary>
            获取光标附加属性
            </summary>
        </member>
        <member name="M:Dt.Base.Attached.SetCursor(Windows.UI.Xaml.DependencyObject,Windows.UI.Core.CoreCursorType)">
            <summary>
            设置光标附加属性
            </summary>
        </member>
        <member name="M:Dt.Base.Attached.OnCursorChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            切换光标处理
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:Dt.Base.Attached.CursorDisplayHandlerProperty">
            <summary>
            光标显示Handler，内部用
            </summary>
        </member>
        <member name="M:Dt.Base.Attached.GetCursorDisplayHandler(Windows.UI.Xaml.DependencyObject)">
            <summary>
            获取光标Handler
            </summary>
        </member>
        <member name="M:Dt.Base.Attached.SetCursorDisplayHandler(Windows.UI.Xaml.DependencyObject,Dt.Base.CursorDisplayHandler)">
            <summary>
            设置光标Handler
            </summary>
        </member>
        <member name="T:Dt.Base.Cursors">
            <summary>
            光标实例
            </summary>
        </member>
        <member name="M:Dt.Base.Cursors.GetCursor(Windows.UI.Core.CoreCursorType)">
            <summary>
            获取光标实例
            </summary>
            <param name="p_curType"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.Cursors.DefaultCursor">
            <summary>
            默认光标
            </summary>
        </member>
        <member name="T:Dt.Base.CursorDisplayHandler">
            <summary>
            切换光标处理
            </summary>
        </member>
        <member name="M:Dt.Base.CursorDisplayHandler.Attach(Windows.UI.Xaml.UIElement)">
            <summary>
            附加鼠标进入离开事件
            </summary>
            <param name="p_elem"></param>
        </member>
        <member name="M:Dt.Base.CursorDisplayHandler.Detach">
            <summary>
            移除鼠标事件
            </summary>
        </member>
        <member name="M:Dt.Base.CursorDisplayHandler.UpdateCursor">
            <summary>
            更新光标
            </summary>
        </member>
        <member name="M:Dt.Base.CursorDisplayHandler.OnPointerEntered(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            进入时更新光标
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.CursorDisplayHandler.OnPointerExited(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            离开时重置默认光标
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Base.ControlExt">
            <summary>
            Control扩展类
            </summary>
        </member>
        <member name="M:Dt.Base.ControlExt.GoToState(Windows.UI.Xaml.Controls.Control,System.String[])">
            <summary>
            连续状态迁移
            </summary>
            <param name="source"></param>
            <param name="p_stateNames"></param>
        </member>
        <member name="M:Dt.Base.ControlExt.GoToState(Windows.UI.Xaml.Controls.Control,System.Boolean,System.String[])">
            <summary>
            连续状态迁移
            </summary>
            <param name="source"></param>
            <param name="p_useTransitions"></param>
            <param name="p_stateNames"></param>
        </member>
        <member name="T:Dt.Base.DependencyObjectExt">
            <summary>
            DependencyObject扩展类
            </summary>
        </member>
        <member name="M:Dt.Base.DependencyObjectExt.ExistLocalValue(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty)">
            <summary>
            判断依赖属性是否已设置本地值
            </summary>
            <seealso cref="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
            <param name="source">依赖对象</param>
            <param name="p_property">依赖属性</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.FrameExt">
            <summary>
            Frame扩展类
            </summary>
        </member>
        <member name="M:Dt.Base.FrameExt.AllowTranslateX(Windows.UI.Xaml.Controls.Frame)">
            <summary>
            在Frame页面导航时自动设置可水平滑屏
            </summary>
            <param name="p_frame"></param>
        </member>
        <member name="M:Dt.Base.FrameExt.OnFrameNavigated(System.Object,Windows.UI.Xaml.Navigation.NavigationEventArgs)">
            <summary>
            完成导航时对内容附加事件中设置可水平滑屏
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.FrameExt.OnContentLoaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            内容加载时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Base.FrameworkElementExt">
            <summary>
            FrameworkElement扩展类
            </summary>
        </member>
        <member name="M:Dt.Base.FrameworkElementExt.FindElementByName(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            按照名称查找和当前元素在同一xaml文件中的元素，比较准确，逼出来的方法！
            </summary>
            <param name="source">当前元素</param>
            <param name="p_name">待查找元素的名称</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FrameworkElementExt.FirstLoaded(Windows.UI.Xaml.FrameworkElement,System.Action)">
            <summary>
            在UI元素第一次Loaded事件后调用Action方法，只调用一次
            </summary>
            <param name="source"></param>
            <param name="p_action"></param>
        </member>
        <member name="M:Dt.Base.FrameworkElementExt.ContainPoint(Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Point)">
            <summary>
            判断某点是否在元素区域内部
            </summary>
            <param name="source"></param>
            <param name="p_point">Point</param>
            <returns>true 表包含该点</returns>
        </member>
        <member name="M:Dt.Base.FrameworkElementExt.GetSize(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            获取FrameworkElement的尺寸
            </summary>
            <param name="source"></param>
            <returns>尺寸</returns>
        </member>
        <member name="M:Dt.Base.FrameworkElementExt.GetBounds(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            获取当前FrameworkElement相对于relativeTo的边界矩形
            </summary>
            <param name="source"></param>
            <param name="p_relativeTo">基准元素</param>
            <returns>矩形</returns>
        </member>
        <member name="M:Dt.Base.FrameworkElementExt.AllowTranslateX(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            内容加载时自动设置可水平滑屏
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Dt.Base.PointerRoutedEventArgsExt">
            <summary>
            PointerRoutedEventArgs扩展类
            </summary>
        </member>
        <member name="M:Dt.Base.PointerRoutedEventArgsExt.IsLeftButton(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            是否为鼠标左键
            </summary>
            <param name="p_args"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.PointerRoutedEventArgsExt.IsRightButton(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            是否为鼠标右键
            </summary>
            <param name="p_args"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.PointerRoutedEventArgsExt.IsMouse(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            是否为鼠标操作，false时为触摸或触摸笔
            </summary>
            <param name="p_args"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.PointerRoutedEventArgsExt.IsTouch(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            是否为触摸模式，false时为鼠标操作
            </summary>
            <param name="p_args"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.UIElementExt">
            <summary>
            UIElement扩展类
            </summary>
        </member>
        <member name="M:Dt.Base.UIElementExt.FindChildByType``1(Windows.UI.Xaml.UIElement,System.Boolean)">
            <summary>
            查询给定类型的第一个子元素
            </summary>
            <typeparam name="T">要查询的子元素类型</typeparam>
            <param name="source">要查询的起点元素</param>
            <param name="p_checkItself">是事包含当前元素</param>
            <returns>第一个符合类型的子元素</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.FindChildrenByType``1(Windows.UI.Xaml.UIElement,System.Boolean)">
            <summary>
            查询给定类型的所有子元素
            </summary>
            <typeparam name="T">要查询的子元素类型</typeparam>
            <param name="source">要查询的起点元素</param>
            <param name="p_checkItself">结果中是否包含自已</param>
            <returns>所有符合类型子元素</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.FindChildByName(Windows.UI.Xaml.UIElement,System.String,System.Boolean)">
            <summary>
            根据给定名称的子元素，注意有部分名称在加载时空，如没被选择的TabItem内容
            </summary>
            <param name="source">要查询的元素</param>
            <param name="p_checkItself">结果中是否包含自已</param>
            <param name="p_name">要查询的子元素名称</param>
            <returns>返回第一个符合条件的子元素</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.FindChildByTag(Windows.UI.Xaml.UIElement,System.String,System.Boolean)">
            <summary>
            根据给定子元素的Tag串查询
            </summary>
            <param name="source">要查询的元素</param>
            <param name="p_tag">子元素的Tag串</param>
            <param name="p_checkItself">结果中是否包含自已</param>
            <returns>返回第一个符合条件的子元素</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.FindChildren(Windows.UI.Xaml.UIElement,System.Boolean)">
            <summary>
            获取给定元素的子元素列表，为提高效率只查询出VisualTreeHelper给出的子元素
            转为非递归调用
            </summary>
            <param name="source">要查询的元素</param>
            <param name="p_checkItself">结果中是否包含自已</param>
            <returns>返回所有子元素列表</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.FindParentByType``1(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement,System.Boolean)">
            <summary>
            在可视树向上查询第一个匹配类型的父元素
            转为非递归调用，能查询出所有的可视父元素
            </summary>
            <typeparam name="T">
            父元素类型
            </typeparam>
            <param name="source">起点元素</param>
            <param name="p_endParent">终点父元素</param>
            <param name="p_checkItself">结果中是否包含自已</param>
            <returns>找到返回父元素，否则返回 null.</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.FindParentsByType``1(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement,System.Boolean)">
            <summary>
            查询给定类型的所有父元素
            </summary>
            <typeparam name="T">父元素类型</typeparam>
            <param name="source">起点元素</param>
            <param name="p_endParent">终点父元素</param>
            <param name="p_checkItself">结果中是否包含自已</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.ClearParent(Windows.UI.Xaml.UIElement)">
            <summary>
            从父容器中移除当前元素
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Dt.Base.UIElementExt.FindParentByName(Windows.UI.Xaml.UIElement,System.String,System.Boolean)">
            <summary>
            根据给定子元素的名称的查询，注意有部分名称在加载时空，如没被选择的TabItem内容
            </summary>
            <param name="source">要查询的元素</param>
            <param name="p_checkItself">结果中是否包含自已</param>
            <param name="p_name">要查询的父元素名称</param>
            <returns>返回第一个符合条件的父元素</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.FindParents(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement,System.Boolean)">
            <summary>
            获取当前元素的所有父元素
            </summary>
            <param name="source">要查询的元素</param>
            <param name="p_endParent">终点父元素</param>
            <param name="p_checkItself">结果中是否包含自己</param>
            <returns>返回所有父元素列表</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.GetParent(Windows.UI.Xaml.UIElement)">
            <summary>
            获取当前元素的父元素
            </summary>
            <param name="source">要查询的元素</param>
            <returns>找到返回父元素，否则为空</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.FindParentInWin``1(Windows.UI.Xaml.UIElement)">
            <summary>
            在Win内查询第一个匹配类型的父元素
            </summary>
            <typeparam name="T">父元素类型</typeparam>
            <param name="source"></param>
            <returns>找到返回父元素，否则返回 null</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.IsFocusInside(Windows.UI.Xaml.UIElement)">
            <summary>
            判断焦点是否在内部
            </summary>
            <param name="source"></param>
            <returns>true 在内部</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.IsFocused(Windows.UI.Xaml.UIElement)">
            <summary>
            判断焦点是否在当前元素上，不判断是否在内部！
            </summary>
            <param name="source"></param>
            <returns>true 在当前元素上</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.SaveSnapshot(Windows.UI.Xaml.UIElement,System.String,System.Boolean,Windows.Foundation.Rect)">
            <summary>
            保存当前界面元素的png截图
            </summary>
            <param name="p_element">要截图的界面元素</param>
            <param name="p_fileName">要保存的文件名</param>
            <param name="p_autoSave">false显示文件对话框，true且p_fileName不为空时自动保存</param>
            <param name="p_bounds">裁剪区域</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.IsAncestorOf(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.DependencyObject)">
            <summary>
            判断source是否为p_element的祖先元素
            </summary>
            <param name="source"></param>
            <param name="p_element"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.IsAncestorOfAndVisible(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.DependencyObject)">
            <summary>
            判断p_target是否为p_element的祖先元素且p_element可视
            若p_element所在的TabItem未选中则不可视
            </summary>
            <param name="source"></param>
            <param name="p_element"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.GetAbsolutePosition(Windows.UI.Xaml.UIElement)">
            <summary>
            获取UIElement的绝对位置
            </summary>
            <param name="source"></param>
            <returns>坐标值</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.GetRelativePosition(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement)">
            <summary>
            获取UIElement的相对位置
            </summary>
            <param name="source"></param>
            <param name="p_relative">相对于UIElement</param>
            <returns>坐标值</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.GetToolTip(Windows.UI.Xaml.UIElement)">
            <summary>
            获取UIElement的ToolTip对象
            </summary>
            <param name="source"></param>
            <returns>ToolTip对象</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.SetToolTip(Windows.UI.Xaml.UIElement,System.Object)">
            <summary>
            设置UIElement的ToolTip对象
            </summary>
            <param name="source"></param>
            <param name="p_value">ToolTip对象</param>
        </member>
        <member name="M:Dt.Base.UIElementExt.IsVisible(Windows.UI.Xaml.UIElement)">
            <summary>
            获取UIElement是否可见
            </summary>
            <param name="source"></param>
            <returns>true 可见</returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.SetVisible(Windows.UI.Xaml.UIElement,System.Boolean)">
            <summary>
            设置UIElement是否可见
            </summary>
            <param name="source"></param>
            <param name="p_visible">true 可见</param>
        </member>
        <member name="M:Dt.Base.UIElementExt.HasDefaultRenderTransform(Windows.UI.Xaml.UIElement)">
            <summary>
            获取UIElement位置转换矩阵是否为默认的
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.IsKeyboardFocusWithin(Windows.UI.Xaml.UIElement)">
            <summary>
            判断键盘焦点是否在当前元素中
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.UIElementExt.CloneImageElement(Windows.UI.Xaml.Controls.Image)">
            <summary>
            克隆Image
            </summary>
        </member>
        <member name="T:Dt.Base.Icons">
            <summary>
            系统内置图标
            </summary>
        </member>
        <member name="T:Dt.Base.ImgKit">
            <summary>
            加载图片工具类
            </summary>
        </member>
        <member name="M:Dt.Base.ImgKit.LoadImage(System.String,Windows.UI.Xaml.Controls.Image)">
            <summary>
            加载文件服务的图片，优先加载缓存，支持路径 或 FileList中json格式
            </summary>
            <param name="p_path">路径或FileList中json格式</param>
            <param name="p_img"></param>
        </member>
        <member name="M:Dt.Base.ImgKit.GetLocalImage(System.String)">
            <summary>
            获取存放在.doc路径的本地图片
            </summary>
            <param name="p_fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.InputManager">
            <summary>
            输入管理类
            </summary>
        </member>
        <member name="M:Dt.Base.InputManager.Init">
            <summary>
            附加后退键事件
            </summary>
        </member>
        <member name="M:Dt.Base.InputManager.OnBackRequested(System.Object,Windows.UI.Core.BackRequestedEventArgs)">
            <summary>
            按下后退按钮
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.InputManager.OnBackClick(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            按下后退按钮
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.InputManager.GoBack">
            <summary>
            执行页面后退
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.InputManager.AcceleratorKeyActivated(Windows.UI.Core.CoreDispatcher,Windows.UI.Core.AcceleratorKeyEventArgs)">
            <summary>
            处理全局快捷键
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="P:Dt.Base.InputManager.IsCtrlPressed">
            <summary>
            获取当前是否按下Ctrl
            </summary>
        </member>
        <member name="P:Dt.Base.InputManager.IsMenuPressed">
            <summary>
            获取当前是否按下Alt
            </summary>
        </member>
        <member name="P:Dt.Base.InputManager.IsShiftPressed">
            <summary>
            获取当前是否按下Shift
            </summary>
        </member>
        <member name="P:Dt.Base.InputManager.IsWinPressed">
            <summary>
            获取当前是否按下Windows
            </summary>
        </member>
        <member name="P:Dt.Base.InputManager.ModifierKeys">
            <summary>
            获取当前辅助键按下情况
            </summary>
        </member>
        <member name="T:Dt.Base.IView">
            <summary>
            自定义视图启动
            </summary>
        </member>
        <member name="M:Dt.Base.IView.Run(System.String,Dt.Base.Icons,System.Object)">
            <summary>
            视图启动入口
            </summary>
            <param name="p_title">标题</param>
            <param name="p_icon">图标</param>
            <param name="p_params">启动参数</param>
        </member>
        <member name="T:Dt.Base.LaunchManager">
            <summary>
            启动管理类
            </summary>
        </member>
        <member name="P:Dt.Base.LaunchManager.Arguments">
            <summary>
            启动参数
            </summary>
        </member>
        <member name="M:Dt.Base.LaunchManager.LoadRootFrame">
            <summary>
            加载PhoneUI模式的根Frame
            </summary>
        </member>
        <member name="M:Dt.Base.LaunchManager.LoadDesktop">
            <summary>
            加载Windows模式桌面
            </summary>
        </member>
        <member name="M:Dt.Base.LaunchManager.LaunchFreely(System.String)">
            <summary>
            以参数方式自启动，通常从Toast启动
            </summary>
            <param name="p_params">xml启动参数</param>
        </member>
        <member name="M:Dt.Base.LaunchManager.SetAutoStart(Dt.Base.Win)">
            <summary>
            设置自启动
            </summary>
            <param name="p_win"></param>
        </member>
        <member name="M:Dt.Base.LaunchManager.DelAutoStart">
            <summary>
            取消自启动
            </summary>
        </member>
        <member name="T:Dt.Base.PushApiAttribute">
            <summary>
            推送处理标志
            </summary>
        </member>
        <member name="T:Dt.Base.PushHandler">
            <summary>
            处理服务器推送
            </summary>
        </member>
        <member name="F:Dt.Base.PushHandler.RetryTimes">
            <summary>
            连接推送的重试次数
            </summary>
        </member>
        <member name="F:Dt.Base.PushHandler.StopRetry">
            <summary>
            服务器推送连接断开后的是否停止重连
            </summary>
        </member>
        <member name="M:Dt.Base.PushHandler.Register">
            <summary>
            处理服务器推送
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.SysPushApi">
            <summary>
            系统内置推送处理
            </summary>
        </member>
        <member name="M:Dt.Base.SysPushApi.ReceiveLetter(Dt.Core.LetterInfo)">
            <summary>
            接收服务器推送的聊天信息
            </summary>
            <param name="p_letter"></param>
        </member>
        <member name="M:Dt.Base.SysPushApi.ShowSysWarning(System.String)">
            <summary>
            系统警告提示
            </summary>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Base.SysPushApi.StopPush">
            <summary>
            该账户从其它位置登录时停止接收推送
            </summary>
        </member>
        <member name="T:Dt.Base.ChatDetail">
            <summary>
            聊天内容
            </summary>
        </member>
        <member name="P:Dt.Base.ChatDetail.OtherID">
            <summary>
            获取对方ID
            </summary>
        </member>
        <member name="M:Dt.Base.ChatDetail.ShowDlg(System.Int64,System.String)">
            <summary>
            显示聊天对话框
            </summary>
            <param name="p_otherID">对方ID</param>
            <param name="p_otherName">null时自动查询</param>
        </member>
        <member name="M:Dt.Base.ChatDetail.LoadMsg">
            <summary>
            加载信息
            </summary>
        </member>
        <member name="M:Dt.Base.ChatDetail.OnNextPage(Dt.Base.PageData)">
            <summary>
            分页加载信息
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.ChatDetail.OnNewLetter(Dt.Base.Letter)">
            <summary>
            增加聊天消息事件
            </summary>
            <param name="p_letter"></param>
        </member>
        <member name="M:Dt.Base.ChatDetail.OnRecvUndoLetter(Dt.Base.Letter)">
            <summary>
            收到撤回消息
            </summary>
            <param name="p_letter"></param>
        </member>
        <member name="M:Dt.Base.ChatDetail.SendMsg(System.String)">
            <summary>
            发送普通消息
            </summary>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Base.ChatDetail.SendFiles(System.Collections.Generic.List{Dt.Base.FileData})">
            <summary>
            发送文件
            </summary>
            <param name="p_files"></param>
        </member>
        <member name="M:Dt.Base.ChatDetail.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.ChatDetail.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.ChatDetail.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.ChatInputBar">
            <summary>
            聊天目录
            </summary>
        </member>
        <member name="M:Dt.Base.ChatInputBar.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.ChatInputBar.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.ChatInputBar.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.ChatList">
            <summary>
            聊天目录
            </summary>
        </member>
        <member name="M:Dt.Base.ChatList.LoadData">
            <summary>
            每次加载时刷新目录
            </summary>
        </member>
        <member name="M:Dt.Base.ChatList.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.ChatList.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.ChatList.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.ChatMember">
            <summary>
            聊天人员信息
            </summary>
        </member>
        <member name="P:Dt.Base.ChatMember.ID">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="P:Dt.Base.ChatMember.Name">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Dt.Base.ChatMember.Phone">
            <summary>
            手机号，唯一
            </summary>
        </member>
        <member name="P:Dt.Base.ChatMember.Sex">
            <summary>
            性别，0女1男
            </summary>
        </member>
        <member name="P:Dt.Base.ChatMember.Photo">
            <summary>
            头像
            </summary>
        </member>
        <member name="P:Dt.Base.ChatMember.Mtime">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="T:Dt.Base.Letter">
            <summary>
            聊天内容
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.ID">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.LoginID">
            <summary>
            当前登录者UserID，区分所属聊天人
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.MsgID">
            <summary>
            信息标识，撤回时识别用，不同登录人使用同一设备时可能出现重复(自己发给自己)
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.OtherID">
            <summary>
            对方UserID
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.OtherName">
            <summary>
            对方用户名
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.IsReceived">
            <summary>
            接收标志
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.Unread">
            <summary>
            未读标志
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.LetterType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.OtherIsOnline">
            <summary>
            对方接收时是否在线，只发送时有效
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.STime">
            <summary>
            收发时间
            </summary>
        </member>
        <member name="P:Dt.Base.Letter.Photo">
            <summary>
            照片
            </summary>
        </member>
        <member name="T:Dt.Base.LetterManager">
            <summary>
            
            </summary>
        </member>
        <member name="E:Dt.Base.LetterManager.NewLetter">
            <summary>
            增加一条聊天信息事件
            </summary>
        </member>
        <member name="E:Dt.Base.LetterManager.UndoLetter">
            <summary>
            收到撤回消息事件
            </summary>
        </member>
        <member name="E:Dt.Base.LetterManager.StateChanged">
            <summary>
            未读消息状态变化事件，参数为对方的userid
            </summary>
        </member>
        <member name="M:Dt.Base.LetterManager.ReceiveLetter(Dt.Core.LetterInfo)">
            <summary>
            接收服务器推送的聊天信息
            </summary>
            <param name="p_letter"></param>
        </member>
        <member name="M:Dt.Base.LetterManager.ShowUnreadNotify(Dt.Base.Letter)">
            <summary>
            显示未读提示
            </summary>
            <param name="p_letter"></param>
        </member>
        <member name="M:Dt.Base.LetterManager.ClearUnreadFlag(System.Int64)">
            <summary>
            清除和某人的未读消息状态
            </summary>
            <param name="p_otherid">对方标识</param>
        </member>
        <member name="M:Dt.Base.LetterManager.SendLetter(System.Int64,System.String,System.String,Dt.Core.LetterType)">
            <summary>
            发送聊天信息
            </summary>
            <param name="p_recvID"></param>
            <param name="p_recvName"></param>
            <param name="p_content"></param>
            <param name="p_type"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.LetterManager.SendLink(System.Int64,System.String,System.String,System.String,System.String,System.Type,System.String)">
            <summary>
            发送链接
            </summary>
            <param name="p_recvID"></param>
            <param name="p_recvName"></param>
            <param name="p_title"></param>
            <param name="p_desc"></param>
            <param name="p_icon"></param>
            <param name="p_action"></param>
            <param name="p_params"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.LetterManager.SendUndoLetter(Dt.Base.Letter)">
            <summary>
            撤回发出的消息
            </summary>
            <param name="p_letter">待撤消息</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.MsgItemSelector">
            <summary>
            聊天消息模板选择器
            </summary>
        </member>
        <member name="T:Dt.Base.BtnItem">
            <summary>
            列表项按钮
            </summary>
        </member>
        <member name="F:Dt.Base.BtnItem.IconProperty">
            <summary>
            按钮图标
            </summary>
        </member>
        <member name="F:Dt.Base.BtnItem.TitleProperty">
            <summary>
            按钮标题
            </summary>
        </member>
        <member name="F:Dt.Base.BtnItem.DescProperty">
            <summary>
            按钮描述信息
            </summary>
        </member>
        <member name="M:Dt.Base.BtnItem.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:Dt.Base.BtnItem.Icon">
            <summary>
            获取设置按钮图标
            </summary>
        </member>
        <member name="P:Dt.Base.BtnItem.Title">
            <summary>
            获取设置按钮标题
            </summary>
        </member>
        <member name="P:Dt.Base.BtnItem.Desc">
            <summary>
            获取设置按钮描述信息
            </summary>
        </member>
        <member name="T:Dt.Base.DockPanel">
            <summary>
            可停靠面板
            </summary>
        </member>
        <member name="F:Dt.Base.DockPanel.DockProperty">
            <summary>
            停靠位置依赖项属性
            </summary>
        </member>
        <member name="M:Dt.Base.DockPanel.GetDock(Windows.UI.Xaml.UIElement)">
            <summary>
            获取停靠位置属性值
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.DockPanel.SetDock(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.Automation.DockPosition)">
            <summary>
            设置停靠位置属性值
            </summary>
        </member>
        <member name="F:Dt.Base.DockPanel.LastChildFillProperty">
            <summary>
            内容区域是否采用填充方式
            </summary>
        </member>
        <member name="M:Dt.Base.DockPanel.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Dt.Base.DockPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            测量
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.DockPanel.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            布局
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.DockPanel.LastChildFill">
            <summary>
            获取设置内容区域是否采用填充方式
            </summary>
        </member>
        <member name="T:Dt.Base.DtControl">
            <summary>
            为屏蔽不同平台主事件调用顺序的不同
            </summary>
        </member>
        <member name="M:Dt.Base.DtControl.OnLoadTemplate">
            <summary>
            UWP：OnApplyTemplate时调用
            uno：只在第一次Loaded事件时调用
            </summary>
        </member>
        <member name="M:Dt.Base.DtControl.OnControlLoaded">
            <summary>
            只在第一次Loaded事件时调用，始终在OnLoadTemplate后调用
            </summary>
        </member>
        <member name="T:Dt.Base.SearchBox">
            <summary>
            查询文本框
            </summary>
        </member>
        <member name="F:Dt.Base.SearchBox.PlaceholderProperty">
            <summary>
            提示内容
            </summary>
        </member>
        <member name="F:Dt.Base.SearchBox.IsRealtimeProperty">
            <summary>
            文本内容变化时是否执行查询
            </summary>
        </member>
        <member name="E:Dt.Base.SearchBox.Search">
            <summary>
            查询事件
            </summary>
        </member>
        <member name="P:Dt.Base.SearchBox.Placeholder">
            <summary>
            获取设置查询框提示内容
            </summary>
        </member>
        <member name="P:Dt.Base.SearchBox.IsRealtime">
            <summary>
            获取设置文本内容变化时是否执行查询，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.SearchBox.Text">
            <summary>
            获取查询内容
            </summary>
        </member>
        <member name="T:Dt.Base.ItemPlacement">
            <summary>
            一个控件相对另一控件的摆放位置
            </summary>
        </member>
        <member name="F:Dt.Base.ItemPlacement.Left">
            <summary>
            左侧
            </summary>
        </member>
        <member name="F:Dt.Base.ItemPlacement.Top">
            <summary>
            顶部
            </summary>
        </member>
        <member name="F:Dt.Base.ItemPlacement.Right">
            <summary>
            右侧
            </summary>
        </member>
        <member name="F:Dt.Base.ItemPlacement.Bottom">
            <summary>
            底部
            </summary>
        </member>
        <member name="T:Dt.Base.RotateContent">
            <summary>
            支持内容旋转
            </summary>
        </member>
        <member name="F:Dt.Base.RotateContent.RotateProperty">
            <summary>
            内容的旋转方式
            </summary>
        </member>
        <member name="P:Dt.Base.RotateContent.Rotate">
            <summary>
            获取设置内容的旋转方式
            </summary>
        </member>
        <member name="T:Dt.Base.ContentRotate">
            <summary>
            内容旋转方式
            </summary>
        </member>
        <member name="F:Dt.Base.ContentRotate.Horizontal">
            <summary>
            保持水平
            </summary>
        </member>
        <member name="F:Dt.Base.ContentRotate.RotatedTop">
            <summary>
            旋转-90度
            </summary>
        </member>
        <member name="F:Dt.Base.ContentRotate.RotatedBottom">
            <summary>
            旋转90度
            </summary>
        </member>
        <member name="T:Dt.Base.SizedPresenter">
            <summary>
            提供给子元素获取实际区域大小，如子元素Lv嵌套在ScrollViewer中时
            </summary>
        </member>
        <member name="P:Dt.Base.SizedPresenter.AvailableSize">
            <summary>
            内容的有效区域
            </summary>
        </member>
        <member name="T:Dt.Base.TabControl">
            <summary>
            选项卡控件
            </summary>
        </member>
        <member name="M:Dt.Base.TabControl.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="E:Dt.Base.TabControl.SelectedChanged">
            <summary>
            当选定的 TabItem 更改时发生
            </summary>
        </member>
        <member name="P:Dt.Base.TabControl.Items">
            <summary>
            获取子项集合
            </summary>
        </member>
        <member name="P:Dt.Base.TabControl.TabStripPlacement">
            <summary>
            获取或设置 TabItem 标题相对于内容的对齐方式
            </summary>
        </member>
        <member name="P:Dt.Base.TabControl.AllowSwapItem">
            <summary>
            获取设置TabItem是否可拖拽调整位置
            </summary>
        </member>
        <member name="P:Dt.Base.TabControl.PopWidth">
            <summary>
            获取设置弹出面板的宽度
            </summary>
        </member>
        <member name="P:Dt.Base.TabControl.PopHeight">
            <summary>
            获取设置弹出面板的高度
            </summary>
        </member>
        <member name="P:Dt.Base.TabControl.SelectedIndex">
            <summary>
            获取或设置当前选定的 TabItem 的索引
            </summary>
        </member>
        <member name="P:Dt.Base.TabControl.SelectedItem">
            <summary>
            获取或设置当前选定的 TabItem
            </summary>
        </member>
        <member name="P:Dt.Base.TabControl.SelectedContent">
            <summary>
            获取设置当前选择的 TabItem 的内容
            </summary>
        </member>
        <member name="P:Dt.Base.TabControl.ContentTransitions">
            <summary>
            获取或设置切换内容时的转换
            </summary>
        </member>
        <member name="P:Dt.Base.TabControl.ShowContent">
            <summary>
            获取是否显示当前选择的 TabItem 的内容，false时在弹出面板显示
            </summary>
        </member>
        <member name="P:Dt.Base.TabControl.IsOutlookStyle">
            <summary>
            获取设置是否采用outlook导航样式，只在标签在上下侧时有效
            </summary>
        </member>
        <member name="M:Dt.Base.TabControl.OnPopClosed(System.Object,System.Object)">
            <summary>
            弹出面板关闭时清除选择项
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.TabControl.InitSelection">
            <summary>
            初始选择状态，优先级：SelectedIndex > SelectedItem > TabItem.IsSelected
            </summary>
        </member>
        <member name="M:Dt.Base.TabControl.DoSwap(Dt.Base.TabItem,Windows.Foundation.Point)">
            <summary>
            内部元素拖拽过程
            </summary>
            <param name="p_src">被拖拽元素</param>
            <param name="p_pt">鼠标位置</param>
            <returns>false 表示不在有效区域</returns>
        </member>
        <member name="M:Dt.Base.TabControl.IsCriticalPoint(Windows.UI.Xaml.Controls.Control,Windows.UI.Xaml.Controls.Control,Windows.Foundation.Point)">
            <summary>
            当前鼠标是否在两个待交换标签的临界处
            </summary>
            <param name="p_tgt">目标</param>
            <param name="p_src">源</param>
            <param name="p_pt"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.TabControl.OnSwappedItem">
            <summary>
            拖拽调序后，提供Win保存布局
            </summary>
        </member>
        <member name="M:Dt.Base.TabControl.OnPlacementChanged">
            <summary>
            切换标签相对于内容的对齐方式
            </summary>
        </member>
        <member name="M:Dt.Base.TabControl.ApplyOutlookStyle">
            <summary>
            自适应outlook模式
            </summary>
        </member>
        <member name="M:Dt.Base.TabControl.ApplyPopStyle">
            <summary>
            弹出式标签属性设置
            </summary>
        </member>
        <member name="M:Dt.Base.TabControl.NotifyIsSelectedChanged(Dt.Base.TabItem,System.Boolean)">
            <summary>
            处理给定项容器的选择状态
            </summary>
            <param name="p_container"></param>
            <param name="p_selected"></param>
        </member>
        <member name="M:Dt.Base.TabControl.UpdateSelectionProperties">
            <summary>
            重置SelectedIndex, SelectedItem
            </summary>
        </member>
        <member name="M:Dt.Base.TabControl.SetItemIsSelected(Dt.Base.TabItem,System.Boolean)">
            <summary>
            设置指定项的IsSelected值
            </summary>
            <param name="item"></param>
            <param name="value"></param>
        </member>
        <member name="M:Dt.Base.TabControl.AfterSelectionChanged(Dt.Base.TabItem,Dt.Base.TabItem)">
            <summary>
            选择变化后的处理
            </summary>
            <param name="p_unselectItem"></param>
            <param name="p_selectItem"></param>
        </member>
        <member name="T:Dt.Base.TabControl.SelectionChanger">
            <summary>
            管理选择项变化
            </summary>
        </member>
        <member name="M:Dt.Base.TabControl.SelectionChanger.Select(Dt.Base.TabItem)">
            <summary>
            选择指定项
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.TabControl.SelectionChanger.Unselect(Dt.Base.TabItem)">
            <summary>
            取消指定项的选择状态
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.TabControl.SelectionChanger.ResetSelection">
            <summary>
            重置有效的标签
            </summary>
        </member>
        <member name="M:Dt.Base.TabControl.SelectionChanger.SynchronizeSelection">
            <summary>
            同步现有的选择项
            </summary>
        </member>
        <member name="T:Dt.Base.SelectedChangedEventArgs">
            <summary>
            选择项变化事件参数
            </summary>
        </member>
        <member name="M:Dt.Base.SelectedChangedEventArgs.#ctor(Dt.Base.TabItem,Dt.Base.TabItem)">
            <summary>
            
            </summary>
            <param name="p_unselect"></param>
            <param name="p_select"></param>
        </member>
        <member name="P:Dt.Base.SelectedChangedEventArgs.UnselectItem">
            <summary>
            获取要取消的选择项
            </summary>
        </member>
        <member name="P:Dt.Base.SelectedChangedEventArgs.SelectItem">
            <summary>
            获取新的选择项
            </summary>
        </member>
        <member name="T:Dt.Base.TabItemsList">
            <summary>
            子项列表，直接用泛型在xaml设计时异常
            </summary>
        </member>
        <member name="T:Dt.Base.TabItem">
            <summary>
            TabControl 中的可选标签项
            </summary>
        </member>
        <member name="F:Dt.Base.TabItem.TitleProperty">
            <summary>
            头内容
            </summary>
        </member>
        <member name="F:Dt.Base.TabItem.PopWidthProperty">
            <summary>
            面板内容的宽度
            </summary>
        </member>
        <member name="F:Dt.Base.TabItem.PopHeightProperty">
            <summary>
            面板内容的高度
            </summary>
        </member>
        <member name="F:Dt.Base.TabItem.IsSelectedProperty">
            <summary>
            当前是否被选择
            </summary>
        </member>
        <member name="F:Dt.Base.TabItem.TabStripPlacementProperty">
            <summary>
            Tab标签位置
            </summary>
        </member>
        <member name="F:Dt.Base.TabItem.ContentProperty">
            <summary>
            标签内容
            </summary>
        </member>
        <member name="P:Dt.Base.TabItem.Title">
            <summary>
            获取设置标签标题
            </summary>
        </member>
        <member name="P:Dt.Base.TabItem.PopWidth">
            <summary>
            获取设置弹出面板的宽度
            </summary>
        </member>
        <member name="P:Dt.Base.TabItem.PopHeight">
            <summary>
            获取设置弹出面板的高度
            </summary>
        </member>
        <member name="P:Dt.Base.TabItem.IsSelected">
            <summary>
            获取设置当前标签是否被选择
            </summary>
        </member>
        <member name="P:Dt.Base.TabItem.TabStripPlacement">
            <summary>
            获取标签位置
            </summary>
        </member>
        <member name="P:Dt.Base.TabItem.Content">
            <summary>
            获取设置标签内容
            未使用ContentControl因为样式中有多个ContentPresenter时有bug！
            </summary>
        </member>
        <member name="P:Dt.Base.TabItem.Owner">
            <summary>
            获取所属TabControl
            </summary>
        </member>
        <member name="M:Dt.Base.TabItem.OnPointerEntered(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标进入状态
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.TabItem.OnPointerPressed(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标按下
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.TabItem.OnPointerMoved(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            拖动过程
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.TabItem.OnPointerReleased(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标释放
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.TabItem.OnPointerExited(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标离开
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.TabItem.OnContentChanged">
            <summary>
            切换内容
            </summary>
        </member>
        <member name="M:Dt.Base.TabItem.OnStartDrag(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            开始拖动标签
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.TabItem.ReleaseCapture">
            <summary>
            释放拖拽
            </summary>
        </member>
        <member name="M:Dt.Base.TabItem.ApplyStripPlacement">
            <summary>
            调整标签位置，放在样式状态组中造成多次重新测量布局！！！
            </summary>
        </member>
        <member name="M:Dt.Base.TabItem.ChangeVisualState">
            <summary>
            切换状态
            </summary>
        </member>
        <member name="F:Dt.Base.TabItem.MouseVisualState.Normal">
            <summary>
            普遍状态
            </summary>
        </member>
        <member name="F:Dt.Base.TabItem.MouseVisualState.Enter">
            <summary>
            鼠标进入
            </summary>
        </member>
        <member name="F:Dt.Base.TabItem.MouseVisualState.Pressed">
            <summary>
            按下
            </summary>
        </member>
        <member name="T:Dt.Base.TestInvoke">
            <summary>
            测试不同平台主事件的调用顺序
            </summary>
        </member>
        <member name="P:Dt.Base.TestInvoke.Title">
            <summary>
            获取设置标题
            </summary>
        </member>
        <member name="P:Dt.Base.AudioRecordDlg.Duration">
            <summary>
            录音时长
            </summary>
        </member>
        <member name="M:Dt.Base.AudioRecordDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.AudioRecordDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.AudioRecordDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.FileData">
            <summary>
            选择文件的文件信息
            </summary>
        </member>
        <member name="F:Dt.Base.FileData.ThumbSize">
            <summary>
            缩略图宽或高的最大尺寸
            </summary>
        </member>
        <member name="P:Dt.Base.FileData.FileName">
            <summary>
            文件名，包含扩展名
            </summary>
        </member>
        <member name="P:Dt.Base.FileData.FilePath">
            <summary>
            完整路径，UWP时若不在AtSys.CachePath则为安全访问ID
            </summary>
        </member>
        <member name="P:Dt.Base.FileData.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:Dt.Base.FileData.DisplayName">
            <summary>
            文件名，不包括扩展名
            </summary>
        </member>
        <member name="P:Dt.Base.FileData.Ext">
            <summary>
            文件扩展名，以 . 开头
            </summary>
        </member>
        <member name="P:Dt.Base.FileData.Desc">
            <summary>
            文件描述
            </summary>
        </member>
        <member name="P:Dt.Base.FileData.ThumbPath">
            <summary>
            缩略图路径
            </summary>
        </member>
        <member name="P:Dt.Base.FileData.UploadUI">
            <summary>
            文件上传过程的UI
            </summary>
        </member>
        <member name="M:Dt.Base.FileData.GetStream">
            <summary>
            获取文件流
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FileData.DeleteThumbnail">
            <summary>
            删除临时缩略图文件，上传成功的已改名无需删除
            </summary>
        </member>
        <member name="T:Dt.Base.FileFilter">
            <summary>
            常用文件类型
            </summary>
        </member>
        <member name="F:Dt.Base.FileFilter.UwpImage">
            <summary>
            uwp图片格式
            </summary>
        </member>
        <member name="F:Dt.Base.FileFilter.AndroidImage">
            <summary>
            android图片格式
            </summary>
        </member>
        <member name="F:Dt.Base.FileFilter.UwpVideo">
            <summary>
            uwp视频格式
            </summary>
        </member>
        <member name="F:Dt.Base.FileFilter.AndroidVideo">
            <summary>
            android视频格式
            </summary>
        </member>
        <member name="F:Dt.Base.FileFilter.UwpAudio">
            <summary>
            uwp音频格式
            </summary>
        </member>
        <member name="F:Dt.Base.FileFilter.AndroidAudio">
            <summary>
            android音频格式
            </summary>
        </member>
        <member name="F:Dt.Base.FileFilter.UwpMedia">
            <summary>
            uwp媒体文件格式
            </summary>
        </member>
        <member name="F:Dt.Base.FileFilter.AndroidMedia">
            <summary>
            android媒体文件格式
            </summary>
        </member>
        <member name="T:Dt.Base.CapturePhotoOptions">
            <summary>
            拍照选项
            </summary>
        </member>
        <member name="P:Dt.Base.CapturePhotoOptions.UseFrontCamera">
            <summary>
            是否默认使用前置摄像头
            </summary>
        </member>
        <member name="P:Dt.Base.CapturePhotoOptions.VideoQuality">
            <summary>
            视频/图片品质，1高品质，0普通
            </summary>
        </member>
        <member name="P:Dt.Base.CapturePhotoOptions.AllowCropping">
            <summary>
            是否允许编辑视频或照片
            Photo: UWP cropping can only be disabled on full size
            Video: UWP trimming when disabled won't allow time limit to be set
            </summary>
        </member>
        <member name="T:Dt.Base.CaptureVideoOptions">
            <summary>
            录像选项
            </summary>
        </member>
        <member name="P:Dt.Base.CaptureVideoOptions.DesiredLength">
            <summary>
            视频录制时间限制
            </summary>
        </member>
        <member name="P:Dt.Base.CaptureVideoOptions.DesiredSize">
            <summary>
            视频文件大小限制
            只 Android 有效
            Eg. 1000000 = 1MB
            </summary>
        </member>
        <member name="T:Dt.Base.CrossKit">
            <summary>
            跨平台工具集：选择图片、视频、音频文件，拍照、录像、录音
            </summary>
        </member>
        <member name="M:Dt.Base.CrossKit.PickImage">
            <summary>
            选择单个图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CrossKit.PickImages">
            <summary>
            选择多个图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CrossKit.PickVideo">
            <summary>
            选择单个视频
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CrossKit.PickVideos">
            <summary>
            选择多个视频
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CrossKit.PickAudio">
            <summary>
            选择单个音频文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CrossKit.PickAudios">
            <summary>
            选择多个音频文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CrossKit.PickMedia">
            <summary>
            选择单个媒体文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CrossKit.PickMedias">
            <summary>
            选择多个媒体文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CrossKit.PickFile(System.String[])">
            <summary>
            选择单个文件
            </summary>
            <param name="p_fileTypes">
            uwp文件过滤类型，如 .png .docx，null时不过滤
            android文件过滤类型，如 image/png image/*，null时不过滤
            ios文件过滤类型，如 UTType.Image，null时不过滤
            </param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CrossKit.PickFiles(System.String[])">
            <summary>
            选择多个文件
            </summary>
            <param name="p_fileTypes">
            uwp文件过滤类型，如 .png .docx，null时不过滤
            android文件过滤类型，如 image/png image/*，null时不过滤
            ios文件过滤类型，如 UTType.Image，null时不过滤
            </param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CrossKit.TakePhoto(Dt.Base.CapturePhotoOptions)">
            <summary>
            拍照
            </summary>
            <param name="p_options">选项</param>
            <returns>照片文件信息，失败或放弃时返回null</returns>
        </member>
        <member name="M:Dt.Base.CrossKit.TakeVideo(Dt.Base.CaptureVideoOptions)">
            <summary>
            录像
            </summary>
            <param name="p_options">选项</param>
            <returns>视频文件信息，失败或放弃时返回null</returns>
        </member>
        <member name="M:Dt.Base.CrossKit.StartRecording(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            开始录音
            </summary>
            <param name="p_target">计时对话框居中的目标</param>
            <returns>录音文件信息，失败或放弃时返回null</returns>
        </member>
        <member name="M:Dt.Base.CrossKit.OpenFile(System.String)">
            <summary>
            默认关联程序打开文件
            </summary>
            <param name="p_filePath">文件完整路径</param>
        </member>
        <member name="F:Dt.Base.AudioRecorder.CanRecordAudio">
            <summary>
            是否有麦克风
            </summary>
        </member>
        <member name="P:Dt.Base.AudioRecorder.IsRecording">
            <summary>
            是否正在录音
            </summary>
        </member>
        <member name="T:Dt.Base.FilePicker">
            <summary>
            Uwp版文件选择
            </summary>
        </member>
        <member name="M:Dt.Base.FilePicker.PickImage">
            <summary>
            选择单个图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FilePicker.PickImages">
            <summary>
            选择多个图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FilePicker.PickVideo">
            <summary>
            选择单个视频
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FilePicker.PickVideos">
            <summary>
            选择多个视频
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FilePicker.PickAudio">
            <summary>
            选择单个音频文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FilePicker.PickAudios">
            <summary>
            选择多个音频文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FilePicker.PickMedia">
            <summary>
            选择单个媒体文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FilePicker.PickMedias">
            <summary>
            选择多个媒体文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FilePicker.PickFile(System.String[])">
            <summary>
            选择单个文件
            </summary>
            <param name="p_fileTypes">uwp文件过滤类型，如 .png .docx，null时不过滤</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FilePicker.PickFiles(System.String[])">
            <summary>
            选择多个文件
            </summary>
            <param name="p_fileTypes">uwp文件过滤类型，如 .png .docx，null时不过滤</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.FileItem">
            <summary>
            上传下载文件描述
            </summary>
        </member>
        <member name="F:Dt.Base.FileItem.ThumbPostfix">
            <summary>
            缩略图后缀名
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.ID">
            <summary>
            获取设置文件ID：卷名/两级目录/xxx.ext
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.Title">
            <summary>
            获取设置标题，普通文件为名称，音频文件为时长
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.CmdShare">
            <summary>
            获取共享文件命令
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.CmdUpdate">
            <summary>
            获取更新文件命令
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.CmdDelete">
            <summary>
            获取删除上传文件
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.CmdOpen">
            <summary>
            获取打开文件命令
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.CmdSaveAs">
            <summary>
            获取另存为命令
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.CmdDownload">
            <summary>
            获取下载命令
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.FileType">
            <summary>
            获取设置文件种类
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.State">
            <summary>
            获取设置上传下载的当前状态
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.ExtInfo">
            <summary>
            获取设置文件扩展信息
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.CachedFlag">
            <summary>
            获取设置是否显示已下载标志
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.Icon">
            <summary>
            获取设置图标
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.ProgressWidth">
            <summary>
            获取设置进度条进度
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.Percent">
            <summary>
            获取设置进度百分比
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.Bitmap">
            <summary>
            获取设置源图像
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.ImageStretch">
            <summary>
             获取设置图像填充模式，默认Uniform
            </summary>
        </member>
        <member name="M:Dt.Base.FileItem.OpenFile">
            <summary>
            打开文件
            <para>先检查本地有没有，有打开本地，没有先下载；</para>
            <para>内部支持音视频的预览，其它类型文件用默认关联程序打开；</para>
            </summary>
        </member>
        <member name="M:Dt.Base.FileItem.ShareFile">
            <summary>
            共享文件
            </summary>
        </member>
        <member name="M:Dt.Base.FileItem.SaveAs">
            <summary>
            文件另存为
            过程和打开文件相同，先检查本地
            </summary>
        </member>
        <member name="M:Dt.Base.FileItem.DownloadFile">
            <summary>
            下载文件
            </summary>
        </member>
        <member name="M:Dt.Base.FileItem.UpdateFile">
            <summary>
            更新文件
            </summary>
        </member>
        <member name="M:Dt.Base.FileItem.DeleteFile">
            <summary>
            删除已上传的文件
            </summary>
        </member>
        <member name="P:Dt.Base.FileItem.Dt#Base#IUploadUI#UploadProgress">
            <summary>
            上传进度回调
            </summary>
        </member>
        <member name="M:Dt.Base.FileItem.Dt#Base#IUploadUI#InitUpload(Dt.Base.FileData)">
            <summary>
            准备上传
            </summary>
            <param name="p_file">待上传文件对象</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FileItem.Dt#Base#IUploadUI#UploadSuccess(System.String,Dt.Base.FileData)">
            <summary>
            上传成功后
            </summary>
            <param name="p_id">文件上传路径</param>
            <param name="p_file">已上传文件对象</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FileItem.Dt#Base#IUploadUI#UploadFail(Dt.Base.FileData)">
            <summary>
            上传失败后
            </summary>
            <param name="p_file"></param>
        </member>
        <member name="M:Dt.Base.FileItem.OnUploadProgress(System.Int64,System.Int64,System.Int64)">
            <summary>
            上传进度回调
            </summary>
            <param name="p_bytesStep">本次发送字节数</param>
            <param name="p_bytesSent">共发送字节数</param>
            <param name="p_totalBytesToSend">总字节数</param>
        </member>
        <member name="M:Dt.Base.FileItem.Download(System.Boolean,System.Boolean)">
            <summary>
            执行下载
            </summary>
            <param name="p_priorThumbnail">是否优先下载缩略图</param>
            <param name="p_prompt">是否提示下载失败信息</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FileItem.OnDownloadProgress(System.Int64,System.Int64,System.Int64)">
            <summary>
            下载进度回调
            </summary>
            <param name="p_bytesStep"></param>
            <param name="p_bytesSent"></param>
            <param name="p_totalBytesToSend"></param>
        </member>
        <member name="M:Dt.Base.FileItem.UpdateTemplate(System.String)">
            <summary>
            更新控件模板及扩展信息
            </summary>
            <param name="p_ext">扩展名</param>
        </member>
        <member name="M:Dt.Base.FileItem.UpdateIcon(System.String)">
            <summary>
            更新图标，缺图标！
            </summary>
            <param name="p_ext"></param>
        </member>
        <member name="M:Dt.Base.FileItem.UpdateCachedFlag">
            <summary>
            更新已下载标志
            </summary>
        </member>
        <member name="M:Dt.Base.FileItem.GetExtName">
            <summary>
            获取扩展名，以 . 开头
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FileItem.GetSaveDesc">
            <summary>
            获取保存时的文件说明
            </summary>
        </member>
        <member name="M:Dt.Base.FileItem.Play(System.String)">
            <summary>
            播放声音或视频
            </summary>
            <param name="p_file">待播放文件</param>
        </member>
        <member name="M:Dt.Base.FileItem.AttachContextMenu(Dt.Base.Menu)">
            <summary>
            附加上下文菜单触发事件
            </summary>
            <param name="p_menu"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FileItem.ReadData(System.Text.Json.Utf8JsonReader@)">
            <summary>
            反序列化，初次加载
            </summary>
            <param name="p_reader"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FileItem.WriteData(System.Text.Json.Utf8JsonWriter)">
            <summary>
            序列化
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="T:Dt.Base.FileList">
            <summary>
            文件上传下载编辑器
            </summary>
        </member>
        <member name="M:Dt.Base.FileList.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="E:Dt.Base.FileList.UploadStarted">
            <summary>
            开始上传事件
            </summary>
        </member>
        <member name="E:Dt.Base.FileList.UploadFinished">
            <summary>
            上传结束事件
            </summary>
        </member>
        <member name="E:Dt.Base.FileList.Changed">
            <summary>
            文件列表变化事件
            </summary>
        </member>
        <member name="E:Dt.Base.FileList.OpenedFile">
            <summary>
            文件打开后事件
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.Data">
            <summary>
            获取设置文件列表的json描述信息
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.MaxFileCount">
            <summary>
            获取设置文件数量上限，默认int.MaxValue
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.FixedVolume">
            <summary>
            获取设置要上传的固定卷名，默认null表示上传到普通卷
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.ColCount">
            <summary>
            获取设置列数，默认1列
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.Spacing">
            <summary>
            获取设置文件项之间的间隔距离，默认0
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.ImageHeight">
            <summary>
            获取设置图像的显示高度，默认82，0表示和宽度相同
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.ImageStretch">
            <summary>
             获取设置图像填充模式，默认Uniform
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.EnableClick">
            <summary>
            获取设置文件项是否可点击，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.Items">
            <summary>
            获取所有FileItem
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.CmdAddImage">
            <summary>
            获取添加图片命令
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.CmdAddVideo">
            <summary>
            获取添加视频命令
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.CmdAddAudio">
            <summary>
            获取添加音频命令
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.CmdAddFile">
            <summary>
            获取添加文件命令
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.CmdCaptureVoice">
            <summary>
            获取添加录音命令
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.CmdTakePhoto">
            <summary>
            获取拍照命令
            </summary>
        </member>
        <member name="P:Dt.Base.FileList.CmdRecordVideo">
            <summary>
            获取录视频命令
            </summary>
        </member>
        <member name="M:Dt.Base.FileList.AddImage">
            <summary>
            增加图片文件
            </summary>
        </member>
        <member name="M:Dt.Base.FileList.AddVideo">
            <summary>
            增加视频文件
            </summary>
        </member>
        <member name="M:Dt.Base.FileList.AddAudio">
            <summary>
            增加音频文件
            </summary>
        </member>
        <member name="M:Dt.Base.FileList.AddMedia">
            <summary>
            增加媒体文件
            </summary>
        </member>
        <member name="M:Dt.Base.FileList.AddFile(System.String[],System.String[],System.String[])">
            <summary>
            增加文件
            </summary>
            <param name="p_uwpFileTypes">uwp文件过滤类型，如 .png .docx，null时不过滤</param>
            <param name="p_androidFileTypes">android文件过滤类型，如 image/png image/*，null时不过滤</param>
            <param name="p_iosFileTypes">ios文件过滤类型，如 UTType.Image，null时不过滤</param>
        </member>
        <member name="M:Dt.Base.FileList.UploadFiles(System.Collections.Generic.IList{Dt.Base.FileData})">
            <summary>
            批量上传文件
            </summary>
            <param name="p_files"></param>
        </member>
        <member name="M:Dt.Base.FileList.UpdateFile(Dt.Base.FileData,Dt.Base.FileItem)">
            <summary>
            更新已上传的文件
            </summary>
            <param name="p_file">新文件</param>
            <param name="p_vf">待更新的旧文件</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FileList.HandleUpload(System.Collections.Generic.IList{Dt.Base.FileData})">
            <summary>
            处理多文件上传
            </summary>
            <param name="p_files"></param>
        </member>
        <member name="M:Dt.Base.FileList.AddExistFiles(System.Collections.Generic.List{System.String})">
            <summary>
            通过从库中选择文件添加，无上传过程，只更新文件信息
            每个字符串为独立的文件描述json，如：["v0/52/37/142888904373956608.xlsx","12","xlsx文件",8153,"daoting","2020-10-29 15:09"]
            </summary>
            <param name="p_filesJson"></param>
        </member>
        <member name="M:Dt.Base.FileList.CaptureVoice">
            <summary>
            增加录音
            </summary>
        </member>
        <member name="M:Dt.Base.FileList.TakePhoto">
            <summary>
            增加拍照
            </summary>
        </member>
        <member name="M:Dt.Base.FileList.RecordVideo">
            <summary>
            增加录视频
            </summary>
        </member>
        <member name="M:Dt.Base.FileList.CancelTransfer">
            <summary>
            取消上传或下载
            </summary>
        </member>
        <member name="M:Dt.Base.FileList.AfterDeleteItem(Dt.Base.FileItem)">
            <summary>
            移除子项
            </summary>
            <param name="p_vf"></param>
        </member>
        <member name="M:Dt.Base.FileList.UpdateExistFiles(System.String,Dt.Base.FileItem)">
            <summary>
            通过从库中选择文件进行更新，无需上传
            </summary>
            <param name="p_fileJson"></param>
            <param name="p_vf"></param>
        </member>
        <member name="M:Dt.Base.FileList.Dt#Base#IMenuHost#UpdateContextMenu">
            <summary>
            切换上下文菜单或修改触发事件种类时通知宿主刷新
            </summary>
        </member>
        <member name="M:Dt.Base.FileList.ReadData(System.String)">
            <summary>
            反序列化，初次加载或重新加载
            </summary>
            <param name="p_json"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FileList.WriteData">
            <summary>
            序列化
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Downloader">
            <summary>
            文件下载，三平台合一
            </summary>
        </member>
        <member name="M:Dt.Base.Downloader.GetFile(Dt.Base.DownloadInfo,System.Threading.CancellationToken)">
            <summary>
            下载文件，将下载内容写入目标流
            </summary>
            <param name="p_info">下载描述</param>
            <param name="p_token"></param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Dt.Base.Downloader.GetAndCacheFile(System.String)">
            <summary>
            下载文件并缓存到本地
            </summary>
            <param name="p_path">要下载的文件路径，以原有文件名缓存到本地</param>
            <returns>false 下载失败，缓存文件已删除</returns>
        </member>
        <member name="M:Dt.Base.Downloader.GetImage(System.String)">
            <summary>
            下载图片，不在本地缓存文件，直接返回BitmapImage对象
            </summary>
            <param name="p_path">要下载的文件路径</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.DownloadInfo">
            <summary>
            文件下载描述
            </summary>
        </member>
        <member name="P:Dt.Base.DownloadInfo.Path">
            <summary>
            获取设置要下载的文件路径
            </summary>
        </member>
        <member name="P:Dt.Base.DownloadInfo.TgtStream">
            <summary>
            获取设置下载内容要保存的目标文件流
            </summary>
        </member>
        <member name="P:Dt.Base.DownloadInfo.Error">
            <summary>
            获取设置错误提示信息
            </summary>
        </member>
        <member name="P:Dt.Base.DownloadInfo.Progress">
            <summary>
            下载进度，可以为null
            </summary>
        </member>
        <member name="T:Dt.Base.IUploadUI">
            <summary>
            文件上传过程的UI
            </summary>
        </member>
        <member name="P:Dt.Base.IUploadUI.UploadProgress">
            <summary>
            上传进度回调
            </summary>
        </member>
        <member name="M:Dt.Base.IUploadUI.InitUpload(Dt.Base.FileData)">
            <summary>
            准备上传
            </summary>
            <param name="p_file">待上传文件对象</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.IUploadUI.UploadSuccess(System.String,Dt.Base.FileData)">
            <summary>
            上传成功后
            </summary>
            <param name="p_id">文件上传路径</param>
            <param name="p_file">已上传文件对象</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.IUploadUI.UploadFail(Dt.Base.FileData)">
            <summary>
            上传失败后
            </summary>
            <param name="p_file"></param>
        </member>
        <member name="T:Dt.Base.Uploader">
            <summary>
            UWP版文件上传
            </summary>
        </member>
        <member name="M:Dt.Base.Uploader.Send(System.Collections.Generic.IList{Dt.Base.FileData},System.String,System.Threading.CancellationTokenSource)">
            <summary>
            执行上传
            </summary>
            <param name="p_uploadFiles">待上传文件</param>
            <param name="p_fixedvolume">要上传的固定卷名，null表示上传到普通卷</param>
            <param name="p_tokenSource">取消上传的令牌，不负责释放</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Uploader.Cancel">
            <summary>
            取消上传
            </summary>
        </member>
        <member name="T:Dt.Base.FileLists.FileItemInfo">
            <summary>
            文件扩展信息
            </summary>
        </member>
        <member name="P:Dt.Base.FileLists.FileItemInfo.FileName">
            <summary>
            获取设置原始文件名称，不包括扩展名
            </summary>
        </member>
        <member name="P:Dt.Base.FileLists.FileItemInfo.FileDesc">
            <summary>
            获取设置文件类型及说明，绑定用，形如：文本文件 (.txt)
            </summary>
        </member>
        <member name="P:Dt.Base.FileLists.FileItemInfo.Length">
            <summary>
            获取设置文件大小
            </summary>
        </member>
        <member name="P:Dt.Base.FileLists.FileItemInfo.Uploader">
            <summary>
            获取或设置上传文件用户
            </summary>
        </member>
        <member name="P:Dt.Base.FileLists.FileItemInfo.Date">
            <summary>
            获取或设置文件上传日期
            </summary>
        </member>
        <member name="T:Dt.Base.FileLists.FileItemState">
            <summary>
            上传下载文件的状态
            </summary>
        </member>
        <member name="F:Dt.Base.FileLists.FileItemState.None">
            <summary>
            普通状态，无正在上传下载
            </summary>
        </member>
        <member name="F:Dt.Base.FileLists.FileItemState.UploadWaiting">
            <summary>
            等待上传
            </summary>
        </member>
        <member name="F:Dt.Base.FileLists.FileItemState.Uploading">
            <summary>
            正在上传
            </summary>
        </member>
        <member name="F:Dt.Base.FileLists.FileItemState.Downloading">
            <summary>
            正在下载
            </summary>
        </member>
        <member name="T:Dt.Base.FileLists.FileItemType">
            <summary>
            文件种类
            </summary>
        </member>
        <member name="F:Dt.Base.FileLists.FileItemType.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="F:Dt.Base.FileLists.FileItemType.Image">
            <summary>
            图片
            </summary>
        </member>
        <member name="F:Dt.Base.FileLists.FileItemType.Sound">
            <summary>
            声音
            </summary>
        </member>
        <member name="F:Dt.Base.FileLists.FileItemType.Video">
            <summary>
            视频
            </summary>
        </member>
        <member name="M:Dt.Base.FileLists.ImageFileView.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.FileLists.ImageFileView.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.FileLists.ImageFileView.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.FileLists.UpdateFileDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.FileLists.UpdateFileDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.FileLists.UpdateFileDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.FileListPanel">
            <summary>
            布局面板
            </summary>
        </member>
        <member name="M:Dt.Base.FileListPanel.MeasureOneCol(Windows.Foundation.Size)">
            <summary>
            单列不自动填充
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.CBar">
            <summary>
            单元格分隔行，可以Fv之外单独使用
            </summary>
        </member>
        <member name="F:Dt.Base.CBar.IsHorStretchProperty">
            <summary>
            分隔行是否水平填充
            </summary>
        </member>
        <member name="F:Dt.Base.CBar.RowSpanProperty">
            <summary>
            占用的行数
            </summary>
        </member>
        <member name="F:Dt.Base.CBar.ContentProperty">
            <summary>
            分隔行内容
            </summary>
        </member>
        <member name="P:Dt.Base.CBar.Title">
            <summary>
            获取设置分隔行标题
            </summary>
        </member>
        <member name="P:Dt.Base.CBar.IsHorStretch">
            <summary>
            获取设置是否水平填充，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.CBar.RowSpan">
            <summary>
            获取设置占用的行数，默认1行，-1时自动行高
            </summary>
        </member>
        <member name="P:Dt.Base.CBar.Content">
            <summary>
            获取设置分隔行内容
            </summary>
        </member>
        <member name="P:Dt.Base.CBar.Dt#Base#IFvCell#Bounds">
            <summary>
            在面板上的布局区域
            </summary>
        </member>
        <member name="T:Dt.Base.CBool">
            <summary>
            bool格
            </summary>
        </member>
        <member name="F:Dt.Base.CBool.IsSwitchProperty">
            <summary>
            是否显示为开关
            </summary>
        </member>
        <member name="F:Dt.Base.CBool.TrueValProperty">
            <summary>
            True时的值
            </summary>
        </member>
        <member name="F:Dt.Base.CBool.FalseValProperty">
            <summary>
            False时的值
            </summary>
        </member>
        <member name="P:Dt.Base.CBool.IsSwitch">
            <summary>
            获取设置是否显示为开关，默认false为选择框
            </summary>
        </member>
        <member name="P:Dt.Base.CBool.TrueVal">
            <summary>
            获取设置True时的值
            </summary>
        </member>
        <member name="P:Dt.Base.CBool.FalseVal">
            <summary>
            获取设置False时的值
            </summary>
        </member>
        <member name="T:Dt.Base.CColor">
            <summary>
            颜色选择格
            未使用绑定，采用直接取值/赋值的方式
            </summary>
        </member>
        <member name="F:Dt.Base.CColor.ColorBrushProperty">
            <summary>
            选择的画刷
            </summary>
        </member>
        <member name="F:Dt.Base.CColor.DescProperty">
            <summary>
            颜色描述
            </summary>
        </member>
        <member name="P:Dt.Base.CColor.ColorBrush">
            <summary>
            获取设置选择的画刷
            </summary>
        </member>
        <member name="P:Dt.Base.CColor.Desc">
            <summary>
            获取设置颜色描述
            </summary>
        </member>
        <member name="M:Dt.Base.CColor.SelectColor(Windows.UI.Xaml.Media.SolidColorBrush)">
            <summary>
            设置选择结果
            </summary>
            <param name="p_brush"></param>
        </member>
        <member name="M:Dt.Base.FormView.ColorDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.ColorDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.ColorDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.CalendarDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.CalendarDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.CalendarDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.HtmlEditDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.HtmlEditDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.HtmlEditDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.HtmlViewDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.HtmlViewDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.HtmlViewDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.IconDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.IconDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.IconDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.IconItem.Icon">
            <summary>
            图标
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.IconItem.Name">
            <summary>
            图标名称
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.IconItem.Hex">
            <summary>
            16进制值
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.IconItem.FullName">
            <summary>
            完整名称
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.IconItem.GetAllIcons">
            <summary>
            获取所有图标项列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FormView.IconItem.IsMatched(System.String)">
            <summary>
            是否匹配名称
            </summary>
            <param name="p_txt"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FormView.ListDlg.OnSingleClick(System.Object,Dt.Base.ItemClickArgs)">
            <summary>
            单选
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.FormView.ListDlg.OnMultipleOK(System.Object,Dt.Base.Mi)">
            <summary>
            多选
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.FormView.ListDlg.CreateEnumData(System.Type)">
            <summary>
            创建枚举类型数据源
            </summary>
            <param name="p_type"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FormView.ListDlg.GetDataBySql(System.String,System.String)">
            <summary>
            根据sql、过滤条件获取数据源，sql必须含有服务名前缀，如：
            Cm:select * from dt_log
            local:select * from letter
            </summary>
            <param name="p_sql">带前缀的sql</param>
            <param name="p_filter"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FormView.ListDlg.GetDataByKey(System.String,System.String)">
            <summary>
            根据Sql语句键值、过滤条件获取数据源，键值必须含有服务名前缀
            </summary>
            <param name="p_key">带服务名前缀的键</param>
            <param name="p_filter"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FormView.ListDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.ListDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.ListDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.FormView.NumValConverter">
            <summary>
            特殊处理CNum与Cell之间null的转换
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.NumValConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            在将源数据传递到目标以在 UI 中显示之前，对源数据进行修改
            </summary>
            <param name="value">正传递到目标的源数据</param>
            <param name="targetType">目标依赖项属性需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到目标依赖项属性的值</returns>
        </member>
        <member name="M:Dt.Base.FormView.NumValConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            在将目标数据传递到源对象之前，对目标数据进行修改
            </summary>
            <param name="value">正传递到源的目标数据</param>
            <param name="targetType">源对象需要的数据的 Type</param>
            <param name="parameter">要在转换器逻辑中使用的可选参数</param>
            <param name="language">语言</param>
            <returns>要传递到源对象的值</returns>
        </member>
        <member name="M:Dt.Base.FormView.TreeDlg.OnSingleClick(System.Object,Dt.Base.ItemClickArgs)">
            <summary>
            单选
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.FormView.TreeDlg.OnMultipleOK(System.Object,Dt.Base.Mi)">
            <summary>
            多选
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.FormView.TreeDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.TreeDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.TreeDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.FormView.FvUndoCmd">
            <summary>
            Undo命令
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.FvUndoCmd.DoExecute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="T:Dt.Base.FormView.CellLastVal">
            <summary>
            记录Fv单元格最后编辑的值
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.CellLastVal.ID">
            <summary>
            单元格唯一标识：BaseUri + Fv.Name + FvCell.ID
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.CellLastVal.Val">
            <summary>
            单元格最后编辑的值
            </summary>
        </member>
        <member name="T:Dt.Base.FormView.CellPanel">
            <summary>
            单元格内部布局面板，为uno节省可视树级数
            </summary>
        </member>
        <member name="F:Dt.Base.FormView.CellPanel.ChildProperty">
            <summary>
            单元格内容
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.CellPanel.Child">
            <summary>
            获取设置单元格内容
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.CellPanel.ToggleIsChanged(System.Boolean)">
            <summary>
            Cell的值变化
            </summary>
            <param name="p_isChanged"></param>
        </member>
        <member name="M:Dt.Base.FormView.CellPanel.OnKeyDown(System.Object,Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            同步处理键盘特殊功能键操作
            需要支持以下编辑键：
            Tab：              编辑状态下跳到下一格，未格跳到下行第一格，支持跳过只读格、加shift反跳
            Home, End：        首、未单元格跳
            Enter：            在非TextBox多行的情况下等同于Tab，Ctrl + Enter 触发编辑结束事件
            Escape：           撤消编辑
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Base.FormView.CellParamAttribute">
            <summary>
            格参数标志
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.CellParamAttribute.Title">
            <summary>
            获取参数标题
            </summary>
        </member>
        <member name="T:Dt.Base.FormView.FormPanel">
            <summary>
            单元格布局面板
            </summary>
        </member>
        <member name="F:Dt.Base.FormView.FormPanel._maxSize">
            <summary>
            面板最大尺寸，宽高始终不为无穷大！
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.FormPanel.SetMaxSize(Windows.Foundation.Size)">
            <summary>
            设置面板的最大尺寸，宽高始终不为无穷大！
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.FormPanel.Clear">
            <summary>
            清空子元素，自动添加边框
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.FormPanel.GetTotalHeight(System.Int32,System.Double,System.Boolean)">
            <summary>
            分成n列时需要的高度
            </summary>
            <param name="p_colCount">列数</param>
            <param name="p_colWidth">列宽</param>
            <param name="p_measure">是否测量</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.FormView.ObjectView">
            <summary>
            普通对象的视图包装类
            </summary>
        </member>
        <member name="E:Dt.Base.FormView.ObjectView.Changed">
            <summary>
            内部属性值发生变化
            </summary>
        </member>
        <member name="E:Dt.Base.FormView.ObjectView.PropertyChanged">
            <summary>
            属性 IsChanged 变化事件
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.ObjectView.IsChanged">
            <summary>
            获取对象的属性是否发生更改。
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.ObjectView.AcceptChanges">
            <summary>
            提交自上次调用以来对该行进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.ObjectView.RejectChanges">
            <summary>
            回滚自该表加载以来或上次调用 AcceptChanges 以来对该行进行的所有更改。
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.ObjectView.CheckChanges">
            <summary>
            检查所有属性值是否有变化，同时更新IsChanged属性
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.ObjectView.OnValueChanged(Dt.Base.FormView.PropertyView)">
            <summary>
            触发属性值变化事件
            </summary>
            <param name="p_view"></param>
        </member>
        <member name="T:Dt.Base.FormView.PropertyView">
            <summary>
            对象属性的视图包装类
            </summary>
        </member>
        <member name="E:Dt.Base.FormView.PropertyView.PropertyChanged">
            <summary>
            属性 Val,IsChanged 变化事件
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.PropertyView.ID">
            <summary>
            获取数据项字段名
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.PropertyView.Type">
            <summary>
            获取数据项值的类型
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.PropertyView.Val">
            <summary>
            获取设置数据项值
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.PropertyView.IsChanged">
            <summary>
            获取当前数据项是否已发生更改。
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.PropertyView.OriginalVal">
            <summary>
            获取该数据项未发生更改前的值
            </summary>
            <remark>
            如果调用 AcceptChanges 方法，则 originalValue 属性的值将变成当前 Val 属性的值
            如果调用了 RejectChanges 方法，则该数据项的值将变为当前 OriginalVal 属性的值
            </remark>
        </member>
        <member name="M:Dt.Base.FormView.PropertyView.AcceptChanges">
            <summary>
            提交自上次调用以来对该数据项进行的所有更改
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.PropertyView.RejectChanges">
            <summary>
            回滚自该表加载以来或上次调用 AcceptChanges 以来对该数据项进行的所有更改
            </summary>
        </member>
        <member name="M:Dt.Base.FormView.PropertyView.GetVal``1">
            <summary>
            获取当前数据项的值
            </summary>
            <typeparam name="T">将值转换为指定的类型</typeparam>
            <returns>指定类型的值</returns>
        </member>
        <member name="M:Dt.Base.FormView.PropertyView.IsID(System.String[])">
            <summary>
            ID是否匹配给定列表中的任一名称，忽略大小写
            </summary>
            <param name="p_ids">一个或多个id名称</param>
            <returns>true 匹配任一</returns>
        </member>
        <member name="T:Dt.Base.FormView.SearchFvHis">
            <summary>
            查询面板历史
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.SearchFvHis.ID">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.SearchFvHis.BaseUri">
            <summary>
            控件所属的xaml位置
            </summary>
        </member>
        <member name="P:Dt.Base.FormView.SearchFvHis.Content">
            <summary>
            搜索内容
            </summary>
        </member>
        <member name="T:Dt.Base.CDate">
            <summary>
            时间格
            </summary>
        </member>
        <member name="F:Dt.Base.CDate.FormatProperty">
            <summary>
            格式串
            </summary>
        </member>
        <member name="F:Dt.Base.CDate.AlwaysTouchPickerProperty">
            <summary>
            触摸模式选择器
            </summary>
        </member>
        <member name="F:Dt.Base.CDate.ValueProperty">
            <summary>
            日期时间
            </summary>
        </member>
        <member name="P:Dt.Base.CDate.Format">
            <summary>
            获取设置格式串，默认 yyyy-MM-dd，完整如：yyyy-MM-dd HH:mm:ss
            </summary>
        </member>
        <member name="P:Dt.Base.CDate.AlwaysTouchPicker">
            <summary>
            获取设置是否始终为触摸模式选择器，默认 false
            </summary>
        </member>
        <member name="P:Dt.Base.CDate.Value">
            <summary>
            获取设置日期时间
            </summary>
        </member>
        <member name="T:Dt.Base.DateValConverter">
            <summary>
            源CDate.Data，目标CDate.Value
            </summary>
        </member>
        <member name="T:Dt.Base.DateValUIConverter">
            <summary>
            源CDate.Value，目标TextBlock
            </summary>
        </member>
        <member name="T:Dt.Base.ValMaskConverter">
            <summary>
            源CDate.Value，目标MaskBox
            </summary>
        </member>
        <member name="T:Dt.Base.CFile">
            <summary>
            文件格
            </summary>
        </member>
        <member name="P:Dt.Base.CFile.ColCount">
            <summary>
            获取设置列数，默认1列
            </summary>
        </member>
        <member name="P:Dt.Base.CFile.Spacing">
            <summary>
            获取设置文件项之间的间隔距离，默认0
            </summary>
        </member>
        <member name="P:Dt.Base.CFile.ImageHeight">
            <summary>
            获取设置图像的显示高度，默认82，0表示和宽度相同
            </summary>
        </member>
        <member name="P:Dt.Base.CFile.ImageStretch">
            <summary>
             获取设置图像填充模式，默认Uniform
            </summary>
        </member>
        <member name="P:Dt.Base.CFile.EnableClick">
            <summary>
            获取设置文件项是否可点击，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.CFile.MaxFileCount">
            <summary>
            获取设置文件数量上限，默认int.MaxValue
            </summary>
        </member>
        <member name="P:Dt.Base.CFile.FixedVolume">
            <summary>
            获取设置要上传的固定卷名，默认null表示上传到普通卷
            </summary>
        </member>
        <member name="P:Dt.Base.CFile.Toolbar">
            <summary>
            获取设置工具栏内容
            </summary>
        </member>
        <member name="P:Dt.Base.CFile.ShowDefaultToolbar">
            <summary>
            获取设置是否显示默认工具栏，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.CFile.ShowDefaultMenu">
            <summary>
            获取设置是否显示默认菜单，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.CFile.FileList">
            <summary>
            获取内部的文件列表
            </summary>
        </member>
        <member name="M:Dt.Base.CFile.Dt#Base#IMenuHost#UpdateContextMenu">
            <summary>
            切换上下文菜单或修改触发事件种类时通知宿主刷新
            </summary>
        </member>
        <member name="P:Dt.Base.ISelectFileDlg.SelectedFiles">
            <summary>
            已选择的文件列表，每个字符串为独立的文件描述json，如：["v0/52/37/142888904373956608.xlsx","12","xlsx文件",8153,"daoting","2020-10-29 15:09"]
            </summary>
        </member>
        <member name="M:Dt.Base.ISelectFileDlg.Show(System.Boolean,System.String)">
            <summary>
            显示文件选择对话框
            </summary>
            <param name="p_isMultiSelection">是否允许多选</param>
            <param name="p_typeFilter">按文件扩展名过滤</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.CFree">
            <summary>
            自定义格
            </summary>
        </member>
        <member name="F:Dt.Base.CFree.ContentProperty">
            <summary>
            自定义格内容
            </summary>
        </member>
        <member name="P:Dt.Base.CFree.Content">
            <summary>
            获取设置自定义格内容
            </summary>
        </member>
        <member name="M:Dt.Base.CFree.ApplyCellStyle(System.Object)">
            <summary>
            应用单元格样式
            </summary>
            <param name="p_obj"></param>
        </member>
        <member name="T:Dt.Base.CHtml">
            <summary>
            富文本格
            </summary>
        </member>
        <member name="E:Dt.Base.CHtml.Saved">
            <summary>
            保存事件
            </summary>
        </member>
        <member name="T:Dt.Base.IHtmlEditHost">
            <summary>
            Html编辑器宿主接口
            </summary>
        </member>
        <member name="P:Dt.Base.IHtmlEditHost.CurrentHtml">
            <summary>
            初始Html内容
            </summary>
        </member>
        <member name="M:Dt.Base.IHtmlEditHost.SaveHtml(System.String)">
            <summary>
            保存Html
            </summary>
            <param name="p_html"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.CIcon">
            <summary>
            图标选择格
            未使用绑定，采用直接取值/赋值的方式
            </summary>
        </member>
        <member name="F:Dt.Base.CIcon.IconCharProperty">
            <summary>
            图标字符
            </summary>
        </member>
        <member name="F:Dt.Base.CIcon.DescProperty">
            <summary>
            图标描述
            </summary>
        </member>
        <member name="P:Dt.Base.CIcon.IconChar">
            <summary>
            获取设置图标字符
            </summary>
        </member>
        <member name="P:Dt.Base.CIcon.Desc">
            <summary>
            获取设置图标描述
            </summary>
        </member>
        <member name="M:Dt.Base.CIcon.SelectIcon(Dt.Base.Icons)">
            <summary>
            设置选择结果
            </summary>
            <param name="p_icon"></param>
        </member>
        <member name="M:Dt.Base.CIcon.LoadIconUI(Dt.Base.Icons)">
            <summary>
            格的显示内容
            </summary>
            <param name="p_icon"></param>
        </member>
        <member name="T:Dt.Base.CImage">
            <summary>
            图像格
            </summary>
        </member>
        <member name="P:Dt.Base.CImage.ImageHeight">
            <summary>
            获取设置图像的显示高度，默认82，0表示和宽度相同
            </summary>
        </member>
        <member name="P:Dt.Base.CImage.ImageStretch">
            <summary>
             获取设置图像填充模式，默认Uniform
            </summary>
        </member>
        <member name="P:Dt.Base.CImage.EnableClick">
            <summary>
            获取设置文件项是否可点击，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.CImage.FixedVolume">
            <summary>
            获取设置要上传的固定卷名，默认null表示上传到普通卷
            </summary>
        </member>
        <member name="P:Dt.Base.CImage.ShowDefaultMenu">
            <summary>
            获取设置是否显示默认菜单，默认true
            </summary>
        </member>
        <member name="M:Dt.Base.CImage.Dt#Base#IMenuHost#UpdateContextMenu">
            <summary>
            切换上下文菜单或修改触发事件种类时通知宿主刷新
            </summary>
        </member>
        <member name="T:Dt.Base.CLink">
            <summary>
            链接格
            </summary>
        </member>
        <member name="E:Dt.Base.CLink.Click">
            <summary>
            点击链接事件
            </summary>
        </member>
        <member name="M:Dt.Base.CLink.OnLoadTemplate">
            <summary>
            切换内容
            </summary>
        </member>
        <member name="T:Dt.Base.CList">
            <summary>
            列表选择格
            数据源优先级：
            1. 外部直接设置Data
            2. 基础选项
            3. Sql查询
            4. Sql语句键值
            5. 外部设置的Enum数据
            6. 格类型为枚举时，自动生成Enum数据
            7. 外部(xaml中)定义的对象列表
            数据源为Table时，确保存在name列；
            为普通对象时，直接将对象赋值！
            </summary>
        </member>
        <member name="E:Dt.Base.CList.LoadData">
            <summary>
            外部自定义数据源事件，支持异步
            </summary>
        </member>
        <member name="E:Dt.Base.CList.AfterSelect">
            <summary>
            选择后事件，Selected与uno中重名，xaml中附加事件报错！
            </summary>
        </member>
        <member name="P:Dt.Base.CList.Data">
            <summary>
            获取设置数据源对象，Table或集合对象
            </summary>
        </member>
        <member name="P:Dt.Base.CList.View">
            <summary>
            获取设置行视图，DataTemplate、DataTemplateSelector、Cols列定义 或 IRowView
            </summary>
        </member>
        <member name="P:Dt.Base.CList.ViewMode">
            <summary>
            获取设置视图类型：列表、表格、磁贴，默认List
            </summary>
        </member>
        <member name="P:Dt.Base.CList.CellEx">
            <summary>
            获取设置外部自定义单元格的类型，方法名和Dot或Col的ID相同，SetStyle方法控制行样式
            </summary>
        </member>
        <member name="P:Dt.Base.CList.PhoneViewMode">
            <summary>
            获取设置Phone模式下的视图类型，null时Win,Phone两模式统一采用ViewMode，默认null
            </summary>
        </member>
        <member name="P:Dt.Base.CList.SelectionMode">
            <summary>
            获取设置选择模式，默认Single，只第一次设置有效！
            </summary>
        </member>
        <member name="P:Dt.Base.CList.Option">
            <summary>
            获取设置基础选项
            </summary>
        </member>
        <member name="P:Dt.Base.CList.Sql">
            <summary>
            获取设置数据查询语句，sql必须含有服务名前缀，如：
            Cm:select * from dt_log
            local:select * from letter
            </summary>
        </member>
        <member name="P:Dt.Base.CList.SqlKey">
            <summary>
            获取设置数据查询语句键值，键值必须含有服务名前缀
            </summary>
        </member>
        <member name="P:Dt.Base.CList.SqlKeyFilter">
            <summary>
            获取设置使用sql键值查询时的动态过滤条件
            </summary>
        </member>
        <member name="P:Dt.Base.CList.Enum">
            <summary>
            获取设置枚举格式串；
            格式：枚举名(包含命名空间),程序集；
            例：Dt.Base.CtType,Dt.Base
            </summary>
        </member>
        <member name="P:Dt.Base.CList.Items">
            <summary>
            外部(xaml中)定义的对象列表
            </summary>
        </member>
        <member name="P:Dt.Base.CList.SrcID">
            <summary>
            获取设置源属性列表，用'#'隔开
            </summary>
        </member>
        <member name="P:Dt.Base.CList.TgtID">
            <summary>
            获取设置目标属性列表，用'#'隔开
            </summary>
        </member>
        <member name="P:Dt.Base.CList.RefreshData">
            <summary>
            获取设置是否动态加载数据源，默认false
            true表示每次显示对话框时都加载数据源，false表示只第一次加载
            </summary>
        </member>
        <member name="P:Dt.Base.CList.IsEditable">
            <summary>
            获取设置是否可编辑
            </summary>
        </member>
        <member name="P:Dt.Base.CList.Value">
            <summary>
            获取设置当前值
            </summary>
        </member>
        <member name="P:Dt.Base.CList.Lv">
            <summary>
            获取Lv对象
            </summary>
        </member>
        <member name="M:Dt.Base.CList.LoadContent">
            <summary>
            根据是否可编辑动态加载控件
            </summary>
        </member>
        <member name="M:Dt.Base.CList.OnLoadData">
            <summary>
            触发外部自定义数据源事件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CList.OnSelected(System.Object)">
            <summary>
            触发选择后事件
            </summary>
            <param name="p_selectedItem"></param>
        </member>
        <member name="T:Dt.Base.IDStr">
            <summary>
            描述显示和实际值类
            </summary>
        </member>
        <member name="P:Dt.Base.IDStr.ID">
            <summary>
            获取设置实际值
            </summary>
        </member>
        <member name="P:Dt.Base.IDStr.Str">
            <summary>
            获取设置要显示的字符串
            </summary>
        </member>
        <member name="T:Dt.Base.ListValConverter">
            <summary>
            源Cell.Val，目标CList.Value
            </summary>
        </member>
        <member name="T:Dt.Base.ListTextConverter">
            <summary>
            源CList.Value，目标TextBox.Text
            </summary>
        </member>
        <member name="T:Dt.Base.CMask">
            <summary>
            掩码格
            </summary>
        </member>
        <member name="P:Dt.Base.CMask.MaskType">
            <summary>
            掩码类型
            </summary>
        </member>
        <member name="P:Dt.Base.CMask.Mask">
            <summary>
            掩码表达式
            </summary>
        </member>
        <member name="P:Dt.Base.CMask.ShowPlaceHolder">
            <summary>
            是否显示掩码占位符，RegEx有效
            </summary>
        </member>
        <member name="P:Dt.Base.CMask.PlaceHolder">
            <summary>
            掩码占位符，RegEx有效
            </summary>
        </member>
        <member name="P:Dt.Base.CMask.SaveLiteral">
            <summary>
            是否保存为转换后的结果，Simple、Regular有效
            </summary>
        </member>
        <member name="P:Dt.Base.CMask.AutoComplete">
            <summary>
            自动完成方式，RegEx有效
            </summary>
        </member>
        <member name="P:Dt.Base.CMask.UseAsDisplayFormat">
            <summary>
            是否按掩码格式化显示
            </summary>
        </member>
        <member name="P:Dt.Base.CMask.AllowNullInput">
            <summary>
            输入是否可为空
            </summary>
        </member>
        <member name="P:Dt.Base.CMask.IgnoreBlank">
            <summary>
            忽略空格
            </summary>
        </member>
        <member name="T:Dt.Base.MaskBox">
            <summary>
            支持掩码的文本框，可独立使用
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBox.ValueProperty">
            <summary>
            文本框的实际值
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBox.MaskTypeProperty">
            <summary>
            掩码类型
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBox.MaskProperty">
            <summary>
            掩码表达式
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBox.ShowPlaceHolderProperty">
            <summary>
            是否显示掩码占位符，RegEx有效
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBox.PlaceHolderProperty">
            <summary>
            掩码占位符
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBox.SaveLiteralProperty">
            <summary>
            是否保存为转换后的结果
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBox.AutoCompleteProperty">
            <summary>
            自动完成方式
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBox.UseAsDisplayFormatProperty">
            <summary>
            是否按掩码格式化显示
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBox.AllowNullInputProperty">
            <summary>
            输入是否可为空
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBox.BeepOnErrorProperty">
            <summary>
            出错时是否声音提示
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBox.IgnoreBlankProperty">
            <summary>
            忽略空格
            </summary>
        </member>
        <member name="E:Dt.Base.MaskBox.TextChanged">
            <summary>
            文本变化事件
            </summary>
        </member>
        <member name="E:Dt.Base.MaskBox.ValueChanged">
            <summary>
            值变化事件
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.Text">
            <summary>
            获取文本框的显示内容
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.Value">
            <summary>
            获取设置文本框的实际值
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.ValueStr">
            <summary>
            获取设置文本框实际值的字符串
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.IsSelectAll">
            <summary>
            获取文本框内容是否已全选
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.CaretIndex">
            <summary>
            选中文本的起始索引
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.InputManager">
            <summary>
            输入管理员
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.MaskManager">
            <summary>
            掩码员
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.MaskType">
            <summary>
            掩码类型
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.Mask">
            <summary>
            掩码表达式
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.ShowPlaceHolder">
            <summary>
            是否显示掩码占位符，RegEx有效
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.PlaceHolder">
            <summary>
            掩码占位符，RegEx有效
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.SaveLiteral">
            <summary>
            是否保存为转换后的结果，Simple、Regular有效
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.AutoComplete">
            <summary>
            自动完成方式，RegEx有效
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.UseAsDisplayFormat">
            <summary>
            是否按掩码格式化显示
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.AllowNullInput">
            <summary>
            输入是否可为空
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.BeepOnError">
            <summary>
            出错时是否声音提示
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.IgnoreBlank">
            <summary>
            忽略空格
            </summary>
        </member>
        <member name="P:Dt.Base.MaskBox.MaskCulture">
            <summary>
            区域设置
            </summary>
        </member>
        <member name="M:Dt.Base.MaskBox.OnApplyTemplate">
            <summary>
            应用模板
            </summary>
        </member>
        <member name="M:Dt.Base.MaskBox.OnTextChanged(System.Object,Windows.UI.Xaml.Controls.TextChangedEventArgs)">
            <summary>
            文本框中的内容更改
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.MaskBox.OnKeyDown(System.Object,Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            键盘按下事件处理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.MaskBox.OnPointerWheelChanged(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标滚轮事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.MaskBox.OnPointerPressed(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标按下修改光标位置
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.MaskBox.OnGotFocus(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            获得焦点时更新要显示的文本
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.MaskBox.OnPointerReleased(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标抬起修改选中内容的光标位置
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.MaskBox.OnLostFocus(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            失去焦点时更新要显示的文本和实际值
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.MaskBox.SetTextSilent(System.String)">
            <summary>
            设置文本框的显示内容（不触发TextChanged事件）
            </summary>
            <param name="p_text"></param>
        </member>
        <member name="M:Dt.Base.MaskBox.SetValueSilent(System.Object)">
            <summary>
            设置文本框的实际值（不执行Coerce操作）
            </summary>
            <param name="p_value"></param>
        </member>
        <member name="M:Dt.Base.MaskBox.SaveState">
            <summary>
            保存当前文本框的状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.MaskBox.RestoreState(Dt.Base.MaskBoxState)">
            <summary>
            加载文本框状态
            </summary>
            <param name="p_state"></param>
        </member>
        <member name="M:Dt.Base.MaskBox.RaiseTextChanged(Windows.UI.Xaml.Controls.TextChangedEventArgs)">
            <summary>
            触发文本变化事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.MaskBox.RaiseValueChanged">
            <summary>
            触发文本框值变化事件
            </summary>
        </member>
        <member name="M:Dt.Base.MaskBox.CreateAlphaScope">
            <summary>
            输入范围为英文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.MaskBox.CreateNumberScope">
            <summary>
            输入范围为数字
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.MaskBoxState">
            <summary>
            记录RegTextBox的状态信息
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBoxState.SelectionLength">
            <summary>
            文本框中选中文字的程度
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBoxState.SelectionStart">
            <summary>
            选中文字的开始位置
            </summary>
        </member>
        <member name="F:Dt.Base.MaskBoxState.Text">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="F:Dt.Base.AutoCompleteType.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.AutoCompleteType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.AutoCompleteType.Strong">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.AutoCompleteType.Optimistic">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Base.MaskBoxInput">
            <summary>
            管理键盘鼠标的输入
            </summary>
        </member>
        <member name="M:Dt.Base.MaskBoxInput.#ctor(Dt.Base.MaskBox)">
            <summary>
            构造方法
            </summary>
            <param name="p_maskBox">编辑器</param>
        </member>
        <member name="M:Dt.Base.MaskBoxInput.OnPreviewKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            预处理按键操作
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.MaskBoxInput.OnPointerWheelChanged(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            预处理鼠标滚轮操作
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Base.MaskMediator">
            <summary>
            掩码中介，负责MaskBox与掩码员的沟通
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.#ctor(Dt.Base.MaskBox)">
            <summary>
            构造方法
            </summary>
            <param name="p_maskBox">编辑器</param>
        </member>
        <member name="M:Dt.Base.MaskMediator.Initialize">
            <summary>
            初始化掩码员，更新文本框
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.SetInitialEditValue(System.Object)">
            <summary>
            设置初始值
            </summary>
            <param name="initialEditValue"></param>
        </member>
        <member name="M:Dt.Base.MaskMediator.Insert(System.String)">
            <summary>
            有文本新输入
            </summary>
            <param name="p_insert">新文本</param>
        </member>
        <member name="M:Dt.Base.MaskMediator.SpinDown">
            <summary>
            下调
            </summary>
            <returns>true 表示已处理；false 未处理</returns>
        </member>
        <member name="M:Dt.Base.MaskMediator.SpinUp">
            <summary>
            上调
            </summary>
            <returns>true 表示已处理；false 未处理</returns>
        </member>
        <member name="M:Dt.Base.MaskMediator.Delete">
            <summary>
            删除选中部分
            </summary>
            <returns>true 表示已处理；false 未处理</returns>
        </member>
        <member name="M:Dt.Base.MaskMediator.Backspace">
            <summary>
            退格
            </summary>
            <returns>true 表示已处理；false 未处理</returns>
        </member>
        <member name="M:Dt.Base.MaskMediator.SelectAll">
            <summary>
            全选
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.CursorLeft">
            <summary>
            光标左移（可带选中状态）
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.CursorRight">
            <summary>
            光标右移（可带选中状态）
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.CursorHome">
            <summary>
            光标置行头
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.CursorEnd">
            <summary>
            光标置尾
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.ChangeCursorPosition">
            <summary>
            鼠标按下时移动光标位置
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.ChangeCursorSelection">
            <summary>
            鼠标抬起时选中光标区域
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.FlushPendingEditActions">
            <summary>
            刷新未提交的操作内容
            </summary>
            <returns>true 表值被改变，需要更新显示；false 不需更新</returns>
        </member>
        <member name="M:Dt.Base.MaskMediator.GetCurrentEditValue">
            <summary>
            获取掩码员的当前值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.MaskMediator.PrepareForClearChangesAfterSelectAll">
            <summary>
            全选准备插入
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.Undo">
            <summary>
            通知撤消
            </summary>
            <returns>true 表值被改变，需要更新显示；false 不需更新</returns>
        </member>
        <member name="M:Dt.Base.MaskMediator.CursorSelectAll">
            <summary>
            选中所有
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.CursorClearSelectAll">
            <summary>
            全选清除
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.UpdateTextAndValue(System.Boolean)">
            <summary>
            更新文本框的显示和值
            </summary>
            <param name="p_updateValue"></param>
        </member>
        <member name="P:Dt.Base.MaskMediator.CanUndo">
            <summary>
            是否可撤消
            </summary>
        </member>
        <member name="P:Dt.Base.MaskMediator.DisplayCursorPosition">
            <summary>
            当前光标位置
            </summary>
        </member>
        <member name="P:Dt.Base.MaskMediator.DisplaySelectionLength">
            <summary>
            当前选中文本的长度
            </summary>
        </member>
        <member name="P:Dt.Base.MaskMediator.DisplaySelectionStart">
            <summary>
            选中文本的起始位置
            </summary>
        </member>
        <member name="P:Dt.Base.MaskMediator.DisplayText">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:Dt.Base.MaskMediator.IsEditValueDifferFromEditText">
            <summary>
            值与文本是否相同
            </summary>
        </member>
        <member name="P:Dt.Base.MaskMediator.IsFinal">
            <summary>
            光标是否在最后
            </summary>
        </member>
        <member name="P:Dt.Base.MaskMediator.IsMatch">
            <summary>
            是否匹配
            </summary>
        </member>
        <member name="P:Dt.Base.MaskMediator.AllowEdit">
            <summary>
            获取是否可编辑
            </summary>
        </member>
        <member name="P:Dt.Base.MaskMediator.SelectAllMode">
            <summary>
            当前是否已全选
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.CreateDefaultMaskManager">
            <summary>
            根据掩码属性创建编辑器的掩码员
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.MaskMediator.ApplyMaskSelection">
            <summary>
            执行选中
            </summary>
        </member>
        <member name="M:Dt.Base.MaskMediator.OnLocalEditAction(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            掩码员通知外部来决定是否可编辑
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.MaskMediator.OnEditTextChanged(System.Object,System.EventArgs)">
            <summary>
            掩码员文本变化事件的处理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.MaskMediator.PrepareForSelectAll">
            <summary>
            移动光标前是否需要全选
            </summary>
        </member>
        <member name="T:Dt.Base.CNum">
            <summary>
            数值格
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.ValueProperty">
            <summary>
            当前值
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.IsIntegerProperty">
            <summary>
            是否为整型数值
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.DecimalsProperty">
            <summary>
            小数位数
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.MaximumProperty">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.MinimumProperty">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.ValueFormatProperty">
            <summary>
            格式化显示
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.UpdateTimelyProperty">
            <summary>
            是否实时更新Cell值
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.CustomUnitProperty">
            <summary>
            自定义单位
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.NullValueProperty">
            <summary>
            是否可为空
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.LargeChangeProperty">
            <summary>
            最大变化量
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.SmallChangeProperty">
            <summary>
            最小变化量
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.AutoReverseProperty">
            <summary>
            自动循环调值
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.NumberFormatInfoProperty">
            <summary>
            区域格式
            </summary>
        </member>
        <member name="F:Dt.Base.CNum.IsFocusedProperty">
            <summary>
            当前控件是否已获得焦点
            </summary>
        </member>
        <member name="E:Dt.Base.CNum.ValueChanged">
            <summary>
            数值变化事件
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.Value">
            <summary>
            获取设置当前值
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.IsInteger">
            <summary>
            获取设置是否为整型数值
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.Decimals">
            <summary>
            获取设置小数位数
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.Maximum">
            <summary>
            获取设置最大值
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.Minimum">
            <summary>
            获取设置最小值
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.ValueFormat">
            <summary>
            获取设置格式化显示
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.UpdateTimely">
            <summary>
            获取设置是否实时更新Cell值
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.CustomUnit">
            <summary>
            获取设置自定义单位，显示在数字后面
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.NullValue">
            <summary>
            获取设置为空时显示的字符串
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.LargeChange">
            <summary>
            获取设置最大变化量
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.SmallChange">
            <summary>
            获取设置最小变化量
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.AutoReverse">
            <summary>
            获取设置是否可自动循环调值
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.IsFocused">
            <summary>
            获取设置当前控件是否已获得焦点
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.NumberFormatInfo">
            <summary>
            获取设置区域格式
            </summary>
        </member>
        <member name="P:Dt.Base.CNum.ContentText">
            <summary>
            获取文本框的文本内容
            </summary>
        </member>
        <member name="M:Dt.Base.CNum.Select(System.Int32,System.Int32)">
            <summary>
            选择文本内容
            </summary>
            <param name="start">选择区域的开始位置</param>
            <param name="length">选择长度</param>
        </member>
        <member name="M:Dt.Base.CNum.SelectAll">
            <summary>
            全选
            </summary>
        </member>
        <member name="M:Dt.Base.CNum.FormatDisplay">
            <summary>
            非焦点时的格式化显示串
            </summary>
            <returns>格式化显示串</returns>
        </member>
        <member name="M:Dt.Base.CNum.FormatEdit">
            <summary>
            获得焦点正在编辑时的内容串
            </summary>
            <returns>正在编辑时的内容串</returns>
        </member>
        <member name="T:Dt.Base.ValueChangedEventArgs`1">
            <summary>
            值变化事件参数
            </summary>
        </member>
        <member name="M:Dt.Base.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Base.ValueChangedEventArgs`1.NewValue">
            <summary>
            获取设置新值
            </summary>
        </member>
        <member name="P:Dt.Base.ValueChangedEventArgs`1.OldValue">
            <summary>
            获取设置旧值
            </summary>
        </member>
        <member name="T:Dt.Base.ValueFormat">
            <summary>
            值的显示方式
            </summary>
        </member>
        <member name="F:Dt.Base.ValueFormat.Numeric">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.ValueFormat.Currency">
            <summary>
            货币标识
            </summary>
        </member>
        <member name="F:Dt.Base.ValueFormat.Percentage">
            <summary>
            百分数
            </summary>
        </member>
        <member name="T:Dt.Base.CPassword">
            <summary>
            密码格
            </summary>
        </member>
        <member name="F:Dt.Base.CPassword.HolderProperty">
            <summary>
            占位符
            </summary>
        </member>
        <member name="F:Dt.Base.CPassword.MaxLengthProperty">
            <summary>
            最大字符数
            </summary>
        </member>
        <member name="P:Dt.Base.CPassword.Holder">
            <summary>
            获取设置占位符
            </summary>
        </member>
        <member name="P:Dt.Base.CPassword.MaxLength">
            <summary>
            获取设置最大字符数
            </summary>
        </member>
        <member name="T:Dt.Base.CText">
            <summary>
            普通文本格
            </summary>
        </member>
        <member name="F:Dt.Base.CText.AcceptsReturnProperty">
            <summary>
            是否允许多行显示
            </summary>
        </member>
        <member name="F:Dt.Base.CText.MaxLengthProperty">
            <summary>
            可在文本框中键入或粘贴的最大字符数
            </summary>
        </member>
        <member name="F:Dt.Base.CText.UpdateTimelyProperty">
            <summary>
            是否实时更新Cell值
            </summary>
        </member>
        <member name="P:Dt.Base.CText.AcceptsReturn">
            <summary>
            获取设置是否允许多行显示，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.CText.MaxLength">
            <summary>
            获取设置可在文本框中键入或粘贴的最大字符数，默认0无限制
            </summary>
        </member>
        <member name="P:Dt.Base.CText.UpdateTimely">
            <summary>
            获取设置是否实时更新值，默认true实时更新
            </summary>
        </member>
        <member name="M:Dt.Base.CText.OnUpdateSource(System.Object,Windows.UI.Xaml.Controls.TextChangedEventArgs)">
            <summary>
            确保TextBox的Text实时更新到数据源
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Base.CTip">
            <summary>
            只读信息格，始终只读
            </summary>
        </member>
        <member name="P:Dt.Base.CTip.Format">
            <summary>
            获取设置格式串，默认 yyyy-MM-dd，完整如：yyyy-MM-dd HH:mm:ss
            </summary>
        </member>
        <member name="T:Dt.Base.TipValConverter">
            <summary>
            源CTip.Data，目标TextBlock.Text
            </summary>
        </member>
        <member name="T:Dt.Base.CTree">
            <summary>
            树形选择格
            </summary>
        </member>
        <member name="E:Dt.Base.CTree.LoadData">
            <summary>
            外部自定义数据源事件，支持异步
            </summary>
        </member>
        <member name="E:Dt.Base.CTree.AfterSelect">
            <summary>
            选择后事件，Selected与uno中重名，xaml中附加事件报错！
            </summary>
        </member>
        <member name="P:Dt.Base.CTree.Data">
            <summary>
            获取设置数据源对象，Table已实现ITreeData
            </summary>
        </member>
        <member name="P:Dt.Base.CTree.View">
            <summary>
            获取设置节点模板或模板选择器
            </summary>
        </member>
        <member name="P:Dt.Base.CTree.CellEx">
            <summary>
            获取设置外部自定义单元格的类型，方法名和Dot的ID相同，SetStyle方法控制行样式
            </summary>
        </member>
        <member name="P:Dt.Base.CTree.SelectionMode">
            <summary>
            获取设置选择模式，默认Single，只第一次设置有效！
            </summary>
        </member>
        <member name="P:Dt.Base.CTree.FixedRoot">
            <summary>
            获取设置固定根节点，切换数据源时不变
            </summary>
        </member>
        <member name="P:Dt.Base.CTree.RefreshData">
            <summary>
            获取设置是否动态加载树数据源，默认false
            true表示每次显示对话框时都加载数据源，false表示只第一次加载
            </summary>
        </member>
        <member name="P:Dt.Base.CTree.SrcID">
            <summary>
            获取设置源属性列表，用'#'隔开
            </summary>
        </member>
        <member name="P:Dt.Base.CTree.TgtID">
            <summary>
            获取设置目标属性列表，用'#'隔开
            </summary>
        </member>
        <member name="P:Dt.Base.CTree.Text">
            <summary>
            获取设置当前值
            </summary>
        </member>
        <member name="P:Dt.Base.CTree.Tv">
            <summary>
            获取Tv对象
            </summary>
        </member>
        <member name="M:Dt.Base.CTree.OnLoadData">
            <summary>
            触发外部自定义数据源事件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.CTree.OnSelected(System.Object)">
            <summary>
            触发选择后事件
            </summary>
            <param name="p_selectedItem"></param>
        </member>
        <member name="T:Dt.Base.IFreeCell">
            <summary>
            自定义格内容接口
            </summary>
        </member>
        <member name="P:Dt.Base.IFreeCell.Owner">
            <summary>
            获取设置所属格
            </summary>
        </member>
        <member name="M:Dt.Base.IFreeCell.SetValBinding(Windows.UI.Xaml.Data.Binding)">
            <summary>
            数据源绑定编辑器
            </summary>
            <param name="p_bind"></param>
        </member>
        <member name="M:Dt.Base.IFreeCell.SetFocus">
            <summary>
            设置编辑焦点
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Fv">
            <summary>
            表单控件
            </summary>
        </member>
        <member name="E:Dt.Base.Fv.DataChanged">
            <summary>
            切换数据源事件
            </summary>
        </member>
        <member name="E:Dt.Base.Fv.Changed">
            <summary>
            数据源的列值/属性值修改后事件
            </summary>
        </member>
        <member name="E:Dt.Base.Fv.Dirty">
            <summary>
            数据源修改状态变化事件
            </summary>
        </member>
        <member name="E:Dt.Base.Fv.CellClick">
            <summary>
            单元格点击事件
            </summary>
        </member>
        <member name="P:Dt.Base.Fv.Data">
            <summary>
            获取设置数据源，Row或普通对象
            </summary>
        </member>
        <member name="P:Dt.Base.Fv.Row">
            <summary>
            获取Row数据源
            </summary>
        </member>
        <member name="P:Dt.Base.Fv.IsReadOnly">
            <summary>
            获取设置表单是否只读
            </summary>
        </member>
        <member name="P:Dt.Base.Fv.IsDirty">
            <summary>
            获取表单数据是否已修改
            </summary>
        </member>
        <member name="P:Dt.Base.Fv.AutoCreateCell">
            <summary>
            获取设置是否根据数据源自动生成格，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.Fv.MaxColCount">
            <summary>
            获取设置布局时的最大列数，默认最多4列
            </summary>
        </member>
        <member name="P:Dt.Base.Fv.Items">
            <summary>
            获取单元格集合
            </summary>
        </member>
        <member name="P:Dt.Base.Fv.Item(System.String)">
            <summary>
            获取具有指定id的单元格
            </summary>
            <param name="p_id"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.Fv.Item(System.Int32)">
            <summary>
            获取指定索引的单元格
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.Fv.IDCells">
            <summary>
            获取所有含ID的格
            </summary>
        </member>
        <member name="P:Dt.Base.Fv.CmdUndo">
            <summary>
            获取撤消命令
            </summary>
        </member>
        <member name="P:Dt.Base.Fv.DataView">
            <summary>
            普通数据源对象的视图包装对象
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.Hide(System.String[])">
            <summary>
            隐藏名称列表中的格
            </summary>
            <param name="p_names"></param>
        </member>
        <member name="M:Dt.Base.Fv.HideExcept(System.String[])">
            <summary>
            除显示名称列表中的格外，其它都隐藏，列表空时隐藏所有
            </summary>
            <param name="p_names">无值时隐藏所有</param>
        </member>
        <member name="M:Dt.Base.Fv.Show(System.String[])">
            <summary>
            显示名称列表中的格
            </summary>
            <param name="p_names"></param>
        </member>
        <member name="M:Dt.Base.Fv.ShowExcept(System.String[])">
            <summary>
            除隐藏名称列表中的格外，其它都显示，列表空时显示所有
            </summary>
            <param name="p_names">无值时显示所有</param>
        </member>
        <member name="M:Dt.Base.Fv.Enable(System.String[])">
            <summary>
            设置名称列表中的格为可用
            </summary>
            <param name="p_names"></param>
        </member>
        <member name="M:Dt.Base.Fv.EnableExcept(System.String[])">
            <summary>
            除名称列表中的格外，其它都可用，列表空时所有可用
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.Disable(System.String[])">
            <summary>
            设置名称列表中的格为不可用
            </summary>
            <param name="p_names"></param>
        </member>
        <member name="M:Dt.Base.Fv.DisableExcept(System.String[])">
            <summary>
            除名称列表中的格外，其它都不可用，列表空时所有不可用
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.ExistNull(System.String[])">
            <summary>
            名称列表中的格不允许为空，空时给出警告并返回true
            </summary>
            <param name="p_names"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Fv.AcceptChanges">
            <summary>
            提交自上次调用以来对该行进行的所有更改
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.RejectChanges">
            <summary>
            回滚自该表加载以来或上次调用 AcceptChanges 以来对该行进行的所有更改
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.GetCookie(System.String)">
            <summary>
            获取单元格cookie值，FvCell.AutoCookie为true时有效
            </summary>
            <param name="p_cellID"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Fv.CreateCell(System.Type,System.String)">
            <summary>
            根据类型生成格
            </summary>
            <param name="p_type"></param>
            <param name="p_id"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Fv.GotoFirstCell">
            <summary>
            自动跳入第一个可接收焦点的列
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.GotoLastCell">
            <summary>
            最后一个非只读单元格获得焦点
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.GotoCell(System.String)">
            <summary>
            跳到指定单元格
            </summary>
            <param name="p_cellName">要跳到的格名称</param>
            <returns>true 跳成功</returns>
        </member>
        <member name="M:Dt.Base.Fv.GotoNextCell(Dt.Base.FvCell)">
            <summary>
            移向下一编辑器
            </summary>
            <param name="p_cell">当前格</param>
        </member>
        <member name="M:Dt.Base.Fv.GotoPreviousCell(Dt.Base.FvCell)">
            <summary>
            移向上一编辑器
            </summary>
            <param name="p_cell">当前格</param>
        </member>
        <member name="M:Dt.Base.Fv.ScrollTop">
            <summary>
            滚动到最顶端
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.ScrollBottom">
            <summary>
            滚动到最底端
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.ScrollInto(System.Int32)">
            <summary>
            将指定格滚动到可视区域
            </summary>
            <param name="p_index">格索引</param>
        </member>
        <member name="M:Dt.Base.Fv.ScrollInto(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            将指定单元格滚动到可视范围
            </summary>
            <param name="p_elem"></param>
        </member>
        <member name="M:Dt.Base.Fv.OnDataChanged">
            <summary>
            切换数据源，Row或普通对象
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.OnFvDataChanged">
            <summary>
            触发数据源切换事件
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.OnValueChanged(Dt.Core.ICell)">
            <summary>
            触发单元格数据修改事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Fv.OnDirty">
            <summary>
            触发数据源修改状态变化事件
            </summary>
        </member>
        <member name="M:Dt.Base.Fv.OnCellClick(Dt.Base.FvCell)">
            <summary>
            触发内部单元格点击事件
            </summary>
            <param name="p_cell"></param>
        </member>
        <member name="T:Dt.Base.FvCell">
            <summary>
            单元格
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.IDProperty">
            <summary>
            列名(字段名)
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.TitleProperty">
            <summary>
            列标题
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.TitleWidthProperty">
            <summary>
            列名的宽度
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.ShowTitleProperty">
            <summary>
            是否显示标题列
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.ShowStarProperty">
            <summary>
            是否显示红星
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.IsVerticalTitleProperty">
            <summary>
            是否垂直显示标题
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.IsHorStretchProperty">
            <summary>
            单元格是否水平填充
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.RowSpanProperty">
            <summary>
            占用的行数
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.IsReadOnlyProperty">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.AutoCookieProperty">
            <summary>
            是否自动保存单元格最后一次编辑值，默认False
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.PlaceholderProperty">
            <summary>
            占位符文本
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.ReadOnlyBindingProperty">
            <summary>
            最终是否只读，内部绑定用
            </summary>
        </member>
        <member name="F:Dt.Base.FvCell.ValBindingProperty">
            <summary>
            格的值绑定
            </summary>
        </member>
        <member name="E:Dt.Base.FvCell.Changed">
            <summary>
            单元格值修改后事件，参数为新值
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.ID">
            <summary>
            获取设置列名(字段名或属性名)
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.Title">
            <summary>
            获取设置列标题
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.TitleWidth">
            <summary>
            获取设置列名的宽度
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.ShowTitle">
            <summary>
            获取设置是否显示标题列
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.ShowStar">
            <summary>
            获取设置是否显示红星
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.IsVerticalTitle">
            <summary>
            获取设置是否垂直显示标题
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.IsHorStretch">
            <summary>
            获取设置单元格是否水平填充，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.RowSpan">
            <summary>
            获取设置占用的行数，默认1行，-1时自动行高
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.IsReadOnly">
            <summary>
            获取设置列是否只读，最终是否只读由ReadOnlyBinding确定！
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.AutoCookie">
            <summary>
            获取设置是否自动保存单元格最后一次编辑值，默认False
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.Placeholder">
            <summary>
            获取设置占位符文本
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.ReadOnlyBinding">
            <summary>
            获取设置当前列最终是否只读，综合Fv.IsReadOnly、FvCell.IsReadOnly，内部绑定用
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.ValBinding">
            <summary>
            获取设置格的值绑定，内部绑定用，始终非null，ConverterParameter保存了绑定的数据源属性类型
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.Owner">
            <summary>
            获取所属的Fv
            </summary>
        </member>
        <member name="P:Dt.Base.FvCell.Dt#Base#IFvCell#Bounds">
            <summary>
            在面板上的布局区域
            </summary>
        </member>
        <member name="M:Dt.Base.FvCell.RejectChanges">
            <summary>
            回滚数据
            </summary>
        </member>
        <member name="M:Dt.Base.FvCell.Warn(System.String)">
            <summary>
            显示警告提示信息
            </summary>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Base.FvCell.Msg(System.String)">
            <summary>
            显示提示消息
            </summary>
            <param name="p_msg"></param>
        </member>
        <member name="M:Dt.Base.FvCell.ApplyIsReadOnly">
            <summary>
            综合Fv.IsReadOnly、FvCell.IsReadOnly，确定是否只读
            </summary>
        </member>
        <member name="M:Dt.Base.FvCell.ReceiveFocus">
            <summary>
            内部编辑器获得焦点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FvCell.GetVal">
            <summary>
            获取格的当前值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FvCell.SetVal(System.Object)">
            <summary>
            设置格的值
            </summary>
            <param name="p_val"></param>
        </member>
        <member name="M:Dt.Base.FvCell.OnDataChanged(System.Object)">
            <summary>
            切换数据源，有ID
            </summary>
            <param name="p_data"></param>
        </member>
        <member name="M:Dt.Base.FvCell.OnDataPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            附加值改变时的处理方法，提供外部自定义显示
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.FvCell.ParseBinding(System.Object)">
            <summary>
            解析目标路径
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FvCell.OnValChanged">
            <summary>
            触发列值修改后事件
            </summary>
        </member>
        <member name="M:Dt.Base.FvCell.OnApplyCellTemplate">
            <summary>
            应用单元格模板
            </summary>
        </member>
        <member name="M:Dt.Base.FvCell.SetValBinding">
            <summary>
            数据源绑定编辑器
            </summary>
        </member>
        <member name="T:Dt.Base.FvItems">
            <summary>
            Fv单元格集合，列表 + 字典 + 集合更改事件
            </summary>
        </member>
        <member name="E:Dt.Base.FvItems.ItemsChanged">
            <summary>
            集合更改事件
            </summary>
        </member>
        <member name="M:Dt.Base.FvItems.Defer">
            <summary>
            延迟触发ItemsChanged事件
            using (_items.Defer())
            {
                _items.Clear();
                foreach (var col in p_cols)
                {
                    _items.Add(col);
                }
            }
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.FvItems.Item(System.Int32)">
            <summary>
            返回指定索引的单元格
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.FvItems.Item(System.String)">
            <summary>
            获取具有指定id的格
            </summary>
            <param name="p_id"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.FvItems.Cells">
            <summary>
            获取所有FvCell字典
            </summary>
        </member>
        <member name="P:Dt.Base.FvItems.Count">
            <summary>
            集合元素总数
            </summary>
        </member>
        <member name="P:Dt.Base.FvItems.IsReadOnly">
            <summary>
            集合是否为只读
            </summary>
        </member>
        <member name="M:Dt.Base.FvItems.Add(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            添加新项
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.FvItems.Clear">
            <summary>
            清空集合
            </summary>
        </member>
        <member name="M:Dt.Base.FvItems.Contains(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            是否包含指定项
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FvItems.CopyTo(Windows.UI.Xaml.FrameworkElement[],System.Int32)">
            <summary>
            将集合复制到新列表
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Dt.Base.FvItems.GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FvItems.IndexOf(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            获取项的索引
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FvItems.Insert(System.Int32,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            在指定位置插入新项
            </summary>
            <param name="index"></param>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.FvItems.Remove(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            移除指定项
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.FvItems.RemoveAt(System.Int32)">
            <summary>
            移除指定索引处的项
            </summary>
            <param name="p_index"></param>
        </member>
        <member name="M:Dt.Base.FvItems.RaiseVectorChanged(Windows.Foundation.Collections.CollectionChange,System.Int32)">
            <summary>
            触发集合更改事件
            </summary>
            <param name="change"></param>
            <param name="index"></param>
        </member>
        <member name="P:Dt.Base.FvItems.Updating">
            <summary>
            通过Defer()实现延时更新
            </summary>
        </member>
        <member name="T:Dt.Base.IFvCell">
            <summary>
            单元格接口
            </summary>
        </member>
        <member name="P:Dt.Base.IFvCell.IsHorStretch">
            <summary>
            是否水平填充
            </summary>
        </member>
        <member name="P:Dt.Base.IFvCell.RowSpan">
            <summary>
            占用的行数
            </summary>
        </member>
        <member name="P:Dt.Base.IFvCell.Bounds">
            <summary>
            在面板上的布局区域
            </summary>
        </member>
        <member name="T:Dt.Base.SearchFv">
            <summary>
            查询面板，暂时只支持用在Tab内！
            面板内的所有固定按钮、搜索框、搜索历史统一触发Search事件
            固定按钮Click事件传递格式为 "#按钮名称"，#前缀用于区别普通搜索
            搜索历史管理
            </summary>
        </member>
        <member name="E:Dt.Base.SearchFv.Search">
            <summary>
            查询事件
            </summary>
        </member>
        <member name="P:Dt.Base.SearchFv.Placeholder">
            <summary>
            获取设置查询框提示内容
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.CellUIConverter">
            <summary>
            单元格UI转换器
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.HeaderBackgroundConverter">
            <summary>
            IsSelected -> 背景
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.IsSelectedIconConverter">
            <summary>
            IsSelected -> 字符图标
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.SelectedBackgroundConverter">
            <summary>
            IsSelected -> 背景
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.LvDataView">
            <summary>
            数据视图
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvDataView.Refresh">
            <summary>
            刷新视图列表
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvDataView.Unload">
            <summary>
            卸载数据
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvDataView.GetTransformedList">
            <summary>
            获得过滤排序后的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvDataView.BuildGroups(System.Collections.IList)">
            <summary>
            构造分组
            </summary>
            <param name="p_rows"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvDataView.RowComparer.Compare(System.Object,System.Object)">
            <summary>
            IComparer方法
            </summary>
            <param name="p_rowX"></param>
            <param name="p_rowY"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.ListView.LvPanel">
            <summary>
            Lv布局面板基类
            </summary>
        </member>
        <member name="F:Dt.Base.ListView.LvPanel._initVirRow">
            <summary>
            是否已生成虚拟行
            </summary>
        </member>
        <member name="F:Dt.Base.ListView.LvPanel._dataRows">
            <summary>
            虚拟行时：能填充可视区域的UI行列表(可看作一页)，真实行时：与数据行一一对应的UI行列表，
            </summary>
        </member>
        <member name="F:Dt.Base.ListView.LvPanel._pageHeight">
            <summary>
            采用虚拟行时使用，_dataRows的所有行总高度，看作页面高度
            </summary>
        </member>
        <member name="F:Dt.Base.ListView.LvPanel._rowHeight">
            <summary>
            虚拟行的行高
            </summary>
        </member>
        <member name="F:Dt.Base.ListView.LvPanel._maxSize">
            <summary>
            面板最大尺寸，宽高始终不为无穷大！
            </summary>
        </member>
        <member name="F:Dt.Base.ListView.LvPanel._deltaX">
            <summary>
            以滚动栏为参照物，面板与滚动栏的水平距离，面板在右侧时为正数
            </summary>
        </member>
        <member name="F:Dt.Base.ListView.LvPanel._deltaY">
            <summary>
            以滚动栏为参照物，面板与滚动栏的垂直距离，面板在下方时为正数
            </summary>
        </member>
        <member name="F:Dt.Base.ListView.LvPanel._isScrolling">
            <summary>
            当前是否正在滚动中
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.SetMaxSize(Windows.Foundation.Size)">
            <summary>
            设置Lv面板的最大尺寸，宽高始终不为无穷大！
            在Lv.MeasureOverride时获取，已处理父元素为ScrollViewer StackPanel时造成的无穷大情况！
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.Reload">
            <summary>
            View CellEx ItemHeight ShowGroupHeader ShowItemBorder GroupTemplate SelectionMode 或上下文菜单 变化时重新加载
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.OnRowsChanged(System.Boolean)">
            <summary>
            切换数据源时，调整所有分组行和数据行
            </summary>
            <param name="p_existGroup">是否有分组行</param>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.OnInsertRows(System.Int32,System.Int32)">
            <summary>
            批量插入数据行，无排序过滤分组时！
            </summary>
            <param name="p_index">开始插入位置</param>
            <param name="p_count">共插入行数</param>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.OnRemoveRows(System.Collections.IList)">
            <summary>
            批量删除数据行，无排序过滤分组！
            </summary>
            <param name="p_items">所有删除项的索引列表，索引已按从小到大排序</param>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.Unload">
            <summary>
            从可视树卸载，不可重复使用！ViewMode切换时卸载旧面板，其它无需卸载
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.GetLvRow(System.Int32)">
            <summary>
            获取行UI，不支持虚拟行的情况
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.ScrollInto(System.Int32)">
            <summary>
            滚动到指定的数据行
            </summary>
            <param name="p_index">-1 表示最后</param>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.GetRowVerPos(System.Int32)">
            <summary>
            获取数据行的垂直位置，只适用于列表和表格模式
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.ReceiveFocus">
            <summary>
            设置为输入焦点
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            面板水平Stretch，因需要屏蔽鼠标滚轮引起的抖动，实际内容宽度_finalWidth
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.LoadVirRows">
            <summary>
            加载虚拟模式的所有行：虚拟数据行、分组行、列头
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.LoaRealRows">
            <summary>
            加载真实模式的所有行：数据行、分组行、列头
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.ClearAllRows">
            <summary>
            清除所有UI行
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.LoadGroupRows">
            <summary>
            生成分组行及其他
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.CreateVirRows">
            <summary>
            生成虚拟行
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.LoadColHeader">
            <summary>
            加载表格的列头
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.ClearColHeader">
            <summary>
            清除表格的列头
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.DefineCreateRowFunc">
            <summary>
            确定创建界面行的方法，高效，省去循环中的冗余判断
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.CreateTableRow(Dt.Base.LvItem)">
            <summary>
            表格行
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.CreateListFormRow(Dt.Base.LvItem)">
            <summary>
            表单列表的行
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.CreateTileFormItem(Dt.Base.LvItem)">
            <summary>
            磁贴的项
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.CreateListRowByTemplate(Dt.Base.LvItem)">
            <summary>
            由模板生成行内容
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.CreateTileItemByTemplate(Dt.Base.LvItem)">
            <summary>
            由模板生成磁贴项内容
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.CreateListRowBySelector(Dt.Base.LvItem)">
            <summary>
            由模板选择器生成行内容
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.CreateTileItemBySelector(Dt.Base.LvItem)">
            <summary>
            由模板选择器生成磁贴项内容
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.CreateListRowByRowView(Dt.Base.LvItem)">
            <summary>
            动态创建行内容
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.CreateTileItemByRowView(Dt.Base.LvItem)">
            <summary>
            动态创建磁贴项内容
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.OnScrollViewChanged(System.Object,Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs)">
            <summary>
            表格：始终刷新布局，已重写方法
            列表：虚拟行刷新布局，真实行无分组时不刷新，有分组时只在开始、结束时刷新
            磁贴：同列表
            本方法适用于列表和磁贴
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.OnSizeChanged(System.Object,Windows.UI.Xaml.SizeChangedEventArgs)">
            <summary>
            面板大小变化时处理 自动滚到底部、分页插入
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.ListView.LvPanel.OnPointerWheelChanged(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            屏蔽鼠标滚轮引起的抖动
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Base.ListView.GroupHeader">
            <summary>
            分组导航头
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.GroupHeaderCell">
            <summary>
            分组导航格
            </summary>
        </member>
        <member name="P:Dt.Base.ListView.GroupHeaderCell.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Dt.Base.ListView.GroupHeaderCell.IsSelected">
            <summary>
            获取当前是否为选择状态
            </summary>
        </member>
        <member name="P:Dt.Base.ListView.GroupHeaderCell.Left">
            <summary>
            水平位置
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.GroupRow">
            <summary>
            分组行
            </summary>
        </member>
        <member name="P:Dt.Base.ListView.GroupRow.Content">
            <summary>
            获取设置分组行内容
            </summary>
        </member>
        <member name="P:Dt.Base.ListView.GroupRow.IsFirst">
            <summary>
            获取设置是否为第一行
            </summary>
        </member>
        <member name="P:Dt.Base.ListView.GroupRow.Top">
            <summary>
            在面板上的垂直位置
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.ListFormRow">
            <summary>
            表单列表的行
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.ListFormRow.LoadCols">
            <summary>
            加载表单列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.ListView.ListPanel">
            <summary>
            列表面板
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.ListRow">
            <summary>
            普通列表的行
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.LvRow">
            <summary>
            Lv的行基类
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvRow.SetViewRow(Dt.Base.LvItem,System.Boolean)">
            <summary>
            设置对应的视图行
            </summary>
            <param name="p_row"></param>
            <param name="p_isAsync">是否异步设置DataContext</param>
        </member>
        <member name="M:Dt.Base.ListView.LvRow.SetContentBinding(Dt.Base.Col,Windows.UI.Xaml.Controls.ContentPresenter)">
            <summary>
            绑定单元格，数据源为ViewItem
            </summary>
            <param name="p_col"></param>
            <param name="p_pre"></param>
        </member>
        <member name="M:Dt.Base.ListView.LvRow.AttachEvent">
            <summary>
            附加交互事件
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.LvRow.AttachContextMenu(Dt.Base.Menu)">
            <summary>
            附加上下文菜单触发事件
            </summary>
            <param name="p_menu"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ListView.LvRow.OpenContextMenu(Windows.Foundation.Point,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            显示上下文菜单
            </summary>
            <param name="p_pos"></param>
            <param name="p_tgt"></param>
        </member>
        <member name="M:Dt.Base.ListView.LvRow.SetDataContextAsync">
            <summary>
            滚动时异步设置DataContext，提高流畅性
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.ColHeader">
            <summary>
            顶部的列头面板
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.ColHeaderCell">
            <summary>
            列头单元格
            </summary>
        </member>
        <member name="P:Dt.Base.ListView.ColHeaderCell.Title">
            <summary>
            获取设置标题
            </summary>
        </member>
        <member name="P:Dt.Base.ListView.ColHeaderCell.SortState">
            <summary>
            获取设置排序标志
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.TablePanel">
            <summary>
            表格面板
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.TableRow">
            <summary>
            表格视图的行
            </summary>
        </member>
        <member name="T:Dt.Base.ListView.TileFormRow">
            <summary>
            表单磁贴的行
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.TileFormRow.LoadCols">
            <summary>
            加载表单列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.ListView.TilePanel">
            <summary>
            磁贴面板
            </summary>
        </member>
        <member name="M:Dt.Base.ListView.TilePanel.GetRowVerPos(System.Int32)">
            <summary>
            获取数据行的垂直位置
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.ListView.TileRow">
            <summary>
            磁贴的行
            </summary>
        </member>
        <member name="T:Dt.Base.IRowView">
            <summary>
            动态创建行视图接口
            </summary>
        </member>
        <member name="M:Dt.Base.IRowView.Create(Dt.Base.LvItem)">
            <summary>
            动态创建行视图内容
            </summary>
            <param name="p_item">行</param>
            <returns>返回行UI</returns>
        </member>
        <member name="T:Dt.Base.IViewItemHost">
            <summary>
            ViewItem的宿主控件接口
            </summary>
        </member>
        <member name="M:Dt.Base.IViewItemHost.SetItemStyle(Dt.Base.ViewItem)">
            <summary>
            设置行/项目样式，前景、背景、字体样式大小粗细
            </summary>
            <param name="p_item">视图项</param>
        </member>
        <member name="M:Dt.Base.IViewItemHost.GetViewExMethod(System.String)">
            <summary>
            获取外部定义的视图扩展方法
            </summary>
            <param name="p_colName">列名</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.LvItem">
            <summary>
            视图行，Row/object 和 ListRow/GridRow 的中间对象
            </summary>
        </member>
        <member name="P:Dt.Base.LvItem.IsSelected">
            <summary>
            获取当前行是否为选择状态
            </summary>
        </member>
        <member name="P:Dt.Base.LvItem.Index">
            <summary>
            获取行索引
            </summary>
        </member>
        <member name="P:Dt.Base.LvItem.FullIndex">
            <summary>
            获取完整行索引
            </summary>
        </member>
        <member name="P:Dt.Base.LvItem.Host">
            <summary>
            宿主
            </summary>
        </member>
        <member name="M:Dt.Base.LvItem.OnClick">
            <summary>
            单击行
            </summary>
        </member>
        <member name="T:Dt.Base.PageData">
            <summary>
            分页数据源
            </summary>
        </member>
        <member name="F:Dt.Base.PageData.SqlProperty">
            <summary>
            sql字典键值
            </summary>
        </member>
        <member name="F:Dt.Base.PageData.SqlStrProperty">
            <summary>
            sql查询语句，语句中不需包含分页功能
            </summary>
        </member>
        <member name="F:Dt.Base.PageData.SqlParamsProperty">
            <summary>
            sql查询参数值字典
            </summary>
        </member>
        <member name="F:Dt.Base.PageData.NextPageProperty">
            <summary>
            进入下一页面的回调方法
            </summary>
        </member>
        <member name="F:Dt.Base.PageData.PageSizeProperty">
            <summary>
            页面行数
            </summary>
        </member>
        <member name="F:Dt.Base.PageData.InsertTopProperty">
            <summary>
            是否将新页面数据插入到头部
            </summary>
        </member>
        <member name="P:Dt.Base.PageData.Sql">
            <summary>
            获取设置sql字典键值，语句中不需包含分页功能
            </summary>
        </member>
        <member name="P:Dt.Base.PageData.SqlStr">
            <summary>
            获取设置sql查询语句，语句中不需包含分页功能
            </summary>
        </member>
        <member name="P:Dt.Base.PageData.SqlParams">
            <summary>
            获取设置sql查询参数值字典
            </summary>
        </member>
        <member name="P:Dt.Base.PageData.NextPage">
            <summary>
            获取设置进入下一页面的回调方法，通过方法内调用LoadPageData加载下页数据。
            未采用返回下页数据的方式，因获取数据可能异步且需要转INotifyList写法麻烦！
            </summary>
        </member>
        <member name="P:Dt.Base.PageData.PageSize">
            <summary>
            获取设置页面行数
            </summary>
        </member>
        <member name="P:Dt.Base.PageData.HasMorePages">
            <summary>
            获取设置是否还有未加载的页面
            </summary>
        </member>
        <member name="P:Dt.Base.PageData.InsertTop">
            <summary>
            获取设置是否将新页面数据插入到头部
            </summary>
        </member>
        <member name="P:Dt.Base.PageData.PageNo">
            <summary>
            获取当前页序号
            </summary>
        </member>
        <member name="P:Dt.Base.PageData.State">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="M:Dt.Base.PageData.LoadPageData(Dt.Core.INotifyList)">
            <summary>
            加载当前页面数据
            </summary>
            <param name="p_pageData">当前页面数据</param>
        </member>
        <member name="M:Dt.Base.PageData.GotoFirstPage">
            <summary>
            加载首页
            </summary>
        </member>
        <member name="M:Dt.Base.PageData.GotoNextPage">
            <summary>
            进入下一页
            </summary>
        </member>
        <member name="M:Dt.Base.PageData.GotoPage(System.Int32)">
            <summary>
            加载指定页数据
            </summary>
            <param name="p_pageNo"></param>
        </member>
        <member name="F:Dt.Base.PageDataState.Normal">
            <summary>
            未加载数据
            </summary>
        </member>
        <member name="F:Dt.Base.PageDataState.LoadingFirstPage">
            <summary>
            正在加载首页数据
            </summary>
        </member>
        <member name="F:Dt.Base.PageDataState.Loading">
            <summary>
            正在加载普通页数据
            </summary>
        </member>
        <member name="T:Dt.Base.SortDescription">
            <summary>
            排序描述类
            </summary>
        </member>
        <member name="P:Dt.Base.SortDescription.ID">
            <summary>
            排序列名
            </summary>
        </member>
        <member name="P:Dt.Base.SortDescription.Direction">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="M:Dt.Base.GroupDataList.GetKeyForItem(Dt.Core.GroupData{System.Object})">
            <summary>
            分组值作为键值
            </summary>
            <param name="p_item">当前数据项</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.ViewItem">
            <summary>
            视图项基类，是数据和UI的中间对象
            继承DependencyObject为节省资源，实现INotifyPropertyChanged作为DataContext能更新
            </summary>
        </member>
        <member name="P:Dt.Base.ViewItem.Data">
            <summary>
            获取视图项数据
            </summary>
        </member>
        <member name="P:Dt.Base.ViewItem.Row">
            <summary>
            获取Row数据源
            </summary>
        </member>
        <member name="P:Dt.Base.ViewItem.Foreground">
            <summary>
            获取设置行前景画刷
            </summary>
        </member>
        <member name="P:Dt.Base.ViewItem.Background">
            <summary>
            获取设置行背景画刷
            </summary>
        </member>
        <member name="P:Dt.Base.ViewItem.FontWeight">
            <summary>
            获取设置行字体粗细
            </summary>
        </member>
        <member name="P:Dt.Base.ViewItem.FontStyle">
            <summary>
            获取设置行文本样式
            </summary>
        </member>
        <member name="P:Dt.Base.ViewItem.FontSize">
            <summary>
            获取设置行文本大小
            </summary>
        </member>
        <member name="P:Dt.Base.ViewItem.Item(System.String)">
            <summary>
            获取单元格值，外部绑定用
            </summary>
            <param name="p_colName">列名</param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.ViewItem.ValueChanged">
            <summary>
            值变化时的回调
            </summary>
        </member>
        <member name="P:Dt.Base.ViewItem.Host">
            <summary>
            宿主
            </summary>
        </member>
        <member name="M:Dt.Base.ViewItem.GetCellUI(Dt.Base.ICellUI)">
            <summary>
            获取单元格界面元素，提供给单元格容器ContentPresenter或Dot绑定用
            </summary>
            <param name="p_cell"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ViewItem.OnValueChanged">
            <summary>
            值变化
            </summary>
        </member>
        <member name="M:Dt.Base.ViewItem.CreateCellUI(Dt.Core.Cell,Dt.Base.ICellUI)">
            <summary>
            根据Cell创建UI
            </summary>
            <param name="p_dc"></param>
            <param name="p_cellUI"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ViewItem.CreatePropertyUI(System.Reflection.PropertyInfo,System.Object,Dt.Base.ICellUI)">
            <summary>
            根据PropertyInfo创建UI
            </summary>
            <param name="p_pi"></param>
            <param name="p_val"></param>
            <param name="p_cellUI"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ViewItem.CreateObjectUI(System.Object)">
            <summary>
            # 时直接输出对象
            </summary>
            <param name="p_data"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ViewItem.OnIsTextTrimmedChanged(Windows.UI.Xaml.Controls.TextBlock,Windows.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs)">
            <summary>
            提示被截断的长文本
            </summary>
            <param name="p_tb"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.ViewItem.OnPropertyChanged(System.String)">
            <summary>
            触发属性变化事件
            </summary>
            <param name="propertyName">通知更改时的属性名称</param>
        </member>
        <member name="T:Dt.Base.Lv">
            <summary>
            列表控件
            </summary>
        </member>
        <member name="E:Dt.Base.Lv.ItemClick">
            <summary>
            单击行/项目事件
            </summary>
        </member>
        <member name="E:Dt.Base.Lv.ItemDoubleClick">
            <summary>
            双击行/项目事件
            </summary>
        </member>
        <member name="E:Dt.Base.Lv.SelectionChanged">
            <summary>
            选择变化事件
            </summary>
        </member>
        <member name="E:Dt.Base.Lv.DataChanged">
            <summary>
            切换数据源事件
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.Data">
            <summary>
            获取设置数据源对象，需实现INotifyList接口，Table 和 Nl 为常用类型
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.View">
            <summary>
            获取设置行视图，DataTemplate、DataTemplateSelector、Cols列定义 或 IRowView
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.ViewMode">
            <summary>
            获取设置视图类型：列表、表格、磁贴，默认List
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.CellEx">
            <summary>
            获取设置外部自定义单元格的类型，方法名和Dot或Col的ID相同，SetStyle方法控制行样式
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.PhoneViewMode">
            <summary>
            获取设置Phone模式下的视图类型，null时Win,Phone两模式统一采用ViewMode，默认null
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.SelectionMode">
            <summary>
            获取设置选择模式，默认Single
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.ItemHeight">
            <summary>
            获取设置行/项目高度，0时以第一项高度为准，NaN时自动调整高度(性能差)，默认0
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.ShowGroupHeader">
            <summary>
            获取设置顶部是否显示分组导航，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.ShowItemBorder">
            <summary>
            获取设置是否显示行/项目分割线，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.EnteredBrush">
            <summary>
            获取设置鼠标进入行/项目时的背景色
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.PressedBrush">
            <summary>
            获取设置点击行/项目时的背景色
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.GroupTemplate">
            <summary>
            获取设置分组模板
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.PageData">
            <summary>
            获取设置分页数据源对象
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.Filter">
            <summary>
            获取设置过滤回调
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.GroupName">
            <summary>
            获取设置分组列名
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.SortDesc">
            <summary>
            获取设置排序条件
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.AutoScrollBottom">
            <summary>
            获取设置数据变化时是否自动滚动到最底端，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.AutoFocus">
            <summary>
            获取设置加载后是否自动为输入焦点，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.AutoCreateCol">
            <summary>
            获取设置是否根据数据源自动生成列
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.MinItemWidth">
            <summary>
            获取设置项目的最小宽度，默认160，只磁贴视图有效！
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.HasSelected">
            <summary>
            获取是否有选择行
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.SelectedItems">
            <summary>
            获取当前选择的行列表
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.SelectedItem">
            <summary>
            获取设置当前选定行，设置null时清空选择，多选时为返回最后选择行
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.SelectedIndex">
            <summary>
            获取设置选定行的索引，-1无选定行，设置-1清空选择
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.SelectedCount">
            <summary>
            获取选择的行数
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.SelectedRows">
            <summary>
            获取当前选择的Row列表
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.SelectedRow">
            <summary>
            获取当前选定的Row
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.Table">
            <summary>
            获取Table数据源
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.Rows">
            <summary>
            所有视图行
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.GroupRows">
            <summary>
            所有分组行
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.MapRows">
            <summary>
            包含分组时，按顺序排列的所有分组行和视图行，true 分组行，false视图行
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.IsTableView">
            <summary>
            是否为表格视图
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.IsVir">
            <summary>
            是否采用虚拟行
            </summary>
        </member>
        <member name="P:Dt.Base.Lv.IsInnerScroll">
            <summary>
            滚动栏是否在内部
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.Refresh">
            <summary>
            刷新数据视图，通常在动态过滤时调用
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.ChangeView(System.Object,System.Nullable{Dt.Base.ViewMode},System.Type)">
            <summary>
            切换视图，同时调整多属性时只刷新一次，性能高！
            </summary>
            <param name="p_view">null时不切换</param>
            <param name="p_viewMode">null时不切换</param>
            <param name="p_cellEx">null时不切换</param>
        </member>
        <member name="M:Dt.Base.Lv.SetFocus">
            <summary>
            设置为输入焦点
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.GetRowUI(System.Int32)">
            <summary>
            获取行UI，不支持虚拟行的情况！使用场景少
            </summary>
            <param name="p_index">行索引</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Lv.SelectAll">
            <summary>
            全选
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.ClearSelection">
            <summary>
            清除所有选择行的选择状态
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.Select(System.Collections.IList)">
            <summary>
            增加选择行
            </summary>
            <param name="p_ls"></param>
        </member>
        <member name="M:Dt.Base.Lv.RemoveSelection(System.Collections.IList)">
            <summary>
            取消列表中行的选择状态
            </summary>
            <param name="p_ls"></param>
        </member>
        <member name="M:Dt.Base.Lv.DeleteSelection">
            <summary>
            删除所有选择行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Lv.ScrollTop">
            <summary>
            滚动到最顶端
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.ScrollBottom">
            <summary>
            滚动到最底端
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.ScrollInto(System.Int32)">
            <summary>
            将指定行滚动到可视区域
            </summary>
            <param name="p_index">行索引</param>
        </member>
        <member name="M:Dt.Base.Lv.ScrollInto(System.Object)">
            <summary>
            滚动到指定的数据行
            </summary>
            <param name="p_row"></param>
        </member>
        <member name="M:Dt.Base.Lv.ScrollIntoGroup(Dt.Base.ListView.GroupRow)">
            <summary>
            点击分组导航头链接，滚动到指定的分组
            </summary>
            <param name="p_group"></param>
        </member>
        <member name="M:Dt.Base.Lv.OnLoadTemplate">
            <summary>
            动态构造控件内容，uwp在OnApplyTemplate中处理，uno在Loaded时处理
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.LoadPanel">
            <summary>
            动态加载面板
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.Reload">
            <summary>
            重新加载面板内容
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.LoadRows(System.Collections.IEnumerable)">
            <summary>
            加载数据行
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.LoadGroupRows(System.Collections.IList)">
            <summary>
            加载数据行和分组行
            </summary>
            <param name="p_groups"></param>
        </member>
        <member name="M:Dt.Base.Lv.BatchInsertRows(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            批量插入数据行，无排序过滤分组时直接插入！
            </summary>
            <param name="p_tbl"></param>
            <param name="p_start">开始插入位置</param>
            <param name="p_count">共插入行数</param>
        </member>
        <member name="M:Dt.Base.Lv.BatchRemoveRows(System.Collections.IList)">
            <summary>
            批量删除数据行，无排序过滤分组！
            </summary>
            <param name="p_items">所有删除项的索引列表，索引已按从小到大排序</param>
        </member>
        <member name="M:Dt.Base.Lv.ClearAllRows">
            <summary>
            清空所有行
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.OnScrollViewChanged(System.Object,Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs)">
            <summary>
            滚动到顶部或底部时添加分页数据
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Lv.OnAutoCreateCol(Dt.Core.Table)">
            <summary>
            自动生成列
            </summary>
            <param name="p_tbl"></param>
        </member>
        <member name="M:Dt.Base.Lv.OnSelectedItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            选择行集合变化
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Lv.OnToggleSelected(Dt.Base.LvItem)">
            <summary>
            单选模式点击时切换选择
            </summary>
            <param name="p_vr"></param>
        </member>
        <member name="M:Dt.Base.Lv.Dt#Base#IMenuHost#UpdateContextMenu">
            <summary>
            切换上下文菜单或修改触发事件种类时通知宿主刷新
            </summary>
        </member>
        <member name="M:Dt.Base.Lv.OnItemClick(System.Object,System.Object)">
            <summary>
            触发单击行事件
            </summary>
            <param name="p_data"></param>
            <param name="p_oldData"></param>
        </member>
        <member name="M:Dt.Base.Lv.OnItemDoubleClick(System.Object)">
            <summary>
            触发双击行事件
            </summary>
            <param name="p_data"></param>
        </member>
        <member name="M:Dt.Base.Lv.OnDataChanged">
            <summary>
            触发切换数据源事件
            </summary>
        </member>
        <member name="T:Dt.Base.Dot">
            <summary>
            列表中行模板的占位格
            </summary>
        </member>
        <member name="P:Dt.Base.Dot.ID">
            <summary>
            获取设置列名(字段名)
            </summary>
        </member>
        <member name="P:Dt.Base.Dot.UIType">
            <summary>
            获取设置单元格UI类型
            </summary>
        </member>
        <member name="P:Dt.Base.Dot.Format">
            <summary>
            获取设置格式串，null或空时按默认显示，如：时间格式、小数位格式、枚举类型名称
            </summary>
        </member>
        <member name="T:Dt.Base.ICellUI">
            <summary>
            单元格UI接口
            </summary>
        </member>
        <member name="P:Dt.Base.ICellUI.ID">
            <summary>
            获取设置列名(字段名)
            </summary>
        </member>
        <member name="P:Dt.Base.ICellUI.UIType">
            <summary>
            获取设置单元格UI类型
            </summary>
        </member>
        <member name="P:Dt.Base.ICellUI.Format">
            <summary>
            获取设置格式串，null或空时按默认显示，如：时间格式、小数位格式、枚举类型名称
            </summary>
        </member>
        <member name="T:Dt.Base.SelectionMode">
            <summary>
            定义选择模式的常量
            </summary>
        </member>
        <member name="F:Dt.Base.SelectionMode.None">
            <summary>
            不能选择项
            </summary>
        </member>
        <member name="F:Dt.Base.SelectionMode.Single">
            <summary>
            只能选择单个项
            </summary>
        </member>
        <member name="F:Dt.Base.SelectionMode.Multiple">
            <summary>
            可以选择多个项
            </summary>
        </member>
        <member name="T:Dt.Base.ViewMode">
            <summary>
            视图类型
            </summary>
        </member>
        <member name="F:Dt.Base.ViewMode.List">
            <summary>
            列表视图
            </summary>
        </member>
        <member name="F:Dt.Base.ViewMode.Table">
            <summary>
            表格视图
            </summary>
        </member>
        <member name="F:Dt.Base.ViewMode.Tile">
            <summary>
            磁贴视图
            </summary>
        </member>
        <member name="T:Dt.Base.CellUIType">
            <summary>
            单元格UI类型
            </summary>
        </member>
        <member name="F:Dt.Base.CellUIType.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Dt.Base.CellUIType.Icon">
            <summary>
            显示为图标字符
            </summary>
        </member>
        <member name="F:Dt.Base.CellUIType.CheckBox">
            <summary>
            显示为CheckBox字符
            </summary>
        </member>
        <member name="F:Dt.Base.CellUIType.Image">
            <summary>
            显示为图片
            </summary>
        </member>
        <member name="F:Dt.Base.CellUIType.File">
            <summary>
            显示为文件列表链接
            </summary>
        </member>
        <member name="F:Dt.Base.CellUIType.Enum">
            <summary>
            显示为枚举类型的名称
            </summary>
        </member>
        <member name="T:Dt.Base.ItemClickArgs">
            <summary>
            单击行事件参数
            </summary>
        </member>
        <member name="P:Dt.Base.ItemClickArgs.IsChanged">
            <summary>
            当前点击行是否和上次点击行相同
            </summary>
        </member>
        <member name="P:Dt.Base.ItemClickArgs.Data">
            <summary>
            当前点击行
            </summary>
        </member>
        <member name="P:Dt.Base.ItemClickArgs.OldData">
            <summary>
            上次点击行
            </summary>
        </member>
        <member name="P:Dt.Base.ItemClickArgs.Row">
            <summary>
            当前点击的Row
            </summary>
        </member>
        <member name="T:Dt.Base.Col">
            <summary>
            列定义
            </summary>
        </member>
        <member name="P:Dt.Base.Col.ID">
            <summary>
            获取设置列名(字段名)
            </summary>
        </member>
        <member name="P:Dt.Base.Col.Title">
            <summary>
            获取设置列标题
            </summary>
        </member>
        <member name="P:Dt.Base.Col.Width">
            <summary>
            获取设置列宽，默认100
            </summary>
        </member>
        <member name="P:Dt.Base.Col.RowSpan">
            <summary>
            获取设置占用的行数，默认1行
            </summary>
        </member>
        <member name="P:Dt.Base.Col.AllowSorting">
            <summary>
            获取设置点击列头是否可以排序
            </summary>
        </member>
        <member name="P:Dt.Base.Col.UIType">
            <summary>
            获取设置单元格UI类型
            </summary>
        </member>
        <member name="P:Dt.Base.Col.Format">
            <summary>
            获取设置格式串，null或空时按默认显示，如：时间格式、小数位格式、枚举类型名称
            </summary>
        </member>
        <member name="P:Dt.Base.Col.Foreground">
            <summary>
            获取设置列前景画刷
            </summary>
        </member>
        <member name="P:Dt.Base.Col.Background">
            <summary>
            获取设置列背景画刷
            </summary>
        </member>
        <member name="P:Dt.Base.Col.FontWeight">
            <summary>
            获取设置列字体粗细
            </summary>
        </member>
        <member name="P:Dt.Base.Col.FontStyle">
            <summary>
            获取设置列文本样式
            </summary>
        </member>
        <member name="P:Dt.Base.Col.FontSize">
            <summary>
            获取设置列文本大小
            </summary>
        </member>
        <member name="P:Dt.Base.Col.Left">
            <summary>
            水平位置
            </summary>
        </member>
        <member name="T:Dt.Base.Cols">
            <summary>
            列集合
            </summary>
        </member>
        <member name="E:Dt.Base.Cols.Update">
            <summary>
            列位置失效事件
            </summary>
        </member>
        <member name="P:Dt.Base.Cols.AllowSorting">
            <summary>
            获取设置点击列头是否可以排序
            </summary>
        </member>
        <member name="P:Dt.Base.Cols.HideIndex">
            <summary>
            获取设置是否隐藏行号，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.Cols.TotalWidth">
            <summary>
            列总宽
            </summary>
        </member>
        <member name="M:Dt.Base.Cols.Invalidate">
            <summary>
            列位置失效，触发重新测量布局
            </summary>
        </member>
        <member name="M:Dt.Base.Cols.FixWidth">
            <summary>
            更新水平位置及总宽
            </summary>
        </member>
        <member name="T:Dt.Base.AtRpt">
            <summary>
            数据源包装类
            </summary>
        </member>
        <member name="M:Dt.Base.AtRpt.Show(Dt.Base.RptInfo,System.String,Dt.Base.Icons)">
            <summary>
            打开新窗口显示报表
            </summary>
            <param name="p_info">报表描述信息</param>
            <param name="p_winTitle"></param>
            <param name="p_icon">图标</param>
        </member>
        <member name="M:Dt.Base.AtRpt.Show(System.Collections.Generic.IList{Dt.Base.RptInfo},System.String,Dt.Base.Icons)">
            <summary>
            打开新窗口显示报表组
            </summary>
            <param name="p_infos">报表组描述信息</param>
            <param name="p_winTitle">窗口标题</param>
            <param name="p_icon">图标</param>
        </member>
        <member name="M:Dt.Base.AtRpt.ShowDesign(Dt.Base.RptDesignInfo,System.String,Dt.Base.Icons)">
            <summary>
            打开报表设计窗口
            </summary>
            <param name="p_info">报表设计描述信息</param>
            <param name="p_winTitle">窗口标题，null时使用报表名称</param>
            <param name="p_icon">窗口图标</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtRpt.DeserializeTemplate(System.String)">
            <summary>
            反序列化报表模板
            </summary>
            <param name="p_define"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtRpt.SerializeTemplate(Dt.Base.Report.RptRoot)">
            <summary>
            序列化报表模板
            </summary>
            <param name="p_root"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtRpt.Query(System.String,System.String,Dt.Core.Dict)">
            <summary>
            查询报表数据
            </summary>
            <param name="p_srv">服务名称</param>
            <param name="p_sql">Sql语句</param>
            <param name="p_params">参数字典</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.AtRpt.IsValid(System.Collections.Generic.IList{Dt.Base.RptInfo})">
            <summary>
            校验报表组描述信息
            </summary>
            <param name="p_infos"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.RptCellArgs">
            <summary>
            单元格脚本参数
            </summary>
        </member>
        <member name="P:Dt.Base.RptCellArgs.Row">
            <summary>
            单元格在报表模板的行索引
            </summary>
        </member>
        <member name="P:Dt.Base.RptCellArgs.Col">
            <summary>
            单元格在报表模板的列索引
            </summary>
        </member>
        <member name="P:Dt.Base.RptCellArgs.Data">
            <summary>
            获取对应的数据行
            </summary>
        </member>
        <member name="P:Dt.Base.RptCellArgs.Text">
            <summary>
            获取单元格内容字符串
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptData">
            <summary>
            数据源包装类
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptData.Data">
            <summary>
            获取数据源
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptData.Current">
            <summary>
            获取设置当前行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptData.CurrentRow">
            <summary>
            获取当前行数据
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptData.NextRow">
            <summary>
            获取下一行数据
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptData.PreRow">
            <summary>
            获取上一行数据
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptExpression">
            <summary>
            表达式描述列
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptExpression.Func">
            <summary>
            获取设置功能种类
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptExpression.DataName">
            <summary>
            获取设置数据源名称
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptExpression.VarName">
            <summary>
            获取设置变量名称
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptExpFunc">
            <summary>
            表达式功能种类
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptExpFunc.Val">
            <summary>
            取值
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptExpFunc.Sum">
            <summary>
            求和
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptExpFunc.Avg">
            <summary>
            求平均
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptExpFunc.Max">
            <summary>
            求最大
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptExpFunc.Min">
            <summary>
            求最小
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptExpFunc.Count">
            <summary>
            总行数
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptExpFunc.Index">
            <summary>
            当前行数
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptExpFunc.Param">
            <summary>
            取参数值
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptExpFunc.Global">
            <summary>
            取全局变量值
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptExpFunc.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptInfoList">
            <summary>
            报表描述信息列表，只为打开窗口时识别窗口用
            </summary>
        </member>
        <member name="T:Dt.Base.Report.XmlTable">
            <summary>
            Table、Row对xml的扩展方法
            </summary>
        </member>
        <member name="M:Dt.Base.Report.XmlTable.ReadXml(Dt.Core.Table,System.Xml.XmlReader,System.String)">
            <summary>
            读取xml中的行数据，根元素和行元素名称任意，xml内容形如：
            \Params>
              \Param id="参数标识" name="参数名" type="double"\
                <![CDATA[xaml内容]]>
              /Param>
            /Params>
            </summary>
            <param name="p_tbl"></param>
            <param name="p_reader"></param>
            <param name="p_cdataCol"></param>
        </member>
        <member name="M:Dt.Base.Report.XmlTable.WriteXml(Dt.Core.Table,System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            按指定元素名称序列化行数据xml
            </summary>
            <param name="p_tbl"></param>
            <param name="p_writer"></param>
            <param name="p_rootName">根节点名称</param>
            <param name="p_rowName">行节点名称</param>
        </member>
        <member name="M:Dt.Base.Report.XmlTable.ReadXml(Dt.Core.Row,System.Xml.XmlReader)">
            <summary>
            读取xml中的单元格数据，元素名称任意，xml内容形如：
              Param id="参数标识" name="参数名" type="double"
            </summary>
            <param name="p_row"></param>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.XmlTable.WriteXml(Dt.Core.Row,System.Xml.XmlWriter)">
            <summary>
            序列化行数据xml
            </summary>
            <param name="p_row"></param>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Base.Report.DbDataWin.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.DbDataWin.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.DbDataWin.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ScriptDataWin.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ScriptDataWin.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ScriptDataWin.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.Report.CopyItemCmd">
            <summary>
            拷贝对象
            </summary>
        </member>
        <member name="T:Dt.Base.Report.InsertChartCmd">
            <summary>
            添加图表
            </summary>
        </member>
        <member name="T:Dt.Base.Report.InsertCmdBase">
            <summary>
            添加报表项基类
            </summary>
        </member>
        <member name="M:Dt.Base.Report.InsertCmdBase.Undo(System.Object)">
            <summary>
            默认撤消
            </summary>
            <param name="p_args"></param>
        </member>
        <member name="T:Dt.Base.Report.InsertCmdArgs">
            <summary>
            添加报表项命令参数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.InsertCmdArgs.RptItem">
            <summary>
            获取所属容器，页眉、页脚或模板
            </summary>
        </member>
        <member name="P:Dt.Base.Report.InsertCmdArgs.CellRange">
            <summary>
            插入对象的区域。
            </summary>
        </member>
        <member name="T:Dt.Base.Report.InsertMatrixCmd">
            <summary>
            插入矩阵
            </summary>
        </member>
        <member name="T:Dt.Base.Report.HideMatrixHeaderCmd">
            <summary>
            显示隐藏行头、列头命令
            </summary>
        </member>
        <member name="T:Dt.Base.Report.MatrixArgs">
            <summary>
            矩阵显示隐藏行头、列头参数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.MatrixArgs.Matrix">
            <summary>
            获取矩阵
            </summary>
        </member>
        <member name="P:Dt.Base.Report.MatrixArgs.HeaderType">
            <summary>
            获取行头还是列头
            </summary>
        </member>
        <member name="P:Dt.Base.Report.MatrixArgs.Val">
            <summary>
            获取设置当前值
            </summary>
        </member>
        <member name="P:Dt.Base.Report.MatrixArgs.IsFirst">
            <summary>
            获取设置是否首次（如果是false,表未重做）
            </summary>
        </member>
        <member name="T:Dt.Base.Report.InsertTableCmd">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Base.Report.InsertTableCmd.BuildCells(Dt.Base.Report.RptTblPartRow,System.Int32)">
            <summary>
            构建table的单元格。
            </summary>
            <param name="p_tblRow"></param>
            <param name="p_colSpan"></param>
        </member>
        <member name="T:Dt.Base.Report.InsertTextCmd">
            <summary>
            添加文本
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptCmdBase">
            <summary>
            报表项命令基类
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptCmdBase.Execute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_args"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptCmdBase.Undo(System.Object)">
            <summary>
            撤消
            </summary>
            <param name="p_args"></param>
        </member>
        <member name="T:Dt.Base.Report.RptCmdHistory">
            <summary>
            命令的撤消与重做管理类
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptCmdHistory.DirtyChanged">
            <summary>
            数据源修改状态变化事件
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptCmdHistory.RecordAction(Dt.Base.Report.HistoryCmdAction)">
            <summary>
            添加可撤消的动作
            </summary>
            <param name="p_action"></param>
        </member>
        <member name="M:Dt.Base.Report.RptCmdHistory.Undo">
            <summary>
            执行撤消操作
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptCmdHistory.Redo">
            <summary>
            执行重做操作
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptCmdHistory.Clear">
            <summary>
            清空所有撤消、重做的动作
            </summary>
        </member>
        <member name="T:Dt.Base.Report.HistoryCmdAction">
            <summary>
            可撤消、重做的动作描述类
            </summary>
        </member>
        <member name="M:Dt.Base.Report.HistoryCmdAction.#ctor(Dt.Base.Report.RptCmdBase,System.Object)">
            <summary>
            
            </summary>
            <param name="p_cmd"></param>
            <param name="p_args"></param>
        </member>
        <member name="M:Dt.Base.Report.HistoryCmdAction.Undo">
            <summary>
            撤消
            </summary>
        </member>
        <member name="M:Dt.Base.Report.HistoryCmdAction.Redo">
            <summary>
            重做
            </summary>
        </member>
        <member name="T:Dt.Base.Report.DelRptItemArgs">
            <summary>
            添加报表项命令参数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.DelRptItemArgs.Container">
            <summary>
            获取所属容器，页眉、页脚或模板
            </summary>
        </member>
        <member name="P:Dt.Base.Report.DelRptItemArgs.RptItem">
            <summary>
            获取要放置的区域
            </summary>
        </member>
        <member name="P:Dt.Base.Report.MoveRptItemArgs.RptItem">
            <summary>
            获取要放置的区域
            </summary>
        </member>
        <member name="T:Dt.Base.Report.AddSubLevelCmd">
            <summary>
            添加子层次命令
            </summary>
        </member>
        <member name="M:Dt.Base.Report.AddSubLevelCmd.InsertNewRow(Dt.Base.Report.RptMatrix,System.Int32)">
            <summary>
            添加新行
            </summary>
            <param name="p_matrix">矩阵</param>
            <param name="p_index">插入位置</param>
            <returns>新增行</returns>
        </member>
        <member name="M:Dt.Base.Report.AddSubLevelCmd.InsertNewCell(Dt.Base.Report.RptMatrix,Dt.Base.Report.RptMtxRow,System.Int32)">
            <summary>
            为当前行添加新列
            </summary>
            <param name="p_matrix">矩阵</param>
            <param name="p_row">所属行</param>
            <param name="p_index">插入位置</param>
            <returns>新增列的集合</returns>
        </member>
        <member name="T:Dt.Base.Report.DelSubLevelCmd">
            <summary>
            删除子层次命令
            </summary>
        </member>
        <member name="M:Dt.Base.Report.DelSubLevelCmd.DelRows(Dt.Base.Report.SubLevelCmdArgs,Dt.Base.Report.RptMtxHeader,Dt.Base.Report.RptMtxLevel)">
            <summary>
            删除对应数据行
            </summary>
            <param name="p_args"></param>
            <param name="p_header"></param>
            <param name="p_level"></param>
        </member>
        <member name="T:Dt.Base.Report.SubLevelCmdArgs">
            <summary>
            层次 操作参数
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SubLevelCmdArgs.#ctor(Dt.Base.Report.RptMtxHeader,Dt.Base.Report.RptMtxLevel)">
            <summary>
            构造方法
            </summary>
            <param name="p_mtxHeader">所属头</param>
            <param name="p_level">当前操作层</param>
        </member>
        <member name="P:Dt.Base.Report.SubLevelCmdArgs.Header">
            <summary>
            获取对应头信息
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubLevelCmdArgs.Level">
            <summary>
            获取设置当前操作层
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubLevelCmdArgs.SubLevels">
            <summary>
            获取设置包含的子层次
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubLevelCmdArgs.CurIndex">
            <summary>
            获取设置行、列插入位置
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubLevelCmdArgs.OpsRows">
            <summary>
            获取设置操作影响的数据行（行头操作有效）
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubLevelCmdArgs.OpsCells">
            <summary>
            获取设置操作影响的列（列头操作有效）
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SubLevelCmdArgs.InitData">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SubLevelCmdArgs.DelMtxRows">
            <summary>
            删除对应数据行
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SubLevelCmdArgs.BackMtxRow">
            <summary>
            撤消操作时回退数据
            </summary>
        </member>
        <member name="T:Dt.Base.Report.AddSubTitleCmd">
            <summary>
            添加小计命令
            </summary>
        </member>
        <member name="M:Dt.Base.Report.AddSubTitleCmd.InsertNewRow(Dt.Base.Report.RptMatrix,System.Int32)">
            <summary>
            添加新行
            </summary>
            <param name="p_matrix">矩阵</param>
            <param name="p_index">插入位置</param>
            <returns>新增行</returns>
        </member>
        <member name="M:Dt.Base.Report.AddSubTitleCmd.InsertNewCell(Dt.Base.Report.RptMatrix,Dt.Base.Report.RptMtxRow,System.Int32)">
            <summary>
            为当前行添加新列
            </summary>
            <param name="p_matrix">矩阵</param>
            <param name="p_row">所属行</param>
            <param name="p_index">插入位置</param>
            <returns>新增列的集合</returns>
        </member>
        <member name="T:Dt.Base.Report.DelSubTitleCmd">
            <summary>
            删除子层次命令
            </summary>
        </member>
        <member name="M:Dt.Base.Report.DelSubTitleCmd.DelRows(Dt.Base.Report.SubTitleCmdArgs,Dt.Base.Report.RptMtxHeaderType,Dt.Base.Report.RptMatrix,Dt.Base.Report.RptMtxSubtitle)">
            <summary>
            删除对应数据
            </summary>
            <param name="p_args"></param>
            <param name="p_headerType"></param>
            <param name="p_mat"></param>
            <param name="p_title"></param>
        </member>
        <member name="T:Dt.Base.Report.SubTitleSpanCmd">
            <summary>
            标题跨度命令
            </summary>
        </member>
        <member name="T:Dt.Base.Report.SubTitleCmdArgs">
            <summary>
            标题参数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTitleCmdArgs.TilteIndex">
            <summary>
            获取设置操作的标题位置
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTitleCmdArgs.CurIndex">
            <summary>
            获取设置行、列插入位置
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTitleCmdArgs.OpsRows">
            <summary>
            获取设置操作影响的数据行（行头操作有效）
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTitleCmdArgs.OpsCells">
            <summary>
            获取设置操作影响的列（列头操作有效）
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTitleCmdArgs.OldSpan">
            <summary>
            获取设置上一次跨度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTitleCmdArgs.NewSpan">
            <summary>
            获取设置新跨度
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SubTitleCmdArgs.InitData">
            <summary>
            初始化数据集合
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SubTitleCmdArgs.DelMtxRows">
            <summary>
            删除对应数据行
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SubTitleCmdArgs.BackMtxRow">
            <summary>
            撤消操作时回退数据
            </summary>
        </member>
        <member name="T:Dt.Base.Report.AddSubTotalCmd">
            <summary>
            添加小计命令
            </summary>
        </member>
        <member name="M:Dt.Base.Report.AddSubTotalCmd.InsertNewRow(Dt.Base.Report.RptMatrix,System.Int32)">
            <summary>
            添加新行
            </summary>
            <param name="p_matrix">矩阵</param>
            <param name="p_index">插入位置</param>
            <returns>新增行</returns>
        </member>
        <member name="M:Dt.Base.Report.AddSubTotalCmd.InsertNewCell(Dt.Base.Report.RptMatrix,Dt.Base.Report.RptMtxRow,System.Int32)">
            <summary>
            为当前行添加新列
            </summary>
            <param name="p_matrix">矩阵</param>
            <param name="p_row">所属行</param>
            <param name="p_index">插入位置</param>
            <returns>新增列的集合</returns>
        </member>
        <member name="T:Dt.Base.Report.DelSubTotalCmd">
            <summary>
            删除小计命令
            </summary>
        </member>
        <member name="M:Dt.Base.Report.DelSubTotalCmd.DelRows(Dt.Base.Report.SubTotalCmdArgs,Dt.Base.Report.RptMtxHeaderType,Dt.Base.Report.RptMatrix,Dt.Base.Report.RptMtxSubtotal)">
            <summary>
            删除对应数据
            </summary>
            <param name="p_args"></param>
            <param name="p_headerType"></param>
            <param name="p_mat"></param>
            <param name="p_total"></param>
        </member>
        <member name="T:Dt.Base.Report.ChangeSubTotalLocCmd">
            <summary>
            更改小计位置命令
            </summary>
        </member>
        <member name="T:Dt.Base.Report.SubTotalSpanCmd">
            <summary>
            小计跨度命令
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SubTotalCmdArgs.#ctor(Dt.Base.Report.RptItemBase,Dt.Base.Report.RptMtxSubtotal,System.Int32)">
            <summary>
            小计参数
            </summary>
            <param name="p_parent">小计所属上级</param>
            <param name="p_total">当前操作的小计</param>
            <param name="p_newSpan"></param>
        </member>
        <member name="P:Dt.Base.Report.SubTotalCmdArgs.Parent">
            <summary>
            获取设置父对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTotalCmdArgs.SubTotal">
            <summary>
            获取设置操作对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTotalCmdArgs.TotalIndex">
            <summary>
            获取设置操作对象在父对象中的索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTotalCmdArgs.BefIndex">
            <summary>
            获取设置行、列上次移移的位置
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTotalCmdArgs.CurIndex">
            <summary>
            获取设置行、列插入位置
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTotalCmdArgs.OpsRows">
            <summary>
            获取设置操作影响的数据行（行头操作有效）
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTotalCmdArgs.OpsCells">
            <summary>
            获取设置操作影响的列（列头操作有效）
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTotalCmdArgs.OldSpan">
            <summary>
            获取设置上一次跨度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.SubTotalCmdArgs.NewSpan">
            <summary>
            获取设置新跨度
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SubTotalCmdArgs.InitData">
            <summary>
            初始化数据集合
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SubTotalCmdArgs.DelMtxRows">
            <summary>
            删除对应数据行
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SubTotalCmdArgs.BackMtxRow">
            <summary>
            撤消操作时回退数据
            </summary>
        </member>
        <member name="T:Dt.Base.Report.InsertTblGrpCmd">
            <summary>
            插入表格分组
            </summary>
        </member>
        <member name="T:Dt.Base.Report.ClearTblGrpCmd">
            <summary>
            清空表格分组
            </summary>
        </member>
        <member name="T:Dt.Base.Report.InsertTblRowCmd">
            <summary>
            插入行
            </summary>
        </member>
        <member name="T:Dt.Base.Report.DeleTblRowCmd">
            <summary>
            删除行
            </summary>
        </member>
        <member name="T:Dt.Base.Report.ContainHeadOrFootCmd">
            <summary>
            包含表头或表尾
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RemoveHeadOrFootCmd">
            <summary>
            移除表头或表尾
            </summary>
        </member>
        <member name="T:Dt.Base.Report.ValueChangedCmd">
            <summary>
            单元格值的撤消与重做
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ValueChangedCmd.Execute(System.Object)">
            <summary>
            设置单元格新值，重做
            </summary>
            <param name="p_args"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.ValueChangedCmd.Undo(System.Object)">
            <summary>
            恢复单元格原始值，撤消
            </summary>
            <param name="p_args"></param>
        </member>
        <member name="P:Dt.Base.Report.ValueChangedCmd.IsSetting">
            <summary>
            获取是否正在重置单元格值
            </summary>
        </member>
        <member name="T:Dt.Base.Report.ValueChangedArgs">
            <summary>
            单元格值命令参数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.ValueChangedArgs.Cell">
            <summary>
            命令针对的单元格
            </summary>
        </member>
        <member name="P:Dt.Base.Report.ValueChangedArgs.OldVal">
            <summary>
            原始值
            </summary>
        </member>
        <member name="P:Dt.Base.Report.ValueChangedArgs.Val">
            <summary>
            当前值
            </summary>
        </member>
        <member name="P:Dt.Base.Report.ValueChangedArgs.RptText">
            <summary>
            传入的RptText参数对象
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ChartForm.OnValueChanged(System.Object,Dt.Core.Cell)">
            <summary>
            数据项发生变化事件响应函数。
            注意：字段值变化未校验数据类型。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.ChartForm.DataDropBox(System.String)">
            <summary>
            根据数据源名称，初始化字段的数据源项目。
            </summary>
            <param name="p_dsName"></param>
        </member>
        <member name="M:Dt.Base.Report.ChartForm.ChgFldByType(Dt.Charts.ChartType)">
            <summary>
            根据图表类型，改变数据字段项表现。
            </summary>
            <param name="p_chartType"></param>
        </member>
        <member name="M:Dt.Base.Report.ChartForm.InitChart">
            <summary>
            初始化报表
            </summary>
        </member>
        <member name="P:Dt.Base.Report.ChartForm.DefaultData">
            <summary>
            适合于大部分图表使用
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ChartForm.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ChartForm.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ChartForm.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.DataSourceDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.DataSourceDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.DataSourceDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.GlobalParamDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.GlobalParamDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.GlobalParamDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixForm.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixForm.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixForm.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixLevelForm.IsOverLap">
            <summary>
            扩展位置是否与其他控件冲突
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.MatrixLevelForm.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixLevelForm.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixLevelForm.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixSubtitleForm.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixSubtitleForm.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixSubtitleForm.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixSubtotalForm.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixSubtotalForm.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.MatrixSubtotalForm.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ParamSelectionDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ParamSelectionDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ParamSelectionDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.TableForm.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.TableForm.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.TableForm.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.TextForm.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.TextForm.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.TextForm.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.BlankAreaMenu.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.BlankAreaMenu.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.BlankAreaMenu.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.HeaderFooterMenu.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.HeaderFooterMenu.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.HeaderFooterMenu.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.Report.ExcelClerk">
            <summary>
            将报表项的变化(增删、报表项属性变化等)同步到Excel
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.AttachEvent(Dt.Base.Report.RptRoot)">
            <summary>
            绑定事件
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.DetachEvent(Dt.Base.Report.RptRoot)">
            <summary>
            松绑事件
            </summary>
            <param name="p_root"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.LoadItem(Dt.Base.Report.RptItem)">
            <summary>
            加载报表项
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.OnItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            报表项增删事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.OnTextChanged(System.Object,Dt.Core.Cell)">
            <summary>
            文本项属性值变化
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.OnUpdated(System.Object,System.Boolean)">
            <summary>
            报表项更新事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.LoadText(Dt.Base.Report.RptText)">
            <summary>
            加载RptText，一般用于加载报表顶级的RptText
            </summary>
            <param name="p_txt"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.LoadTable(Dt.Base.Report.RptTable)">
            <summary>
            加载table
            </summary>
            <param name="p_tbl"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.LoadChart(Dt.Base.Report.RptChart)">
            <summary>
            加载图表
            </summary>
            <param name="p_chart"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.LoadTblRow(Dt.Base.Report.RptTblPartRow,System.Int32,System.Int32)">
            <summary>
            加载table的行单元格，不进行样式清除工作
            </summary>
            <param name="p_tblRow"></param>
            <param name="p_rowIdx"></param>
            <param name="p_colIdx"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.ClearItem(Dt.Base.Report.RptItem)">
            <summary>
            清除RptItem所占区域的内容及样式
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.ClearRange(Dt.Cells.Data.Worksheet,Dt.Cells.Data.CellRange)">
            <summary>
            清空sheet上面的矩形内容及样式
            </summary>
            <param name="p_sheet"></param>
            <param name="p_range"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.LoadMatrix(Dt.Base.Report.RptMatrix)">
            <summary>
            加载矩阵
            </summary>
            <param name="p_mat"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.LoadMtxLevel(System.Collections.Generic.List{Dt.Base.Report.RptMtxLevel})">
            <summary>
            加载层
            </summary>
            <param name="p_levels"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.LoadMtxSubTotal(System.Collections.Generic.List{Dt.Base.Report.RptMtxSubtotal})">
            <summary>
            加载小计
            </summary>
            <param name="p_subTotals"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.LoadMtxSubTitle(System.Collections.Generic.List{Dt.Base.Report.RptMtxSubtitle})">
            <summary>
            加载标题
            </summary>
            <param name="p_subTitles"></param>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.GetRptItemRange(Dt.Base.Report.RptItem)">
            <summary>
            得到RptItem所占用的矩形区域
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.ExcelClerk.Invoke(System.Action)">
            <summary>
            批量执行Excel操作
            </summary>
            <param name="p_act"></param>
        </member>
        <member name="T:Dt.Base.Report.SelectionClerk">
            <summary>
            报表项选择状态管理
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SelectionClerk.UpdateSelection">
            <summary>
            更新选择区域
            </summary>
        </member>
        <member name="M:Dt.Base.Report.SelectionClerk.ShowMenu(Dt.Base.Menu,Dt.Cells.Data.CellRange)">
            <summary>
            显示上下文菜单
            </summary>
            <param name="p_menu"></param>
            <param name="p_range"></param>
        </member>
        <member name="M:Dt.Base.Report.SelectionClerk.OnItemStartDrag(System.Object,System.EventArgs)">
            <summary>
            开始拖拽
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.SelectionClerk.OnItemDropped(System.Object,Dt.Cells.UI.CellEventArgs)">
            <summary>
            拖放结束
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.RefreshSpliter">
            <summary>
            重新刷新页面设计部分的分割线高度。
            PaperSize 的一个值为0的时候，不会在页面上画线
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.UpdateSelection">
            <summary>
            更新选择区域
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.GetContainer">
            <summary>
            获取当前页面，页眉、页脚或模板
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.AfterDelItem(Dt.Base.Report.RptItem)">
            <summary>
            删除报表项后，若为正在编辑的对象，卸载属性Form
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.CreateSheets">
            <summary>
            切换模板时重新构造页面
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.InitRowColSize">
            <summary>
            初始化行高列宽
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.LoadItems">
            <summary>
            加载所有报表项
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.OnCheckChanged(System.Object,Dt.Base.Mi)">
            <summary>
            显示网格
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.OnBeforeSerialize(System.Object,System.EventArgs)">
            <summary>
            序列化开始前，整理行高列宽，空行空列
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.OnColumnWidthChanged(System.Object,Dt.Cells.UI.ColumnWidthChangedEventArgs)">
            <summary>
            列宽调整时同步三个Sheet
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.OnRowHeightChanged(System.Object,Dt.Cells.UI.RowHeightChangedEventArgs)">
            <summary>
            改变页头尾高度
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptDesignWin.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.PageSettingWin.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.PageSettingWin.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.PageSettingWin.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ParamsWin.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ParamsWin.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ParamsWin.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptDesignHome.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptDesignHome.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptDesignHome.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ViewSettingWin.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ViewSettingWin.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.ViewSettingWin.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.Report.PageDefine">
            <summary>
            单个页面行列定义描述
            </summary>
        </member>
        <member name="P:Dt.Base.Report.PageDefine.Start">
            <summary>
            获取设置页面行列开始索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.PageDefine.Size">
            <summary>
            获取页面所有内容行高（列宽）定义
            </summary>
        </member>
        <member name="P:Dt.Base.Report.PageDefine.Count">
            <summary>
            获取页面所包含的行（列）数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.PageDefine.Offset">
            <summary>
            获取页面渲染时在Sheet中的起始行（列）索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.PageDefine.Total">
            <summary>
            获取页面渲染时在Sheet中的总行（列）数
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptBodyInst">
            <summary>
            内容实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptBodyInst.#ctor(Dt.Base.Report.RptPart)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptBodyInst.AddChild(Dt.Base.Report.RptItemInst)">
            <summary>
            添加子项
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Report.RptBodyInst.Output">
            <summary>
            输出所有报表项
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptBodyInst.SortItems">
            <summary>
            按照位置整理出每个报表项的左上位置列表
            两报表项之间位置关系有三种：
            1. 无影响
            2. 垂直依赖
            3. 水平依赖
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptBodyInst.GetTopLeftItems(System.Collections.Generic.List{Dt.Base.Report.RptItemInst},System.Boolean)">
            <summary>
            去除重复记录
            </summary>
            <param name="p_list"></param>
            <param name="p_isTop"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptChartInst">
            <summary>
            图表实例
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptFooterInst">
            <summary>
            页脚实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptFooterInst.#ctor(Dt.Base.Report.RptPart)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptFooterInst.AddChild(Dt.Base.Report.RptTextInst)">
            <summary>
            添加子项
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Report.RptFooterInst.Output(Dt.Base.Report.RptPage)">
            <summary>
            输出到指定页面
            </summary>
            <param name="p_page"></param>
        </member>
        <member name="M:Dt.Base.Report.RptFooterInst.Clone">
            <summary>
            克隆整个区域内容
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptHeaderInst">
            <summary>
            页眉实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptHeaderInst.#ctor(Dt.Base.Report.RptPart)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptHeaderInst.AddChild(Dt.Base.Report.RptTextInst)">
            <summary>
            添加子项
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Report.RptHeaderInst.Output(Dt.Base.Report.RptPage)">
            <summary>
            输出到指定页面
            </summary>
            <param name="p_page"></param>
        </member>
        <member name="M:Dt.Base.Report.RptHeaderInst.Clone">
            <summary>
            克隆整个区域内容
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptItemInst">
            <summary>
            报表元素基类
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemInst.Inst">
            <summary>
            获取报表实例
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemInst.Item">
            <summary>
            获取报表项实例对应的模板项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemInst.Parent">
            <summary>
            获取设置父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemInst.TopItems">
            <summary>
            获取设置在其上部的报表项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemInst.LeftItems">
            <summary>
            获取设置在其左侧的报表项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemInst.Region">
            <summary>
            获取设置报表项区域
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemInst.Visible">
            <summary>
            获取设置报表项是否可见
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemInst.Outputted">
            <summary>
            是否正在输出中
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptItemInst.Output">
            <summary>
            输出报表项
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptItemInst.DoOutput">
            <summary>
            输出报表项内容
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptItemInst.RefreshPosition">
            <summary>
            计算元素的位置信息
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptItemPartInst">
            <summary>
            报表项容器实例
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemPartInst.Filter">
            <summary>
            获取设置当前过滤串字典
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptItemPartInst.AddChild(Dt.Base.Report.RptTextInst)">
            <summary>
            添加子项
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Report.RptItemPartInst.DoOutput">
            <summary>
            输出报表项内容
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrixInst.CornerInst">
            <summary>
            获取设置矩阵角
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrixInst.RowHeaderInsts">
            <summary>
            获取行头列表
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrixInst.ColHeaderInsts">
            <summary>
            获取列头列表
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrixInst.RptData">
            <summary>
            获取设置数据源
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptMatrixInst.AddColHeader(Dt.Base.Report.RptMtxHeaderInst)">
            <summary>
            添加列
            </summary>
            <param name="p_header"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMatrixInst.AddRowHeader(Dt.Base.Report.RptMtxHeaderInst)">
            <summary>
            添加行
            </summary>
            <param name="p_header"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMatrixInst.AddCell(Dt.Base.Report.RptTextInst)">
            <summary>
            添加单元格
            </summary>
            <param name="p_cell"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMatrixInst.OnVerPageBegin(System.Object,Dt.Base.Report.RptPage)">
            <summary>
            切换页面时在新页重复列头
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMatrixInst.OnHorPageBegin(System.Object,Dt.Base.Report.RptPage)">
            <summary>
            切换页面时在新页重复行头
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMatrixInst.GetCurrent(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            计算行号
            </summary>
            <param name="p_filter"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptMatrixInst.MtxOutPutPart">
            <summary>
            矩阵正在输出的部分
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptMatrixInst.MtxOutPutPart.RowHeader">
            <summary>
            行头
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptMatrixInst.MtxOutPutPart.ColHeader">
            <summary>
            列头
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptMatrixInst.MtxOutPutPart.Cells">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeaderInst.Filter">
            <summary>
            获取设置过滤条件
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeaderInst.HeaderType">
            <summary>
            获取设置头类型
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeaderInst.RptData">
            <summary>
            获取设置数据源
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeaderInst.Index">
            <summary>
            获取设置当前对应数据索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeaderInst.TxtInsts">
            <summary>
            获取Inst列表
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeaderInst.MtxRowsRow">
            <summary>
            获取设置对应模板单元格行号
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeaderInst.MtxRowsCol">
            <summary>
            获取设置对应模板单元格列号
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptMtxHeaderInst.Clone">
            <summary>
            复制行（列）头
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.Report.RptOutputInst.Page">
            <summary>
            获取设置报表项所属的输出页面
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptOutputInst.Width">
            <summary>
            获取宽度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptOutputInst.Height">
            <summary>
            获取高度
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptOutputInst.DoOutput">
            <summary>
            输出报表项内容
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptPage">
            <summary>
            报表输出页面，输出时布局用
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPage.X">
            <summary>
            获取当前页水平分页页码
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPage.Y">
            <summary>
            获取当前页垂直分页页码
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPage.HeaderItems">
            <summary>
            获取页眉区域的输出项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPage.Items">
            <summary>
            获取内容区域的输出项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPage.FooterItems">
            <summary>
            获取页脚区域的输出项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPage.Rows">
            <summary>
            获取设置页面行定义
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPage.Cols">
            <summary>
            获取设置页面列定义
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPage.PageNum">
            <summary>
            获取当前页面的页号，只有全部输出后渲染时才准确！
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptPage.IsRowHasDefine">
            <summary>
            当前行是否有定义
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptPage.IsColHasDefine">
            <summary>
            当前列是否有定义
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptPage.AddItem(Dt.Base.Report.RptOutputInst)">
            <summary>
            添加要输出的报表项
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Report.RptPage.UpdatePageNum">
            <summary>
            更新当前页面的页号，只有全部输出后渲染时才准确！
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptRegion">
            <summary>
            报表元素区域描述
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRegion.Row">
            <summary>
            获取设置起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRegion.Col">
            <summary>
            获取设置起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRegion.RowSpan">
            <summary>
            获取设置占用行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRegion.ColSpan">
            <summary>
            获取设置占用列数
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptRender.Render">
            <summary>
            渲染输出
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptRender.RenderText(Dt.Base.Report.RptTextInst,System.Int32,System.Int32)">
            <summary>
            输出文本内容
            </summary>
            <param name="p_txt"></param>
            <param name="p_row"></param>
            <param name="p_col"></param>
        </member>
        <member name="M:Dt.Base.Report.RptRender.RenderImage(Dt.Base.Report.RptTextInst,System.Int32,System.Int32)">
            <summary>
            输出图片
            </summary>
            <param name="p_img"></param>
            <param name="p_row"></param>
            <param name="p_col"></param>
        </member>
        <member name="T:Dt.Base.Report.RptRootInst">
            <summary>
            报表模板根元素
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptRootInst.PageGap">
            <summary>
            页面之间的缝隙，为避免打印时分页边框不正常！
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptRootInst.VerPageBegin">
            <summary>
            开始输出垂直新页事件
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptRootInst.VerPageEnd">
            <summary>
            垂直页面输出结束事件
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptRootInst.HorPageBegin">
            <summary>
            开始输出水平新页事件
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptRootInst.HorPageEnd">
            <summary>
            水平页面输出结束事件
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.Info">
            <summary>
            获取报表描述信息
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.Header">
            <summary>
            获取报表页眉
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.Body">
            <summary>
            获取报表内容
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.Footer">
            <summary>
            获取报表页脚
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.HeaderHeight">
            <summary>
            获取页眉高度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.FooterHeight">
            <summary>
            获取页脚高度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.BodyHeight">
            <summary>
            获取内容高度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.BodyWidth">
            <summary>
            获取内容宽度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.Pages">
            <summary>
            获取所有输出页面
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.Rows">
            <summary>
            获取按页组织的行定义
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.Cols">
            <summary>
            获取按页组织的列定义
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.CurrentParent">
            <summary>
            获取当前正在构造的容器对象，如表格表头
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.CurrentTable">
            <summary>
            获取当前正在构造的表格
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.TblFooterHeight">
            <summary>
            获取当前表尾的高度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRootInst.PageCols">
            <summary>
            获取分页的列数
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptRootInst.Draw">
            <summary>
            绘制报表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptRootInst.OutputItem(Dt.Base.Report.RptOutputInst)">
            <summary>
            输出报表项
            </summary>
            <param name="p_item">报表项</param>
        </member>
        <member name="M:Dt.Base.Report.RptRootInst.SyncRowHeight(Dt.Base.Report.RptTextInst,System.Double)">
            <summary>
            自动行高时重置行高，前提：
            1. AutoHeight为true
            2. 只占一行
            3. 当前输出位置在页的末尾
            4. 测量高度大于原高度
            </summary>
            <param name="p_item"></param>
            <param name="p_height"></param>
        </member>
        <member name="M:Dt.Base.Report.RptRootInst.GetPage(System.Int32,System.Int32)">
            <summary>
            查询指定位置的页面
            </summary>
            <param name="p_x"></param>
            <param name="p_y"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptRootInst.GetPage(Dt.Base.Report.RptRegion)">
            <summary>
            获取指定区域所属的页面
            </summary>
            <param name="p_region"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptRootInst.TestPageBreak(Dt.Base.Report.RptItemInst)">
            <summary>
            是否需要垂直分页
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptRootInst.PrepareItem(Dt.Base.Report.RptItemInst)">
            <summary>
            补充报表项及左上的行列定义，处理分页
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Report.RptRootInst.HorPageBreak(Dt.Base.Report.PageDefine@,System.Double@,System.Boolean)">
            <summary>
            水平分页
            </summary>
            <param name="p_colPage"></param>
            <param name="p_leftWidth"></param>
            <param name="p_inItem"></param>
        </member>
        <member name="M:Dt.Base.Report.RptRootInst.VerPageBreak(Dt.Base.Report.PageDefine@,System.Double@,System.Boolean)">
            <summary>
            垂直分页
            </summary>
            <param name="p_rowPage"></param>
            <param name="p_topHeight"></param>
            <param name="p_inItem"></param>
        </member>
        <member name="M:Dt.Base.Report.RptRootInst.CreatePage(System.Int32,System.Int32)">
            <summary>
            创建输出页面
            </summary>
            <param name="p_x"></param>
            <param name="p_y"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptRootInst.GetPageIndex(System.Collections.Generic.List{Dt.Base.Report.PageDefine},System.Int32)">
            <summary>
            
            </summary>
            <param name="p_def"></param>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptTableInst">
            <summary>
            表格实例
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTableInst.Data">
            <summary>
            获取设置数据源
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTableInst.Header">
            <summary>
            获取设置表头
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTableInst.Rows">
            <summary>
            获取数据行
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTableInst.Footer">
            <summary>
            获取设置表尾
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTableInst.AddRow(Dt.Base.Report.RptTblPartInst)">
            <summary>
            添加数据行
            </summary>
            <param name="p_row"></param>
        </member>
        <member name="M:Dt.Base.Report.RptTableInst.DoOutput">
            <summary>
            输出报表项内容
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTableInst.OutputTable">
            <summary>
            输出单列表头表尾可重复表格布局
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTableInst.OnPageBegin(System.Object,Dt.Base.Report.RptPage)">
            <summary>
            切换页面时在新页重复表头
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptTableInst.OnPageEnd(System.Object,Dt.Base.Report.PageDefine)">
            <summary>
            切换页面时在旧页重复表尾
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptTableInst.OutputList">
            <summary>
            输出单列布局
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptTblFooterInst">
            <summary>
            表尾实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblFooterInst.DoOutput">
            <summary>
            输出报表项内容
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblFooterInst.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptTblHeaderInst">
            <summary>
            表头实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblHeaderInst.DoOutput">
            <summary>
            输出报表项内容
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblHeaderInst.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptTblPartInst">
            <summary>
            表格部分
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPartInst.Table">
            <summary>
            获取所属表格
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblPartInst.OutputChildren">
            <summary>
            输出子元素
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptTblRowInst">
            <summary>
            表格数据行实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblRowInst.DoOutput">
            <summary>
            输出报表项内容
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptTextInst">
            <summary>
            文本项实例
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTextInst.Text">
            <summary>
            获取最终输出的字符串
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTextInst.Filter">
            <summary>
            获取设置当前过滤串字典
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTextInst.Data">
            <summary>
            获取文本项对应的数据行，脚本用
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTextInst.OutputHeader(Dt.Base.Report.RptPage)">
            <summary>
            输出到指定页的页眉
            </summary>
            <param name="p_page"></param>
        </member>
        <member name="M:Dt.Base.Report.RptTextInst.OutputFooter(Dt.Base.Report.RptPage)">
            <summary>
            输出到指定页的页脚
            </summary>
            <param name="p_page"></param>
        </member>
        <member name="M:Dt.Base.Report.RptTextInst.DoOutput">
            <summary>
            输出报表项内容
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTextInst.Clone">
            <summary>
            复制报表项
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptTextInst.GetText">
            <summary>
            获取最终输出的字符串，替换总页数或页号占位符
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptTextInst.ParseValue">
            <summary>
            解析文本内容
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTextInst.GetRows(Dt.Core.Table)">
            <summary>
            获取符合条件的数据行
            </summary>
            <param name="p_tbl"></param>
            <returns></returns>
        </member>
        <member name="E:Dt.Base.Report.RptSearchForm.Query">
            <summary>
            查询事件
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptSearchForm.Menu">
            <summary>
            查询面板菜单
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptSearchForm.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptSearchForm.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptSearchForm.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptViewWin">
            <summary>
            默认报表预览窗口
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptViewWin.OnQuery(System.Object,Dt.Base.RptInfo)">
            <summary>
            已提供完整查询参数值，加载报表
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Base.Report.RptChart">
            <summary>
            图表
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptChart.Tbl">
            <summary>
            获取数据源名称
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptChart.FieldX">
            <summary>
            获取x轴字段名
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptChart.FieldY">
            <summary>
            获取y轴字段名
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptChart.FieldSeries">
            <summary>
            获取系列字段名
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptChart.Clone">
            <summary>
            拷贝对象方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptChart.Build">
            <summary>
            构造报表项实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptChart.Render(Dt.Cells.Data.Worksheet,System.Int32,System.Int32)">
            <summary>
            输出图表
            </summary>
            <param name="p_ws"></param>
            <param name="p_row"></param>
            <param name="p_col"></param>
        </member>
        <member name="M:Dt.Base.Report.RptChart.ValidFilds">
            <summary>
            判断数据表字段是否完整
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptItem">
            <summary>
            报表项基类
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptItem.#ctor(Dt.Base.Report.RptPart)">
            <summary>
            构造方法
            </summary>
            <param name="p_owner"></param>
        </member>
        <member name="P:Dt.Base.Report.RptItem.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItem.Part">
            <summary>
            获取报表项所属容器
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItem.Parent">
            <summary>
            获取报表项所属父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItem.Row">
            <summary>
            获取设置报表元素起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItem.Col">
            <summary>
            获取设置报表元素起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItem.RowSpan">
            <summary>
            获取设置报表元素所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItem.ColSpan">
            <summary>
            获取设置报表元素所占列数
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptItem.Contains(Dt.Cells.Data.CellRange)">
            <summary>
            指定区域是否在报表项内
            </summary>
            <param name="p_range"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptItem.Contains(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            指定区域是否在报表项内
            </summary>
            <param name="p_row"></param>
            <param name="p_column"></param>
            <param name="p_rowCount"></param>
            <param name="p_columnCount"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptItem.TestIncIntersect(System.Int32,System.Int32)">
            <summary>
            RptItem 增加行或列时判断是否与其他对象相交
            </summary>
            <param name="p_rowIncrease"></param>
            <param name="p_colIncrease"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptItem.TestMovIntersect(System.Int32,System.Int32)">
            <summary>
             RptItem 移动时判断是否与其他对象相交
            </summary>
            <param name="p_moveRow"></param>
            <param name="p_moveCol"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptItem.ValidEmptyRange(Dt.Base.Report.RptPart,Dt.Cells.Data.CellRange,Dt.Base.Report.RptItem)">
            <summary>
            判定某区域是否有控件 或 是否有指定对象之外的控件
            </summary>
            <param name="p_part"></param>
            <param name="p_range"></param>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptItem.Clone">
            <summary>
            克隆方法。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptItem.Update(System.Boolean)">
            <summary>
            触发报表项更新事件
            </summary>
            <param name="p_clearOld">是否擦除原区域</param>
        </member>
        <member name="M:Dt.Base.Report.RptItem.WritePosition(System.Xml.XmlWriter)">
            <summary>
            序列化位置
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="T:Dt.Base.Report.RptItemBase">
            <summary>
            报表元素基类
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptItemBase.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemBase.Data">
            <summary>
            获取数据源
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemBase.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemBase.Part">
            <summary>
            获取报表项所属容器
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemBase.Parent">
            <summary>
             获取报表元素父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemBase.Row">
            <summary>
            获取设置报表元素起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemBase.Col">
            <summary>
            获取设置报表元素起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemBase.RowSpan">
            <summary>
            获取设置报表元素所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemBase.ColSpan">
            <summary>
            获取设置报表元素所占列数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemBase.Width">
            <summary>
            获取报表元素宽度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptItemBase.Height">
            <summary>
            获取报表元素高度
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptItemBase.GetRowHeight(System.Int32)">
            <summary>
            获取内部行高
            </summary>
            <param name="p_offset">偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptItemBase.GetColWidth(System.Int32)">
            <summary>
            获取内部列宽
            </summary>
            <param name="p_offset">偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptItemBase.IsCrossWithRows(System.Int32,System.Int32)">
            <summary>
            是否有重叠行
            </summary>
            <param name="p_row"></param>
            <param name="p_rowCount"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptItemBase.IsCrossWithColumns(System.Int32,System.Int32)">
            <summary>
            是否有重叠列
            </summary>
            <param name="p_col"></param>
            <param name="p_colCount"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptItemBase.IsCrossWithRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            是否存在重叠区域
            </summary>
            <param name="p_row"></param>
            <param name="p_column"></param>
            <param name="p_rowCount"></param>
            <param name="p_columnCount"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptItemBase.Build">
            <summary>
            构造报表元素实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptItemBase.OnValueChanged(System.Object,Dt.Core.Cell)">
            <summary>
            值变化时通知Root
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptItemBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptItemBase.ReadChildXml(System.Xml.XmlReader)">
            <summary>
            读取子元素xml，结束时定位在该子元素的下一元素上
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptItemBase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化xml
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="T:Dt.Base.Report.RptMatrix">
            <summary>
            矩阵
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrix.HideRowHeader">
            <summary>
            获取设置是否显示 行 标题
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrix.HideColHeader">
            <summary>
            获取设置是否显示 列 标题
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrix.RepeatRowHeader">
            <summary>
            获取设置是否在每页重复 行 标题
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrix.RepeatColHeader">
            <summary>
            获取设置是否在每页重复 列 标题
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrix.RowSort">
            <summary>
            获取设置 行 排序串
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrix.ColSort">
            <summary>
            获取设置 列 排序串
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrix.Corner">
            <summary>
            获取设置矩阵角
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrix.RowHeader">
            <summary>
            获取设置行头
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrix.ColHeader">
            <summary>
            获取设置列头
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMatrix.Rows">
            <summary>
            获取数据行
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.Clone">
            <summary>
            生成新的矩阵
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.GetRangeType(System.Int32,System.Int32)">
            <summary>
            获取指定位置所属区域类型
            </summary>
            <param name="p_row"></param>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.GetText(System.Int32,System.Int32)">
            <summary>
            获取内部指定位置的文本
            </summary>
            <param name="p_row"></param>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.GetMaxTotal">
            <summary>
            获取当前小计最大数 + 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.GetMaxTitle">
            <summary>
            获取当前静态标题最大数 + 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.GetCellsCount">
            <summary>
            获取数据单元格个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.ReBuildData(Dt.Core.Table)">
            <summary>
            按排序条件重新整理数据
            </summary>
            <param name="p_data"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.Order(System.Linq.IOrderedEnumerable{Dt.Core.Row},Dt.Core.Table,System.String[])">
            <summary>
            数据排序
            </summary>
            <param name="p_orderData"></param>
            <param name="p_data"></param>
            <param name="p_orders"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.BuildHeader(Dt.Base.Report.RptData,Dt.Base.Report.RptMtxHeader,Dt.Base.Report.RptMatrixInst)">
            <summary>
            构造行头或列头
            </summary>
            <param name="p_rptData"></param>
            <param name="p_header"></param>
            <param name="p_matInst"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.CreateTotalInst(System.Collections.Generic.List{Dt.Base.Report.RptMtxSubtotal},Dt.Base.Report.RptMtxHeader,Dt.Base.Report.RptMatrixInst,Dt.Core.Row,Dt.Base.Report.RptData,Dt.Base.Report.TotalLocation)">
            <summary>
            创建小计
            </summary>
            <param name="totals"></param>
            <param name="p_header"></param>
            <param name="p_matInst"></param>
            <param name="p_curRow"></param>
            <param name="p_data"></param>
            <param name="p_loc"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.CreateSubTiltelInst(System.Collections.Generic.List{Dt.Base.Report.RptMtxSubtitle},Dt.Base.Report.RptMtxHeader,Dt.Base.Report.RptMatrixInst,Dt.Core.Row,Dt.Base.Report.RptData)">
            <summary>
            创建标题
            </summary>
            <param name="p_titles"></param>
            <param name="p_header"></param>
            <param name="p_matInst"></param>
            <param name="p_curRow"></param>
            <param name="p_data"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.SelectDistinctDataRows(Dt.Core.Table,System.Collections.Generic.List{System.String})">
            <summary>
            获取参数计算列的数据
            </summary>
            <param name="p_dataTable"></param>
            <param name="p_columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.IsDataRowExists(System.Collections.Generic.List{Dt.Core.Row},Dt.Core.Row,System.Collections.Generic.List{System.String})">
            <summary>
            判断是否存在行
            </summary>
            <param name="p_dataRows"></param>
            <param name="p_dataRow"></param>
            <param name="p_columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.CompareTwoRows(Dt.Core.Row,Dt.Core.Row,System.Collections.Generic.List{System.String})">
            <summary>
            比较两和f数据
            </summary>
            <param name="p_dataRow1"></param>
            <param name="p_dataRow2"></param>
            <param name="p_columnNames"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.GetCellByRowCol(System.Int32,System.Int32)">
            <summary>
            根据行号、列号获取Cell
            </summary>
            <param name="p_row"></param>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.GetRangeTypeByLevel(System.Collections.Generic.List{Dt.Base.Report.RptMtxLevel},System.Int32,System.Int32)">
            <summary>
            获取所属层下的 类型
            </summary>
            <param name="p_levels"></param>
            <param name="p_row"></param>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.GetSubtotal(System.Collections.Generic.List{Dt.Base.Report.RptMtxSubtotal},System.Int32,System.Int32)">
            <summary>
            根据行列获取小计
            </summary>
            <param name="p_totals"></param>
            <param name="p_row"></param>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.GetSubtitle(System.Collections.Generic.List{Dt.Base.Report.RptMtxSubtitle},System.Int32,System.Int32)">
            <summary>
            根据行列获取标题
            </summary>
            <param name="p_titles"></param>
            <param name="p_row"></param>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.TotalMax(Dt.Base.Report.RptMtxSubtotal)">
            <summary>
            递归获取小计最大数据值
            </summary>
            <param name="p_total"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.TitleMax(Dt.Base.Report.RptMtxSubtitle)">
            <summary>
            递归获取标题最大数据值
            </summary>
            <param name="p_title"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMatrix.GetValidInt(Dt.Base.Report.RptItemBase,System.String)">
            <summary>
            获取最大ID的转换方法
            </summary>
            <param name="p_item"></param>
            <param name="p_preName"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.MtxRangeType">
            <summary>
            矩阵内部位置类型
            </summary>
        </member>
        <member name="F:Dt.Base.Report.MtxRangeType.Corner">
            <summary>
            矩阵角
            </summary>
        </member>
        <member name="F:Dt.Base.Report.MtxRangeType.Level">
            <summary>
            层次
            </summary>
        </member>
        <member name="F:Dt.Base.Report.MtxRangeType.Subtotal">
            <summary>
            小计
            </summary>
        </member>
        <member name="F:Dt.Base.Report.MtxRangeType.Subtitle">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:Dt.Base.Report.MtxRangeType.Body">
            <summary>
            数据区
            </summary>
        </member>
        <member name="F:Dt.Base.Report.MtxRangeType.HeaderEmpty">
            <summary>
            内部空白区
            </summary>
        </member>
        <member name="F:Dt.Base.Report.MtxRangeType.Outer">
            <summary>
            外部
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptMtxColHeader">
            <summary>
            矩阵列头
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptMtxColHeader.Clone(Dt.Base.Report.RptMatrix)">
            <summary>
            克隆列头
            </summary>
            <param name="p_mtx"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMtxColHeader.GetSubTotalMaxRow(System.Collections.Generic.List{Dt.Base.Report.RptMtxSubtotal})">
            <summary>
            获取节点小计最大个数
            </summary>
            <param name="p_totals"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMtxColHeader.GetSubTitleMaxRow(System.Collections.Generic.List{Dt.Base.Report.RptMtxSubtitle})">
            <summary>
            获取节点标题最大个数
            </summary>
            <param name="p_titles"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptMtxCorner">
            <summary>
            矩阵角
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxCorner.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxCorner.Part">
            <summary>
            获取报表项所属容器
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxCorner.Parent">
            <summary>
            获取报表项所属父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxCorner.Row">
            <summary>
            获取矩阵角起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxCorner.Col">
            <summary>
            获取矩阵角起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxCorner.RowSpan">
            <summary>
            获取矩阵角所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxCorner.ColSpan">
            <summary>
            获取矩阵角所占列数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxCorner.Item">
            <summary>
            获取对应文本框
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptMtxCorner.ReadChildXml(System.Xml.XmlReader)">
            <summary>
            读取子元素xml，结束时定位在该子元素的末尾元素上
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMtxCorner.Clone(Dt.Base.Report.RptMatrix)">
            <summary>
            克隆矩阵角
            </summary>
            <param name="p_mtx"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptMtxHeader">
            <summary>
            矩阵行头列头基类
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeader.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeader.Part">
            <summary>
            获取报表项所属容器
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeader.Parent">
            <summary>
            获取报表项所属父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeader.Row">
            <summary>
            获取设置报表元素起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeader.Col">
            <summary>
            获取设置报表元素起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxHeader.Levels">
            <summary>
            层次集合
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptMtxHeader.ReadChildXml(System.Xml.XmlReader)">
            <summary>
            读取子元素xml，结束时定位在该子元素的末尾元素上
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMtxHeader.WriteChildXml(System.Xml.XmlWriter)">
            <summary>
            序列化子元素
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Base.Report.RptMtxHeader.GetFieldNames">
            <summary>
            获取层次对应数据列
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptMtxHeaderType">
            <summary>
            行头样式
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptMtxHeaderType.Row">
            <summary>
            行
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptMtxHeaderType.Col">
            <summary>
            列
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptMtxLevel">
            <summary>
            矩阵行头列头的层次
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.Part">
            <summary>
            获取报表项所属容器
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.Parent">
            <summary>
            获取报表项所属父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.Field">
            <summary>
            获取设置字段名
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.SubTotals">
            <summary>
            获取小计列表
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.SubTitles">
            <summary>
            获取标题列表
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.Matrix">
            <summary>
            矩阵
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.Item">
            <summary>
            RptText
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.Row">
            <summary>
            获取设置报表元素起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.Col">
            <summary>
            获取设置报表元素起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.RowSpan">
            <summary>
            获取设置报表元素所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxLevel.ColSpan">
            <summary>
            获取设置报表元素所占列数
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptMtxLevel.Clone(Dt.Base.Report.RptMtxHeader)">
            <summary>
            克隆层
            </summary>
            <param name="p_header"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMtxLevel.GetTotalSpan(System.Collections.Generic.List{Dt.Base.Report.RptMtxSubtotal})">
            <summary>
            递归获取小计所占行（列）数
            </summary>
            <param name="subTotal"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMtxLevel.GetTitleSpan(System.Collections.Generic.List{Dt.Base.Report.RptMtxSubtitle})">
            <summary>
            递归获取标题所占行（列）数
            </summary>
            <param name="p_titles"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMtxLevel.SubLevelSpan(System.Collections.Generic.List{Dt.Base.Report.RptMtxLevel})">
            <summary>
            获取子层所占行（列）数
            </summary>
            <param name="p_levels"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptMtxRow">
            <summary>
            矩阵数据行
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxRow.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxRow.Part">
            <summary>
            获取报表项所属容器
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxRow.Parent">
            <summary>
            获取报表项所属父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxRow.Row">
            <summary>
            获取设置报表元素起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxRow.Col">
            <summary>
            获取设置报表元素起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxRow.RowSpan">
            <summary>
            获取设置报表元素所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxRow.ColSpan">
            <summary>
            获取设置报表元素所占列数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxRow.Cells">
            <summary>
            获取行内容单元格
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptMtxRow.Clone(Dt.Base.Report.RptMatrix)">
            <summary>
            克隆行
            </summary>
            <param name="p_mat"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptMtxRowHeader">
            <summary>
            矩阵行头
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptMtxRowHeader.Clone(Dt.Base.Report.RptMatrix)">
            <summary>
            克隆行头
            </summary>
            <param name="p_mtx"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptMtxSubtitle">
            <summary>
            矩阵分层标题
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtitle.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtitle.Part">
            <summary>
            获取报表项所属容器
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtitle.Parent">
            <summary>
            获取报表项所属父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtitle.SubTitles">
            <summary>
            获取标题列表
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtitle.Item">
            <summary>
            获取对应的文本框
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtitle.Span">
            <summary>
            获取设置所占行数/列数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtitle.Level">
            <summary>
            获取所属层
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtitle.Row">
            <summary>
            获取设置报表元素起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtitle.Col">
            <summary>
            获取设置报表元素起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtitle.RowSpan">
            <summary>
            获取设置报表元素所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtitle.ColSpan">
            <summary>
            获取设置报表元素所占列数
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptMtxSubtitle.Clone(Dt.Base.Report.RptItemBase)">
            <summary>
            克隆标题
            </summary>
            <param name="p_parent"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMtxSubtitle.GetCount">
            <summary>
            获取当前占行（列）数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMtxSubtitle.GetRptRows(System.Int32@)">
            <summary>
            获取关联数据行（行头时有效）
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMtxSubtitle.GetRptCells(System.Int32@)">
            <summary>
            获取关联数据列（列头时有效）
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptMtxSubtotal">
            <summary>
            矩阵分层小计
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.Part">
            <summary>
            获取报表项所属容器
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.Parent">
            <summary>
            获取报表项所属父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.Item">
            <summary>
            获取对应的文本框
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.TotalLoc">
            <summary>
            获取设置小计位置
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.Span">
            <summary>
            获取设置所占行数/列数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.SubTotals">
            <summary>
            获取小计集合
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.Level">
            <summary>
            获取所属层
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.Row">
            <summary>
            获取设置报表元素起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.Col">
            <summary>
            获取设置报表元素起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.RowSpan">
            <summary>
            获取设置报表元素所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptMtxSubtotal.ColSpan">
            <summary>
            获取设置报表元素所占列数
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptMtxSubtotal.Clone(Dt.Base.Report.RptItemBase)">
            <summary>
            克隆小计
            </summary>
            <param name="p_parent"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMtxSubtotal.GetCount">
            <summary>
            获取当前占行（列）数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMtxSubtotal.GetRptRows(System.Int32@)">
            <summary>
            获取数据行（行头时有效）
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptMtxSubtotal.GetRptCells(System.Int32@)">
            <summary>
            获取相关数据列（列头时有效）
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.TotalLocation">
            <summary>
            小计位置
            </summary>
        </member>
        <member name="F:Dt.Base.Report.TotalLocation.Before">
            <summary>
            之前
            </summary>
        </member>
        <member name="F:Dt.Base.Report.TotalLocation.After">
            <summary>
            之后
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptTable">
            <summary>
            表格
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTable.Header">
            <summary>
            获取设置表头
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTable.Body">
            <summary>
            获取设置数据行
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTable.Footer">
            <summary>
            获取设置表尾
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTable.Groups">
            <summary>
            获取设置所有分组
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTable.RepeatHeader">
            <summary>
            获取设置是否重复表头
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTable.RepeatFooter">
            <summary>
            获取设置是否重复表尾
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTable.RowBreakCount">
            <summary>
            获取表格显示多少行数据后换列显示，默认0
            0： 表示从不换列
            -1：填满页面后自动换列
            n： n行数据后换列
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTable.ColBreakCount">
            <summary>
            获取表格重复的列数，达到后换行显示，在RowBreakCount非0时有效
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTable.MinRowCount">
            <summary>
            获取数据区域最少行数，不够时增加空行
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTable.Tbl">
            <summary>
            获取数据源名称
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTable.Build">
            <summary>
            构造报表项实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTable.GetRangeType(System.Int32,System.Int32)">
            <summary>
            获取指定位置所属区域类型
            </summary>
            <param name="p_row"></param>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptTable.GetText(System.Int32,System.Int32)">
            <summary>
            获取内部指定位置的文本
            </summary>
            <param name="p_row"></param>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptTable.Clone">
            <summary>
            拷贝对象方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptTable.GetFilters(System.Int32,Dt.Core.Row)">
            <summary>
            获得过滤参数
            </summary>
            <param name="p_cur"></param>
            <param name="p_curRow"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.TblRangeType">
            <summary>
            表格区域类型
            </summary>
        </member>
        <member name="F:Dt.Base.Report.TblRangeType.Header">
            <summary>
            表头
            </summary>
        </member>
        <member name="F:Dt.Base.Report.TblRangeType.Group">
            <summary>
            分组
            </summary>
        </member>
        <member name="F:Dt.Base.Report.TblRangeType.Body">
            <summary>
            数据区
            </summary>
        </member>
        <member name="F:Dt.Base.Report.TblRangeType.Footer">
            <summary>
            表尾
            </summary>
        </member>
        <member name="F:Dt.Base.Report.TblRangeType.Outer">
            <summary>
            外部
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptTblFooter">
            <summary>
            表尾
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblFooter.Build">
            <summary>
            构造报表项实例
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptTblGroup">
            <summary>
            表格分组
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblGroup.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblGroup.Part">
            <summary>
            获取报表项所属容器
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblGroup.Parent">
            <summary>
            获取报表项所属父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblGroup.Row">
            <summary>
            获取设置报表元素起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblGroup.Col">
            <summary>
            获取设置报表元素起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblGroup.RowSpan">
            <summary>
            获取设置报表元素所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblGroup.ColSpan">
            <summary>
            获取设置报表元素所占列数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblGroup.Table">
            <summary>
            获取所属表格
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblGroup.Field">
            <summary>
            获取设置分组字段
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptTblGroupFooter">
            <summary>
            表格分组尾行
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblGroupFooter.Build(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            构造报表项实例
            </summary>
            <param name="p_filter"></param>
        </member>
        <member name="T:Dt.Base.Report.RptTblGroupHeader">
            <summary>
            表格分组头行
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblGroupHeader.Build(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            构造报表项实例
            </summary>
            <param name="p_filter"></param>
        </member>
        <member name="T:Dt.Base.Report.RptTblHeader">
            <summary>
            表头
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblHeader.Build">
            <summary>
            构造报表项实例
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptTblPart">
            <summary>
            表格容器基类，表头、表体、表尾、分组头尾
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPart.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPart.Part">
            <summary>
            获取报表项所属容器
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPart.Parent">
            <summary>
            获取报表项所属父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPart.Row">
            <summary>
            获取设置报表元素起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPart.Col">
            <summary>
            获取设置报表元素起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPart.RowSpan">
            <summary>
            获取设置报表元素所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPart.ColSpan">
            <summary>
            获取设置报表元素所占列数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPart.Table">
            <summary>
            获取所属表格
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblPart.BuildChild">
            <summary>
            构造子元素
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblPart.ReadChildXml(System.Xml.XmlReader)">
            <summary>
            读取子元素xml，结束时定位在该子元素的末尾元素上
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptTblPart.WriteChildXml(System.Xml.XmlWriter)">
            <summary>
            序列化子元素
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="T:Dt.Base.Report.RptTblPartRow">
            <summary>
            表格容器内的行
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPartRow.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPartRow.Part">
            <summary>
            获取报表项所属容器
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPartRow.Parent">
            <summary>
            获取报表项所属父项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPartRow.Row">
            <summary>
            获取设置报表元素起始行索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPartRow.Col">
            <summary>
            获取设置报表元素起始列索引
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPartRow.RowSpan">
            <summary>
            获取设置报表元素所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPartRow.ColSpan">
            <summary>
            获取设置报表元素所占列数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPartRow.Table">
            <summary>
            获取所属表格
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblPartRow.TblPart">
            <summary>
            获取所属的RptTblPart
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptTblRow">
            <summary>
            表格数据行部分
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptTblRow.MinRowCount">
            <summary>
            获取设置数据区域最少行数，不够时增加空行
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptTblRow.Build">
            <summary>
            构造报表项实例
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptText">
            <summary>
            文本项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.Parent">
            <summary>
            获取父对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.Val">
            <summary>
            获取或设置文本的内容值
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.HideTopDup">
            <summary>
            获取或设置是否合并纵向内容
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.HideLeftDup">
            <summary>
            获取或设置是否合并横向内容
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.WordWrap">
            <summary>
            获取或设置是否换行
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.AutoHeight">
            <summary>
            获取或设置是否自动改变行高
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.HandleClick">
            <summary>
            获取设置点击时是否执行脚本
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.Expressions">
            <summary>
            获取表达式列表
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.FontFamily">
            <summary>
            获取或设置字体
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.FontSize">
            <summary>
            字体大小属性
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.Bold">
            <summary>
            获取或设置是否应用加粗样式
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.Italic">
            <summary>
            获取或设置是否应用斜体样式
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.UnderLine">
            <summary>
            获取或设置是否应用下划线样式
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.StrikeOut">
            <summary>
            获取或设置是否应用删除线样式
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.Foreground">
            <summary>
            获取设置前景颜色
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.Background">
            <summary>
            获取设置背景颜色
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.Horalign">
            <summary>
            获取或设置水平对齐方式
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.Veralign">
            <summary>
            获取或设置垂直对齐方式
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.Margin">
            <summary>
            缩进 由逗号分隔的数字
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.LeftColor">
            <summary>
            获取设置左边框颜色
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.TopColor">
            <summary>
            获取设置上边框颜色
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.RightColor">
            <summary>
            获取设置右边框颜色
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.BottomColor">
            <summary>
            获取设置下边框颜色
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.LeftStyle">
            <summary>
            获取设置左边框样式
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.TopStyle">
            <summary>
            获取设置上边框样式
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.RightStyle">
            <summary>
            获取设置右边框样式
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.BottomStyle">
            <summary>
            获取设置下边框样式
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.ExistPlaceholder">
            <summary>
            获取是否包含总页数或页号占位符
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptText.IsScriptRender">
            <summary>
            是否通过脚本绘制单元格内容和样式
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptText.Clone">
            <summary>
             克隆方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptText.SetParentItem(Dt.Base.Report.RptItemBase)">
            <summary>
            为克隆表格增加改写对象父对象的方法。
            </summary>
            <param name="p_parent"></param>
        </member>
        <member name="M:Dt.Base.Report.RptText.Build">
            <summary>
            构造报表项实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptText.ApplyStyle(Dt.Cells.Data.Cell)">
            <summary>
            给 cell 实例对象设定RptText的样式
            </summary>
            <param name="p_cell"></param>
        </member>
        <member name="M:Dt.Base.Report.RptText.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml时解析表达式
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptText.ParseExpression(System.String)">
            <summary>
            解析表达式
            </summary>
            <param name="p_str"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptBody">
            <summary>
            模板内容
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptBody.Rows">
            <summary>
            获取内容区域所有行高
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptBody.RowSpan">
            <summary>
            获取内容区域所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptBody.Height">
            <summary>
            获取容器项高度，根据所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptBody.PartType">
            <summary>
            获取报表项容器种类
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptBody.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptBody.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化xml
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Base.Report.RptBody.Build">
            <summary>
            构造报表内容实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptBody.GetRowHeight(System.Int32)">
            <summary>
            获取指定位置的行高
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptDataSource">
            <summary>
            报表数据源定义
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptDataSource.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptDataSource.DataSet">
            <summary>
            获取数据源列表
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptDataSource.GetDataSourceItem(System.String)">
            <summary>
            获取某项数据源
            </summary>
            <param name="p_tblName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptDataSource.GetColsData(System.String)">
            <summary>
            获取指定数据源的列Table
            </summary>
            <param name="p_tblName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptDataSource.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptDataSource.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化xml
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="P:Dt.Base.Report.RptDataSourceItem.Name">
            <summary>
            数据名称
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptDataSourceItem.IsScritp">
            <summary>
            是否通过脚本获取数据源
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptDataSourceItem.Srv">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptDataSourceItem.Sql">
            <summary>
            Sql语句
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptDataSourceItem.Cols">
            <summary>
            数据源列
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptFooter">
            <summary>
            页脚
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptFooter.Height">
            <summary>
            获取高度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptFooter.ActualHeight">
            <summary>
            实际高度，头无子元素时认为高度为0.
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptFooter.PartType">
            <summary>
            获取报表项容器种类
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptFooter.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptFooter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化xml
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Base.Report.RptFooter.Build">
            <summary>
            构造页脚实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptFooter.SetHeight(System.Double)">
            <summary>
            设置高度
            </summary>
            <param name="p_height"></param>
        </member>
        <member name="M:Dt.Base.Report.RptFooter.GetRowHeight(System.Int32)">
            <summary>
            获取指定位置的行高
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptHeader">
            <summary>
            页眉
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptHeader.Height">
            <summary>
            获取高度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptHeader.ActualHeight">
            <summary>
            实际高度，头无子元素时认为高度为0.
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptHeader.PartType">
            <summary>
            获取报表项容器种类
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptHeader.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptHeader.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化xml
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Base.Report.RptHeader.Build">
            <summary>
            构造页眉实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptHeader.SetHeight(System.Double)">
            <summary>
            设置高度
            </summary>
            <param name="p_height"></param>
        </member>
        <member name="M:Dt.Base.Report.RptHeader.GetRowHeight(System.Int32)">
            <summary>
            获取指定位置的行高
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Report.RptPageSetting">
            <summary>
            页面设置
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.Data">
            <summary>
            获取页面设置数据源
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.PaperName">
            <summary>
            获取纸张名称
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.Height">
            <summary>
            获取高度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.Width">
            <summary>
            获取宽度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.LeftMargin">
            <summary>
            获取左边距
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.TopMargin">
            <summary>
            获取上边距
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.RightMargin">
            <summary>
            获取右边距
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.BottomMargin">
            <summary>
            获取下边距
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.Landscape">
            <summary>
            获取是否横向
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.ValidHeight">
            <summary>
            获取有效高度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPageSetting.ValidWidth">
            <summary>
            获取有效宽度
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptPageSetting.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptPageSetting.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化xml
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="T:Dt.Base.Report.RptParams">
            <summary>
            报表参数定义
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptParams.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptParams.Data">
            <summary>
            获取数据源列表
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptParams.Item(System.String)">
            <summary>
            根据参数名获取参数定义Row
            </summary>
            <param name="p_col"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.Report.RptParams.ExistXaml">
            <summary>
            是否存在含xaml的参数
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptParams.BuildInitRow">
            <summary>
            根据初始参数值生成Row，常用来提供给查询面板
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptParams.BuildInitDict">
            <summary>
            根据初始参数值生成查询参数字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptParams.LoadFvCells(Dt.Base.Fv)">
            <summary>
            构造查询面板的单元格
            </summary>
            <param name="p_fv"></param>
        </member>
        <member name="M:Dt.Base.Report.RptParams.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptParams.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化xml
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="T:Dt.Base.Report.RptPart">
            <summary>
            容器项，页眉、页脚、模板内容基类
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPart.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPart.Items">
            <summary>
            获取容器内的报表项
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPart.Inst">
            <summary>
            获取报表实例
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPart.RowSpan">
            <summary>
            获取容器项所占行数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPart.ColSpan">
            <summary>
            获取容器项所占列数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPart.Width">
            <summary>
            获取容器项宽度，根据所占列数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPart.Height">
            <summary>
            获取容器项高度
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptPart.PartType">
            <summary>
            获取报表项容器种类
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptPart.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptPart.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化xml
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Base.Report.RptPart.BuildChild">
            <summary>
            构造所有报表项实例
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptPart.RemoveItem(Dt.Cells.Data.CellRange)">
            <summary>
            删除指定区域的报表项
            </summary>
            <param name="p_range"></param>
        </member>
        <member name="M:Dt.Base.Report.RptPart.GetRowHeight(System.Int32)">
            <summary>
            获取指定位置的行高
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptPart.DetachEvent">
            <summary>
            移除事件处理
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptPart.AtachEvent">
            <summary>
            增加事件处理
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptPart.SplitSize(System.String)">
            <summary>
            拆分成尺寸
            </summary>
            <param name="p_size"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptPart.MergeSize(System.Double[])">
            <summary>
            合并尺寸成字符串
            </summary>
            <param name="p_size"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptPart.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            触发报表项增删事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Base.Report.RptPartType">
            <summary>
            报表项容器种类
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptPartType.Body">
            <summary>
            模板
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptPartType.Header">
            <summary>
            页眉
            </summary>
        </member>
        <member name="F:Dt.Base.Report.RptPartType.Footer">
            <summary>
            页脚
            </summary>
        </member>
        <member name="T:Dt.Base.Report.RptRoot">
            <summary>
            报表模板根元素
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptRoot.Serializing">
            <summary>
            序列化开始前
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptRoot.Serialized">
            <summary>
            序列化结束后
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptRoot.ItemsChanged">
            <summary>
            报表项增删事件
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptRoot.TextChanged">
            <summary>
            文本项属性值变化事件
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptRoot.ItemValueChanged">
            <summary>
            报表项值变化事件
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptRoot.Updated">
            <summary>
            报表项更新事件
            </summary>
        </member>
        <member name="E:Dt.Base.Report.RptRoot.CellValueChanged">
            <summary>
            模板中值变化事件
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRoot.Params">
            <summary>
            获取报表参数
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRoot.Data">
            <summary>
            获取报表数据源
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRoot.PageSetting">
            <summary>
            获取报表页面设置
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRoot.Header">
            <summary>
            获取报表页眉
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRoot.Body">
            <summary>
            获取报表模板
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRoot.Footer">
            <summary>
            获取报表页脚
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRoot.ViewSetting">
            <summary>
            默认报表预览窗口的设置
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRoot.Inst">
            <summary>
            获取报表实例
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptRoot.Cols">
            <summary>
            获取设置所有列宽
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptRoot.IsValid">
            <summary>
            检查报表模板是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Report.RptRoot.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.Report.RptRoot.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化xml
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Base.Report.RptRoot.Build(Dt.Base.Report.RptRootInst)">
            <summary>
            构造报表实例
            </summary>
            <param name="p_inst"></param>
        </member>
        <member name="M:Dt.Base.Report.RptRoot.OnBeforeSerialize">
            <summary>
            触发序列化开始前事件
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptRoot.OnAfterSerialize">
            <summary>
            触发序列化结束后事件
            </summary>
        </member>
        <member name="M:Dt.Base.Report.RptRoot.OnItemsChanged(Dt.Base.Report.RptPart,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            触发报表项增删事件
            </summary>
            <param name="p_container"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptRoot.OnItemValueChanged(Dt.Base.Report.RptItemBase,Dt.Core.Cell)">
            <summary>
            触发报表项属性值变化事件
            </summary>
            <param name="p_item"></param>
            <param name="p_cell"></param>
        </member>
        <member name="M:Dt.Base.Report.RptRoot.OnCellValueChanged(System.Object,Dt.Core.Cell)">
            <summary>
            触发模板中值变化事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Report.RptRoot.OnUpdated(Dt.Base.Report.RptItem,System.Boolean)">
            <summary>
            触发报表项更新事件
            </summary>
            <param name="p_item"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Base.Report.RptViewSetting">
            <summary>
            默认报表预览窗口的设置
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptViewSetting.Root">
            <summary>
            获取报表模板根对象
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptViewSetting.Data">
            <summary>
            预览设置数据源
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptViewSetting.Script">
            <summary>
            报表脚本类型，形如 Dt.Base.MyScript,Dt.Base
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptViewSetting.ShowSearchForm">
            <summary>
            获取设置是否显示报表查询面板，默认true，报表组时始终true
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptViewSetting.AutoQuery">
            <summary>
            获取设置初次加载时是否自动执行查询，前提是Params参数值提供完备，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptViewSetting.ShowColHeader">
            <summary>
            获取设置Worksheet是否显示列头，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptViewSetting.ShowRowHeader">
            <summary>
            获取设置Worksheet是否显示行头，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptViewSetting.ShowGridLine">
            <summary>
            获取设置Worksheet是否显示网格，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptViewSetting.ShowMenu">
            <summary>
            获取设置是否显示工具栏菜单，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.Report.RptViewSetting.ShowContextMenu">
            <summary>
            获取设置是否显示上下文菜单，默认true
            </summary>
        </member>
        <member name="T:Dt.Base.RptDesignInfo">
            <summary>
            报表设计的描述信息
            </summary>
            <summary>
            报表设计的描述信息
            </summary>
        </member>
        <member name="E:Dt.Base.RptDesignInfo.TemplateChanged">
            <summary>
            切换模板事件
            </summary>
        </member>
        <member name="E:Dt.Base.RptDesignInfo.DirtyChanged">
            <summary>
            模板修改变化事件
            </summary>
        </member>
        <member name="E:Dt.Base.RptDesignInfo.Saved">
            <summary>
            模板保存后事件
            </summary>
        </member>
        <member name="E:Dt.Base.RptDesignInfo.PageSettingChanged">
            <summary>
            页面设置变化事件
            </summary>
        </member>
        <member name="M:Dt.Base.RptDesignInfo.InitTemplate">
            <summary>
            初始化报表模板
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RptDesignInfo.ImportTemplate(System.String)">
            <summary>
            导入报表模板
            </summary>
            <param name="p_define"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RptDesignInfo.SaveTemplate">
            <summary>
            保存报表模板
            </summary>
        </member>
        <member name="M:Dt.Base.RptDesignInfo.ExecuteCmd(Dt.Base.Report.RptCmdBase,System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_cmd"></param>
            <param name="p_args"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RptDesignInfo.Undo">
            <summary>
            撤消命令
            </summary>
        </member>
        <member name="M:Dt.Base.RptDesignInfo.Redo">
            <summary>
            重做
            </summary>
        </member>
        <member name="M:Dt.Base.RptDesignInfo.OnItemValueChanged(System.Object,Dt.Core.Cell)">
            <summary>
            记录报表项属性值变化，提供可撤消和重做功能
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Dt.Base.RptDesignInfo.Name">
            <summary>
            获取设置报表名称，作为唯一标识识别窗口用
            </summary>
        </member>
        <member name="M:Dt.Base.RptDesignInfo.ReadTemplate">
            <summary>
            读取模板内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RptDesignInfo.SaveTemplate(System.String)">
            <summary>
            保存模板内容
            </summary>
            <param name="p_xml"></param>
        </member>
        <member name="T:Dt.Base.RptInfo">
            <summary>
            报表描述信息
            提供报表模板三种方式优先级：
            1. 直接提供RptRoot对象，内部使用，如报表编辑时预览
            2. 重写 ReadTemplate 方法，模板在其他位置时
            3. 默认通过Name查询本地db数据加载模板
            </summary>
        </member>
        <member name="P:Dt.Base.RptInfo.Name">
            <summary>
            获取设置报表名称，作为唯一标识识别窗口用
            </summary>
        </member>
        <member name="P:Dt.Base.RptInfo.Params">
            <summary>
            获取设置报表数据的查询参数，初始化时做为预输入参数
            </summary>
        </member>
        <member name="P:Dt.Base.RptInfo.CacheTemplate">
            <summary>
            是否缓存报表模板，默认true
            </summary>
        </member>
        <member name="M:Dt.Base.RptInfo.ReadTemplate">
            <summary>
            读取模板内容，重写可自定义读取模板过程
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RptInfo.GetData(System.String)">
            <summary>
            根据数据名称获取数据
            </summary>
            <param name="p_name">数据名称</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RptInfo.BuildParamsRow">
            <summary>
            根据初始参数值生成Row，常用来给查询面板提供数据源
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RptInfo.BuildParamsDict">
            <summary>
            根据初始参数值生成查询参数字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RptInfo.UpdateParams(Dt.Core.Row)">
            <summary>
            更新查询参数
            </summary>
            <param name="p_row"></param>
        </member>
        <member name="P:Dt.Base.RptInfo.Sheet">
            <summary>
            获取报表要输出的Sheet
            </summary>
        </member>
        <member name="P:Dt.Base.RptInfo.Root">
            <summary>
            获取设置报表模板根节点
            </summary>
        </member>
        <member name="P:Dt.Base.RptInfo.Inst">
            <summary>
            获取设置报表实例
            </summary>
        </member>
        <member name="P:Dt.Base.RptInfo.ScriptObj">
            <summary>
            脚本对象
            </summary>
        </member>
        <member name="P:Dt.Base.RptInfo.ViewMenu">
            <summary>
            报表组时当前报表预览的工具栏菜单
            </summary>
        </member>
        <member name="M:Dt.Base.RptInfo.Init">
            <summary>
            初始化模板、脚本、参数默认值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RptInfo.IsParamsValid">
            <summary>
            查询参数是否完备有效
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.RptScript">
            <summary>
            报表脚本基类
            </summary>
        </member>
        <member name="P:Dt.Base.RptScript.View">
            <summary>
            报表预览控件
            </summary>
        </member>
        <member name="M:Dt.Base.RptScript.GetData(System.String)">
            <summary>
            根据数据名称获取数据
            </summary>
            <param name="p_name">数据名称</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RptScript.RenderCell(Dt.Cells.Data.Cell,Dt.Base.RptCellArgs)">
            <summary>
            绘制单元格内容和样式
            </summary>
            <param name="p_cell">单元格</param>
            <param name="p_args">单元格脚本参数</param>
        </member>
        <member name="M:Dt.Base.RptScript.GetSearchForm(Dt.Base.RptInfo)">
            <summary>
            获取脚本自定义的报表查询面板
            </summary>
            <param name="p_info"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.RptScript.InitMenu(Dt.Base.Menu)">
            <summary>
            初始化工具栏菜单
            </summary>
            <param name="p_menu"></param>
        </member>
        <member name="M:Dt.Base.RptScript.OpenContextMenu(Dt.Base.Menu)">
            <summary>
            RptView中打开上下文菜单
            </summary>
            <param name="p_contextMenu"></param>
        </member>
        <member name="M:Dt.Base.RptScript.OnCellClick(Dt.Base.RptCellArgs)">
            <summary>
            点击单元格脚本
            </summary>
            <param name="p_args">单元格脚本参数</param>
        </member>
        <member name="T:Dt.Base.IRptSearchForm">
            <summary>
            报表查询面板接口
            </summary>
        </member>
        <member name="E:Dt.Base.IRptSearchForm.Query">
            <summary>
            查询事件
            </summary>
        </member>
        <member name="P:Dt.Base.IRptSearchForm.Menu">
            <summary>
            查询面板菜单
            </summary>
        </member>
        <member name="T:Dt.Base.ValueExpression">
            <summary>
            内置表达式
            </summary>
        </member>
        <member name="P:Dt.Base.ValueExpression.Data">
            <summary>
            内置表达式Drop数据源
            </summary>
        </member>
        <member name="M:Dt.Base.ValueExpression.GetValue(System.String)">
            <summary>
            获取内置表达式的值
            </summary>
            <param name="p_expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.ValueExpression.GetFirstMonthInQuarter(System.DateTime)">
            <summary>
            根据指定时间获取时间对应季度的第一个月
            </summary>
            <param name="p_time">指定时间</param>
            <returns>对应季度的第一个月</returns>
        </member>
        <member name="T:Dt.Base.ValueExpression.ValExp">
            <summary>
            值表达式类型
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.UserID">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.UserName">
            <summary>
            用户姓名
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.Guid">
            <summary>
            新Guid
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.Now">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.LastYear">
            <summary>
            上一年年份
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.Year">
            <summary>
            当前年份
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.NextYear">
            <summary>
            明年年份
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.LastQuarter">
            <summary>
            上一个季度
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.Quarter">
            <summary>
            当前季度
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.NextQuarter">
            <summary>
            下个季度
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.LastMonth">
            <summary>
            上个月月份
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.Month">
            <summary>
            当前月份
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.NextMonth">
            <summary>
            下个月月份
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.Yesterday">
            <summary>
            昨天
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.Today">
            <summary>
            今天
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.Tomorrow">
            <summary>
            明天
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.StartOfToday">
            <summary>
            今天开始时间
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.EndOfToday">
            <summary>
            今天结束时间
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.StartOfYesterday">
            <summary>
            昨天开始时间
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.EndOfYesterday">
            <summary>
            昨天结束时间
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.FirstDayOfMonth">
            <summary>
            当月第一天
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.LastDayOfMonth">
            <summary>
            当月最后一天
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.FirstDayOfLastMonth">
            <summary>
            上个月第一天
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.LastDayOfLastMonth">
            <summary>
            上个月最后一天
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.FirstDayOfYear">
            <summary>
            本年第一天
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.FirstDayOfLastQuarter">
            <summary>
            上季度第一天
            </summary>
        </member>
        <member name="F:Dt.Base.ValueExpression.ValExp.LastDayOfLastQuarter">
            <summary>
            上季度最后一天
            </summary>
        </member>
        <member name="P:Dt.Base.RptView.Info">
            <summary>
            对应的报表描述信息
            </summary>
        </member>
        <member name="P:Dt.Base.RptView.Excel">
            <summary>
            内部Excel
            </summary>
        </member>
        <member name="M:Dt.Base.RptView.LoadReport(Dt.Base.RptInfo)">
            <summary>
            加载报表内容，前提条件:
            <para>报表模板名称</para>
            <para>确保查询参数完备</para>
            </summary>
            <param name="p_info">报表描述信息</param>
        </member>
        <member name="M:Dt.Base.RptView.OnCellClick(System.Object,Dt.Cells.UI.CellClickEventArgs)">
            <summary>
            点击单元格
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.RptView.OnSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            选择改变事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.RptView.AddSheetTable(Dt.Cells.Data.CellRange)">
            <summary>
            添加表格
            </summary>
            <param name="p_range"></param>
        </member>
        <member name="M:Dt.Base.RptView.AddChart(Dt.Cells.Data.CellRange)">
            <summary>
            添加图表
            </summary>
            <param name="p_range"></param>
        </member>
        <member name="M:Dt.Base.RptView.DelSheetTable">
            <summary>
            删除当前选择的表格
            </summary>
        </member>
        <member name="M:Dt.Base.RptView.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            当选中图表的时候，显示图表数据范围，不选中不显示。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.RptView.ClearTable">
            <summary>
            清除表格
            </summary>
        </member>
        <member name="M:Dt.Base.RptView.ClearChart">
            <summary>
            清除图表
            </summary>
        </member>
        <member name="P:Dt.Base.RptView.CmdExport">
            <summary>
            获取导出命令对象
            </summary>
        </member>
        <member name="P:Dt.Base.RptView.CmdPrint">
            <summary>
            获取打印命令对象
            </summary>
        </member>
        <member name="P:Dt.Base.RptView.CmdSearch">
            <summary>
            获取查询命令对象
            </summary>
        </member>
        <member name="P:Dt.Base.RptView.CmdGridLine">
            <summary>
            获取网格命令对象
            </summary>
        </member>
        <member name="P:Dt.Base.RptView.CmdColHeader">
            <summary>
            获取列头命令对象
            </summary>
        </member>
        <member name="P:Dt.Base.RptView.CmdRowHeader">
            <summary>
            获取行头命令对象
            </summary>
        </member>
        <member name="P:Dt.Base.RptView.CmdClearTable">
            <summary>
            获取清除表格命令对象
            </summary>
        </member>
        <member name="P:Dt.Base.RptView.CmdClearChart">
            <summary>
            获取清除图表命令对象
            </summary>
        </member>
        <member name="M:Dt.Base.RptView.DoExport">
            <summary>
            导出
            </summary>
        </member>
        <member name="M:Dt.Base.RptView.DoPrint">
            <summary>
            打印
            </summary>
        </member>
        <member name="M:Dt.Base.RptView.DoSearch">
            <summary>
            查询
            </summary>
        </member>
        <member name="M:Dt.Base.RptView.DoShowGridLine(System.Boolean)">
            <summary>
            显示网格
            </summary>
            <param name="p_show"></param>
        </member>
        <member name="M:Dt.Base.RptView.DoShowColHeader(System.Boolean)">
            <summary>
            显示列头
            </summary>
            <param name="p_show"></param>
        </member>
        <member name="M:Dt.Base.RptView.DoShowRowHeader(System.Boolean)">
            <summary>
            显示行头
            </summary>
            <param name="p_show"></param>
        </member>
        <member name="M:Dt.Base.RptView.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.RptView.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.RptView.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.Sketches.SketchInputManager">
            <summary>
            Sketch输入处理
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SketchInputManager.#ctor(Dt.Base.Sketch)">
            <summary>
            构造方法
            </summary>
            <param name="p_owner"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchInputManager.Init(Windows.UI.Xaml.Controls.Grid,Windows.UI.Xaml.Shapes.Rectangle)">
            <summary>
            初始化
            </summary>
            <param name="p_grid"></param>
            <param name="p_rect"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchInputManager.AttachEvent">
            <summary>
            附加事件
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SketchInputManager.DetachEvent">
            <summary>
            移除事件
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SketchInputManager.OnPointerReleased(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            释放
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchInputManager.OnKeyDown(System.Object,Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            键盘输入
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchInputManager.MoveStep(System.Double,System.Double)">
            <summary>
            方向键移动位置
            </summary>
            <param name="p_x"></param>
            <param name="p_y"></param>
        </member>
        <member name="T:Dt.Base.Sketches.SketchLinkManager">
            <summary>
            连线处理
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SketchLinkManager.#ctor(Dt.Base.Sketch)">
            <summary>
            构造方法
            </summary>
            <param name="p_owner"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchLinkManager.Init(Windows.UI.Xaml.Controls.Primitives.Thumb,Windows.UI.Xaml.Shapes.Line)">
            <summary>
            初始化
            </summary>
            <param name="p_thumb"></param>
            <param name="p_line"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchLinkManager.ShowLinkPt(Dt.Base.SNode,System.Double,System.Double)">
            <summary>
            在指定SNode位置显示连线点(方法内部已判断是否需要显示)
            </summary>
            <param name="p_node"></param>
            <param name="p_x">RightBottom.X</param>
            <param name="p_y">RightBottom.Y</param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchLinkManager.HideLinkPt">
            <summary>
            隐藏连线点
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SketchLinkManager.CaclStart(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            计算线的起点
            </summary>
            <param name="p_node"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketches.SketchLinkManager.GetDistance(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            获取距离给定源最近的点
            </summary>
            <param name="p_pt1"></param>
            <param name="p_pt2"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Sketches.SelectionManager">
            <summary>
            选择管理类
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.#ctor(Dt.Base.Sketch)">
            <summary>
            构造方法
            </summary>
            <param name="p_owner"></param>
        </member>
        <member name="P:Dt.Base.Sketches.SelectionManager.Selection">
            <summary>
            获取当前选择元素列表，不包含选中的连线
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.SelectionManager.SelectedLine">
            <summary>
            获取当前选中的连线
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.Init(Dt.Base.Sketches.NodeSelector,Windows.UI.Xaml.Shapes.Rectangle)">
            <summary>
            初始化
            </summary>
            <param name="p_nodeSelector"></param>
            <param name="p_selRect"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.Select(Windows.UI.Xaml.FrameworkElement,System.Boolean)">
            <summary>
            选择UI元素
            </summary>
            <param name="p_element"></param>
            <param name="p_extend">是否扩展选择</param>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.Select(System.Collections.Generic.List{Windows.UI.Xaml.FrameworkElement})">
            <summary>
            多选UI元素
            </summary>
            <param name="p_items"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.SelectLine(Dt.Base.SLine)">
            <summary>
            选择连线
            </summary>
            <param name="p_line"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.Move(System.Double,System.Double)">
            <summary>
            移动已选择元素
            </summary>
            <param name="p_deltaX"></param>
            <param name="p_deltaY"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.AlignGrid">
            <summary>
            移动结束时对齐到网格
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.ShowTipLines">
            <summary>
            显示所有提示线
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.MoveTipLines">
            <summary>
            更新提示线位置
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.Clear">
            <summary>
            清空选择状态
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.IsInSelectionRect(Windows.Foundation.Point)">
            <summary>
            判断点是否多选矩形内部
            </summary>
            <param name="p_pt"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.GetCurrentPos">
            <summary>
            获取当前选择区域的位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.ClearNode">
            <summary>
            清空所有图元的选择状态
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.ClearLine">
            <summary>
            清空连线的选择状态
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.UpdateAdorner">
            <summary>
            刷新修饰层内容
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.GetAlignPoint(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            获取对齐点位置
            </summary>
            <param name="p_elem"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketches.SelectionManager.BringToFront(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            置顶
            </summary>
            <param name="p_elem"></param>
        </member>
        <member name="T:Dt.Base.Sketches.SketchDeleteCmd">
            <summary>
            删除命令
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SketchDeleteCmd.#ctor(Dt.Base.Sketch,Dt.Core.CmdHistory)">
            <summary>
            构造函数
            </summary>
            <param name="p_owner"></param>
            <param name="p_his"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchDeleteCmd.DoExecute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchDeleteCmd.DoUndo(System.Object)">
            <summary>
            执行撤消
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="T:Dt.Base.Sketches.SketchInsertCmd">
            <summary>
            插入命令
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SketchInsertCmd.#ctor(Dt.Base.Sketch,Dt.Core.CmdHistory)">
            <summary>
            构造函数
            </summary>
            <param name="p_owner"></param>
            <param name="p_his"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchInsertCmd.DoExecute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchInsertCmd.DoUndo(System.Object)">
            <summary>
            执行撤消
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="T:Dt.Base.Sketches.SketchMoveCmd">
            <summary>
            移动命令
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SketchMoveCmd.#ctor(Dt.Base.Sketch,Dt.Core.CmdHistory)">
            <summary>
            构造函数
            </summary>
            <param name="p_owner"></param>
            <param name="p_his"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchMoveCmd.DoExecute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchMoveCmd.DoUndo(System.Object)">
            <summary>
            执行撤消
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="T:Dt.Base.Sketches.SketchMoveCmdArgs">
            <summary>
            移动命令参数
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SketchMoveCmdArgs.#ctor(System.Collections.Generic.List{Windows.UI.Xaml.FrameworkElement},System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="p_items"></param>
            <param name="p_deltaX"></param>
            <param name="p_deltaY"></param>
        </member>
        <member name="P:Dt.Base.Sketches.SketchMoveCmdArgs.Items">
            <summary>
            获取影响到的元素列表
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.SketchMoveCmdArgs.DeltaX">
            <summary>
            获取水平位移
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.SketchMoveCmdArgs.DeltaY">
            <summary>
            获取垂直位移
            </summary>
        </member>
        <member name="T:Dt.Base.Sketches.SketchMoveLineCmd">
            <summary>
            移动连线命令
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SketchMoveLineCmd.#ctor(Dt.Base.Sketch,Dt.Core.CmdHistory)">
            <summary>
            构造函数
            </summary>
            <param name="p_owner"></param>
            <param name="p_his"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchMoveLineCmd.DoExecute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchMoveLineCmd.DoUndo(System.Object)">
            <summary>
            执行撤消
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="M:Dt.Base.Sketches.LineMoveCmdArgs.#ctor(Dt.Base.SLine,System.Boolean,Dt.Base.SNode,Dt.Base.LinkPortPosition)">
            <summary>
            无指向的线（将被删除）的线移动参数构造函数
            </summary>
            <param name="p_line"></param>
            <param name="p_isHeadNode"></param>
            <param name="p_oldNode"></param>
            <param name="p_oldPos"></param>
        </member>
        <member name="M:Dt.Base.Sketches.LineMoveCmdArgs.#ctor(Dt.Base.SLine,System.Boolean,Dt.Base.SNode,Dt.Base.LinkPortPosition,Dt.Base.SNode,Dt.Base.LinkPortPosition)">
            <summary>
            有指向节点的线移动参数构造函数
            </summary>
            <param name="p_line"></param>
            <param name="p_isHeadNode"></param>
            <param name="p_oldNode"></param>
            <param name="p_oldPos"></param>
            <param name="p_newNode"></param>
            <param name="p_newPos"></param>
        </member>
        <member name="T:Dt.Base.Sketches.SketchResizeCmd">
            <summary>
            调整大小命令
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.SketchResizeCmd.#ctor(Dt.Base.Sketch,Dt.Core.CmdHistory)">
            <summary>
            构造函数
            </summary>
            <param name="p_owner"></param>
            <param name="p_his"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchResizeCmd.DoExecute(System.Object)">
            <summary>
            执行命令
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchResizeCmd.DoUndo(System.Object)">
            <summary>
            执行撤消
            </summary>
            <param name="p_parameter"></param>
        </member>
        <member name="M:Dt.Base.Sketches.SketchResizeCmd.SetLoc(Dt.Base.Sketches.NodeSelector,Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Rect)">
            <summary>
            设置新位置
            </summary>
            <param name="p_node"></param>
            <param name="p_taget"></param>
            <param name="p_rect"></param>
        </member>
        <member name="T:Dt.Base.Sketches.ResizeArgs">
            <summary>
            调整大小参数
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.ResizeArgs.#ctor(Dt.Base.Sketches.NodeSelector,Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            调整大小参数
            </summary>
            <param name="p_node">位置点</param>
            <param name="p_oldRect">调整前位置</param>
            <param name="p_newRect">新位置</param>
        </member>
        <member name="P:Dt.Base.Sketches.ResizeArgs.Node">
            <summary>
            获取节点
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.ResizeArgs.Target">
            <summary>
            获取操作的元素
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.ResizeArgs.OldRect">
            <summary>
            获取设置调整前的位置及大小
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.ResizeArgs.NewRect">
            <summary>
            获取设置新位置及大小 
            </summary>
        </member>
        <member name="T:Dt.Base.Sketches.GridLinePanel">
            <summary>
            背景网格面板
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.GridLinePanel.PrepareLines(Windows.Foundation.Rect,System.Boolean)">
            <summary>
            准备网格线
            </summary>
            <param name="p_rc"></param>
            <param name="p_isHor"></param>
        </member>
        <member name="T:Dt.Base.Sketches.LengthUnit">
            <summary>
            提供不同长度单位之间的转换
            </summary>
        </member>
        <member name="T:Dt.Base.Sketches.LengthUnits">
            <summary>
            长度单位类别
            </summary>
        </member>
        <member name="T:Dt.Base.Sketches.LinkPrompt">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.LinkPrompt.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.LinkPrompt.SetValidPos(Dt.Base.LinkPortPosition)">
            <summary>
            设置有效点
            </summary>
            <param name="p_pos"></param>
        </member>
        <member name="T:Dt.Base.Sketches.NodeSelector">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.NodeSelector.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.NodeSelector.Target">
            <summary>
            获取设置节点对象
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.NodeSelector.Owner">
            <summary>
            获取设置所属Sketch
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.NodeSelector.OnApplyTemplate">
            <summary>
            重写
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.NodeSelector.ShowLine(Windows.UI.Xaml.Controls.Primitives.Thumb)">
            <summary>
            根据位置显示对齐线
            </summary>
            <param name="p_thumb"></param>
        </member>
        <member name="M:Dt.Base.Sketches.NodeSelector.SetLoc(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            设置新位置及大小
            </summary>
            <param name="p_left"></param>
            <param name="p_top"></param>
            <param name="p_width"></param>
            <param name="p_height"></param>
        </member>
        <member name="M:Dt.Base.Sketches.NodeSelector.OnAlignGrid">
            <summary>
            对齐到网格
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.NodeSelector.UpdateSelector(Windows.UI.Xaml.Controls.Primitives.Thumb)">
            <summary>
            更新选择点
            </summary>
            <param name="p_thumb"></param>
        </member>
        <member name="T:Dt.Base.Sketches.Ruler">
            <summary>
            水平垂直尺子控件
            </summary>
        </member>
        <member name="F:Dt.Base.Sketches.Ruler.OrientationProperty">
            <summary>
            布局方向
            </summary>
        </member>
        <member name="F:Dt.Base.Sketches.Ruler.OffsetProperty">
            <summary>
            偏移量
            </summary>
        </member>
        <member name="F:Dt.Base.Sketches.Ruler.ScaleProperty">
            <summary>
            比例尺
            </summary>
        </member>
        <member name="F:Dt.Base.Sketches.Ruler.ThicknessProperty">
            <summary>
            水平时的高度或垂直时的宽度
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.Ruler.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.Ruler.Orientation">
            <summary>
            获取设置布局方向
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.Ruler.Offset">
            <summary>
            获取设置偏移量
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.Ruler.Scale">
            <summary>
            获取设置比例尺
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.Ruler.Thickness">
            <summary>
            获取设置尺子水平时的高度或垂直时的宽度
            </summary>
        </member>
        <member name="T:Dt.Base.Sketches.RulerSegment">
            <summary>
            尺子段，如100px为一段，包括5个刻度线一个数字
            </summary>
        </member>
        <member name="F:Dt.Base.Sketches.RulerSegment.IntervalsProperty">
            <summary>
            刻度线个数
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.RulerSegment.Intervals">
            <summary>
            获取设置刻度线个数
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.RulerSegment.StartValue">
            <summary>
            获取设置起始刻度值
            </summary>
        </member>
        <member name="T:Dt.Base.Sketches.SketchSelectorPanel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Base.Sketches.Tick">
            <summary>
            刻度线及刻度值
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.Tick.Segment">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Base.Sketches.Tick.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Base.Sketches.Tick.GetLinePoint(System.Double,System.Double,Dt.Base.Sketches.TickAlignment@)">
            <summary>
            
            </summary>
            <param name="segmentWidth"></param>
            <param name="segmentHeight"></param>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Sketches.TickAlignment">
            <summary>
            刻度对齐方式
            </summary>
        </member>
        <member name="T:Dt.Base.ShapesType">
            <summary>
            背景图形
            </summary>
        </member>
        <member name="T:Dt.Base.LinkPortPosition">
            <summary>
            图元连接点位置
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortPosition.LeftTop">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortPosition.LeftCenter">
            <summary>
            左中
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortPosition.LeftBottom">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortPosition.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortPosition.RightCenter">
            <summary>
            右中
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortPosition.RightBottom">
            <summary>
            右下
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortPosition.TopCenter">
            <summary>
            上中
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortPosition.BottomCenter">
            <summary>
            下中
            </summary>
        </member>
        <member name="T:Dt.Base.LinkPortShapes">
            <summary>
            连接线端点图形
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortShapes.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortShapes.Arrow">
            <summary>
            箭头
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortShapes.Diamond">
            <summary>
            菱形
            </summary>
        </member>
        <member name="F:Dt.Base.LinkPortShapes.Circle">
            <summary>
            圆
            </summary>
        </member>
        <member name="T:Dt.Base.Sketch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.Sketch.ShowHorRulerProperty">
            <summary>
            是否显示水平尺子
            </summary>
        </member>
        <member name="F:Dt.Base.Sketch.ShowVerRulerProperty">
            <summary>
            是否显示垂直尺子
            </summary>
        </member>
        <member name="F:Dt.Base.Sketch.ShowGridLineProperty">
            <summary>
            是否显示网格，默认false
            </summary>
        </member>
        <member name="F:Dt.Base.Sketch.IsReadOnlyProperty">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="F:Dt.Base.Sketch.PageWidthProperty">
            <summary>
            页面宽度
            </summary>
        </member>
        <member name="F:Dt.Base.Sketch.PageHeightProperty">
            <summary>
            页面高度
            </summary>
        </member>
        <member name="F:Dt.Base.Sketch.AlignGridProperty">
            <summary>
            编辑时图元是否与网格对齐
            </summary>
        </member>
        <member name="E:Dt.Base.Sketch.Added">
            <summary>
            添加项事件
            </summary>
        </member>
        <member name="E:Dt.Base.Sketch.Deleted">
            <summary>
            删除后事件
            </summary>
        </member>
        <member name="E:Dt.Base.Sketch.Tapped">
            <summary>
            Tap事件
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.ShowHorRuler">
            <summary>
            获取设置是否显示水平尺子，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.ShowVerRuler">
            <summary>
            获取设置是否显示垂直尺子，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.ShowGridLine">
            <summary>
            获取设置是否显示网格，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.IsReadOnly">
            <summary>
            获取设置是否只读，默认true，只读时节点可点击无选择状态，非只读主要提供给流程图绘制用
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.PageWidth">
            <summary>
            获取设置页面宽度
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.PageHeight">
            <summary>
            获取设置页面高度
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.AlignGrid">
            <summary>
            获取设置编辑时图元是否与网格对齐
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.SelectedNodes">
            <summary>
            获取当前选择元素列表，不包含选中的连线
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.SelectedLine">
            <summary>
            获取当前选中的连线
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.His">
            <summary>
            历史命令
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.CmdUndo">
            <summary>
            获取撤消命令
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.CmdRedo">
            <summary>
            获取重做命令
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.CmdDeleteSelection">
            <summary>
            获取删除所有选择项命令，提供给界面绑定
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.CmdPropHis">
            <summary>
            获取依赖属性历史命令
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.CmdResize">
            <summary>
            获取Resize命令
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.CmdMove">
            <summary>
            获取移动命令
            </summary>
        </member>
        <member name="P:Dt.Base.Sketch.CmdMoveLine">
            <summary>
            获取移动连线命令
            </summary>
        </member>
        <member name="M:Dt.Base.Sketch.Insert(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            插入新项
            </summary>
            <param name="p_elem"></param>
        </member>
        <member name="M:Dt.Base.Sketch.DeleteSelection">
            <summary>
            删除所有选择项
            </summary>
        </member>
        <member name="M:Dt.Base.Sketch.SetNodePos(Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Point)">
            <summary>
            设置节点的位置，此位置未考虑尺子及对齐到网格
            </summary>
            <param name="p_elem"></param>
            <param name="p_pos"></param>
        </member>
        <member name="M:Dt.Base.Sketch.GetItemByPosition(Windows.Foundation.Point)">
            <summary>
            查询指定点所在的图元
            </summary>
            <param name="p_pt"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketch.GetItemsByRegion(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            指定区域包含的所有图元
            </summary>
            <param name="p_left"></param>
            <param name="p_top"></param>
            <param name="p_right"></param>
            <param name="p_bottom"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketch.IsValidRegion(Windows.Foundation.Rect)">
            <summary>
            判定传入的区域是否在sketch的对象的有效区域
            </summary>
            <param name="p_rect"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketch.GetFirstIntersect(Windows.Foundation.Rect)">
            <summary>
            获得最上面的相交对象
            </summary>
            <param name="p_rect"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketch.GetLinkPosition(Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Rect)">
            <summary>
            获得指定对象的链接位置
            注意：使用条件为：p_target 不为空，并且 P_target 的矩形与 p_rect 相交。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketch.RefreshLinkLines(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            刷新与指定元素连接的连线
            </summary>
            <param name="p_elem"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketch.RefreshAllLines">
            <summary>
            刷新所有连线
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketch.OnSelectionChanged">
            <summary>
            选择变化
            </summary>
        </member>
        <member name="M:Dt.Base.Sketch.CalcPageSize">
            <summary>
            计算非只读下页面大小；
            如果元素都在当前页面则页面大小为可视区域，否则为最右侧、最下方的值
            </summary>
        </member>
        <member name="M:Dt.Base.Sketch.ReadXml(System.String)">
            <summary>
            加载xml字符串
            </summary>
            <param name="p_xml"></param>
        </member>
        <member name="M:Dt.Base.Sketch.WriteXml">
            <summary>
            序列化xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketch.ShowTopLine(System.Double)">
            <summary>
            显示顶部提示线
            </summary>
            <param name="p_y"></param>
        </member>
        <member name="M:Dt.Base.Sketch.ShowBottomLine(System.Double)">
            <summary>
            显示底部提示线
            </summary>
            <param name="p_y"></param>
        </member>
        <member name="M:Dt.Base.Sketch.ShowLeftLine(System.Double)">
            <summary>
            显示左侧提示线
            </summary>
            <param name="p_x"></param>
        </member>
        <member name="M:Dt.Base.Sketch.ShowRightLine(System.Double)">
            <summary>
            显示右侧提示线
            </summary>
            <param name="p_x"></param>
        </member>
        <member name="M:Dt.Base.Sketch.ShowTipLines">
            <summary>
            显示所有提示线
            </summary>
        </member>
        <member name="M:Dt.Base.Sketch.MoveTipLines(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            定位提示线
            </summary>
            <param name="p_left"></param>
            <param name="p_top"></param>
            <param name="p_right"></param>
            <param name="p_bottom"></param>
        </member>
        <member name="M:Dt.Base.Sketch.HideTipLines">
            <summary>
            隐藏所有提示线
            </summary>
        </member>
        <member name="M:Dt.Base.Sketch.LinkThumbMove(Windows.UI.Xaml.Controls.Primitives.Thumb)">
            <summary>
            拖拽（连接点公共部分处理）
            </summary>
            <param name="p_thumb">点实例</param>
        </member>
        <member name="M:Dt.Base.Sketch.LinkThumbEnd">
            <summary>
            拖拽结束
            </summary>
        </member>
        <member name="M:Dt.Base.Sketch.CalcRect">
            <summary>
            计算整个图形大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Sketch.ResizeEditPage(Windows.Foundation.Rect)">
            <summary>
            重置编辑页面大小
            </summary>
            <param name="p_totalRect"></param>
        </member>
        <member name="M:Dt.Base.Sketch.ResizeReadOnlyPage(Windows.Foundation.Rect)">
            <summary>
            重置浏览页面大小，将图形区域居中
            </summary>
            <param name="p_totalRect"></param>
        </member>
        <member name="M:Dt.Base.Sketch.ScrollIntoHorCenter">
            <summary>
            滚动至水平居中
            </summary>
        </member>
        <member name="M:Dt.Base.Sketch.OnAdded(System.Collections.Generic.List{Windows.UI.Xaml.FrameworkElement})">
            <summary>
            触发增加后事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Sketch.OnDeleted(System.Collections.Generic.List{Windows.UI.Xaml.FrameworkElement})">
            <summary>
            触发删除后事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Base.ContentPresenterSelector">
            <summary>
            ContentPresenter中ContentTemplateSelector
            </summary>
        </member>
        <member name="T:Dt.Base.SLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.HeaderPortProperty">
            <summary>
            起始连接点位置
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.TailPortProperty">
            <summary>
            结束连接点位置
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.HeaderShapeProperty">
            <summary>
            起始端点类型
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.TailShapeProperty">
            <summary>
            结束端点类型
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.HeadTailSizeProperty">
            <summary>
            端点大小
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.LineThicknessProperty">
            <summary>
            连线的粗细
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.IsStraightLineProperty">
            <summary>
            是否为直线连接
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.TitleProperty">
            <summary>
            标题文字
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.LinkPathGeometryProperty">
            <summary>
            连线的几何图形
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.HeaderGeometryProperty">
            <summary>
            连线头几何图形
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.TailGeometryProperty">
            <summary>
            连线尾几何图形
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.HeaderLeftProperty">
            <summary>
            连线头位置
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.HeaderTopProperty">
            <summary>
            连线头位置
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.TailLeftProperty">
            <summary>
            连线尾位置
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.TailTopProperty">
            <summary>
            连线尾位置
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.LabelLeftProperty">
            <summary>
            标题文字的位置
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.LabelTopProperty">
            <summary>
            标题文字的位置
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.LabelAngleProperty">
            <summary>
            标题文字的旋转角度
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.ThumbVisibilityProperty">
            <summary>
            是否显示调节器
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.HeaderID">
            <summary>
            获取设置连线起始节点的标识
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.HeaderPort">
            <summary>
            获取设置起始连接点位置
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.HeaderShape">
            <summary>
            获取设置起始端点类型
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.TailID">
            <summary>
            获取设置连线结束节点的标识
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.TailPort">
            <summary>
            获取设置结束连接点位置
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.TailShape">
            <summary>
            获取设置结束端点类型
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.ID">
            <summary>
            获取设置流程图中的迁移标识
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.HeadTailSize">
            <summary>
            获取设置端点大小，默认20
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.LineThickness">
            <summary>
            获取设置连线的粗细，默认4
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.IsStraightLine">
            <summary>
            获取设置是否为直线连接
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.Title">
            <summary>
            获取设置标题文字
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.LinkPathGeometry">
            <summary>
            获取设置连线的几何图形
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.HeaderGeometry">
            <summary>
            获取设置连线头几何图形
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.TailGeometry">
            <summary>
            获取设置连线尾几何图形
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.HeaderLeft">
            <summary>
            获取设置连线头位置
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.HeaderTop">
            <summary>
            获取设置连线头位置
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.TailLeft">
            <summary>
            获取设置连线尾位置
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.TailTop">
            <summary>
            获取设置连线尾位置
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.LabelLeft">
            <summary>
            获取设置标题文字的位置
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.LabelTop">
            <summary>
            获取设置标题文字的位置
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.LabelAngle">
            <summary>
            获取设置标题文字的旋转角度
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.ThumbVisibility">
            <summary>
            获取设置是否显示调节器
            </summary>
        </member>
        <member name="P:Dt.Base.SLine.Bounds">
            <summary>
            获取设置连线的实际区域
            </summary>
        </member>
        <member name="M:Dt.Base.SLine.Refresh">
            <summary>
            更新连线
            </summary>
        </member>
        <member name="M:Dt.Base.SLine.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.SLine.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化xml
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Base.SLine.UpdateThumbsPos">
            <summary>
            更新头尾thumb的位置
            </summary>
        </member>
        <member name="M:Dt.Base.SLine.UpdateAnThumbPos(System.Boolean)">
            <summary>
            更新头或尾节点手柄位置
            </summary>
            <param name="p_isHead">true 头节点，false 尾节点</param>
        </member>
        <member name="M:Dt.Base.SLine.OnApplyTemplate">
            <summary>
            应用模板
            </summary>
        </member>
        <member name="M:Dt.Base.SLine.OnPointerPressed(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标点击
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.SLine.LineThumbDragDelta(Windows.UI.Xaml.Controls.Primitives.Thumb,System.Boolean,Windows.UI.Xaml.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            拖动thumb,改变Thumb的样式 1 拖动不删除，2 拖动删除 3 在有效区域内。
            </summary>
            <param name="p_thumb"></param>
            <param name="p_isHead"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.SLine.LineThumbDragCompleted(Windows.UI.Xaml.Controls.Primitives.Thumb,System.Boolean,Windows.UI.Xaml.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            完成thumb的拖动
            </summary>
            <param name="p_thumb"></param>
            <param name="p_isHeadNode"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.SLine.UpdateHeader">
            <summary>
            更新头端点
            </summary>
        </member>
        <member name="M:Dt.Base.SLine.UpdateTail">
            <summary>
            更新尾端点
            </summary>
        </member>
        <member name="M:Dt.Base.SLine.UpdateShape(Dt.Base.LinkPortShapes,System.Boolean)">
            <summary>
            更新端点图形
            </summary>
            <param name="p_shape"></param>
            <param name="p_isHeader"></param>
        </member>
        <member name="M:Dt.Base.SLine.DrawStraightLine">
            <summary>
            绘制直线
            </summary>
        </member>
        <member name="M:Dt.Base.SLine.DrawHorLine(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            绘制水平线
            </summary>
            <param name="p_start"></param>
            <param name="p_end"></param>
        </member>
        <member name="M:Dt.Base.SLine.DrawVerLine(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            绘制垂直线
            </summary>
            <param name="p_start"></param>
            <param name="p_end"></param>
        </member>
        <member name="M:Dt.Base.SLine.DrawSlantLine(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            绘制斜线
            </summary>
            <param name="p_start"></param>
            <param name="p_end"></param>
        </member>
        <member name="M:Dt.Base.SLine.DrawEmptyLine">
            <summary>
            绘制无节点的空线
            </summary>
        </member>
        <member name="M:Dt.Base.SLine.GetLinkPortPosition(Windows.UI.Xaml.FrameworkElement,Dt.Base.LinkPortPosition)">
            <summary>
            获取连接点位置
            </summary>
            <param name="p_node"></param>
            <param name="p_pos"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.UpdateDirectPath(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            更新直线路径
            </summary>
            <param name="p_start"></param>
            <param name="p_end"></param>
        </member>
        <member name="M:Dt.Base.SLine.UpdatePathGeometry(System.Collections.Generic.List{Windows.Foundation.Point})">
            <summary>
            更新连线路径
            </summary>
            <param name="p_linkPoints"></param>
        </member>
        <member name="M:Dt.Base.SLine.UpdateBounds">
            <summary>
            更新线的区域范围
            </summary>
        </member>
        <member name="M:Dt.Base.SLine.UpdateHeadNodePos(System.Double,System.Double)">
            <summary>
            更新头端点位置
            </summary>
            <param name="p_x"></param>
            <param name="p_y"></param>
        </member>
        <member name="M:Dt.Base.SLine.UpdateTailNodePos(System.Double,System.Double)">
            <summary>
            更新尾端点位置
            </summary>
            <param name="p_x"></param>
            <param name="p_y"></param>
        </member>
        <member name="M:Dt.Base.SLine.IsEfectDrag(Windows.UI.Xaml.Controls.Primitives.Thumb,System.Boolean,System.Double)">
            <summary>
            是否有效拖动， 是 true 否 false
            </summary>
            <param name="p_thumb"></param>
            <param name="p_isHead"></param>
            <param name="p_notValidLongth"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.CalDistence(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            计算两点之间的距离
            </summary>
            <param name="p_start"></param>
            <param name="p_end"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.UpdateLines">
            <summary>
            在两个任务节点之间画线：确定连线的点。
            原则：尽量减少线段数量，使其符合画流程图的一般使用习惯。
            方法：首先确定 plainDis（安全距离），
            即一般情况下节点出门线段的长度。如在头节点上方中点开始连线，
            则默认起始线段为头节点上方长度为 plainDis 的线段；
            其次：根据头节点及尾节点起始线段的起点和中点的方位关系匹配出16中情况；
            再次：在每种情况中，根据起始点和终止点的方位关系进行处理。
            如：头节点起始线段是水平的，则开始按起始点左右划分，如是垂直的则开始按上下划分。
            最后：在划分后进行连线，在连线过程中，能够以直线或直角连线的尽量用直线和直角连线。
            连线中尽量避免线段穿过头节点及尾节点的情况，但头节点和尾节点相交的时候打破此规则。
            发生不能以直线和直角线连接的情况时，要在头尾节点的中点处进行分解。
            </summary>
        </member>
        <member name="M:Dt.Base.SLine.DrawLine(System.Collections.Generic.List{Windows.Foundation.Point})">
            <summary>
            最后画线函数，包括更新thumbs位置，头图形及画线函数。
            </summary>
            <param name="p_points"></param>
        </member>
        <member name="M:Dt.Base.SLine.GetLinesPoints(Windows.Foundation.Rect,Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Point,System.Boolean)">
            <summary>
            从  p_rect 的 start 点，引出正交线到 p_middle 为远点的坐标轴上，返回经过
            的点。
            </summary>
            <param name="p_rect"> node extention 范围的矩形</param>
            <param name="p_start"></param>
            <param name="p_ext"></param>
            <param name="p_middle"></param>
            <param name="p_isLandscape"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.UpdateEndLayout(System.Collections.Generic.List{Windows.Foundation.Point})">
            <summary>
            更新端点图形
            </summary>
            <param name="p_points"> 用于生成最后连线的点</param>
        </member>
        <member name="M:Dt.Base.SLine.GetRelativePoint(Dt.Base.SNode,Dt.Base.LinkPortPosition,System.Double)">
            <summary>
            在snode外面虚拟设置16个点，作为连线与snod链接的必经点（角上的点可能只经过一个。）
            本功能是获得指定连接点的对应点。在角上的对应点按顺时针排列
            </summary>
            <param name="p_node"></param>
            <param name="p_pos"></param>
            <param name="p_distance"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.GetEleRect(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            获得对象的矩形
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.GetRectCenter(Windows.Foundation.Rect)">
            <summary>
            获得矩形中心点坐标
            </summary>
            <param name="p_rect"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.GetLeanPort(Dt.Base.LinkPortPosition,System.Int32,System.Boolean)">
            <summary>
            获得顺时针或者逆时针方向相邻的第n个点
            </summary>
            <param name="p_port"> 基准LinkPortPosition位置 </param>
            <param name="p_count"> 与本位置相差的数量 </param>
            <param name="p_clockwise"> 是否顺时针查找 </param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.GetPosRelation(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
             获得两点位置关系，p_relative 相对于 p_reference 的关系，p_reference是参照点。
            </summary>
            <param name="p_reference"></param>
            <param name="p_relative"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.RectContain(Windows.Foundation.Rect,Windows.Foundation.Rect)">
            <summary>
            判定 Rect p_source 是否包含 Rect p_target
            </summary>
            <param name="p_source"></param>
            <param name="p_target"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.GetPotRectRel(Windows.Foundation.Point,Windows.Foundation.Rect)">
            <summary>
            获得点相对于矩形的关系。
            </summary>
            <param name="p_point"></param>
            <param name="p_rect"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.IsHorPointsCrossRect(Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Rect)">
            <summary>
            判断 连线 为水平直线的两点 是否贯穿矩形内部
            </summary>
            <param name="p_p1"></param>
            <param name="p_p2"></param>
            <param name="p_rect"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SLine.IsVerPointsCrossRect(Windows.Foundation.Point,Windows.Foundation.Point,Windows.Foundation.Rect)">
            <summary>
            判断 连线 为垂直直线的两点 是否贯穿矩形内部
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.SLine.PosRelation">
            <summary>
            位置关系枚举
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.PointRectRelation.None">
            <summary>
            不确定
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.PointRectRelation.In">
            <summary>
            点在矩形里面
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.PointRectRelation.On">
            <summary>
            点在矩形边上
            </summary>
        </member>
        <member name="F:Dt.Base.SLine.PointRectRelation.Out">
            <summary>
            点在矩形外面
            </summary>
        </member>
        <member name="T:Dt.Base.SNode">
            <summary>
            流程图节点
            </summary>
        </member>
        <member name="F:Dt.Base.SNode.TitleProperty">
            <summary>
            标题文字
            </summary>
        </member>
        <member name="F:Dt.Base.SNode.ShapeProperty">
            <summary>
            背景图形名称
            </summary>
        </member>
        <member name="F:Dt.Base.SNode.FlagProperty">
            <summary>
            状态图形名称
            </summary>
        </member>
        <member name="F:Dt.Base.SNode.ContentProperty">
            <summary>
            内容
            </summary>
        </member>
        <member name="F:Dt.Base.SNode.NodeShapeProperty">
            <summary>
            图形定义
            </summary>
        </member>
        <member name="F:Dt.Base.SNode.IconShapeProperty">
            <summary>
            图标的图形定义
            </summary>
        </member>
        <member name="F:Dt.Base.SNode.FlagShapeProperty">
            <summary>
            状态的图形定义
            </summary>
        </member>
        <member name="M:Dt.Base.SNode.#ctor(Dt.Base.Sketch)">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="E:Dt.Base.SNode.Click">
            <summary>
            图元点击事件
            </summary>
        </member>
        <member name="P:Dt.Base.SNode.ID">
            <summary>
            获取设置流程图中的图元标识
            </summary>
        </member>
        <member name="P:Dt.Base.SNode.Title">
            <summary>
            获取设置标题文字
            </summary>
        </member>
        <member name="P:Dt.Base.SNode.Shape">
            <summary>
            获取设置背景图形名称
            </summary>
        </member>
        <member name="P:Dt.Base.SNode.Flag">
            <summary>
            获取设置状态图形名称
            </summary>
        </member>
        <member name="P:Dt.Base.SNode.Content">
            <summary>
            获取设置内容
            </summary>
        </member>
        <member name="P:Dt.Base.SNode.NodeShape">
            <summary>
            获取设置图形定义(绑定用)
            </summary>
        </member>
        <member name="P:Dt.Base.SNode.IconShape">
            <summary>
            获取设置图标的图形定义(绑定用)
            </summary>
        </member>
        <member name="P:Dt.Base.SNode.FlagShape">
            <summary>
            获取设置状态的图形定义(绑定用)
            </summary>
        </member>
        <member name="M:Dt.Base.SNode.ReadXml(System.Xml.XmlReader)">
            <summary>
            加载xml
            </summary>
            <param name="p_reader"></param>
        </member>
        <member name="M:Dt.Base.SNode.WriteXml(System.Xml.XmlWriter)">
            <summary>
            序列化xml
            </summary>
            <param name="p_writer"></param>
        </member>
        <member name="M:Dt.Base.SNode.OnApplyTemplate">
            <summary>
            应用模板
            </summary>
        </member>
        <member name="M:Dt.Base.SNode.OnPointerEntered(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标进入
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.SNode.OnPointerPressed(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标点击
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.SNode.OnPointerReleased(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            抬起
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.SNode.OnPointerExited(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标移出
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.SNode.SavePropertyChange(Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            记录属性变化历史以备撤消
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.SNode.GetTaskIcon(System.String)">
            <summary>
            根据任务类型返回不同的path
            </summary>
            <param name="p_name"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SNode.UpdateShape">
            <summary>
            更新背景图形
            </summary>
        </member>
        <member name="M:Dt.Base.SNode.UpdateContentState">
            <summary>
            内容切换时更改状态
            </summary>
        </member>
        <member name="M:Dt.Base.SNode.OnAnimationCompleted(System.Object,System.Object)">
            <summary>
            动画结束后触发点击事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.SNode.BuildScaleXAnimation">
            <summary>
            x轴缩放动画
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SNode.BuildScaleYAnimation">
            <summary>
            y轴缩放动画
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.SNode.BuildAnimation(Dt.Base.SNode.PointerDirection)">
            <summary>
            综合动画
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.SNode.PointerDirection">
            <summary>
            点击位置
            </summary>
        </member>
        <member name="T:Dt.Base.Desktop">
            <summary>
            桌面容器
            </summary>
        </member>
        <member name="F:Dt.Base.Desktop.MainWinProperty">
            <summary>
            内部主窗口
            </summary>
        </member>
        <member name="F:Dt.Base.Desktop.LeftWinProperty">
            <summary>
            停靠在左侧的窗口
            </summary>
        </member>
        <member name="F:Dt.Base.Desktop.RightWinProperty">
            <summary>
            停靠在右侧的窗口
            </summary>
        </member>
        <member name="P:Dt.Base.Desktop.Inst">
            <summary>
            获取桌面实例
            </summary>
        </member>
        <member name="M:Dt.Base.Desktop.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:Dt.Base.Desktop.MainWin">
            <summary>
            获取设置内部主窗口
            </summary>
        </member>
        <member name="P:Dt.Base.Desktop.HomeWin">
            <summary>
            获取主页窗口
            </summary>
        </member>
        <member name="P:Dt.Base.Desktop.LeftWin">
            <summary>
            获取设置停靠在左侧的窗口
            </summary>
        </member>
        <member name="P:Dt.Base.Desktop.RightWin">
            <summary>
            获取设置停靠在右侧的窗口
            </summary>
        </member>
        <member name="P:Dt.Base.Desktop.Items">
            <summary>
            获取窗口集合
            </summary>
        </member>
        <member name="M:Dt.Base.Desktop.ShowNewWin(Dt.Base.Win)">
            <summary>
            显示新窗口并缓存
            </summary>
            <param name="p_win">窗口</param>
        </member>
        <member name="M:Dt.Base.Desktop.ActiveWin(Dt.Base.Win)">
            <summary>
            激活窗口
            </summary>
            <param name="p_win">窗口</param>
            <returns>是否激活成功</returns>
        </member>
        <member name="M:Dt.Base.Desktop.ActiveWin(System.Type,System.Object)">
            <summary>
            根据窗口类型和初始参数激活窗口
            </summary>
            <param name="p_type">窗口类型</param>
            <param name="p_params">初始参数</param>
            <returns>激活的窗口</returns>
        </member>
        <member name="M:Dt.Base.Desktop.CloseWin(Dt.Base.Win)">
            <summary>
            关闭窗口并从缓存中移除，激活下一窗口
            </summary>
            <param name="p_win">窗口</param>
        </member>
        <member name="M:Dt.Base.Desktop.CloseExcept(Dt.Base.Win)">
            <summary>
            关闭其他窗口
            </summary>
            <param name="p_win"></param>
        </member>
        <member name="M:Dt.Base.Desktop.DoSwap(Dt.Base.TaskbarItem,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            拖拽任务栏项
            </summary>
            <param name="p_src"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Desktop.ResizeAllItems">
            <summary>
            重置任务栏按扭的宽度
            </summary>
        </member>
        <member name="T:Dt.Base.HomebarItem">
            <summary>
            主页按钮
            </summary>
        </member>
        <member name="T:Dt.Base.Splitter">
            <summary>
            桌面分隔栏
            </summary>
        </member>
        <member name="E:Dt.Base.Splitter.CloseLeft">
            <summary>
            关闭左侧区域事件
            </summary>
        </member>
        <member name="E:Dt.Base.Splitter.CloseRight">
            <summary>
            关闭右侧区域事件
            </summary>
        </member>
        <member name="T:Dt.Base.TaskbarItem">
            <summary>
            任务栏按扭
            </summary>
        </member>
        <member name="T:Dt.Base.Dlg">
            <summary>
            对话框容器
            </summary>
        </member>
        <member name="E:Dt.Base.Dlg.Closing">
            <summary>
            对话框正在关闭事件，可以取消关闭
            </summary>
        </member>
        <member name="E:Dt.Base.Dlg.Closed">
            <summary>
            对话框关闭后事件
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.Title">
            <summary>
            获取设置标题文字
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.Menu">
            <summary>
            获取设置菜单
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.HideTitleBar">
            <summary>
            获取设置是否隐藏标题栏
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.WinPlacement">
            <summary>
            获取设置windows模式的显示位置，默认居中CenterScreen
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.PhonePlacement">
            <summary>
            获取设置phone模式的显示位置，默认最大化Maximized
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.ClipElement">
            <summary>
            获取设置要裁剪的元素，在该元素区域点击时不自动关闭（如TabControl中弹出式标签）
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.PlacementTarget">
            <summary>
            获取设置采用相对位置显示时的目标元素
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.AutoAdjustPosition">
            <summary>
            获取设置是否自动调整最终显示位置，如相对目标显示时对话框在不可见区域时自动调整，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.Left">
            <summary>
            获取设置面板x位置
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.Top">
            <summary>
            获取设置面板y位置
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.IsPinned">
            <summary>
            获取设置是否固定对话框，固定时点击外部不自动关闭，默认为false
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.Resizeable">
            <summary>
            获取设置是否可调节大小，默认为true
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.Content">
            <summary>
            获取设置对话框内容
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.ShowWinVeil">
            <summary>
            获取设置win模式是否显示遮罩，默认为false
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.HeaderButtonText">
            <summary>
            获取设置标题栏按钮字符
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.ContentTransitions">
            <summary>
            获取或设置切换内容时的转换
            </summary>
        </member>
        <member name="P:Dt.Base.Dlg.IsOpened">
            <summary>
            获取对话框是否已显示
            </summary>
        </member>
        <member name="M:Dt.Base.Dlg.Show">
            <summary>
            显示对话框
            </summary>
            <returns>true 正常打开；false 已显示无需再次打开</returns>
        </member>
        <member name="M:Dt.Base.Dlg.ShowAsync">
            <summary>
            显示对话框，可异步等待到关闭
            </summary>
            <returns>返回关闭时(通过Close方法)的参数值</returns>
        </member>
        <member name="M:Dt.Base.Dlg.Close(System.Boolean)">
            <summary>
            关闭对话框
            </summary>
            <param name="p_ok">传递给异步等待对话框关闭方法的返回值(通过ShowAsync方法)</param>
        </member>
        <member name="M:Dt.Base.Dlg.OnOK(System.Object,Dt.Base.Mi)">
            <summary>
            确认并关闭对话框，使方法ShowAsync返回true，方便菜单项使用
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Dlg.OnGotFocus(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            获取焦点
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Dlg.OnPointerPressed(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            按下
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Dlg.ShowInCanvas">
            <summary>
            在对话框层显示
            </summary>
        </member>
        <member name="M:Dt.Base.Dlg.RemoveFromCanvas(System.Boolean)">
            <summary>
            从对话框层移除
            </summary>
            <param name="p_ok">传递给异步等待对话框关闭方法的返回值(通过ShowAsync方法)</param>
        </member>
        <member name="M:Dt.Base.Dlg.BringToTop">
            <summary>
            置顶对话框
            </summary>
        </member>
        <member name="M:Dt.Base.Dlg.OnPlacementChanged">
            <summary>
            显示位置变化时调整动画
            </summary>
        </member>
        <member name="M:Dt.Base.Dlg.Dt#Core#IDlgOuterPressed#OnOuterPressed(Windows.Foundation.Point)">
            <summary>
            点击对话框外部
            </summary>
            <param name="p_point">外部点击位置</param>
        </member>
        <member name="M:Dt.Base.Dlg.OnOuterPressed(Windows.Foundation.Point)">
            <summary>
            点击对话框外部
            </summary>
            <param name="p_point">外部点击位置</param>
        </member>
        <member name="M:Dt.Base.Dlg.OnClosing">
            <summary>
            关闭或后退之前，返回false表示禁止关闭
            </summary>
            <returns>true 表允许关闭</returns>
        </member>
        <member name="M:Dt.Base.Dlg.OnClosed">
            <summary>
            关闭或后退之后
            </summary>
        </member>
        <member name="M:Dt.Base.Dlg.Dt#Base#INaviHost#NaviTo(Dt.Base.INaviContent)">
            <summary>
            向前导航到新内容
            </summary>
            <param name="p_content"></param>
        </member>
        <member name="M:Dt.Base.Dlg.Dt#Base#INaviHost#GoBack">
            <summary>
            返回上一内容
            </summary>
        </member>
        <member name="M:Dt.Base.Dlg.OnHeaderPointerPressed(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            点击标题栏
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Dlg.OnHeaderPointerMoved(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            移动
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Dlg.OnHeaderPointerReleased(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            抬起
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Dlg.OnRootGridPointerPressed(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            点击RootGrid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Dlg.OnRootGridPointerMoved(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            移动RootGrid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Dlg.OnRootGridPointerReleased(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            取消点击RootGrid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Dlg.GetResizeDirection(Windows.Foundation.Point)">
            <summary>
            获取当前位置状态
            </summary>
            <param name="p_position"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Dlg.UpdateMouseCursor(Dt.Base.Docking.ResizeDirection)">
            <summary>
            切换鼠标样式
            </summary>
            <param name="direction"></param>
        </member>
        <member name="T:Dt.Base.DlgEx">
            <summary>
            对话框扩展方法
            </summary>
        </member>
        <member name="M:Dt.Base.DlgEx.Msg(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            显示提示消息
            </summary>
            <param name="p_target"></param>
            <param name="p_content"></param>
        </member>
        <member name="M:Dt.Base.DlgEx.Warn(Windows.UI.Xaml.FrameworkElement,System.String)">
            <summary>
            显示警告信息
            </summary>
            <param name="p_target"></param>
            <param name="p_content"></param>
        </member>
        <member name="M:Dt.Base.DlgEx.ShowMessage(Windows.UI.Xaml.FrameworkElement,System.String,Windows.UI.Xaml.Media.SolidColorBrush)">
            <summary>
            显示提示信息
            </summary>
            <param name="p_target"></param>
            <param name="p_msg"></param>
            <param name="p_brush"></param>
        </member>
        <member name="M:Dt.Base.DlgEx.ShowAt(Dt.Base.Dlg,Dt.Base.DlgPlacement,Dt.Base.DlgPlacement,Windows.UI.Xaml.FrameworkElement,System.Boolean,System.Boolean)">
            <summary>
            显示对话框
            </summary>
            <param name="p_dlg">对话框</param>
            <param name="p_winPlacement">windows模式的显示位置</param>
            <param name="p_phonePlacement">phone模式的显示位置</param>
            <param name="p_target">采用相对位置显示时的目标元素</param>
            <param name="p_hideTitleBar">否隐藏标题栏</param>
            <param name="p_isPinned">是否固定对话框</param>
        </member>
        <member name="M:Dt.Base.DlgEx.ShowAtAsync(Dt.Base.Dlg,Dt.Base.DlgPlacement,Dt.Base.DlgPlacement,Windows.UI.Xaml.FrameworkElement,System.Boolean,System.Boolean)">
            <summary>
            显示对话框
            </summary>
            <param name="p_dlg">对话框</param>
            <param name="p_winPlacement">windows模式的显示位置</param>
            <param name="p_phonePlacement">phone模式的显示位置</param>
            <param name="p_target">采用相对位置显示时的目标元素</param>
            <param name="p_hideTitleBar">否隐藏标题栏</param>
            <param name="p_isPinned">是否固定对话框</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.DlgPlacement">
            <summary>
            对话框的显示位置
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.CenterScreen">
            <summary>
            居中显示，windows模式默认
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.Maximized">
            <summary>
            最大化显示，phone模式默认
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.FromLeft">
            <summary>
            从左侧弹出
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.FromTop">
            <summary>
            从上面弹出
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.FromRight">
            <summary>
            从右侧弹出
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.FromBottom">
            <summary>
            从下面弹出
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.TargetTopLeft">
            <summary>
            左上对齐（对话框的左上角与目标元素的左上角重叠）
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.TargetTopRight">
            <summary>
            右上对齐（对话框的左上角与目标元素的右上角重叠）
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.TargetCenter">
            <summary>
            中心对齐（对话框的中心与目标元素的中心重叠）
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.TargetBottomLeft">
            <summary>
            左下对齐（默认，对话框的左上角与目标元素的左下角重叠）
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.TargetBottomRight">
            <summary>
            右下对齐（对话框的左上角与目标元素的右下角重叠）
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.TargetOuterLeftTop">
            <summary>
            对话框的右上角与目标元素的左上角重叠
            </summary>
        </member>
        <member name="F:Dt.Base.DlgPlacement.TargetOuterTop">
            <summary>
            对话框的左下角与目标元素的左上角重叠
            </summary>
        </member>
        <member name="T:Dt.Base.Fly">
            <summary>
            浮动面板容器
            </summary>
        </member>
        <member name="F:Dt.Base.Fly.ChildProperty">
            <summary>
            浮动面板内容
            </summary>
        </member>
        <member name="F:Dt.Base.Fly.ResizeableProperty">
            <summary>
            是否可调节大小
            </summary>
        </member>
        <member name="M:Dt.Base.Fly.OnResizeableChanged(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyPropertyChangedEventArgs)">
            <summary>
            是否可改变大小属性改变触发事件。
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="E:Dt.Base.Fly.AfterResized">
            <summary>
            尺寸调节结束事件
            </summary>
        </member>
        <member name="P:Dt.Base.Fly.Child">
            <summary>
            获取设置浮动面板内容
            </summary>
        </member>
        <member name="P:Dt.Base.Fly.Padding">
            <summary>
            获取设置边距
            </summary>
        </member>
        <member name="P:Dt.Base.Fly.Width">
            <summary>
            获取设置面板宽度
            </summary>
        </member>
        <member name="P:Dt.Base.Fly.MinWidth">
            <summary>
            获取设置面板最小宽度
            </summary>
        </member>
        <member name="P:Dt.Base.Fly.Height">
            <summary>
            获取设置面板高度
            </summary>
        </member>
        <member name="P:Dt.Base.Fly.MinHeight">
            <summary>
            获取设置面板最小高度
            </summary>
        </member>
        <member name="P:Dt.Base.Fly.Background">
            <summary>
            获取设置面板背景颜色
            </summary>
        </member>
        <member name="P:Dt.Base.Fly.Resizeable">
            <summary>
            获取设置是否可调节大小，默认为false
            </summary>
        </member>
        <member name="M:Dt.Base.Fly.Init">
            <summary>
            初始化，创建简易结构
            </summary>
        </member>
        <member name="M:Dt.Base.Fly.OnOpening(System.Object,System.Object)">
            <summary>
            打开时确定最大宽高。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Fly.OrganizeThumb">
            <summary>
            根据是否可调节大小改变可视树内容。
            </summary>
        </member>
        <member name="M:Dt.Base.Fly.CreateResizeParts">
            <summary>
            创建调节大小所需的控件
            </summary>
        </member>
        <member name="M:Dt.Base.Fly.AddResizeParts">
            <summary>
            向可视树中增加调节大小用到的控件
            </summary>
        </member>
        <member name="M:Dt.Base.Fly.RemoveResizeParts">
            <summary>
            从可视树中移除调节大小用到的控件
            </summary>
        </member>
        <member name="M:Dt.Base.Fly.OnResizeStarted(System.Object,Windows.UI.Xaml.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            改变大小时显示红色边框
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Fly.OnResizeCompleted(System.Object,Windows.UI.Xaml.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            改变大小结束，恢复边框颜色
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dt.Base.INaviContent">
            <summary>
            支持内部导航的内容接口
            </summary>
        </member>
        <member name="M:Dt.Base.INaviContent.AddToHost(Dt.Base.INaviHost)">
            <summary>
            将内容添加到宿主容器
            </summary>
            <param name="p_host">宿主容器</param>
        </member>
        <member name="T:Dt.Base.INaviHost">
            <summary>
            支持内部导航的宿主接口，如Tab Dlg都支持内部导航
            </summary>
        </member>
        <member name="P:Dt.Base.INaviHost.Title">
            <summary>
            获取设置宿主标题文字
            </summary>
        </member>
        <member name="P:Dt.Base.INaviHost.Menu">
            <summary>
            获取设置宿主菜单
            </summary>
        </member>
        <member name="M:Dt.Base.INaviHost.NaviTo(Dt.Base.INaviContent)">
            <summary>
            向前导航到新内容
            </summary>
            <param name="p_content"></param>
        </member>
        <member name="M:Dt.Base.INaviHost.GoBack">
            <summary>
            返回上一内容
            </summary>
        </member>
        <member name="T:Dt.Base.Menu">
            <summary>
            上下文菜单相关
            </summary>
            <summary>
            菜单
            </summary>
        </member>
        <member name="P:Dt.Base.Menu.ContextTarget">
            <summary>
            获取设置上下文菜单的目标元素
            </summary>
        </member>
        <member name="P:Dt.Base.Menu.Placement">
            <summary>
            获取设置上下文菜单的显示位置，默认为Default，win模式在指定位置显示，phone模式为FromBottom
            </summary>
        </member>
        <member name="P:Dt.Base.Menu.TriggerEvent">
            <summary>
            获取设置触发上下文菜单的事件种类，默认RightTapped(鼠标右键，触摸时长按)
            </summary>
        </member>
        <member name="P:Dt.Base.Menu.TargetData">
            <summary>
            获取上下文菜单的目标数据
            </summary>
        </member>
        <member name="P:Dt.Base.Menu.IsContextMenu">
            <summary>
            是否为上下文菜单
            </summary>
        </member>
        <member name="M:Dt.Base.Menu.OpenContextMenu(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            打开上下文菜单
            </summary>
            <param name="p_tgt">相对目标元素，win模式有效，通过WinPlacement控制相对位置</param>
        </member>
        <member name="M:Dt.Base.Menu.OpenContextMenu(Windows.Foundation.Point,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            打开上下文菜单
            </summary>
            <param name="p_pos">在指定位置显示，win模式有效</param>
            <param name="p_tgtPlacement">相对目标元素，win模式有效</param>
            <returns>false表菜单已取消显示</returns>
        </member>
        <member name="M:Dt.Base.Menu.InitContextMenu(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            附加事件
            </summary>
            <param name="p_target"></param>
        </member>
        <member name="M:Dt.Base.Menu.UnloadContextMenu">
            <summary>
            移除事件
            </summary>
        </member>
        <member name="E:Dt.Base.Menu.ItemClick">
            <summary>
            菜单项点击事件
            </summary>
        </member>
        <member name="E:Dt.Base.Menu.Opening">
            <summary>
            打开上下文菜单前事件，可取消显示、禁止显示、初始化菜单项、替换整个菜单等处理
            </summary>
        </member>
        <member name="E:Dt.Base.Menu.Opened">
            <summary>
            上下文菜单打开后事件
            </summary>
        </member>
        <member name="E:Dt.Base.Menu.Closed">
            <summary>
            上下文菜单关闭后事件
            </summary>
        </member>
        <member name="P:Dt.Base.Menu.Item(System.String)">
            <summary>
            获取具有指定名称的菜单项
            </summary>
            <param name="p_id"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.Menu.Item(System.Int32)">
            <summary>
            获取指定索引处的一级菜单项
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.Menu.Items">
            <summary>
            获取子菜单集合
            </summary>
        </member>
        <member name="P:Dt.Base.Menu.AllItems">
            <summary>
            递归获取所有子级菜单项
            </summary>
        </member>
        <member name="P:Dt.Base.Menu.SelectedMi">
            <summary>
            当前选择项
            </summary>
        </member>
        <member name="M:Dt.Base.Menu.Hide(System.String[])">
            <summary>
            隐藏名称列表中的菜单项，只处理一级！
            </summary>
            <param name="p_names"></param>
        </member>
        <member name="M:Dt.Base.Menu.HideExcept(System.String[])">
            <summary>
            除显示名称列表中的菜单项外，其它都隐藏，列表空时隐藏所有，只处理一级！
            </summary>
            <param name="p_names">无值时隐藏所有</param>
        </member>
        <member name="M:Dt.Base.Menu.Show(System.String[])">
            <summary>
            显示名称列表中的菜单项，只处理一级！
            </summary>
            <param name="p_names"></param>
        </member>
        <member name="M:Dt.Base.Menu.ShowExcept(System.String[])">
            <summary>
            除隐藏名称列表中的菜单项外，其它都显示，列表空时显示所有，只处理一级！
            </summary>
            <param name="p_names">无值时显示所有</param>
        </member>
        <member name="M:Dt.Base.Menu.Enable(System.String[])">
            <summary>
            设置名称列表中的菜单项为可用，只处理一级！
            </summary>
            <param name="p_names"></param>
        </member>
        <member name="M:Dt.Base.Menu.EnableExcept(System.String[])">
            <summary>
            除名称列表中的菜单项外，其它都可用，列表空时所有可用，只处理一级！
            </summary>
        </member>
        <member name="M:Dt.Base.Menu.Disable(System.String[])">
            <summary>
            设置名称列表中的菜单项为不可用，只处理一级！
            </summary>
            <param name="p_names"></param>
        </member>
        <member name="M:Dt.Base.Menu.DisableExcept(System.String[])">
            <summary>
            除名称列表中的菜单项外，其它都不可用，列表空时所有不可用，只处理一级！
            </summary>
        </member>
        <member name="M:Dt.Base.Menu.Close">
            <summary>
            关闭菜单
            </summary>
        </member>
        <member name="M:Dt.Base.Menu.OnItemIsSelected(Dt.Base.Mi)">
            <summary>
            选择某个菜单项时的处理
            </summary>
            <param name="p_mi"></param>
        </member>
        <member name="T:Dt.Base.MiList">
            <summary>
            子项列表，直接用泛型在xaml设计时异常
            </summary>
        </member>
        <member name="T:Dt.Base.Mi">
            <summary>
            菜单项
            </summary>
        </member>
        <member name="E:Dt.Base.Mi.Click">
            <summary>
            点击事件
            </summary>
        </member>
        <member name="E:Dt.Base.Mi.Checked">
            <summary>
            勾选事件
            </summary>
        </member>
        <member name="E:Dt.Base.Mi.Unchecked">
            <summary>
            取消勾选事件
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.ID">
            <summary>
            获取设置菜单项标题
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.Icon">
            <summary>
            获取设置图标
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.Cmd">
            <summary>
            获取设置命令对象
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.CmdParam">
            <summary>
             获取设置命令参数
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.IsCheckable">
            <summary>
            获取设置菜单项是否为可选择状态
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.IsChecked">
            <summary>
            获取设置是否为选择状态
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.ShowInPhone">
            <summary>
            获取设置在手机工具栏上的显示内容，默认ID，可以为Icon, IconAndID
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.StaysOpenOnClick">
            <summary>
            获取设置点击后是否不关闭菜单，默认false表自动关闭
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.GroupName">
            <summary>
            获取设置分组名称，用在组内单选情况
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.Scope">
            <summary>
            获取设置菜单项使用范围，默认Both始终显示
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.Items">
            <summary>
            获取子菜单集合
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.AllItems">
            <summary>
            递归获取所有子级菜单项
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.Data">
            <summary>
            获取上下文菜单的目标数据
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.Row">
            <summary>
            获取上下文菜单的目标数据
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.Owner">
            <summary>
            所属菜单
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.ParentMi">
            <summary>
            父菜单项
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.IsSelected">
            <summary>
            菜单项是否为焦点
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.IsSubmenuOpen">
            <summary>
            获取子菜单是否打开
            </summary>
        </member>
        <member name="P:Dt.Base.Mi.SelectedMi">
            <summary>
            当前选择的子项
            </summary>
        </member>
        <member name="M:Dt.Base.Mi.OnClickMi">
            <summary>
            点击菜单项
            </summary>
        </member>
        <member name="M:Dt.Base.Mi.ExecuteMi">
            <summary>
            执行菜单项
            </summary>
        </member>
        <member name="M:Dt.Base.Mi.CloseSubMenu">
            <summary>
            递归关闭所有子窗口
            </summary>
        </member>
        <member name="T:Dt.Base.MiSplit">
            <summary>
            菜单分割行
            </summary>
        </member>
        <member name="M:Dt.Base.MenuView.ContextMenuDlg.OnOuterPressed(Windows.Foundation.Point)">
            <summary>
            点击对话框外部时
            </summary>
            <param name="p_point">外部点击位置</param>
        </member>
        <member name="T:Dt.Base.MenuView.MenuPanel">
            <summary>
            菜单项布局面板
            </summary>
        </member>
        <member name="M:Dt.Base.MenuView.MenuPanel.UpdateArrange">
            <summary>
            更新布局
            </summary>
        </member>
        <member name="M:Dt.Base.MenuView.MenuPanel.ExistVisibleMi(System.Int32)">
            <summary>
            后续菜单是否存在可见项
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.MenuView.MenuPanel.ResetMoreItems(System.Int32)">
            <summary>
            未放下的添加到more下
            </summary>
            <param name="p_index"></param>
        </member>
        <member name="M:Dt.Base.MenuView.SubMenuDlg.OnBlankPressed">
            <summary>
            在空白处点击(所有对话框外部)
            </summary>
        </member>
        <member name="M:Dt.Base.MenuView.SubMenuDlg.OnOuterPressed(Windows.Foundation.Point)">
            <summary>
            点击对话框外部时
            </summary>
            <param name="p_point">外部点击位置</param>
        </member>
        <member name="M:Dt.Base.MenuView.SubMenuDlg.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.MenuView.SubMenuDlg.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.MenuView.SubMenuDlg.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.IMenuHost">
            <summary>
            自定义上下文菜单的触发方式
            </summary>
        </member>
        <member name="M:Dt.Base.IMenuHost.UpdateContextMenu">
            <summary>
            切换上下文菜单或修改触发事件种类时通知宿主刷新
            </summary>
        </member>
        <member name="T:Dt.Base.VisibleInPhone">
            <summary>
            phone模式一级菜单项显示状态
            </summary>
        </member>
        <member name="F:Dt.Base.VisibleInPhone.ID">
            <summary>
            只显示文字
            </summary>
        </member>
        <member name="F:Dt.Base.VisibleInPhone.Icon">
            <summary>
            只显示图标
            </summary>
        </member>
        <member name="F:Dt.Base.VisibleInPhone.IconAndID">
            <summary>
            显示文字和图标
            </summary>
        </member>
        <member name="T:Dt.Base.TriggerEvent">
            <summary>
            触发上下文菜单的事件种类
            </summary>
        </member>
        <member name="F:Dt.Base.TriggerEvent.RightTapped">
            <summary>
            鼠标右键，触摸时长按
            </summary>
        </member>
        <member name="F:Dt.Base.TriggerEvent.LeftTapped">
            <summary>
            鼠标左键，触摸时点击
            </summary>
        </member>
        <member name="F:Dt.Base.TriggerEvent.Custom">
            <summary>
            自定义触发方式
            </summary>
        </member>
        <member name="T:Dt.Base.MenuPosition">
            <summary>
            上下文菜单的显示位置，phone模式无固定位置显示功能
            </summary>
        </member>
        <member name="F:Dt.Base.MenuPosition.Default">
            <summary>
            win模式在指定位置显示，phone模式为FromBottom
            </summary>
        </member>
        <member name="F:Dt.Base.MenuPosition.TopLeft">
            <summary>
            左上对齐（对话框的左上角与目标元素的左上角重叠）
            </summary>
        </member>
        <member name="F:Dt.Base.MenuPosition.TopRight">
            <summary>
            右上对齐（对话框的左上角与目标元素的右上角重叠）
            </summary>
        </member>
        <member name="F:Dt.Base.MenuPosition.Center">
            <summary>
            中心对齐（对话框的中心与目标元素的中心重叠）
            </summary>
        </member>
        <member name="F:Dt.Base.MenuPosition.BottomLeft">
            <summary>
            左下对齐（默认，对话框的左上角与目标元素的左下角重叠）
            </summary>
        </member>
        <member name="F:Dt.Base.MenuPosition.BottomRight">
            <summary>
            右下对齐（对话框的左上角与目标元素的右下角重叠）
            </summary>
        </member>
        <member name="F:Dt.Base.MenuPosition.OuterLeftTop">
            <summary>
            对话框的右上角与目标元素的左上角重叠
            </summary>
        </member>
        <member name="F:Dt.Base.MenuPosition.OuterTop">
            <summary>
            对话框的左下角与目标元素的左上角重叠
            </summary>
        </member>
        <member name="T:Dt.Base.MiScope">
            <summary>
            菜单项使用范围
            </summary>
        </member>
        <member name="F:Dt.Base.MiScope.Both">
            <summary>
            始终显示
            </summary>
        </member>
        <member name="F:Dt.Base.MiScope.Phone">
            <summary>
            只在Phone模式显示
            </summary>
        </member>
        <member name="F:Dt.Base.MiScope.Windows">
            <summary>
            只在Win模式显示
            </summary>
        </member>
        <member name="T:Dt.Base.MenuItemState">
            <summary>
            菜单项状态
            </summary>
        </member>
        <member name="F:Dt.Base.MenuItemState.Normal">
            <summary>
            普遍状态
            </summary>
        </member>
        <member name="F:Dt.Base.MenuItemState.PointerOver">
            <summary>
            移入状态
            </summary>
        </member>
        <member name="F:Dt.Base.MenuItemState.Pressed">
            <summary>
            点击状态
            </summary>
        </member>
        <member name="T:Dt.Base.NotifyItem">
            <summary>
            提示信息项
            </summary>
        </member>
        <member name="M:Dt.Base.NotifyItem.StartAutoClose">
            <summary>
            启动自动关闭定时器
            </summary>
        </member>
        <member name="M:Dt.Base.NotifyItem.CloseInternal">
            <summary>
            关闭面板
            </summary>
        </member>
        <member name="M:Dt.Base.NotifyItem.OnPointerEntered(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            指针进入时取消自动关闭定时器
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.NotifyItem.OnPointerPressed(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            显示按下状态
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.NotifyItem.OnPointerReleased(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            点击内容关闭提示框
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.NotifyItem.OnPointerExited(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            指针离开时启动自动关闭定时器
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.NotifyItem.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.NotifyItem.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.NotifyItem.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.NotifyManager">
            <summary>
            提示信息显示管理
            </summary>
        </member>
        <member name="M:Dt.Base.NotifyManager.Init">
            <summary>
            初始化提示管理
            </summary>
        </member>
        <member name="T:Dt.Base.IPhonePage">
            <summary>
            可承载在PhonePage页面中的内容需要实现的接口
            </summary>
        </member>
        <member name="M:Dt.Base.IPhonePage.OnClosing">
            <summary>
            关闭或后退之前，返回false表示禁止关闭
            </summary>
            <returns>true 表允许关闭</returns>
        </member>
        <member name="M:Dt.Base.IPhonePage.OnClosed">
            <summary>
            关闭或后退之后
            </summary>
        </member>
        <member name="T:Dt.Base.PhonePage">
            <summary>
            PhoneUI时的空白页，动态添加页面内容
            PhonePage.xaml文件不可删除，虽无用但uwp报错！
            </summary>
        </member>
        <member name="F:Dt.Base.PhonePage._newParam">
            <summary>
            导航到新页时的页面参数
            </summary>
        </member>
        <member name="M:Dt.Base.PhonePage.Show(Dt.Base.IPhonePage)">
            <summary>
            加载页面内容，导航到新页
            </summary>
            <param name="p_content">页面内容</param>
        </member>
        <member name="M:Dt.Base.PhonePage.ShowAsync(Dt.Base.IPhonePage)">
            <summary>
            加载页面内容，导航到新页，可异步等待到关闭
            </summary>
            <param name="p_content">页面内容</param>
        </member>
        <member name="M:Dt.Base.PhonePage.IsAllowBack">
            <summary>
            判断页面是否允许后退，OnNavigatingFrom中的取消导航无法实现异步等待！
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.PhonePage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.PhonePage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.PhonePage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.PhonePageEx">
            <summary>
            PhonePage附加依赖属性
            </summary>
        </member>
        <member name="F:Dt.Base.PhonePageEx.ParentPageProperty">
            <summary>
            所属页面
            </summary>
        </member>
        <member name="T:Dt.Base.PhonePageParameter">
            <summary>
            页面参数
            </summary>
        </member>
        <member name="F:Dt.Base.PhonePageParameter.Content">
            <summary>
            页面内容
            </summary>
        </member>
        <member name="F:Dt.Base.PhonePageParameter.TaskSource">
            <summary>
            可等待页面关闭的任务
            </summary>
        </member>
        <member name="T:Dt.Base.Tools.LocalDbView">
            <summary>
            系统工具列表
            </summary>
        </member>
        <member name="M:Dt.Base.Tools.LocalDbView.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Tools.LocalDbView.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Tools.LocalDbView.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.Tools.SysTrace">
            <summary>
            监视输出面板
            </summary>
        </member>
        <member name="M:Dt.Base.Tools.SysTrace.OnOutputClick(System.Object,Dt.Base.ItemClickArgs)">
            <summary>
            选择输出行
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Tools.SysTrace.CopyToClipboard(System.String)">
            <summary>
            将文本复制到剪贴板
            </summary>
            <param name="p_text"></param>
        </member>
        <member name="M:Dt.Base.Tools.SysTrace.FormatJson(System.String)">
            <summary>
            格式化Json串，带缩进
            </summary>
            <param name="p_json"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Tools.SysTrace.OnStub(System.Object,Dt.Base.Mi)">
            <summary>
            生成存根代码
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Tools.SysTrace.ExtractAssembly(System.Reflection.Assembly)">
            <summary>
            提取程序集中预定义的有用类型，只在初始化时调用
            </summary>
            <param name="p_asm">程序集</param>
        </member>
        <member name="M:Dt.Base.Tools.SysTrace.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:Dt.Base.Tools.SysTrace.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:Dt.Base.Tools.SysTrace.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:Dt.Base.Main">
            <summary>
            窗口主区，中部停靠项列表，在xaml中标志作用，不加载到可视树
            </summary>
        </member>
        <member name="P:Dt.Base.Main.Items">
            <summary>
            获取内容元素集合
            </summary>
        </member>
        <member name="T:Dt.Base.Pane">
            <summary>
            可停靠项，内部子项为 Tabs 或 Pane
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.Pos">
            <summary>
            获取设置停靠位置
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.InitWidth">
            <summary>
            获取设置停靠时的初始宽度，默认400
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.InitHeight">
            <summary>
            获取设置停靠时的初始高度
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.Orientation">
            <summary>
            获取设置子元素排序方式
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.FloatPos">
            <summary>
            获取设置浮动状态时的相对位置，优先级低于FloatLocation
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.FloatLocation">
            <summary>
            获取设置浮动状态时的初始位置
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.FloatSize">
            <summary>
            获取设置浮动状态时的初始大小
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.ResizerPlacement">
            <summary>
            获取尺寸调节器的位置，由Pos决定
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.Items">
            <summary>
            获取内容元素集合
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.IsInCenter">
            <summary>
            获取设置当前是否停靠在中部
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.IsInWindow">
            <summary>
            获取设置父容器是否为ToolWindow
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.OwnWin">
            <summary>
            所属Win
            </summary>
        </member>
        <member name="P:Dt.Base.Pane.Region">
            <summary>
            在PanePanel中占的区域，iOS中Bounds与基类重名
            </summary>
        </member>
        <member name="M:Dt.Base.Pane.GetAllTabItems">
            <summary>
            获取包含的所有Tab的枚举
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Pane.GetAllTabs">
            <summary>
            获取所有Tabs的枚举
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Pane.AddItem(Dt.Base.Pane,Dt.Base.Docking.DockPosition,Dt.Base.Tabs)">
            <summary>
            将目标Pane相对与Tabs停靠在一边
            </summary>
            <param name="p_dockItem">要停靠的Pane</param>
            <param name="p_dockPosition">停靠位置</param>
            <param name="p_relativeTo">相对与Tabs</param>
        </member>
        <member name="M:Dt.Base.Pane.RemoveFromParent">
            <summary>
            从父容器中移除当前Pane
            </summary>
        </member>
        <member name="M:Dt.Base.Pane.RemoveUnused">
            <summary>
            无子项时直接移除当前Pane
            </summary>
        </member>
        <member name="M:Dt.Base.Pane.GetSumOfRelativeSizes">
            <summary>
            获取内部子元素相对大小之和
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Pane.RefreshInternal">
            <summary>
            子项集合变化时刷新
            </summary>
        </member>
        <member name="M:Dt.Base.Pane.UpdateChildrenResizer">
            <summary>
            更新内部的尺寸调节器
            </summary>
        </member>
        <member name="M:Dt.Base.Pane.UpdateWindowHeader">
            <summary>
            更新窗口标题
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.AutoHideTab">
            <summary>
            自动隐藏区域
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.AutoHideTab.Unpin(Dt.Base.Tab)">
            <summary>
            将指定Tab转为自动隐藏
            </summary>
            <param name="p_tab"></param>
        </member>
        <member name="M:Dt.Base.Docking.AutoHideTab.Pin(Dt.Base.Tab)">
            <summary>
            将指定Tab转为固定停靠
            </summary>
            <param name="p_tab"></param>
        </member>
        <member name="M:Dt.Base.Docking.AutoHideTab.Clear">
            <summary>
            清空子项
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.AutoHideTab.OnItemsChanged">
            <summary>
            增删子项
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.Compass">
            <summary>
            拖动过程的停靠导航，内部用
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.Compass.DockPositionProperty">
            <summary>
            停靠位置
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.Compass.ShowBottomIndicatorProperty">
            <summary>
            底部指示器是否可见
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.Compass.ShowCenterIndicatorProperty">
            <summary>
            中部指示器是否可见
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.Compass.ShowLeftIndicatorProperty">
            <summary>
            左部指示器是否可见
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.Compass.ShowRightIndicatorProperty">
            <summary>
            右部指示器是否可见
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.Compass.ShowTopIndicatorProperty">
            <summary>
            顶部指示器是否可见
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.Compass.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.Compass.DockPosition">
            <summary>
            获取导航中高亮显示的指示器
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.Compass.ShowBottomIndicator">
            <summary>
            获取设置底部指示器是否可见
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.Compass.ShowCenterIndicator">
            <summary>
            获取设置中部指示器是否可见
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.Compass.ShowLeftIndicator">
            <summary>
            获取设置左部指示器是否可见
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.Compass.ShowRightIndicator">
            <summary>
            获取设置右部指示器是否可见
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.Compass.ShowTopIndicator">
            <summary>
            获取设置顶部指示器是否可见
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.Compass.ChangeDockPosition(Windows.Foundation.Point)">
            <summary>
            Win停靠位置
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Dt.Base.Docking.Compass.ClearIndicators">
            <summary>
            恢复原始状态
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.DockLayout">
            <summary>
            客户端Win布局设置
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.DockLayout.BaseUri">
            <summary>
            控件所属的xaml位置
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.DockLayout.Layout">
            <summary>
            布局内容
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.DockPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.DockPosition.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.DockPosition.Top">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.DockPosition.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.DockPosition.Center">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.DockPosition.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.DockPosition.Right">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.FloatPosition">
            <summary>
            浮动状态时的相对位置
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.FloatPosition.TopLeft">
            <summary>
            左上对齐
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.FloatPosition.TopRight">
            <summary>
            右上对齐
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.FloatPosition.Center">
            <summary>
            中心对齐
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.FloatPosition.BottomLeft">
            <summary>
            左下对齐
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.FloatPosition.BottomRight">
            <summary>
            右下对齐
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.GridResizer">
            <summary>
            尺寸调节器，在Win内部容器之间调节大小
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.GridResizer.PlacementProperty">
            <summary>
            放置位置
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.GridResizer.Placement">
            <summary>
            获取设置放置位置
            </summary>
            <value>The placement.</value>
        </member>
        <member name="P:Dt.Base.Docking.GridResizer.Preview">
            <summary>
            拖动过程中的位置预览
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.GridResizer.Owner">
            <summary>
            父容器，Pane或Tabs
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.GridResizer.InitializeData">
            <summary>
            通过事件参数设置开始移动的相关信息
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.GridResizer.MoveSplitter(System.Double,System.Double,System.Boolean)">
            <summary>
            移动分隔栏
            </summary>
            <param name="p_horChange">水平移动距离</param>
            <param name="p_verChange">垂直移动距离</param>
            <param name="p_isPreview">移动预览栏还是真实调整</param>
        </member>
        <member name="F:Dt.Base.Docking.GridResizer.ResizeBehavior.Resize">
            <summary>
            调整停靠区域大小
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.GridResizer.ResizeBehavior.Split">
            <summary>
            调整停靠区域内部各控件大小
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.GridResizer.ResizeData.Init">
            <summary>
            保存目标控件的原始位置
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.GridResizer.ResizeData.Resize(System.Double,System.Boolean)">
            <summary>
            调整大小
            </summary>
            <param name="p_change">变化量</param>
            <param name="p_isPreview">移动预览栏还是真实调整</param>
        </member>
        <member name="M:Dt.Base.Docking.GridResizer.ResizeData.CancelResize">
            <summary>
            取消调整
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.IPaneList">
            <summary>
            含子项集合的接口
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.LayoutManager">
            <summary>
            布局管理
            1. 宽度足够时，加载历史布局或默认布局
            2. 宽度小时，自动隐藏两侧，隐藏优先级：先右再左，Center始终显示
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.LoadDefaultLayout">
            <summary>
            恢复默认布局
            1. 删除状态库的历史布局
            2. 加载最初布局
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.SaveCurrentLayout">
            <summary>
            保存当前布局
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.OnWidthChanged(System.Double)">
            <summary>
            Win宽度变化时自动调整
            </summary>
            <param name="p_width"></param>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.ClearItems(Dt.Base.Docking.IPaneList)">
            <summary>
            深度清除所有子项
            </summary>
            <param name="p_items"></param>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.Init">
            <summary>
            初始化布局环境
            1. 记录默认布局
            2. 加载状态库中的历史布局
            3. 无历史布局则加载默认布局
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.SaveDefaultXml">
            <summary>
            保存初始布局，同步处理布局、提取Tab字典，已调优
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.ApplyLayout(System.String)">
            <summary>
            将xml布局描述应用到当前布局，若应用过程中若异常从状态库中删除xml，已调优
            </summary>
            <param name="p_content"></param>
            <returns>应用布局是否成功</returns>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.ApplyAutoHide">
            <summary>
            为适应宽度自动隐藏两侧窗口
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.WriteXml">
            <summary>
            将当前布局输出为xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.ExtractItems(Dt.Base.Docking.IPaneList)">
            <summary>
            深度查找所有Tab项，构造以Tab.Title为键以Tab为值的字典，Title不为空
            </summary>
            <param name="p_items"></param>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.ClearAllItems">
            <summary>
            深度移除所有子项
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.GetHideItems(Dt.Base.Docking.IPaneList)">
            <summary>
            深度查找所有自动隐藏项，同步移除
            </summary>
            <param name="p_items"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.MoveToAutoHide(Dt.Base.Docking.IPaneList,Dt.Base.Docking.PanePosition)">
            <summary>
            将内部所有的Tab转移到两侧隐藏
            </summary>
            <param name="p_items"></param>
            <param name="p_state"></param>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.OpenInWindow(Dt.Base.Pane)">
            <summary>
            构造ToolWindow承载Pane
            </summary>
            <param name="p_winItem"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.IsRemoved(Dt.Base.Pane)">
            <summary>
            判断Pane是否需要从布局中移除
            </summary>
            <param name="p_di"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Docking.LayoutManager.RemoveUnused(Dt.Base.Pane)">
            <summary>
            移除当前Pane子项中不需要的Pane
            </summary>
            <param name="p_di"></param>
        </member>
        <member name="T:Dt.Base.Docking.PaneList">
            <summary>
            Win中使用的子项集合，含集合更改事件
            </summary>
        </member>
        <member name="E:Dt.Base.Docking.PaneList.ItemsChanged">
            <summary>
            集合更改事件
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.PaneList.Item(System.Int32)">
            <summary>
            返回指定索引的子项
            </summary>
            <param name="p_index"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.Docking.PaneList.Count">
            <summary>
            集合元素总数
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.PaneList.IsReadOnly">
            <summary>
            集合是否为只读
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.PaneList.Add(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            添加新项
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Docking.PaneList.Clear">
            <summary>
            清空集合
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.PaneList.Contains(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            是否包含指定项
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Docking.PaneList.CopyTo(Windows.UI.Xaml.FrameworkElement[],System.Int32)">
            <summary>
            将集合复制到新列表
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Dt.Base.Docking.PaneList.GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Docking.PaneList.IndexOf(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            获取项的索引
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Docking.PaneList.Insert(System.Int32,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            在指定位置插入新项
            </summary>
            <param name="index"></param>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Docking.PaneList.Remove(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            移除指定项
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Docking.PaneList.RemoveAt(System.Int32)">
            <summary>
            移除指定索引处的项
            </summary>
            <param name="p_index"></param>
        </member>
        <member name="M:Dt.Base.Docking.PaneList.RaiseVectorChanged(Windows.Foundation.Collections.CollectionChange,System.Int32)">
            <summary>
            触发集合更改事件
            </summary>
            <param name="change"></param>
            <param name="index"></param>
        </member>
        <member name="T:Dt.Base.Docking.PanePanel">
            <summary>
            Pane布局面板，内部子元素为 Pane
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.PanePanel.Clear">
            <summary>
            清空除中部区域的子元素
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.PanePosition">
            <summary>
            Pane的停靠状态
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.PanePosition.Left">
            <summary>
            停靠在左侧
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.PanePosition.Bottom">
            <summary>
            停靠在下侧
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.PanePosition.Right">
            <summary>
            停靠在右侧
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.PanePosition.Top">
            <summary>
            停靠在上侧
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.PanePosition.Floating">
            <summary>
            浮动
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.PreviewControl">
            <summary>
            尺寸调节器拖动过程中的标准线
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.PreviewControl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.PreviewControl.Bind(Dt.Base.Docking.GridResizer)">
            <summary>
            应用GridResizer属性
            </summary>
            <param name="p_resizer"></param>
        </member>
        <member name="T:Dt.Base.Docking.RootCompass">
            <summary>
            全局停靠导航，最底层四个停靠位置
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.RootCompass.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.TabHeader">
            <summary>
            面板标题
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.TabHeader.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.TabHeader.Owner">
            <summary>
            获取所属Tabs
            </summary>
        </member>
        <member name="T:Dt.Base.Docking.TabItemPanel">
            <summary>
            类似StackPanel布局，增加附加依赖项属性
            内部子元素为 Tabs 或 Pane
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.TabItemPanel.OrientationProperty">
            <summary>
            子元素的排序方式
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.TabItemPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Docking.TabItemPanel.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="P:Dt.Base.Docking.TabItemPanel.Orientation">
            <summary>
            获取设置子元素的排序方式
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.TabItemPanel.GetLength(Windows.UI.Xaml.FrameworkElement,System.Boolean)">
            <summary>
            获取元素在不同排序方式下的大小
            </summary>
            <param name="p_child"></param>
            <param name="p_isHor"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Docking.ToolWindow">
            <summary>
            在Win中浮动的窗口容器
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.ToolWindow.HeaderProperty">
            <summary>
            是否显示列标题
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.ToolWindow.HorizontalOffsetProperty">
            <summary>
            水平偏移量
            </summary>
        </member>
        <member name="F:Dt.Base.Docking.ToolWindow.VerticalOffsetProperty">
            <summary>
            垂直偏移量
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.ToolWindow.Header">
            <summary>
            获取设置标题内容
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.ToolWindow.HorizontalOffset">
            <summary>
            获取设置水平偏移量
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.ToolWindow.VerticalOffset">
            <summary>
            获取设置垂直偏移量
            </summary>
        </member>
        <member name="P:Dt.Base.Docking.ToolWindow.CanDockInCenter">
            <summary>
            获取窗口内的所有项是否可停靠在中部区域
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.StartDrag(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            直接设置标题为按下状态
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.Show">
            <summary>
            显示窗口
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.Close">
            <summary>
            关闭窗口
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.UpdateHeader">
            <summary>
            更新窗口标题的绑定
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.OnApplyTemplate">
            <summary>
            应用模板
            </summary>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.OnContentChanged(System.Object,System.Object)">
            <summary>
            窗口内容变化
            </summary>
            <param name="oldContent"></param>
            <param name="newContent"></param>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.OnheaderElementPointerPressed(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            点击标题栏
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.OnRootGridPointerPressed(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            点击RootGrid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.OnRootGridPointerMoved(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            移动RootGrid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.OnRootGridPointerReleased(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            取消点击RootGrid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.OnRootGridPointerEntered(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            鼠标移入，用于解决Moved事件有时鼠标不变图标
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.GetResizeDirection(Windows.Foundation.Point)">
            <summary>
            获取当前位置状态
            </summary>
            <param name="pointerPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.BringToFront(Dt.Base.Docking.ToolWindow)">
            <summary>
            置顶
            </summary>
            <param name="p_window"></param>
        </member>
        <member name="M:Dt.Base.Docking.ToolWindow.UpdateMouseCursor(Dt.Base.Docking.ResizeDirection)">
            <summary>
            切换鼠标样式
            </summary>
            <param name="direction"></param>
        </member>
        <member name="T:Dt.Base.MainInfo">
            <summary>
            窗口主区内容描述
            </summary>
        </member>
        <member name="M:Dt.Base.MainInfo.#ctor(Dt.Base.Icons,System.String,System.Type,System.String)">
            <summary>
            窗口主区
            </summary>
            <param name="p_icon">图标</param>
            <param name="p_title">标题</param>
            <param name="p_winType">窗口类型</param>
            <param name="p_desc">描述信息</param>
        </member>
        <member name="M:Dt.Base.MainInfo.#ctor(Dt.Base.Icons,System.String,System.Action,System.String)">
            <summary>
            窗口主区
            </summary>
            <param name="p_icon">图标</param>
            <param name="p_title">标题</param>
            <param name="p_callback">外部回调方法</param>
            <param name="p_desc">描述信息</param>
        </member>
        <member name="P:Dt.Base.MainInfo.Icon">
            <summary>
            获取设置图标
            </summary>
        </member>
        <member name="P:Dt.Base.MainInfo.Title">
            <summary>
            获取设置标题
            </summary>
        </member>
        <member name="P:Dt.Base.MainInfo.Desc">
            <summary>
            获取设置描述信息
            </summary>
        </member>
        <member name="P:Dt.Base.MainInfo.Type">
            <summary>
            获取设置主区内容类型
            </summary>
        </member>
        <member name="P:Dt.Base.MainInfo.Callback">
            <summary>
            获取设置外部回调方法
            </summary>
        </member>
        <member name="T:Dt.Base.PhoneTabs">
            <summary>
            PhoneUI时的TabControl，内部用，为uno节省一级ContentPresenter！
            </summary>
        </member>
        <member name="P:Dt.Base.PhoneTabs.OwnWin">
            <summary>
            只有是首页时才有值
            </summary>
        </member>
        <member name="P:Dt.Base.PhoneTabs.NaviID">
            <summary>
            导航时的标识，所有Tab标题逗号隔开
            </summary>
        </member>
        <member name="M:Dt.Base.PhoneTabs.AddItem(Dt.Base.Tab)">
            <summary>
            添加标签
            </summary>
            <param name="p_tab"></param>
        </member>
        <member name="M:Dt.Base.PhoneTabs.HideBackButton">
            <summary>
            隐藏所有标签的返回按钮
            </summary>
        </member>
        <member name="M:Dt.Base.PhoneTabs.Select(System.Int32)">
            <summary>
            选择指定索引的标签
            </summary>
            <param name="p_index"></param>
        </member>
        <member name="M:Dt.Base.PhoneTabs.Select(System.String)">
            <summary>
            选择指定标题的标签
            </summary>
            <param name="p_title"></param>
        </member>
        <member name="M:Dt.Base.PhoneTabs.Dt#Base#IPhonePage#OnClosing">
            <summary>
            关闭或后退之前，返回false表示禁止关闭
            </summary>
            <returns>true 表允许关闭</returns>
        </member>
        <member name="M:Dt.Base.PhoneTabs.Dt#Base#IPhonePage#OnClosed">
            <summary>
            关闭或后退之后
            </summary>
        </member>
        <member name="M:Dt.Base.PhoneTabs.CancelPaging">
            <summary>
            不换页移动回原位置
            </summary>
        </member>
        <member name="F:Dt.Base.PhoneTabs.SlideState.LockX">
            <summary>
            锁定水平滑动，内部有滚动栏时也可以同步垂直滑动
            </summary>
        </member>
        <member name="F:Dt.Base.PhoneTabs.SlideState.LockY">
            <summary>
            锁定只可内部有滚动栏垂直滑动
            </summary>
        </member>
        <member name="T:Dt.Base.Tab">
            <summary>
            增加属性控制的TabItem
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.Menu">
            <summary>
            获取设置菜单
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.Icon">
            <summary>
            获取设置图标名称，只在PhoneUI模式下的Tab页显示
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.HideTitleBar">
            <summary>
            获取设置是否隐藏标题栏
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.PhoneBar">
            <summary>
            获取设置Phone模式下的工具栏，一般为搜索栏
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.IsPinned">
            <summary>
            获取设置是否已固定
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.CanDockInCenter">
            <summary>
            获取设置是否可以停靠在中部
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.CanDock">
            <summary>
            获取是否允许停靠
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.CanFloat">
            <summary>
            获取设置是否可以浮动
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.CanUserPin">
            <summary>
            获取设置是否允许固定
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.IsFloating">
            <summary>
            获取是否为浮动状态
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.IsInCenter">
            <summary>
            获取设置是否停靠在中部
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.IsInWindow">
            <summary>
            获取设置父容器是否为ToolWindow
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.PinButtonVisibility">
            <summary>
            获取是否显示Pin按钮，手机上为返回按钮，windows上为自动隐藏按钮
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.HeaderButtonText">
            <summary>
            获取设置标题栏按钮字符
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.OwnTabs">
            <summary>
            获取所属的Tabs
            </summary>
        </member>
        <member name="P:Dt.Base.Tab.OwnWin">
            <summary>
            所属Win
            </summary>
        </member>
        <member name="M:Dt.Base.Tab.Dt#Base#INaviHost#NaviTo(Dt.Base.INaviContent)">
            <summary>
            向前导航到新内容
            </summary>
            <param name="p_content"></param>
        </member>
        <member name="M:Dt.Base.Tab.Dt#Base#INaviHost#GoBack">
            <summary>
            返回上一内容
            </summary>
        </member>
        <member name="M:Dt.Base.Tab.Dt#Base#IPhonePage#OnClosing">
            <summary>
            关闭或后退之前，返回false表示禁止关闭
            </summary>
            <returns>true 表允许关闭</returns>
        </member>
        <member name="M:Dt.Base.Tab.Dt#Base#IPhonePage#OnClosed">
            <summary>
            关闭或后退之后
            </summary>
        </member>
        <member name="M:Dt.Base.Tab.OnContentChanged">
            <summary>
            切换内容
            </summary>
        </member>
        <member name="M:Dt.Base.Tab.OnStartDrag(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            开始拖动标签
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Tab.RemoveFromParent">
            <summary>
            从父容器中移除当前Tab
            </summary>
        </member>
        <member name="T:Dt.Base.Tabs">
            <summary>
            包含标题栏的TabControl：
            有标题栏，标签在下方，一个子项时不显示标签
            </summary>
        </member>
        <member name="F:Dt.Base.Tabs.ShowHeaderProperty">
            <summary>
            是否显示标题栏
            </summary>
        </member>
        <member name="F:Dt.Base.Tabs.ResizerPlacementProperty">
            <summary>
            尺寸调节器的位置，由父容器Pane的Orientation决定
            </summary>
        </member>
        <member name="F:Dt.Base.Tabs.InitWidthProperty">
            <summary> 
            初始宽度
            </summary>
        </member>
        <member name="F:Dt.Base.Tabs.InitHeightProperty">
            <summary> 
            初始高度
            </summary>
        </member>
        <member name="P:Dt.Base.Tabs.ShowHeader">
            <summary>
            获取是否显示标题栏
            </summary>
        </member>
        <member name="P:Dt.Base.Tabs.ResizerPlacement">
            <summary>
            获取尺寸调节器的位置，由父容器Pane的Orientation决定
            </summary>
        </member>
        <member name="P:Dt.Base.Tabs.InitWidth">
            <summary>
            获取设置停靠时的初始宽度
            </summary>
        </member>
        <member name="P:Dt.Base.Tabs.InitHeight">
            <summary>
            获取设置停靠时的初始高度
            </summary>
        </member>
        <member name="P:Dt.Base.Tabs.IsInCenter">
            <summary>
            获取设置当前Tabs是否停靠在中部
            </summary>
        </member>
        <member name="P:Dt.Base.Tabs.IsInWindow">
            <summary>
            获取设置父容器是否为ToolWindow
            </summary>
        </member>
        <member name="P:Dt.Base.Tabs.OwnWinItem">
            <summary>
            所属Pane
            </summary>
        </member>
        <member name="P:Dt.Base.Tabs.OwnWin">
            <summary>
            所属Win
            </summary>
        </member>
        <member name="M:Dt.Base.Tabs.AddItem(Dt.Base.Pane,Dt.Base.Docking.DockPosition)">
            <summary>
            将目标Pane的项停靠，合并到当前Tabs或停靠在一边
            </summary>
            <param name="p_winItem"></param>
            <param name="p_dockPosition"></param>
        </member>
        <member name="M:Dt.Base.Tabs.RemoveFromParent">
            <summary>
            从父容器中移除当前Tabs
            </summary>
        </member>
        <member name="M:Dt.Base.Tabs.OnItemsChanged">
            <summary>
            增删子项
            </summary>
        </member>
        <member name="M:Dt.Base.Tabs.GetRectDimenstion(Dt.Base.Docking.DockPosition,Dt.Base.Pane)">
            <summary>
            拖拽过程中计算在当前Tabs中的可停靠区域
            </summary>
            <param name="p_dockPos"></param>
            <param name="p_dockItem"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Tabs.GetAllChildTab(Dt.Base.Pane)">
            <summary>
            递归获取容器内所有的Tab
            </summary>
            <param name="p_winItem"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.Win">
            <summary>
            可停靠多区域窗口
            </summary>
        </member>
        <member name="E:Dt.Base.Win.Closing">
            <summary>
            关闭前事件，可以取消关闭
            </summary>
        </member>
        <member name="E:Dt.Base.Win.Closed">
            <summary>
            关闭后事件
            </summary>
        </member>
        <member name="E:Dt.Base.Win.LayoutChanged">
            <summary>
            布局变化结束事件
            </summary>
        </member>
        <member name="E:Dt.Base.Win.IsActivedChanged">
            <summary>
            窗口激活状态变化事件
            </summary>
        </member>
        <member name="P:Dt.Base.Win.Title">
            <summary>
            获取设置标题
            </summary>
        </member>
        <member name="P:Dt.Base.Win.Icon">
            <summary>
            获取设置图标名称
            </summary>
        </member>
        <member name="P:Dt.Base.Win.Params">
            <summary>
            获取设置初始参数
            </summary>
        </member>
        <member name="P:Dt.Base.Win.Home">
            <summary>
            获取设置Phone模式的首页，为多个页面时用逗号隔开(自动以Tab形式显示)，null时自动为第一个Tab
            </summary>
        </member>
        <member name="P:Dt.Base.Win.AutoSaveLayout">
            <summary>
            获取设置是否自动保存布局状态
            </summary>
        </member>
        <member name="P:Dt.Base.Win.Items">
            <summary>
            获取内容元素集合
            </summary>
        </member>
        <member name="P:Dt.Base.Win.AllowResetLayout">
            <summary>
            获取是否允许恢复默认布局
            </summary>
        </member>
        <member name="P:Dt.Base.Win.IsActived">
            <summary>
            获取设置是否为桌面的激活窗口
            </summary>
        </member>
        <member name="P:Dt.Base.Win.FloatItems">
            <summary>
            获取所有浮动项
            </summary>
        </member>
        <member name="P:Dt.Base.Win.IsInnerWin">
            <summary>
            是否为内嵌窗口
            </summary>
        </member>
        <member name="P:Dt.Base.Win.RootPanel">
            <summary>
            获取内部停靠面板
            </summary>
        </member>
        <member name="P:Dt.Base.Win.LeftAutoHide">
            <summary>
            获取左侧隐藏面板
            </summary>
        </member>
        <member name="P:Dt.Base.Win.RightAutoHide">
            <summary>
            获取右侧隐藏面板
            </summary>
        </member>
        <member name="P:Dt.Base.Win.TopAutoHide">
            <summary>
            获取上侧隐藏面板
            </summary>
        </member>
        <member name="P:Dt.Base.Win.BottomAutoHide">
            <summary>
            获取下侧隐藏面板
            </summary>
        </member>
        <member name="P:Dt.Base.Win.IsReseting">
            <summary>
            获取是否正在重置布局
            </summary>
        </member>
        <member name="P:Dt.Base.Win.CenterItem">
            <summary>
            获取中部停靠容器
            </summary>
        </member>
        <member name="M:Dt.Base.Win.NaviToHome">
            <summary>
            导航到窗口主页
            </summary>
        </member>
        <member name="M:Dt.Base.Win.NaviTo(System.String)">
            <summary>
            导航到指定页，支持多页Tab形式
            </summary>
            <param name="p_tabTitle">多个页面时用逗号隔开(自动以Tab形式显示)，null时自动导航到第一个Tab</param>
        </member>
        <member name="M:Dt.Base.Win.SelectTab(System.String)">
            <summary>
            在多页Tab中选择指定Tab
            </summary>
            <param name="p_tabTitle"></param>
        </member>
        <member name="M:Dt.Base.Win.NaviToFirstTab">
            <summary>
            导航到第一个Tab
            </summary>
        </member>
        <member name="M:Dt.Base.Win.NaviToSingleTab(System.String)">
            <summary>
            导航到单页Tab
            </summary>
            <param name="p_tabTitle"></param>
        </member>
        <member name="M:Dt.Base.Win.NaviToSingleTab(Dt.Base.Tab)">
            <summary>
            导航到单页Tab
            </summary>
            <param name="p_tab"></param>
        </member>
        <member name="M:Dt.Base.Win.NaviToMultiTabs(System.String)">
            <summary>
            导航到多页Tab
            </summary>
            <param name="p_tabTitle"></param>
        </member>
        <member name="M:Dt.Base.Win.CloseAllNaviPages">
            <summary>
            关闭窗口所属的所有导航页
            </summary>
        </member>
        <member name="M:Dt.Base.Win.OnInitPhoneTabs(Dt.Base.PhoneTabs)">
            <summary>
            初次加载多页Tab，可用于动态选择Tab
            </summary>
            <param name="p_tabs"></param>
        </member>
        <member name="M:Dt.Base.Win.ExtractItems(Dt.Base.Docking.IPaneList)">
            <summary>
            深度查找所有Tab项，构造以Tab.Title为键名以Tab为值的字典
            </summary>
            <param name="p_items"></param>
        </member>
        <member name="M:Dt.Base.Win.Open">
            <summary>
            激活旧窗口或打开新窗口
            </summary>
        </member>
        <member name="M:Dt.Base.Win.Close">
            <summary>
            关闭窗口，三种情况：
            <para>PhoneUI关闭窗口所有导航页</para>
            <para>关闭独立的桌面窗口</para>
            <para>作为内嵌窗口时自动移除</para>
            </summary>
        </member>
        <member name="M:Dt.Base.Win.LoadDefaultLayout">
            <summary>
            恢复默认布局
            </summary>
        </member>
        <member name="M:Dt.Base.Win.OnDragStarted(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            开始拖动
            </summary>
            <param name="p_target"></param>
            <param name="p_pointer"></param>
        </member>
        <member name="M:Dt.Base.Win.OpenInWindow(Dt.Base.Tab)">
            <summary>
            构造ToolWindow承载Tab，结构 ToolWindow -> Pane -> Tabs -> Tab
            </summary>
            <param name="p_tab"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Win.OpenInWindow(Dt.Base.Tabs)">
            <summary>
            构造ToolWindow承载Tabs，直接将Tabs移动到新Pane
            </summary>
            <param name="p_tabs"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Win.OnDragDelta(Dt.Base.Docking.ToolWindow,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            拖拽中
            </summary>
            <param name="p_toolWin"></param>
            <param name="p_pointer"></param>
        </member>
        <member name="M:Dt.Base.Win.UpdateCompass(Windows.Foundation.Point,Dt.Base.Docking.ToolWindow)">
            <summary>
            更新Tabs内部停靠导航
            </summary>
            <param name="p_pos"></param>
            <param name="p_win"></param>
        </member>
        <member name="M:Dt.Base.Win.UpdateRootCompass(Windows.Foundation.Point)">
            <summary>
            更新最外层停靠导航
            </summary>
            <param name="p_pos"></param>
        </member>
        <member name="M:Dt.Base.Win.AdjustCueSize(Dt.Base.Docking.ToolWindow)">
            <summary>
            显示可停靠区域背景
            </summary>
            <param name="p_win"></param>
        </member>
        <member name="M:Dt.Base.Win.GetHitSect(Windows.Foundation.Point,Windows.UI.Xaml.UIElement,Windows.UI.Xaml.UIElement)">
            <summary>
            获取指定位置的Tabs
            </summary>
            <param name="p_pos"></param>
            <param name="p_subtree"></param>
            <param name="p_parent"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Win.OnDragCompleted(Dt.Base.Docking.ToolWindow)">
            <summary>
            拖拽结束
            </summary>
            <param name="p_toolWin"></param>
        </member>
        <member name="M:Dt.Base.Win.LoadMain(System.Object)">
            <summary>
            动态切换主区内容
            </summary>
            <param name="p_content"></param>
        </member>
        <member name="M:Dt.Base.Win.OnMainInfoClick(System.Object,Dt.Base.ItemClickArgs)">
            <summary>
            Lv中数据源为MainInfo列表时，ItemClick默认事件处理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Win.ClearWindows">
            <summary>
            删除所有ToolWindow
            </summary>
        </member>
        <member name="M:Dt.Base.Win.CheckIsDockable(Dt.Base.Docking.ToolWindow)">
            <summary>
            窗口内容是否可停靠
            </summary>
            <param name="p_win"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Win.CheckIsDockable(Dt.Base.Pane)">
            <summary>
            Pane内容是否可停靠
            </summary>
            <param name="p_dockItem"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Win.CheckIsDockable(Dt.Base.Tabs)">
            <summary>
            内容是否可停靠
            </summary>
            <param name="p_sect"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Win.CheckIsDockable(Dt.Base.Tab)">
            <summary>
            内容是否可停靠
            </summary>
            <param name="pane"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Win.CheckIsDockable(Dt.Base.Docking.TabHeader)">
            <summary>
            内容是否可停靠
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Win.FindPinSect(Dt.Base.Docking.PanePosition)">
            <summary>
            查找停靠位置的Tabs
            </summary>
            <param name="p_dockState"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Win.OnLayoutChangeEnded(Dt.Base.Docking.GridResizer)">
            <summary>
            调整区域大小后刷新布局
            </summary>
            <param name="p_resizer"></param>
        </member>
        <member name="M:Dt.Base.Win.AllowClose">
            <summary>
            关闭或后退之前，返回false表示禁止关闭
            </summary>
            <returns>true 表允许关闭</returns>
        </member>
        <member name="M:Dt.Base.Win.AfterClosed">
            <summary>
            关闭或后退之后
            </summary>
        </member>
        <member name="M:Dt.Base.Win.OnClosing">
            <summary>
            关闭或后退之前，返回false表示禁止关闭
            </summary>
            <returns>true 表允许关闭</returns>
        </member>
        <member name="M:Dt.Base.Win.OnClosed">
            <summary>
            关闭或后退之后
            </summary>
        </member>
        <member name="M:Dt.Base.Win.OnLayoutChanged">
            <summary>
            触发布局变化结束事件
            </summary>
        </member>
        <member name="T:Dt.Base.WinKit">
            <summary>
            UI交互代理类
            </summary>
        </member>
        <member name="M:Dt.Base.WinKit.OnPhoneTitleTapped(Windows.UI.Xaml.FrameworkElement,Dt.Base.Win)">
            <summary>
            Phone模式附加标题右键菜单
            </summary>
            <param name="p_elem">标题元素</param>
            <param name="p_win">所属窗口</param>
        </member>
        <member name="T:Dt.Base.TreeView.TvDataView">
            <summary>
            Tv数据视图
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvDataView.Refresh">
            <summary>
            刷新视图列表
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvDataView.Unload">
            <summary>
            卸载数据
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvDataView.BuildChildren(Dt.Base.TvItem)">
            <summary>
            递归加载子节点
            </summary>
            <param name="p_parent"></param>
        </member>
        <member name="T:Dt.Base.TreeView.TvRootItems">
            <summary>
            根节点集合
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvRootItems.Invalidate">
            <summary>
            失效重绘
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvRootItems.GetExpandedCount">
            <summary>
            获取要显示的节点数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.TreeView.TvRootItems.GetExpandedItems">
            <summary>
            枚举所有要显示的节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.TreeView.TvRootItems.GetAllItems">
            <summary>
            遍历所有节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.TreeView.TvRootItems.GetVerIndex(Dt.Base.TvItem)">
            <summary>
            获取节点在可视节点(已展开)中的序号
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.TreeView.TvRootItems.GetExpandedPostion(Dt.Base.TvItem,Dt.Base.TreeView.TvPanel)">
            <summary>
            非虚拟行时节点在面板的垂直位置
            </summary>
            <param name="p_item"></param>
            <param name="p_panel"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.TreeView.IsSelectedIconConverter">
            <summary>
            IsSelected -> 字符图标
            </summary>
        </member>
        <member name="T:Dt.Base.TreeView.SelectedBackgroundConverter">
            <summary>
            IsSelected -> 背景
            </summary>
        </member>
        <member name="T:Dt.Base.TreeView.TvPanel">
            <summary>
            树节点布局面板
            </summary>
        </member>
        <member name="F:Dt.Base.TreeView.TvPanel._maxSize">
            <summary>
            面板最大尺寸，宽高始终不为无穷大！
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanel.SetMaxSize(Windows.Foundation.Size)">
            <summary>
            设置面板的最大尺寸，宽高始终不为无穷大！
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanel.Reload">
            <summary>
            切换模板、调整是否采用虚拟化时重新加载
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanel.OnRowsChanged">
            <summary>
            切换数据源时
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanel.ScrollIntoItem(Dt.Base.TvItem)">
            <summary>
            从根节点展开到当前节点，并滚动到可视范围
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanel.LoadVirRows">
            <summary>
            加载虚拟模式的所有行
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanel.LoaRealRows">
            <summary>
            加载真实模式的所有行
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanel.ClearAllRows">
            <summary>
            清除所有行
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanel.CreateVirRow(Dt.Base.TvItem)">
            <summary>
            生成行内容
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="T:Dt.Base.TreeView.TvPanelItem">
            <summary>
            树节点面板
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanelItem.SetItem(Dt.Base.TvItem,System.Boolean)">
            <summary>
            设置对应的视图行
            </summary>
            <param name="p_item"></param>
            <param name="p_isAsync">是否异步设置DataContext</param>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanelItem.SetIndent(System.Double)">
            <summary>
            缩进不同时必须重新布局，不然有时不对！
            </summary>
            <param name="p_indent"></param>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanelItem.SetDataContextAsync">
            <summary>
            滚动时异步设置DataContext，提高流畅性
            </summary>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanelItem.AttachContextMenu(Dt.Base.Menu)">
            <summary>
            附加上下文菜单触发事件
            </summary>
            <param name="p_menu"></param>
        </member>
        <member name="M:Dt.Base.TreeView.TvPanelItem.OpenContextMenu(Windows.Foundation.Point,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            显示上下文菜单
            </summary>
            <param name="p_pos"></param>
            <param name="p_tgt"></param>
        </member>
        <member name="T:Dt.Base.TvItem">
            <summary>
            树节点视图
            </summary>
        </member>
        <member name="P:Dt.Base.TvItem.Children">
            <summary>
            获取子级节点集合
            </summary>
        </member>
        <member name="P:Dt.Base.TvItem.Parent">
            <summary>
            获取当前节点的父节点
            </summary>
        </member>
        <member name="P:Dt.Base.TvItem.Depth">
            <summary>
            获取当前节点距离根节点的深度
            </summary>
        </member>
        <member name="P:Dt.Base.TvItem.IsExpanded">
            <summary>
            获取设置当前节点是否已展开
            </summary>
        </member>
        <member name="P:Dt.Base.TvItem.HasLoadedChildren">
            <summary>
            获取设置是否已加载子节点，动态加载节点时有效
            </summary>
        </member>
        <member name="P:Dt.Base.TvItem.IsSelected">
            <summary>
            获取当前节点是否为选择状态
            </summary>
        </member>
        <member name="P:Dt.Base.TvItem.ExpandedUI">
            <summary>
            获取展开/折叠按钮
            </summary>
        </member>
        <member name="M:Dt.Base.TvItem.ExpandAll">
            <summary>
            展开从根节点到当前节点的所有节点
            </summary>
        </member>
        <member name="P:Dt.Base.TvItem.ExpandedState">
            <summary>
            节点的展开状态
            </summary>
        </member>
        <member name="P:Dt.Base.TvItem.Host">
            <summary>
            宿主
            </summary>
        </member>
        <member name="M:Dt.Base.TvItem.OnClick">
            <summary>
            单击行
            </summary>
        </member>
        <member name="M:Dt.Base.TvItem.OnIsExpandedChanged">
            <summary>
            切换 IsExpanded
            </summary>
        </member>
        <member name="T:Dt.Base.TvItemExpandedState">
            <summary>
            节点展开状态
            </summary>
        </member>
        <member name="T:Dt.Base.LoadingChildArgs">
            <summary>
            加载子节点事件参数
            </summary>
        </member>
        <member name="P:Dt.Base.LoadingChildArgs.CurrentItem">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="P:Dt.Base.LoadingChildArgs.Children">
            <summary>
            获取设置子节点集合
            </summary>
        </member>
        <member name="T:Dt.Base.Tv">
            <summary>
            树控件
            </summary>
        </member>
        <member name="E:Dt.Base.Tv.ItemClick">
            <summary>
            单击行事件
            </summary>
        </member>
        <member name="E:Dt.Base.Tv.ItemDoubleClick">
            <summary>
            双击行事件
            </summary>
        </member>
        <member name="E:Dt.Base.Tv.LoadingChild">
            <summary>
            加载子节点事件
            </summary>
        </member>
        <member name="E:Dt.Base.Tv.SelectionChanged">
            <summary>
            选择变化事件
            </summary>
        </member>
        <member name="E:Dt.Base.Tv.DataChanged">
            <summary>
            切换数据源事件
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.Data">
            <summary>
            获取设置数据源对象，Table已实现ITreeData
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.View">
            <summary>
            获取设置节点模板或模板选择器
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.CellEx">
            <summary>
            获取设置外部自定义单元格的类型，方法名和Dot的ID相同，SetStyle方法控制行样式
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.SelectionMode">
            <summary>
            获取设置选择模式，默认Single
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.FixedRoot">
            <summary>
            获取设置固定根节点，切换数据源时不变
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.ShowRowLine">
            <summary>
            获取设置是否显示行分割线，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.IsVirtualized">
            <summary>
            获取设置是否采用虚拟化，默认true
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.Indent">
            <summary>
            获取设置每层节点的缩进值
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.EnteredBrush">
            <summary>
            获取设置鼠标进入行/项目时的背景色
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.PressedBrush">
            <summary>
            获取设置点击行/项目时的背景色
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.IsDynamicLoading">
            <summary>
            获取设置是否动态加载节点，默认false
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.HasSelected">
            <summary>
            获取是否有选择行
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.SelectedItems">
            <summary>
            获取当前选择的节点列表
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.SelectedItem">
            <summary>
            获取设置当前选定行，并自动展开滚动到当前位置，设置null时清空选择，多选时为返回最后选择行
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.SelectedCount">
            <summary>
            获取选择的行数
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.SelectedRow">
            <summary>
            获取当前选定的Row
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.RootItems">
            <summary>
            获取根节点集合
            </summary>
        </member>
        <member name="P:Dt.Base.Tv.IsInnerScroll">
            <summary>
            滚动栏是否在内部
            </summary>
        </member>
        <member name="M:Dt.Base.Tv.Selected``1">
            <summary>
            获取当前选定的实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Tv.DeleteItem(System.Object)">
            <summary>
            删除数据对应的节点，若节点为选择状态，则删除后选择同层后一节点或父节点
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Tv.GetTopBrother(System.Object)">
            <summary>
            获取同层上面的节点
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Tv.GetFollowingBrother(System.Object)">
            <summary>
            获取同层下面的节点
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Tv.ExpandAll">
            <summary>
            递归展开所有节点，动态加载时只展开已有节点
            </summary>
        </member>
        <member name="M:Dt.Base.Tv.CollapseAll">
            <summary>
            递归折叠所有节点
            </summary>
        </member>
        <member name="M:Dt.Base.Tv.ScrollTop">
            <summary>
            滚动到最顶端
            </summary>
        </member>
        <member name="M:Dt.Base.Tv.ScrollBottom">
            <summary>
            滚动到最底端
            </summary>
        </member>
        <member name="M:Dt.Base.Tv.ScrollInto(System.Object)">
            <summary>
            滚动到指定的节点
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Tv.LoadItems">
            <summary>
            加载数据行
            </summary>
        </member>
        <member name="M:Dt.Base.Tv.ClearItems">
            <summary>
            清空所有行
            </summary>
        </member>
        <member name="M:Dt.Base.Tv.GetViewExMethod(System.String)">
            <summary>
            获取视图扩展方法
            </summary>
            <param name="p_methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Tv.OnSelectedItemsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            选择行集合变化
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Base.Tv.OnToggleSelected(Dt.Base.TvItem)">
            <summary>
            单选模式点击时切换选择
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Tv.ToggleSelectedCascade(Dt.Base.TvItem)">
            <summary>
            多选模式时级联调整选择状态
            </summary>
            <param name="p_item"></param>
        </member>
        <member name="M:Dt.Base.Tv.SelectCascade(Dt.Base.TvItem,System.Collections.Generic.List{System.Object})">
            <summary>
            级联选择
            </summary>
            <param name="p_item"></param>
            <param name="p_data"></param>
        </member>
        <member name="M:Dt.Base.Tv.UpdateParentSelect(Dt.Base.TvItem,System.Collections.Generic.List{System.Object})">
            <summary>
            向上递归更新选择状态
            </summary>
            <param name="p_item"></param>
            <param name="p_data"></param>
        </member>
        <member name="M:Dt.Base.Tv.Dt#Base#IMenuHost#UpdateContextMenu">
            <summary>
            切换上下文菜单或修改触发事件种类时通知宿主刷新
            </summary>
        </member>
        <member name="M:Dt.Base.Tv.OnItemClick(System.Object,System.Object)">
            <summary>
            触发单击行事件
            </summary>
            <param name="p_data"></param>
            <param name="p_oldData"></param>
        </member>
        <member name="M:Dt.Base.Tv.OnItemDoubleClick(System.Object)">
            <summary>
            触发双击行事件
            </summary>
            <param name="p_data"></param>
        </member>
        <member name="M:Dt.Base.Tv.OnLoadingChild(Dt.Base.TvItem)">
            <summary>
            触发加载子节点事件
            </summary>
            <param name="p_item"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Tv.OnDataChanged">
            <summary>
            触发切换数据源事件
            </summary>
        </member>
        <member name="T:Dt.Base.Dt_Base_XamlTypeInfo.XamlMetaDataProvider">
            <summary>
            Main class for providing metadata for the app or library
            </summary>
        </member>
        <member name="M:Dt.Base.Dt_Base_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:Dt.Base.Dt_Base_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:Dt.Base.Dt_Base_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
    </members>
</doc>
