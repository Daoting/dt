#region 文件描述
/******************************************************************************
* 创建: Daoting
* 摘要: 
* 日志: 2014-07-03 创建
******************************************************************************/
#endregion

#region 引用命名
using Dt.Base;
using Dt.CalcEngine;
using Dt.CalcEngine.Expressions;
using Dt.Cells.Data;
using Dt.Cells.UndoRedo;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Input;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using Windows.ApplicationModel;
using Windows.ApplicationModel.DataTransfer;
using Windows.Devices.Input;
using Windows.Foundation;
using Windows.System;
using Windows.UI;
using Windows.UI.Core;
using Windows.UI.Input;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Media.Imaging;
using Windows.UI.Xaml.Shapes;
#endregion

namespace Dt.Cells.UI
{
    /// <summary>
    /// Represents the GcSpreadSheet worksheet viewer used to present and handle worksheet operations.
    /// </summary>
    /// <summary>
    /// 
    /// </summary>
    public partial class SheetView : Panel, IXmlSerializable
    {
        private bool _allowDragDrop;
        private bool _allowDragFill = true;
        private bool _allowEditOverflow;
        private bool _allowUndo;
        private bool _allowUserFormula;
        private bool _allowUserZoom;
        private bool _autoClipboard;
        internal Border _autoFillIndicatorContainer;
        private Windows.Foundation.Size _availableSize;
        internal Ellipse _bottomRightGripper;
        internal Image _cachedautoFillIndicatorImage;
        internal Image _cachedBottomRightACornerVisual;
        private CellLayoutModel[] _cachedColumnHeaderCellLayoutModel;
        internal RowLayoutModel _cachedColumnHeaderRowLayoutModel;
        internal ColumnLayoutModel[] _cachedColumnHeaderViewportColumnLayoutModel;
        internal TransformGroup[] _cachedColumnHeaderViewportTransform;
        internal Image[] _cachedColumnHeaderViewportVisual;
        internal Image _cachedColumnResizerGripperImage;
        internal TransformGroup _cachedCornerViewportTransform;
        internal Image _cachedCornerViewportVisual;
        private FilterButtonInfoModel _cachedFilterButtonInfoModel;
        private FloatingObjectLayoutModel[,] _cachedFloatingObjectLayoutModel;
        private FloatingObjectLayoutModel[,] _cachedFloatingObjectMovingResizingLayoutModel;
        private GroupLayout _cachedGroupLayout;
        private SheetLayout _cachedLayout;
        internal Dictionary<string, BitmapImage> _cachedResizerGipper;
        private CellLayoutModel[] _cachedRowHeaderCellLayoutModel;
        internal ColumnLayoutModel _cachedRowHeaderColumnLayoutModel;
        internal RowLayoutModel[] _cachedRowHeaderViewportRowLayoutModel;
        internal TransformGroup[] _cachedRowHeaderViewportTransform;
        internal Image[] _cachedRowHeaderViewportVisual;
        internal Image _cachedRowResizerGripperImage;
        internal Dictionary<string, ImageSource> _cachedToolbarImageSources;
        private CellLayoutModel[,] _cachedViewportCellLayoutModel;
        internal ColumnLayoutModel[] _cachedViewportColumnLayoutModel;
        internal double[] _cachedViewportHeights;
        internal RowLayoutModel[] _cachedViewportRowLayoutModel;
        internal double[] _cachedViewportSplitBarX;
        internal double[] _cachedViewportSplitBarY;
        internal TransformGroup[,] _cachedViewportTransform;
        internal Image[,] _cachedViewportVisual;
        internal double[] _cachedViewportWidths;
        internal bool _canTouchMultiSelect;
        private ClipboardPasteOptions _clipBoardOptions;
        internal Windows.UI.Xaml.Shapes.Line _columnFreezeLine;
        private GcRangeGroupHeader _columnGroupHeaderPresenter;
        private GcRangeGroup[] _columnGroupPresenters;
        internal GcViewport[] _columnHeaderPresenters;
        private int _columnOffset;
        internal Windows.UI.Xaml.Shapes.Line _columnTrailingFreezeLine;
        internal GcHeaderCornerViewport _cornerPresenter;
        internal int _currentActiveColumnIndex;
        internal int _currentActiveRowIndex;
        private DragFillDirection _currentFillDirection = DragFillDirection.Down;
        private CellRange _currentFillRange;
        internal GestureAction _currentGestureAction;
        private Canvas _cursorsContainer;
        private Windows.UI.Xaml.Controls.Primitives.Popup _dataValidationListPopUp;
        private PopupHelper _dataValidationPopUpHelper;
        private int _dragDropColumnOffset;
        private CellRange _dragDropFromRange;
        private Grid _dragDropIndicator;
        private Grid _dragDropInsertIndicator;
        private int _dragDropRowOffset;
        private PopupHelper _dragFillPopup;
        private DragFillSmartTag _dragFillSmartTag;
        private int _dragFillStartBottomRowViewport = -2;
        private int _dragFillStartLeftColumnViewport = -2;
        private CellRange _dragFillStartRange;
        private int _dragFillStartRightColumnViewport = -2;
        private int _dragFillStartTopRowViewport = -2;
        private int _dragStartColumnViewport;
        private int _dragStartRowViewport;
        private int _dragToColumn;
        private int _dragToColumnViewport;
        private int _dragToRow;
        private int _dragToRowViewport;
        private GcViewport _editinViewport;
        private Dt.Cells.UI.EditorInfo _editorInfo;
        internal short _eventSuspended;
        private Windows.UI.Xaml.Controls.Primitives.Popup _filterPopup;
        private PopupHelper _filterPopupHelper;
        private Dictionary<KeyStroke, SpreadAction> _floatingObjectsKeyMap = new Dictionary<KeyStroke, SpreadAction>();
        private Windows.Foundation.Point _floatingObjectsMovingResizingOffset = new Windows.Foundation.Point(0.0, 0.0);
        private int _floatingObjectsMovingResizingStartColumn = -2;
        private Windows.Foundation.Point _floatingObjectsMovingResizingStartPoint = new Windows.Foundation.Point(0.0, 0.0);
        private Windows.Foundation.Rect _floatingObjectsMovingResizingStartPointCellBounds = new Windows.Foundation.Rect(0.0, 0.0, 0.0, 0.0);
        private int _floatingObjectsMovingResizingStartRow = -2;
        private Dictionary<string, Windows.Foundation.Point> _floatingObjectsMovingStartLocations = new Dictionary<string, Windows.Foundation.Point>();
        private FormulaSelectionFeature _formulaSelectionFeature;
        internal FormulaSelectionGripperContainerPanel _formulaSelectionGripperPanel;
        private Style _freezeLineStyle;
        internal GestureRecognizer _gestrueRecognizer;
        private GcRangeGroupCorner _groupCornerPresenter;
        private bool _hideSelectionWhenPrinting;
        private bool _highlightDataValidationInvalidData;
        private FilterButtonInfo _hitFilterInfo;
        private ScrollSelectionManager _horizontalSelectionMgr;
        internal Control _host;
        internal Dt.Cells.UI.HoverManager _hoverManager;
        private bool _hScrollable;
        private FontFamily _inheritedControlFontFamily;
        internal Dt.Cells.UI.InputDeviceType _inputDeviceType;
        internal bool _isDoubleClick;
        private bool _isDragCopy;
        private bool _isDragInsert;
        private bool _isEditing;
        internal bool _isIMEEnterEditing;
        private bool _isMouseDownFloatingObject;
        internal bool _isTouchScrolling;
        private Dictionary<KeyStroke, SpreadAction> _keyMap;
        internal Windows.Foundation.Point _lastClickLocation;
        internal Windows.Foundation.Point _lastClickPoint;
        private Image _mouseCursor;
        internal Windows.Foundation.Point _mouseDownPosition;
        private FloatingObject[] _movingResizingFloatingObjects;
        private SpreadXNavigation _navigation;
        internal HitTestInformation _positionInfo;
        private CopyMoveCellsInfo _preFillCellsInfo;
        internal uint? _primaryTouchDeviceId = null;
        internal bool _primaryTouchDeviceReleased;
        private bool _protect;
        private Brush _rangeGroupBackground;
        private Brush _rangeGroupBorderBrush;
        private Brush _rangeGroupLineStroke;
        internal bool _resetSelectionFrameStroke;
        internal Border _resizerGripperContainer;
        internal Dt.Cells.UI.ResizeZeroIndicator _resizeZeroIndicator;
        internal Windows.UI.Xaml.Shapes.Line _resizingTracker;
        internal PointerMouseRoutedEventArgs _routedEventArgs;
        internal Windows.UI.Xaml.Shapes.Line _rowFreezeLine;
        private GcRangeGroupHeader _rowGroupHeaderPresenter;
        private GcRangeGroup[] _rowGroupPresenters;
        internal GcViewport[] _rowHeaderPresenters;
        private int _rowOffset;
        internal Windows.UI.Xaml.Shapes.Line _rowTrailingFreezeLine;
        private SpreadXSelection _selection;
        private Canvas _shapeDrawingContainer;
        private bool _showColumnRangeGroup;
        private bool _showFreezeLine;
        private bool _showRowRangeGroup;
        private int _suspendViewInvalidate;
        private TooltipPopupHelper _tooltipHelper;
        private Windows.UI.Xaml.Controls.Primitives.Popup _tooltipPopup;
        internal Ellipse _topLeftGripper;
        internal HashSet<uint> _touchProcessedPointIds = new HashSet<uint>();
        internal HitTestInformation _touchStartHitTestInfo;
        internal int _touchStartLeftColumn = -1;
        internal Windows.Foundation.Point _touchStartPoint;
        internal int _touchStartTopRow = -1;
        internal Windows.UI.Xaml.Controls.Primitives.Popup _touchToolbarPopup = null;
        //internal Point _touchTranslatePoint;
        internal double _touchZoomInitFactor;
        internal double _touchZoomNewFactor;
        internal Windows.Foundation.Point _touchZoomOrigin;
        private Canvas _trackersContainer;
        private Style _trailingFreezeLineStyle;
        internal double _translateOffsetX;
        internal double _translateOffsetY;
        private Dt.Cells.UI.UndoManager _undoManager;
        internal bool _updateViewportAfterTouch;
        private ScrollSelectionManager _verticalSelectionMgr;
        internal GcViewport[,] _viewportPresenters;
        private bool _vScrollable;
        internal HitTestInformation _zoomOriginHitTestInfo;
        internal GripperLocationsStruct CachedGripperLocation;
        private const string _CELL_DELIMITER = "\"";
        private const string _COLUMN_DELIMITER = "\t";
        internal bool _DoTouchResizing;
        internal const double ENHANCED_ZERO_INDICATOR_WIDTH = 6.0;
        internal bool fastScroll;
        internal const double FILTERBUTTON_HEIGHT = 16.0;
        internal const double FILTERBUTTON_WIDTH = 16.0;
        private static readonly Windows.Foundation.Size GCSPREAD_DefaultSize = new Windows.Foundation.Size(500.0, 500.0);
        internal const int GRIPPERSIZE = 0x10;
        private const double _GROUPBUTTON_HEIGHT = 16.0;
        private const double _GROUPBUTTON_WIDTH = 16.0;
        internal const double HALF_ENHANCED_ZERO_INDICATOR_WIDTH = 3.0;
        internal const double HORIZONTALSPLITBOX_WIDTH = 6.0;
        private const double _INDICATOR_THICKNESS = 3.0;
        internal bool IsContinueTouchOperation;
        internal bool IsTouchDragFilling;
        internal bool IsTouchDrapDropping;
        internal bool IsTouching;
        internal bool IsTouchPromotedMouseMessage;
        internal bool IsTouchResizingColumns;
        internal bool IsTouchResizingRows;
        internal bool IsTouchSelectingCells;
        internal bool IsTouchSelectingColumns;
        internal bool IsTouchSelectingRows;
        private bool _IsTouchStartColumnSelecting;
        private bool _IsTouchStartRowSelecting;
        internal bool IsTouchTabStripResizing;
        internal bool IsTouchZooming;
        internal const int _MAXSCROLLABLEHORIZONTALOFFSET = 120;
        internal const int _MAXSCROLLABLEVERTICALOFFSET = 80;
        private const int _MOUSEWHEELSCROLLLINES = 3;
        internal const double RESIZE_HEIGHT = 4.0;
        internal const double RESIZE_WIDTH = 4.0;
        private const string _ROW_DELIMITER = "\r\n";
        private Dt.Cells.Data.Worksheet _sheet;
        internal const double SPLITBOXWIDTH = 20.0;
        private const double _TOOLTIP_OFFSET = 4.0;
        internal const double VERTICALSPLITBOX_HEIGHT = 6.0;
        private const float _ZOOM_MAX = 4f;
        private const float _ZOOM_MIN = 0.1f;

        /// <summary>
        /// Occurs when the user presses down the left mouse button in a cell. 
        /// </summary>
        public event EventHandler<CellClickEventArgs> CellClick;

        /// <summary>
        /// Occurs when the user presses down the left mouse button twice (double-clicks) in a cell. 
        /// </summary>
        public event EventHandler<CellDoubleClickEventArgs> CellDoubleClick;

        /// <summary>
        /// Occurs when [cell text rendering].
        /// </summary>
        public event EventHandler<CellTextRenderingEventArgs> CellTextRendering;

        /// <summary>
        /// Occurs when [cell value applying].
        /// </summary>
        public event EventHandler<CellValueApplyingEventArgs> CellValueApplying;

        /// <summary>
        /// Occurs when a Clipboard change occurs that affects GcSpreadSheet.
        /// </summary>
        public event EventHandler<EventArgs> ClipboardChanged;

        /// <summary>
        /// Occurs when the Clipboard is changing due to a GcSpreadSheet action.
        /// </summary>
        public event EventHandler<EventArgs> ClipboardChanging;

        /// <summary>
        /// Occurs when the user has pasted from the Clipboard.
        /// </summary>
        public event EventHandler<ClipboardPastedEventArgs> ClipboardPasted;

        /// <summary>
        /// Occurs when the user pastes from the Clipboard.
        /// </summary>
        public event EventHandler<ClipboardPastingEventArgs> ClipboardPasting;

        /// <summary>
        /// Occurs when the column width has changed.
        /// </summary>
        public event EventHandler<ColumnWidthChangedEventArgs> ColumnWidthChanged;

        /// <summary>
        /// Occurs when the column width is changing.
        /// </summary>
        public event EventHandler<ColumnWidthChangingEventArgs> ColumnWidthChanging;

        /// <summary>
        /// Occurs when [data validation list popup opening].
        /// </summary>
        public event EventHandler<CellCancelEventArgs> DataValidationListPopupOpening;

        /// <summary>
        /// Occurs when the user drags and drops a range of cells.
        /// </summary>
        public event EventHandler<DragDropBlockEventArgs> DragDropBlock;

        /// <summary>
        /// Occurs at the completion of the user dragging and dropping a range of cells.
        /// </summary>
        public event EventHandler<DragDropBlockCompletedEventArgs> DragDropBlockCompleted;

        /// <summary>
        /// Occurs when the user drags to fill a range of cells.
        /// </summary>
        public event EventHandler<DragFillBlockEventArgs> DragFillBlock;

        /// <summary>
        /// Occurs at the completion of the user dragging to fill a range of cells.
        /// </summary>
        public event EventHandler<DragFillBlockCompletedEventArgs> DragFillBlockCompleted;

        /// <summary>
        /// Occurs when a cell is in edit mode and the text is changed.
        /// </summary>
        public event EventHandler<EditCellEventArgs> EditChange;

        /// <summary>
        /// Occurs when a cell leaves edit mode.
        /// </summary>
        public event EventHandler<EditCellEventArgs> EditEnd;

        /// <summary>
        /// Occurs when a cell is going in to edit mode.
        /// </summary>
        public event EventHandler<EditCellStartingEventArgs> EditStarting;

        /// <summary>
        /// Occurs when the user enters a cell. 
        /// </summary>
        public event EventHandler<EnterCellEventArgs> EnterCell;

        /// <summary>
        /// Occurs when the user performs an invalid operation.
        /// </summary>
        internal event EventHandler<UserErrorEventArgs> Error;

        /// <summary>
        /// Occurs when [filter popup opening].
        /// </summary>
        public event EventHandler<CellCancelEventArgs> FilterPopupOpening;

        /// <summary>
        /// Occurs when [floating object pasted].
        /// </summary>
        public event EventHandler<FloatingObjectPastedEventArgs> FloatingObjectPasted;

        /// <summary>
        /// Occurs when an invalid operation is performed.
        /// </summary>
        public event EventHandler<InvalidOperationEventArgs> InvalidOperation;

        /// <summary>
        /// Occurs when the user leaves a cell. 
        /// </summary>
        public event EventHandler<LeaveCellEventArgs> LeaveCell;

        /// <summary>
        /// Occurs when the left column changes.
        /// </summary>
        public event EventHandler<ViewportEventArgs> LeftColumnChanged;

        /// <summary>
        /// Occurs when a column has just been automatically sorted.
        /// </summary>
        public event EventHandler<RangeFilteredEventArgs> RangeFiltered;

        /// <summary>
        /// Occurs when a column is about to be automatically filtered.
        /// </summary>
        public event EventHandler<RangeFilteringEventArgs> RangeFiltering;

        /// <summary>
        /// Occurs when the user has changed the state of outline (range group) rows
        /// or columns.
        /// </summary>
        public event EventHandler<RangeGroupStateChangedEventArgs> RangeGroupStateChanged;

        /// <summary>
        /// Occurs before the user changes the state of outline (range group) rows
        /// or columns.
        /// </summary>
        public event EventHandler<RangeGroupStateChangingEventArgs> RangeGroupStateChanging;

        /// <summary>
        /// Occurs when a column has just been automatically sorted.
        /// </summary>
        public event EventHandler<RangeSortedEventArgs> RangeSorted;

        /// <summary>
        /// Occurs when a column is about to be automatically sorted.
        /// </summary>
        public event EventHandler<RangeSortingEventArgs> RangeSorting;

        /// <summary>
        /// Occurs when the row height has changed.
        /// </summary>
        public event EventHandler<RowHeightChangedEventArgs> RowHeightChanged;

        /// <summary>
        /// Occurs when the row height is changing.
        /// </summary>
        public event EventHandler<RowHeightChangingEventArgs> RowHeightChanging;

        /// <summary>
        /// Occurs when the selection of cells on the sheet has changed. 
        /// </summary>
        public event EventHandler<EventArgs> SelectionChanged;

        /// <summary>
        /// Occurs when the selection of cells on the sheet is changing.
        /// </summary>
        public event EventHandler<SelectionChangingEventArgs> SelectionChanging;

        /// <summary>
        /// Occurs when the user clicks the sheet tab.
        /// </summary>
        public event EventHandler<SheetTabClickEventArgs> SheetTabClick;

        /// <summary>
        /// Occurs when the user double-clicks the sheet tab.
        /// </summary>
        public event EventHandler<SheetTabDoubleClickEventArgs> SheetTabDoubleClick;

        /// <summary>
        /// Occurs when the top row changes.
        /// </summary>
        public event EventHandler<ViewportEventArgs> TopRowChanged;

        /// <summary>
        /// Occurs before GcSpreadSheet show toolstrip menu bar
        /// </summary>
        internal event EventHandler<TouchToolbarOpeningEventArgs> TouchToolbarOpening;

        /// <summary>
        /// Occurs when the user types a formula.
        /// </summary>
        public event EventHandler<UserFormulaEnteredEventArgs> UserFormulaEntered;

        /// <summary>
        /// Occurs when the user zooms.
        /// </summary>
        public event EventHandler<ZoomEventArgs> UserZooming;

        /// <summary>
        /// Occurs when the user drags and drops a range of cells.
        /// </summary>
        public event EventHandler<ValidationDragDropBlockEventArgs> ValidationDragDropBlock;

        /// <summary>
        /// Occurs when the applied cell value is invalid.
        /// </summary>
        public event EventHandler<ValidationErrorEventArgs> ValidationError;

        /// <summary>
        /// Occurs when validation the whether the pasting is validate.
        /// </summary>
        public event EventHandler<ValidationPastingEventArgs> ValidationPasting;

        /// <summary>
        /// Occurs when the value in the subeditor changes. 
        /// </summary>
        public event EventHandler<CellEventArgs> ValueChanged;

        /// <summary>
        /// Creates a new instance of the <see cref="T:Dt.Cells.UI.SheetView" /> class.
        /// </summary>
        /// <param name="host">The host.</param>
        internal SheetView(Control host)
        {
            this._host = host;
            this._formulaSelectionFeature = new FormulaSelectionFeature(this);
            this.PointerWheelChanged += OnPointerWheelChanged;
            base.AddHandler(UIElement.PointerMovedEvent, new PointerEventHandler(this.OnPointerMoved), false);
            base.AddHandler(UIElement.PointerExitedEvent, new PointerEventHandler(this.OnPointerExited), false);
            base.AddHandler(UIElement.PointerPressedEvent, new PointerEventHandler(this.OnPointerPressed), false);
            base.AddHandler(UIElement.PointerReleasedEvent, new PointerEventHandler(this.OnPointerReleased), false);
            base.AddHandler(UIElement.DoubleTappedEvent, new DoubleTappedEventHandler(this.OnDoubleTapped), true);

            // hdt 标志已处理，屏蔽Pis的左右滑动
            ManipulationMode = ManipulationModes.None | ManipulationModes.TranslateInertia | ManipulationModes.TranslateX;
            ManipulationStarted += OnManipulationStarted;
            ManipulationDelta += OnManipulationDelta;
            ManipulationCompleted += OnManipulationCompleted;

            this.PointerCaptureLost += OnPointerCaptureLost;
            this.InitTouch();
            this.Init();
        }

        private void _dataValidationListPopUp_Closed(object sender, object e)
        {
            this.FocusInternal();
        }

        private void _dataValidationListPopUp_Opened(object sender, object e)
        {
        }

        /// <summary>
        /// Adds a cell or cells to the selection.
        /// </summary>
        /// <param name="row">The row index of the first cell to add.</param>
        /// <param name="column">The column index of the first cell to add.</param>
        /// <param name="rowCount">The number of rows to add.</param>
        /// <param name="columnCount">The number of columns to add.</param>
        public void AddSelection(int row, int column, int rowCount, int columnCount)
        {
            this.Worksheet.AddSelection(row, column, rowCount, columnCount);
        }

        private void AddSortItems(ColumnDropDownList dropdown, FilterButtonInfo info)
        {
            DropDownItemControl control = new DropDownItemControl();
            control.Content = ResourceStrings.SortDropdownItemSortAscend;
            control.Icon = Dt.Cells.UI.SR.GetImage("SortAscending.png");
            control.Command = new SortCommand(this, info, true);
            dropdown.Items.Add(control);
            DropDownItemControl control2 = new DropDownItemControl();
            control2.Content = ResourceStrings.SortDropdownItemSortDescend;
            control2.Icon = Dt.Cells.UI.SR.GetImage("SortDescending.png");
            control2.Command = new SortCommand(this, info, false);
            dropdown.Items.Add(control2);
        }

        /// <summary>
        /// Adjusts the adjacent column viewport's width.
        /// </summary>
        /// <param name="columnViewportIndex">The column viewport index to adjust, it adjusts the column viewport and its next column viewport.</param>
        /// <param name="deltaViewportWidth">The column width adjusted offset.</param>
        public void AdjustColumnViewport(int columnViewportIndex, double deltaViewportWidth)
        {
            ViewportInfo viewportInfo = this.GetViewportInfo();
            if ((columnViewportIndex < 0) || (columnViewportIndex > (viewportInfo.ColumnViewportCount - 1)))
            {
                throw new ArgumentOutOfRangeException("columnViewportIndex");
            }
            if ((viewportInfo.ColumnViewportCount > 1) && (columnViewportIndex != (viewportInfo.ColumnViewportCount - 1)))
            {
                int index = columnViewportIndex + 1;
                viewportInfo.ViewportWidth[columnViewportIndex] = DoubleUtil.Formalize(this.GetViewportWidth(columnViewportIndex) + deltaViewportWidth) / ((double)this.ZoomFactor);
                viewportInfo.ViewportWidth[index] = DoubleUtil.Formalize(this.GetViewportWidth(index) - deltaViewportWidth) / ((double)this.ZoomFactor);
                if (viewportInfo.ViewportWidth[index] == 0.0)
                {
                    this.Worksheet.RemoveColumnViewport(index);
                }
                if (viewportInfo.ViewportWidth[columnViewportIndex] == 0.0)
                {
                    this.Worksheet.RemoveColumnViewport(columnViewportIndex);
                }
                viewportInfo = this.GetViewportInfo();
                viewportInfo.ViewportWidth[viewportInfo.ColumnViewportCount - 1] = -1.0;
                this.SetViewportInfo(this.Worksheet, viewportInfo);
                this.InvalidateLayout();
                base.InvalidateMeasure();
            }
        }

        private CellRange AdjustFillRange(CellRange fillRange)
        {
            int row = (fillRange.Row != -1) ? fillRange.Row : 0;
            int column = (fillRange.Column != -1) ? fillRange.Column : 0;
            int rowCount = (fillRange.RowCount != -1) ? fillRange.RowCount : this.Worksheet.RowCount;
            return new CellRange(row, column, rowCount, (fillRange.ColumnCount != -1) ? fillRange.ColumnCount : this.Worksheet.ColumnCount);
        }

        /// <summary>
        /// Adjusts the adjacent row viewport's height.
        /// </summary>
        /// <param name="rowViewportIndex">The row viewport index to adjust, it adjusts the row viewport and its next row viewport.</param>
        /// <param name="deltaViewportHeight">The row height adjusted offset.</param>
        public void AdjustRowViewport(int rowViewportIndex, double deltaViewportHeight)
        {
            ViewportInfo viewportInfo = this.GetViewportInfo();
            if ((rowViewportIndex < 0) || (rowViewportIndex > (viewportInfo.RowViewportCount - 1)))
            {
                throw new ArgumentOutOfRangeException("rowViewportIndex");
            }
            if ((viewportInfo.RowViewportCount > 1) && (rowViewportIndex != (viewportInfo.RowViewportCount - 1)))
            {
                int index = rowViewportIndex + 1;
                viewportInfo.ViewportHeight[rowViewportIndex] = DoubleUtil.Formalize(this.GetViewportHeight(rowViewportIndex) + deltaViewportHeight) / ((double)this.ZoomFactor);
                viewportInfo.ViewportHeight[index] = DoubleUtil.Formalize(this.GetViewportHeight(index) - deltaViewportHeight) / ((double)this.ZoomFactor);
                if (viewportInfo.ViewportHeight[index] == 0.0)
                {
                    this.Worksheet.RemoveRowViewport(rowViewportIndex + 1);
                }
                if (viewportInfo.ViewportHeight[rowViewportIndex] == 0.0)
                {
                    this.Worksheet.RemoveRowViewport(rowViewportIndex);
                }
                viewportInfo = this.GetViewportInfo();
                viewportInfo.ViewportHeight[viewportInfo.RowViewportCount - 1] = -1.0;
                this.SetViewportInfo(this.Worksheet, viewportInfo);
                this.InvalidateLayout();
                base.InvalidateMeasure();
            }
        }

        private CellRange AdjustViewportRange(int rowViewport, int columnViewport, CellRange range)
        {
            int row = (range.Row != -1) ? range.Row : this.GetViewportTopRow(rowViewport);
            int column = (range.Column != -1) ? range.Column : this.GetViewportLeftColumn(columnViewport);
            int rowCount = (range.RowCount != -1) ? range.RowCount : this.Worksheet.RowCount;
            return new CellRange(row, column, rowCount, (range.ColumnCount != -1) ? range.ColumnCount : this.Worksheet.ColumnCount);
        }

        private bool AllowEnterEditing(KeyRoutedEventArgs e)
        {
            bool flag;
            bool flag2;
            bool flag3;
            this._isIMEEnterEditing = false;
            KeyboardHelper.GetMetaKeyState(out flag, out flag2, out flag3);
            if (flag2 || flag3)
            {
                return false;
            }
            if (((((e.Key != VirtualKey.Space) && (((VirtualKey.Search | VirtualKey.Shift) > e.Key) || (e.Key > ((VirtualKey)0xc0)))) && (((VirtualKey.Scroll | VirtualKey.J) > e.Key) || (e.Key > (VirtualKey.NumberKeyLock | VirtualKey.N)))) && (((VirtualKey.Number0 > e.Key) || (e.Key > VirtualKey.Number9)) && ((VirtualKey.A > e.Key) || (e.Key > VirtualKey.Z)))) && ((VirtualKey.NumberPad0 > e.Key) || (e.Key > VirtualKey.NumberPad9)))
            {
                return ((VirtualKey.Multiply <= e.Key) && (e.Key <= VirtualKey.Divide));
            }
            return true;
        }

        internal DataValidationResult ApplyEditingValue(bool cancel = false)
        {
            if (this.IsEditing && this.EditorDirty)
            {
                GcViewport editingViewport = this.EditingViewport;
                if (((editingViewport != null) && editingViewport.IsEditing()) && !cancel)
                {
                    int editingRowIndex = editingViewport.EditingContainer.EditingRowIndex;
                    int editingColumnIndex = editingViewport.EditingContainer.EditingColumnIndex;
                    string editorValue = (string)(editingViewport.GetEditorValue() as string);
                    CellEditExtent extent = new CellEditExtent(editingRowIndex, editingColumnIndex, editorValue);
                    CellEditUndoAction command = new CellEditUndoAction(this.Worksheet, extent);
                    this.DoCommand(command);
                    return command.ApplyResult;
                }
            }
            return DataValidationResult.ForceApply;
        }

        private Windows.Foundation.Point ArrangeDragFillTooltip(CellRange range, FillDirection direction)
        {
            int row = -1;
            int column = -1;
            switch (direction)
            {
                case FillDirection.Left:
                    row = (range.Row + range.RowCount) - 1;
                    column = range.Column;
                    break;

                case FillDirection.Right:
                case FillDirection.Down:
                    row = (range.Row + range.RowCount) - 1;
                    column = (range.Column + range.ColumnCount) - 1;
                    break;

                case FillDirection.Up:
                    row = range.Row;
                    column = (range.Column + range.ColumnCount) - 1;
                    break;
            }
            RowLayout layout = this.GetViewportRowLayoutModel(this._dragToRowViewport).FindRow(row);
            ColumnLayout layout2 = this.GetViewportColumnLayoutModel(this._dragToColumnViewport).FindColumn(column);
            if ((layout != null) && (layout2 != null))
            {
                switch (direction)
                {
                    case FillDirection.Left:
                        return new Windows.Foundation.Point(layout2.X + 2.0, (layout.Y + layout.Height) + 2.0);

                    case FillDirection.Right:
                    case FillDirection.Down:
                        return new Windows.Foundation.Point((layout2.X + layout2.Width) + 2.0, (layout.Y + layout.Height) + 2.0);

                    case FillDirection.Up:
                        return new Windows.Foundation.Point((layout2.X + layout2.Width) + 2.0, layout.Y + 2.0);
                }
            }
            return new Windows.Foundation.Point();
        }

        /// <summary>
        /// Positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class, when overridden in a derived class.
        /// </summary>
        /// <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
        /// <returns>
        /// The actual size used.
        /// </returns>
        protected override Windows.Foundation.Size ArrangeOverride(Windows.Foundation.Size finalSize)
        {
            double headerX;
            double headerY;
            SheetLayout sheetLayout = this.GetSheetLayout();
            ViewportInfo viewportInfo = this.GetViewportInfo();
            int columnViewportCount = viewportInfo.ColumnViewportCount;
            int rowViewportCount = viewportInfo.RowViewportCount;
            this.TrackersContainer.Arrange(new Windows.Foundation.Rect(0.0, 0.0, finalSize.Width, finalSize.Height));
            this.ShapeDrawingContainer.Arrange(new Windows.Foundation.Rect(0.0, 0.0, finalSize.Width, finalSize.Height));
            this.CursorsContainer.Arrange(new Windows.Foundation.Rect(0.0, 0.0, finalSize.Width, finalSize.Height));
            if ((this._cornerPresenter != null) && (this._cornerPresenter.Parent != null))
            {
                headerX = sheetLayout.HeaderX;
                headerY = sheetLayout.HeaderY;
                if ((this._cornerPresenter.Width != sheetLayout.HeaderWidth) || (this._cornerPresenter.Height != sheetLayout.HeaderHeight))
                {
                    this._cornerPresenter.Arrange(new Windows.Foundation.Rect(headerX, headerY, sheetLayout.HeaderWidth, sheetLayout.HeaderHeight));
                }
            }
            if (this._columnHeaderPresenters != null)
            {
                for (int i = -1; i <= columnViewportCount; i++)
                {
                    headerX = sheetLayout.GetViewportX(i);
                    headerY = sheetLayout.HeaderY;
                    double viewportWidth = sheetLayout.GetViewportWidth(i);
                    double headerHeight = sheetLayout.HeaderHeight;
                    GcViewport viewport = this._columnHeaderPresenters[i + 1];
                    if (((viewport != null) && (viewport.Parent != null)) && ((viewport.Width != viewportWidth) || (viewport.Height != headerHeight)))
                    {
                        viewport.InvalidateArrange();
                        viewport.Arrange(new Windows.Foundation.Rect(headerX, headerY, viewportWidth, headerHeight));
                    }
                }
            }
            if (this._rowHeaderPresenters != null)
            {
                for (int j = -1; j <= rowViewportCount; j++)
                {
                    headerX = sheetLayout.HeaderX;
                    headerY = sheetLayout.GetViewportY(j);
                    double headerWidth = sheetLayout.HeaderWidth;
                    double viewportHeight = sheetLayout.GetViewportHeight(j);
                    GcViewport viewport2 = this._rowHeaderPresenters[j + 1];
                    if (((viewport2 != null) && (viewport2.Parent != null)) && ((viewport2.Width != headerWidth) || (viewport2.Height != viewportHeight)))
                    {
                        viewport2.InvalidateArrange();
                        viewport2.Arrange(new Windows.Foundation.Rect(headerX, headerY, headerWidth, viewportHeight));
                    }
                }
            }
            if (this._viewportPresenters != null)
            {
                for (int k = -1; k <= columnViewportCount; k++)
                {
                    headerX = sheetLayout.GetViewportX(k);
                    double width = sheetLayout.GetViewportWidth(k);
                    for (int m = -1; m <= rowViewportCount; m++)
                    {
                        headerY = sheetLayout.GetViewportY(m);
                        double height = sheetLayout.GetViewportHeight(m);
                        GcViewport viewport3 = this._viewportPresenters[m + 1, k + 1];
                        if (viewport3 != null)
                        {
                            viewport3.Arrange(new Windows.Foundation.Rect(headerX, headerY, width, height));
                        }
                    }
                }
            }
            this.ArrangeRangeGroup(rowViewportCount, columnViewportCount, sheetLayout);
            return finalSize;
        }

        internal void ArrangeRangeGroup(int rowPaneCount, int columnPaneCount, SheetLayout layout)
        {
            double x;
            double y;
            GroupLayout groupLayout = this.GetGroupLayout();
            if ((this._groupCornerPresenter != null) && (this._groupCornerPresenter.Parent != null))
            {
                x = groupLayout.X;
                y = groupLayout.Y;
                if ((this._groupCornerPresenter.Width != groupLayout.Width) || (this._groupCornerPresenter.Height != groupLayout.Height))
                {
                    this._groupCornerPresenter.Arrange(new Windows.Foundation.Rect(x, y, groupLayout.Width, groupLayout.Height));
                }
            }
            if ((this._rowGroupHeaderPresenter != null) && (this._rowGroupHeaderPresenter.Parent != null))
            {
                x = groupLayout.X;
                y = groupLayout.Y + groupLayout.Height;
                double width = groupLayout.Width;
                double headerHeight = layout.HeaderHeight;
                this._rowGroupHeaderPresenter.Arrange(new Windows.Foundation.Rect(x, y, width, headerHeight));
            }
            if ((this._columnGroupHeaderPresenter != null) && (this._columnGroupHeaderPresenter.Parent != null))
            {
                x = groupLayout.X + groupLayout.Width;
                y = groupLayout.Y;
                double headerWidth = layout.HeaderWidth;
                double height = groupLayout.Height;
                this._columnGroupHeaderPresenter.Arrange(new Windows.Foundation.Rect(x, y, headerWidth, height));
            }
            if (this._rowGroupPresenters != null)
            {
                for (int i = -1; i <= rowPaneCount; i++)
                {
                    GcRangeGroup group = this._rowGroupPresenters[i + 1];
                    if (group != null)
                    {
                        x = groupLayout.X;
                        y = layout.GetViewportY(i);
                        double num8 = groupLayout.Width;
                        double viewportHeight = layout.GetViewportHeight(i);
                        if (!this.IsTouching || (i != this._touchStartHitTestInfo.RowViewportIndex))
                        {
                            group.Arrange(new Windows.Foundation.Rect(x, y, num8, viewportHeight));
                            group.Clip = null;
                        }
                        else
                        {
                            group.Arrange(new Windows.Foundation.Rect(x, y + this._translateOffsetY, num8, viewportHeight));
                            if (this._translateOffsetY < 0.0)
                            {
                                RectangleGeometry geometry = new RectangleGeometry();
                                geometry.Rect = new Windows.Foundation.Rect(x, Math.Abs(this._translateOffsetY), num8, viewportHeight);
                                group.Clip = geometry;
                            }
                            else if (this._translateOffsetY > 0.0)
                            {
                                RectangleGeometry geometry2 = new RectangleGeometry();
                                geometry2.Rect = new Windows.Foundation.Rect(x, 0.0, num8, Math.Max((double)0.0, (double)(viewportHeight - Math.Abs(this._translateOffsetY))));
                                group.Clip = geometry2;
                            }
                        }
                    }
                }
            }
            if (this._columnGroupPresenters != null)
            {
                for (int j = -1; j <= columnPaneCount; j++)
                {
                    GcRangeGroup group2 = this._columnGroupPresenters[j + 1];
                    if (group2 != null)
                    {
                        x = layout.GetViewportX(j);
                        y = groupLayout.Y;
                        double viewportWidth = layout.GetViewportWidth(j);
                        double num12 = groupLayout.Height;
                        if (!this.IsTouching || (j != this._touchStartHitTestInfo.ColumnViewportIndex))
                        {
                            group2.Arrange(new Windows.Foundation.Rect(x, y, viewportWidth, num12));
                            group2.Clip = null;
                        }
                        else
                        {
                            group2.Arrange(new Windows.Foundation.Rect(x + this._translateOffsetX, y, viewportWidth, num12));
                            if (this._translateOffsetX < 0.0)
                            {
                                RectangleGeometry geometry3 = new RectangleGeometry();
                                geometry3.Rect = new Windows.Foundation.Rect(Math.Abs(this._translateOffsetX), y, viewportWidth, num12);
                                group2.Clip = geometry3;
                            }
                            else if (this._translateOffsetX > 0.0)
                            {
                                RectangleGeometry geometry4 = new RectangleGeometry();
                                geometry4.Rect = new Windows.Foundation.Rect(0.0, y, Math.Max((double)0.0, (double)(viewportWidth - Math.Abs(this._translateOffsetX))), num12);
                                group2.Clip = geometry4;
                            }
                        }
                    }
                }
            }
        }

        private void AutoFitColumn()
        {
            ColumnLayout viewportResizingColumnLayoutFromX;
            if (this.IsResizingColumns)
            {
                this.EndColumnResizing();
            }
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if (savedHitTestInformation.HitTestType == HitTestType.ColumnHeader)
            {
                viewportResizingColumnLayoutFromX = this.GetViewportResizingColumnLayoutFromX(savedHitTestInformation.ColumnViewportIndex, savedHitTestInformation.HitPoint.X);
                bool flag = false;
                if (viewportResizingColumnLayoutFromX == null)
                {
                    if (savedHitTestInformation.ColumnViewportIndex == 0)
                    {
                        viewportResizingColumnLayoutFromX = this.GetViewportResizingColumnLayoutFromX(-1, savedHitTestInformation.HitPoint.X);
                    }
                    if ((viewportResizingColumnLayoutFromX == null) && ((savedHitTestInformation.ColumnViewportIndex == 0) || (savedHitTestInformation.ColumnViewportIndex == -1)))
                    {
                        viewportResizingColumnLayoutFromX = this.GetRowHeaderResizingColumnLayoutFromX(savedHitTestInformation.HitPoint.X);
                        flag = true;
                    }
                }
                if (viewportResizingColumnLayoutFromX != null)
                {
                    int column = viewportResizingColumnLayoutFromX.Column;
                    if (!flag)
                    {
                        this.AutoFitColumnInternal(column, true, false);
                    }
                    else
                    {
                        ColumnAutoFitUndoAction command = new ColumnAutoFitUndoAction(this.Worksheet, new ColumnAutoFitExtent[] { new ColumnAutoFitExtent(column) }, true);
                        this.DoCommand(command);
                    }
                }
            }
            else if (savedHitTestInformation.HitTestType == HitTestType.Corner)
            {
                viewportResizingColumnLayoutFromX = this.GetRowHeaderColumnLayoutModel().FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                if (viewportResizingColumnLayoutFromX != null)
                {
                    int num2 = viewportResizingColumnLayoutFromX.Column;
                    ColumnAutoFitUndoAction action2 = new ColumnAutoFitUndoAction(this.Worksheet, new ColumnAutoFitExtent[] { new ColumnAutoFitExtent(num2) }, true);
                    this.DoCommand(action2);
                }
            }
        }

        /// <summary>
        /// Automatically fits the viewport column.
        /// </summary>
        /// <param name="column">The column index to automatically fit.</param>
        public void AutoFitColumn(int column)
        {
            if ((column < 0) || (column >= this.Worksheet.ColumnCount))
            {
                throw new ArgumentOutOfRangeException("column");
            }
            this.AutoFitColumn(column, false);
        }

        /// <summary>
        /// Automatically fits the viewport column.
        /// </summary>
        /// <param name="column">The column index to automatically fit.</param>
        /// <param name="isRowHeader">The flag indicates whether sheetArea is a row header.</param>
        public void AutoFitColumn(int column, bool isRowHeader)
        {
            if ((column < 0) || (column >= this.Worksheet.ColumnCount))
            {
                throw new ArgumentOutOfRangeException("column");
            }
            this.AutoFitColumnInternal(column, false, isRowHeader);
        }

        private void AutoFitColumnForTouch(HitTestInformation hi)
        {
            ColumnLayout viewportResizingColumnLayoutFromXForTouch;
            if (this.IsTouchResizingColumns)
            {
                this.EndTouchColumnResizing();
            }
            if (hi.HitTestType == HitTestType.ColumnHeader)
            {
                viewportResizingColumnLayoutFromXForTouch = this.GetViewportResizingColumnLayoutFromXForTouch(hi.ColumnViewportIndex, hi.HitPoint.X);
                bool flag = false;
                if (viewportResizingColumnLayoutFromXForTouch == null)
                {
                    if (hi.ColumnViewportIndex == 0)
                    {
                        viewportResizingColumnLayoutFromXForTouch = this.GetViewportResizingColumnLayoutFromXForTouch(-1, hi.HitPoint.X);
                    }
                    if ((viewportResizingColumnLayoutFromXForTouch == null) && ((hi.ColumnViewportIndex == 0) || (hi.ColumnViewportIndex == -1)))
                    {
                        viewportResizingColumnLayoutFromXForTouch = this.GetRowHeaderResizingColumnLayoutFromXForTouch(hi.HitPoint.X);
                        flag = true;
                    }
                }
                if (viewportResizingColumnLayoutFromXForTouch != null)
                {
                    int column = viewportResizingColumnLayoutFromXForTouch.Column;
                    if (!flag)
                    {
                        this.AutoFitColumnInternal(column, true, false);
                    }
                    else
                    {
                        ColumnAutoFitUndoAction command = new ColumnAutoFitUndoAction(this.Worksheet, new ColumnAutoFitExtent[] { new ColumnAutoFitExtent(column) }, true);
                        this.DoCommand(command);
                    }
                }
            }
            else if (hi.HitTestType == HitTestType.Corner)
            {
                viewportResizingColumnLayoutFromXForTouch = this.GetRowHeaderColumnLayoutModel().FindColumn(hi.HeaderInfo.ResizingColumn);
                if (viewportResizingColumnLayoutFromXForTouch != null)
                {
                    int num2 = viewportResizingColumnLayoutFromXForTouch.Column;
                    ColumnAutoFitUndoAction action2 = new ColumnAutoFitUndoAction(this.Worksheet, new ColumnAutoFitExtent[] { new ColumnAutoFitExtent(num2) }, true);
                    this.DoCommand(action2);
                }
            }
        }

        private void AutoFitColumnInternal(int columnIndex, bool supportUndo, bool isRowHeader)
        {
            List<ColumnAutoFitExtent> list = new List<ColumnAutoFitExtent>();
            if (this.Worksheet.IsSelected(-1, columnIndex))
            {
                foreach (CellRange range in this.Worksheet.Selections)
                {
                    if (range.Row == -1)
                    {
                        int num = (range.Column == -1) ? 0 : range.Column;
                        int num2 = (range.Column == -1) ? this.Worksheet.ColumnCount : range.ColumnCount;
                        for (int i = num; i < (num + num2); i++)
                        {
                            list.Add(new ColumnAutoFitExtent(i));
                        }
                    }
                }
            }
            else
            {
                list.Add(new ColumnAutoFitExtent(columnIndex));
            }
            ColumnAutoFitExtent[] columns = new ColumnAutoFitExtent[list.Count];
            list.CopyTo(columns);
            ColumnAutoFitUndoAction command = new ColumnAutoFitUndoAction(this.Worksheet, columns, isRowHeader);
            if (supportUndo)
            {
                this.DoCommand(command);
            }
            else
            {
                command.Execute(this);
            }
        }

        private void AutoFitRow()
        {
            RowLayout viewportResizingRowLayoutFromY;
            if (this.IsResizingRows)
            {
                this.EndRowResizing();
            }
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if (savedHitTestInformation.HitTestType == HitTestType.RowHeader)
            {
                bool flag = false;
                viewportResizingRowLayoutFromY = this.GetViewportResizingRowLayoutFromY(savedHitTestInformation.RowViewportIndex, savedHitTestInformation.HitPoint.Y);
                if (viewportResizingRowLayoutFromY == null)
                {
                    if (savedHitTestInformation.RowViewportIndex == 0)
                    {
                        viewportResizingRowLayoutFromY = this.GetViewportResizingRowLayoutFromY(-1, savedHitTestInformation.HitPoint.Y);
                    }
                    if ((viewportResizingRowLayoutFromY == null) && ((savedHitTestInformation.RowViewportIndex == -1) || (savedHitTestInformation.RowViewportIndex == 0)))
                    {
                        viewportResizingRowLayoutFromY = this.GetColumnHeaderResizingRowLayoutFromY(savedHitTestInformation.HitPoint.Y);
                        flag = true;
                    }
                }
                if (viewportResizingRowLayoutFromY != null)
                {
                    int row = viewportResizingRowLayoutFromY.Row;
                    if (!flag)
                    {
                        this.AutoFitRowInternal(row, true, false);
                    }
                    else
                    {
                        RowAutoFitUndoAction command = new RowAutoFitUndoAction(this.Worksheet, new RowAutoFitExtent[] { new RowAutoFitExtent(row) }, true);
                        this.DoCommand(command);
                    }
                }
            }
            else if (savedHitTestInformation.HitTestType == HitTestType.Corner)
            {
                viewportResizingRowLayoutFromY = this.GetColumnHeaderRowLayoutModel().FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                if (viewportResizingRowLayoutFromY != null)
                {
                    int num2 = viewportResizingRowLayoutFromY.Row;
                    RowAutoFitUndoAction action2 = new RowAutoFitUndoAction(this.Worksheet, new RowAutoFitExtent[] { new RowAutoFitExtent(num2) }, true);
                    this.DoCommand(action2);
                }
            }
        }

        /// <summary>
        /// Automatically fits the viewport row.
        /// </summary>
        /// <param name="row">The row index.</param>
        public void AutoFitRow(int row)
        {
            if ((row < 0) || (row > this.Worksheet.RowCount))
            {
                throw new ArgumentOutOfRangeException("row");
            }
            this.AutoFitRow(row, false);
        }

        /// <summary>
        /// Automatically fits the viewport row.
        /// </summary>
        /// <param name="row">The row index.</param>
        /// <param name="isColumnHeader">The flag indicates whether sheetArea is a column header.</param>
        public void AutoFitRow(int row, bool isColumnHeader)
        {
            if ((row < 0) || (row > this.Worksheet.RowCount))
            {
                throw new ArgumentOutOfRangeException("row");
            }
            this.AutoFitRowInternal(row, false, isColumnHeader);
        }

        private void AutoFitRowForTouch(HitTestInformation hi)
        {
            RowLayout viewportResizingRowLayoutFromYForTouch;
            if (this.IsTouchResizingRows)
            {
                this.EndTouchRowResizing();
            }
            if (hi.HitTestType == HitTestType.RowHeader)
            {
                bool flag = false;
                viewportResizingRowLayoutFromYForTouch = this.GetViewportResizingRowLayoutFromYForTouch(hi.RowViewportIndex, hi.HitPoint.Y);
                if (viewportResizingRowLayoutFromYForTouch == null)
                {
                    if (hi.RowViewportIndex == 0)
                    {
                        viewportResizingRowLayoutFromYForTouch = this.GetViewportResizingRowLayoutFromYForTouch(-1, hi.HitPoint.Y);
                    }
                    if ((viewportResizingRowLayoutFromYForTouch == null) && ((hi.RowViewportIndex == -1) || (hi.RowViewportIndex == 0)))
                    {
                        viewportResizingRowLayoutFromYForTouch = this.GetColumnHeaderResizingRowLayoutFromYForTouch(hi.HitPoint.Y);
                        flag = true;
                    }
                }
                if (viewportResizingRowLayoutFromYForTouch != null)
                {
                    int row = viewportResizingRowLayoutFromYForTouch.Row;
                    if (!flag)
                    {
                        this.AutoFitRowInternal(row, true, false);
                    }
                    else
                    {
                        RowAutoFitUndoAction command = new RowAutoFitUndoAction(this.Worksheet, new RowAutoFitExtent[] { new RowAutoFitExtent(row) }, true);
                        this.DoCommand(command);
                    }
                }
            }
            else if (hi.HitTestType == HitTestType.Corner)
            {
                viewportResizingRowLayoutFromYForTouch = this.GetColumnHeaderRowLayoutModel().FindRow(hi.HeaderInfo.ResizingRow);
                if (viewportResizingRowLayoutFromYForTouch != null)
                {
                    int num2 = viewportResizingRowLayoutFromYForTouch.Row;
                    RowAutoFitUndoAction action2 = new RowAutoFitUndoAction(this.Worksheet, new RowAutoFitExtent[] { new RowAutoFitExtent(num2) }, true);
                    this.DoCommand(action2);
                }
            }
        }

        private void AutoFitRowInternal(int rowIndex, bool supportUndo, bool isColumnHeader)
        {
            List<RowAutoFitExtent> list = new List<RowAutoFitExtent>();
            if (this.Worksheet.IsSelected(rowIndex, -1))
            {
                foreach (CellRange range in this.Worksheet.Selections)
                {
                    if (range.Column == -1)
                    {
                        int num = (range.Row == -1) ? 0 : range.Row;
                        int num2 = (range.Row == -1) ? this.Worksheet.RowCount : range.RowCount;
                        for (int i = num; i < (num + num2); i++)
                        {
                            list.Add(new RowAutoFitExtent(i));
                        }
                    }
                }
            }
            else
            {
                list.Add(new RowAutoFitExtent(rowIndex));
            }
            RowAutoFitExtent[] rows = new RowAutoFitExtent[list.Count];
            list.CopyTo(rows);
            RowAutoFitUndoAction command = new RowAutoFitUndoAction(this.Worksheet, rows, isColumnHeader);
            if (supportUndo)
            {
                this.DoCommand(command);
            }
            else
            {
                command.Execute(this);
            }
        }

        /// <summary>
        /// Enters a state where the user can select formulas with the mouse or keyboard.
        /// </summary>
        public void BeginFormulaSelection(object editor = null)
        {
            this._formulaSelectionFeature.BeginFormulaSelection(editor);
        }

        private void CachFloatingObjectsMovingResizingLayoutModels()
        {
            ViewportInfo viewportInfo = this.GetViewportInfo();
            int columnViewportCount = viewportInfo.ColumnViewportCount;
            int rowViewportCount = viewportInfo.RowViewportCount;
            this._cachedFloatingObjectMovingResizingLayoutModel = new FloatingObjectLayoutModel[rowViewportCount + 2, columnViewportCount + 2];
            for (int i = -1; i <= rowViewportCount; i++)
            {
                for (int j = -1; j <= columnViewportCount; j++)
                {
                    this._cachedFloatingObjectMovingResizingLayoutModel[i + 1, j + 1] = new FloatingObjectLayoutModel(this.GetViewportFloatingObjectLayoutModel(i, j));
                }
            }
        }

        private Windows.Foundation.Point CalcMoveOffset(int moveStartRowViewport, int moveStartColumnViewport, int moveStartRow, int moveStartColumn, Windows.Foundation.Point startPoint, int moveEndRowViewport, int moveEndColumnViewport, int moveEndRow, int moveEndColumn, Windows.Foundation.Point endPoint)
        {
            RowLayout layout = this.GetViewportRowLayoutModel(moveEndRowViewport).FindRow(moveEndRow);
            ColumnLayout layout2 = this.GetViewportColumnLayoutModel(moveEndColumnViewport).FindColumn(moveEndColumn);
            if ((layout == null) || (layout2 == null))
            {
                return new Windows.Foundation.Point(0.0, 0.0);
            }
            Windows.Foundation.Rect rect = this._floatingObjectsMovingResizingStartPointCellBounds;
            Windows.Foundation.Rect rect2 = new Windows.Foundation.Rect(layout2.X, layout.Y, layout2.Width, layout.Height);
            bool flag = true;
            if (moveEndRow < moveStartRow)
            {
                flag = false;
                int num = moveStartRow;
                moveStartRow = moveEndRow;
                moveEndRow = num;
                double y = startPoint.Y;
                startPoint.Y = endPoint.Y;
                endPoint.Y = y;
                y = rect.Y;
                rect.Y = rect2.Y;
                rect2.Y = y;
                y = rect.Height;
                rect.Height = rect2.Height;
                rect2.Height = y;
            }
            double num3 = 0.0;
            for (int i = moveStartRow; i <= moveEndRow; i++)
            {
                num3 += Math.Ceiling((double)(this.Worksheet.GetActualRowHeight(i, SheetArea.Cells) * this.ZoomFactor));
            }
            num3 -= startPoint.Y - rect.Y;
            num3 -= (rect2.Y + rect2.Height) - endPoint.Y;
            if (!flag)
            {
                num3 = -num3;
            }
            bool flag2 = true;
            if (moveEndColumn < moveStartColumn)
            {
                flag2 = false;
                int num5 = moveStartColumn;
                moveStartColumn = moveEndColumn;
                moveEndColumn = num5;
                double width = startPoint.X;
                startPoint.X = endPoint.X;
                endPoint.X = width;
                width = rect.X;
                rect.X = rect2.X;
                rect2.X = width;
                width = rect.Width;
                rect.Width = rect2.Width;
                rect2.Width = width;
            }
            double x = 0.0;
            for (int j = moveStartColumn; j <= moveEndColumn; j++)
            {
                x += Math.Ceiling((double)(this.Worksheet.GetActualColumnWidth(j, SheetArea.Cells) * this.ZoomFactor));
            }
            x -= startPoint.X - rect.X;
            x -= (rect2.X + rect2.Width) - endPoint.X;
            if (!flag2)
            {
                x = -x;
            }
            x = Math.Floor((double)(x / ((double)this.ZoomFactor)));
            return new Windows.Foundation.Point(x, Math.Floor((double)(num3 / ((double)this.ZoomFactor))));
        }

        internal bool CanCommitAndNavigate()
        {
            if (!this.IsEditing)
            {
                return false;
            }
            GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(this.GetActiveRowViewportIndex(), this.GetActiveColumnViewportIndex());
            if ((viewportRowsPresenter != null) && (((viewportRowsPresenter.EditingContainer != null) && (viewportRowsPresenter.EditingContainer.Editor != null)) && (viewportRowsPresenter.EditingContainer.EditorStatus == EditorStatus.Edit)))
            {
                return false;
            }
            return true;
        }

        private bool CanTouchManipulate(Windows.Foundation.Point point)
        {
            this.IsTouchPromotedMouseMessage = false;
            HitTestInformation information = this.TouchHitTest(point.X, point.Y);
            if (information.HitTestType != HitTestType.TabStrip)
            {
                if (this.Worksheet == null)
                {
                    return false;
                }
                if ((((information.HitTestType == HitTestType.HorizontalScrollBar) || (information.HitTestType == HitTestType.VerticalScrollBar)) || ((information.HitTestType == HitTestType.ColumnRangeGroup) || (information.HitTestType == HitTestType.RowRangeGroup))) || (((information.HitTestType == HitTestType.RowSplitBar) || (information.HitTestType == HitTestType.ColumnSplitBar)) || (((information.HitTestType == HitTestType.ColumnSplitBox) || (information.HitTestType == HitTestType.RowSplitBox)) || (information.HitTestType == HitTestType.TabSplitBox))))
                {
                    this.IsTouchPromotedMouseMessage = true;
                    return false;
                }
                if (information.HitTestType == HitTestType.Viewport)
                {
                    if ((this.IsEditing && (this.Worksheet.ActiveRowIndex == information.ViewportInfo.Row)) && (this.Worksheet.ActiveColumnIndex == information.ViewportInfo.Column))
                    {
                        return false;
                    }
                    if (((this._dataValidationListPopUp != null) && this._dataValidationListPopUp.IsOpen) && this.HitTestPopup(this._dataValidationPopUpHelper, point))
                    {
                        return false;
                    }
                    if (((this._filterPopup != null) && this._filterPopup.IsOpen) && this.HitTestPopup(this._filterPopupHelper, point))
                    {
                        return false;
                    }
                    return true;
                }
                if (information.HitTestType == HitTestType.Empty)
                {
                    return false;
                }
            }
            return true;
        }

        internal bool CheckPastedRange(Dt.Cells.Data.Worksheet fromSheet, CellRange fromRange, CellRange toRange, bool isCutting, string clipboardText, out CellRange pastedRange, out bool pasteInternal)
        {
            pasteInternal = false;
            pastedRange = null;
            CellRange exceptedRange = isCutting ? fromRange : null;
            if ((fromSheet == null) && string.IsNullOrEmpty(clipboardText))
            {
                return false;
            }
            pasteInternal = IsPastedInternal(fromSheet, fromRange, this.Worksheet, clipboardText);
            Dt.Cells.Data.Worksheet toSheet = this.Worksheet;
            if (pasteInternal)
            {
                bool flag;
                string str;
                if ((isCutting && fromSheet.Protect) && IsAnyCellInRangeLocked(fromSheet, fromRange.Row, fromRange.Column, fromRange.RowCount, fromRange.ColumnCount))
                {
                    this.RaiseInvalidOperation(ResourceStrings.SheetViewPasteSouceSheetCellsAreLocked, null, null);
                    return false;
                }
                pastedRange = GetPastedRange(fromSheet, fromRange, toSheet, toRange, isCutting);
                if (this.RaiseValidationPasting(fromSheet, fromRange, this.Worksheet, toRange, pastedRange, isCutting, out flag, out str))
                {
                    pastedRange = GetPastedRange(fromSheet, fromRange, toSheet, toRange, isCutting);
                    return !flag;
                }
            }
            else
            {
                bool flag3;
                string str2;
                pastedRange = GetPastedRange(toRange, clipboardText);
                if (this.RaiseValidationPasting(null, null, this.Worksheet, toRange, pastedRange, isCutting, out flag3, out str2))
                {
                    return !flag3;
                }
            }
            if (pastedRange == null)
            {
                this.RaiseInvalidOperation(ResourceStrings.SheetViewTheCopyAreaAndPasteAreaAreNotTheSameSize, null, null);
                return false;
            }
            if (toSheet.Protect && IsAnyCellInRangeLocked(toSheet, pastedRange.Row, pastedRange.Column, pastedRange.RowCount, pastedRange.ColumnCount))
            {
                this.RaiseInvalidOperation(ResourceStrings.SheetViewPasteDestinationSheetCellsAreLocked, null, null);
                return false;
            }
            if (pasteInternal)
            {
                if (HasPartSpans(fromSheet, fromRange.Row, fromRange.Column, fromRange.RowCount, fromRange.ColumnCount))
                {
                    this.RaiseInvalidOperation(ResourceStrings.SheetViewPasteChangeMergeCell, "Paste", new ClipboardPastingEventArgs(fromSheet, fromRange, toSheet, pastedRange, this._clipBoardOptions, isCutting));
                    return false;
                }
                if (HasPartArrayFormulas(fromSheet, fromRange.Row, fromRange.Column, fromRange.RowCount, fromRange.ColumnCount, exceptedRange))
                {
                    this.RaiseInvalidOperation(ResourceStrings.SheetViewPasteChangePartOfArrayFormula, null, null);
                    return false;
                }
                int rowCount = (pastedRange.Row < 0) ? toSheet.RowCount : pastedRange.RowCount;
                int columnCount = (pastedRange.Column < 0) ? toSheet.ColumnCount : pastedRange.ColumnCount;
                int num3 = (fromRange.Row < 0) ? fromSheet.RowCount : fromRange.RowCount;
                int num4 = (fromRange.Column < 0) ? fromSheet.ColumnCount : fromRange.ColumnCount;
                if ((rowCount <= num3) && (columnCount <= num4))
                {
                    if (HasPartSpans(toSheet, pastedRange.Row, pastedRange.Column, pastedRange.RowCount, pastedRange.ColumnCount))
                    {
                        this.RaiseInvalidOperation(ResourceStrings.SheetViewPasteChangeMergeCell, "Paste", new ClipboardPastingEventArgs(fromSheet, fromRange, toSheet, pastedRange, this._clipBoardOptions, isCutting));
                        return false;
                    }
                    if (HasPartArrayFormulas(toSheet, pastedRange.Row, pastedRange.Column, pastedRange.RowCount, pastedRange.ColumnCount, exceptedRange))
                    {
                        this.RaiseInvalidOperation(ResourceStrings.SheetViewPasteChangePartOfArrayFormula, null, null);
                        return false;
                    }
                }
                else
                {
                    int row = toRange.Row;
                    int column = toRange.Column;
                    if ((toRange.Row < 0) && (num3 < toSheet.RowCount))
                    {
                        row = 0;
                    }
                    if ((toRange.Column < 0) && (num4 < toSheet.ColumnCount))
                    {
                        column = 0;
                    }
                    if (((rowCount % num3) != 0) || ((columnCount % num4) != 0))
                    {
                        rowCount = num3;
                        columnCount = num4;
                        pastedRange = new CellRange(row, column, rowCount, columnCount);
                    }
                    int num7 = rowCount / num3;
                    int num8 = columnCount / num4;
                    for (int i = 0; i < num7; i++)
                    {
                        for (int j = 0; j < num8; j++)
                        {
                            if (HasPartSpans(toSheet, (row < 0) ? -1 : (row + (i * num3)), (column < 0) ? -1 : (column + (j * num4)), (row < 0) ? -1 : num3, (column < 0) ? -1 : num4))
                            {
                                this.RaiseInvalidOperation(ResourceStrings.SheetViewPasteChangeMergeCell, "Paste", new ClipboardPastingEventArgs(fromSheet, fromRange, toSheet, pastedRange, this._clipBoardOptions, isCutting));
                                return false;
                            }
                            if (HasPartArrayFormulas(toSheet, (row < 0) ? -1 : (row + (i * num3)), (column < 0) ? -1 : (column + (j * num4)), (row < 0) ? -1 : num3, (column < 0) ? -1 : num4, exceptedRange))
                            {
                                this.RaiseInvalidOperation(ResourceStrings.SheetViewPasteChangePartOfArrayFormula, null, null);
                                return false;
                            }
                        }
                    }
                }
            }
            else
            {
                if (HasPartSpans(toSheet, pastedRange.Row, pastedRange.Column, pastedRange.RowCount, pastedRange.ColumnCount))
                {
                    this.RaiseInvalidOperation(ResourceStrings.SheetViewPasteChangeMergeCell, "Paste", new ClipboardPastingEventArgs(fromSheet, fromRange, toSheet, pastedRange, this._clipBoardOptions, isCutting));
                    return false;
                }
                if (HasPartArrayFormulas(toSheet, pastedRange.Row, pastedRange.Column, pastedRange.RowCount, pastedRange.ColumnCount, exceptedRange))
                {
                    this.RaiseInvalidOperation(ResourceStrings.SheetViewPasteChangePartOfArrayFormula, null, null);
                    return false;
                }
                if (((pastedRange.Row + pastedRange.RowCount) > toSheet.RowCount) || ((pastedRange.Column + pastedRange.ColumnCount) > toSheet.ColumnCount))
                {
                    this.RaiseInvalidOperation(ResourceStrings.SheetViewTheCopyAreaAndPasteAreaAreNotTheSameSize, null, null);
                    return false;
                }
            }
            return true;
        }

        internal virtual void ClearMouseLeftButtonDownStates()
        {
            if (this.IsResizingColumns)
            {
                this.EndColumnResizing();
            }
            if (this.IsResizingRows)
            {
                this.EndRowResizing();
            }
            if (this._formulaSelectionFeature.IsDragging)
            {
                this._formulaSelectionFeature.EndDragging();
            }
            if (this.IsSelectingCells)
            {
                this.EndCellSelecting();
            }
            if (this.IsSelectingColumns)
            {
                this.EndColumnSelecting();
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                if ((savedHitTestInformation != null) && (savedHitTestInformation.HitTestType == HitTestType.ColumnHeader))
                {
                    GcViewport columnHeaderRowsPresenter = this.GetColumnHeaderRowsPresenter(savedHitTestInformation.ColumnViewportIndex);
                    if (columnHeaderRowsPresenter != null)
                    {
                        RowPresenter row = columnHeaderRowsPresenter.GetRow(savedHitTestInformation.HeaderInfo.Row);
                        if (row != null)
                        {
                            CellPresenterBase cell = row.GetCell(savedHitTestInformation.HeaderInfo.Column);
                            if (cell != null)
                            {
                                cell.ApplyState();
                            }
                        }
                    }
                }
            }
            if (this.IsSelectingRows)
            {
                this.EndRowSelecting();
                HitTestInformation information2 = this.GetSavedHitTestInformation();
                if ((information2 != null) && (information2.HitTestType == HitTestType.RowHeader))
                {
                    GcViewport rowHeaderRowsPresenter = this.GetRowHeaderRowsPresenter(information2.RowViewportIndex);
                    if (rowHeaderRowsPresenter != null)
                    {
                        RowPresenter presenter2 = rowHeaderRowsPresenter.GetRow(information2.HeaderInfo.Row);
                        if (presenter2 != null)
                        {
                            CellPresenterBase base3 = presenter2.GetCell(information2.HeaderInfo.Column);
                            if (base3 != null)
                            {
                                base3.ApplyState();
                            }
                        }
                    }
                }
            }
            if (this.IsDragDropping)
            {
                this.EndDragDropping();
            }
            if (this.IsDraggingFill)
            {
                this.EndDragFill();
            }
            if (this.IsMovingFloatingOjects)
            {
                this.EndFloatingObjectsMoving();
            }
            if (this.IsResizingFloatingObjects)
            {
                this.EndFloatingObjectResizing();
            }
        }

        /// <summary>
        /// Clears all undo and redo actions in the current UndoManager. 
        /// </summary>
        public void ClearUndoManager()
        {
            if (this._undoManager != null)
            {
                this._undoManager.UndoList.Clear();
                this._undoManager.RedoList.Clear();
            }
        }

        /// <summary>
        /// Copies the text of a cell range to the Clipboard.
        /// </summary>
        /// <param name="range">The copied cell range.</param>
        public void ClipboardCopy(CellRange range)
        {
            if (this.Worksheet != null)
            {
                if (range == null)
                {
                    throw new ArgumentNullException("range");
                }
                if (!IsValidRange(range.Row, range.Column, range.RowCount, range.ColumnCount, this.Worksheet.RowCount, this.Worksheet.ColumnCount))
                {
                    throw new ArgumentException(ResourceStrings.SheetViewClipboardArgumentException);
                }
                this.CopyToClipboard(range, false);
            }
        }

        /// <summary>
        /// Cuts the text of a cell range to the Clipboard.
        /// </summary>
        /// <param name="range">The cut cell range.</param>
        public void ClipboardCut(CellRange range)
        {
            if (this.Worksheet != null)
            {
                if (range == null)
                {
                    throw new ArgumentNullException("range");
                }
                if (!IsValidRange(range.Row, range.Column, range.RowCount, range.ColumnCount, this.Worksheet.RowCount, this.Worksheet.ColumnCount))
                {
                    throw new ArgumentException(ResourceStrings.SheetViewClipboardArgumentException);
                }
                this.CopyToClipboard(range, true);
            }
        }

        /// <summary>
        /// Pastes content from the Clipboard to a cell range on the sheet.
        /// </summary>
        /// <param name="range">The pasted cell range on the sheet.</param>
        public void ClipboardPaste(CellRange range)
        {
            this.ClipboardPaste(range, ClipboardPasteOptions.All);
        }

        /// <summary>
        /// Pastes content from the Clipboard to a cell range on the sheet.
        /// </summary>
        /// <param name="range">The pasted cell range.</param>
        /// <param name="option">The Clipboard paste option that indicates which content type to paste.</param>
        public void ClipboardPaste(CellRange range, ClipboardPasteOptions option)
        {
            if (this.Worksheet != null)
            {
                CellRange range1;
                bool flag2;
                if (range == null)
                {
                    throw new ArgumentNullException("range");
                }
                if (!IsValidRange(range.Row, range.Column, range.RowCount, range.ColumnCount, this.Worksheet.RowCount, this.Worksheet.ColumnCount))
                {
                    throw new ArgumentException(ResourceStrings.SheetViewClipboardArgumentException);
                }
                Worksheet fromSheet = SpreadXClipboard.Worksheet;
                CellRange fromRange = SpreadXClipboard.Range;
                string clipboardText = ClipboardHelper.GetClipboardData();
                bool isCutting = SpreadXClipboard.IsCutting;
                if (((isCutting && (fromSheet != null)) && ((fromRange != null) && fromSheet.Protect)) && IsAnyCellInRangeLocked(fromSheet, fromRange.Row, fromRange.Column, fromRange.RowCount, fromRange.ColumnCount))
                {
                    isCutting = false;
                }
                if (this.CheckPastedRange(fromSheet, fromRange, range, isCutting, clipboardText, out range1, out flag2))
                {
                    if (isCutting)
                    {
                        option = ClipboardPasteOptions.All;
                    }
                    if (flag2)
                    {
                        ClipboardPaste(fromSheet, fromRange, this.Worksheet, range1, isCutting, clipboardText, option);
                    }
                    else
                    {
                        ClipboardPaste(null, null, this.Worksheet, range1, isCutting, clipboardText, option);
                    }
                    this.SetSelection(range1.Row, range1.Column, range1.RowCount, range1.ColumnCount);
                    this.SetActiveCell((range.Row < 0) ? 0 : range.Row, (range.Column < 0) ? 0 : range.Column, false);
                    this.InvalidateRange(-1, -1, -1, -1, SheetArea.Cells | SheetArea.ColumnHeader | SheetArea.RowHeader);
                }
            }
        }

        internal static void ClipboardPaste(Dt.Cells.Data.Worksheet fromSheet, CellRange fromRange, Dt.Cells.Data.Worksheet toSheet, CellRange toRange, bool isCutting, string clipboardText, ClipboardPasteOptions option)
        {
            if (((fromSheet != null) && (fromSheet.Workbook != null)) && (object.ReferenceEquals(toSheet.Workbook, fromSheet.Workbook) && !toSheet.Workbook.Sheets.Contains(fromSheet)))
            {
                ClipboardHelper.ClearClipboard();
            }
            else if ((fromSheet != null) && (fromRange != null))
            {
                if (isCutting)
                {
                    Workbook.MoveTo(fromSheet, fromRange.Row, fromRange.Column, toSheet, toRange.Row, toRange.Column, fromRange.RowCount, fromRange.ColumnCount, ConvertPasteOption(option));
                    ClipboardHelper.ClearClipboard();
                }
                else
                {
                    int num = (toRange.Row < 0) ? toSheet.RowCount : toRange.RowCount;
                    int num2 = (toRange.Column < 0) ? toSheet.ColumnCount : toRange.ColumnCount;
                    int num3 = (fromRange.Row < 0) ? fromSheet.RowCount : fromRange.RowCount;
                    int num4 = (fromRange.Column < 0) ? fromSheet.ColumnCount : fromRange.ColumnCount;
                    if ((num > num3) || (num2 > num4))
                    {
                        int row = toRange.Row;
                        int column = toRange.Column;
                        if ((toRange.Row < 0) && (num3 < toSheet.RowCount))
                        {
                            row = 0;
                        }
                        if ((toRange.Column < 0) && (num4 < toSheet.ColumnCount))
                        {
                            column = 0;
                        }
                        if (((num % num3) != 0) || ((num2 % num4) != 0))
                        {
                            num = num3;
                            num2 = num4;
                        }
                        int num7 = num / num3;
                        int num8 = num2 / num4;
                        fromSheet.SuspendCalcService();
                        toSheet.SuspendCalcService();
                        try
                        {
                            for (int i = 0; i < num7; i++)
                            {
                                for (int j = 0; j < num8; j++)
                                {
                                    Workbook.CopyTo(fromSheet, fromRange.Row, fromRange.Column, toSheet, (row < 0) ? -1 : (row + (i * num3)), (column < 0) ? -1 : (column + (j * num4)), (row < 0) ? -1 : num3, (column < 0) ? -1 : num4, ConvertPasteOption(option));
                                }
                            }
                            return;
                        }
                        finally
                        {
                            fromSheet.ResumeCalcService();
                            toSheet.ResumeCalcService();
                        }
                    }
                    Workbook.CopyTo(fromSheet, fromRange.Row, fromRange.Column, toSheet, toRange.Row, toRange.Column, fromRange.RowCount, fromRange.ColumnCount, ConvertPasteOption(option));
                }
            }
            else
            {
                int num11 = toRange.Row;
                int num12 = toRange.Column;
                int rowCount = toRange.RowCount;
                int columnCount = toRange.ColumnCount;
                IEnumerator enumerator = toSheet.SpanModel.GetEnumerator(num11, num12, rowCount, columnCount);
                while (enumerator.MoveNext())
                {
                    CellRange current = enumerator.Current as CellRange;
                    if (current != null)
                    {
                        toSheet.SpanModel.Remove(current.Row, current.Column);
                    }
                }
                if (string.IsNullOrEmpty(clipboardText))
                {
                    for (int k = 0; k < rowCount; k++)
                    {
                        for (int m = 0; m < columnCount; m++)
                        {
                            toSheet.SetValue(num11 + k, num12 + m, null);
                        }
                    }
                }
                else
                {
                    toSheet.SetCsv(num11, num12, clipboardText, "\r\n", "\t", "\"", TextFileOpenFlags.ImportFormula);
                }
            }
        }

        internal void CloseAutoFilterIndicator()
        {
            this._autoFillIndicatorContainer.Width = 0.0;
            this._autoFillIndicatorContainer.Height = 0.0;
            this._autoFillIndicatorContainer.Arrange(new Windows.Foundation.Rect(0.0, 0.0, 0.0, 0.0));
            this._autoFillIndicatorContainer.InvalidateMeasure();
            this.AutoFillIndicatorRec = null;
        }

        internal void CloseDragFillPopup()
        {
            if (this._dragFillPopup != null)
            {
                this._dragFillPopup.Close();
            }
            if (this._dragFillSmartTag != null)
            {
                this._dragFillSmartTag.AutoFilterTypeChanged -= new EventHandler(this.DragFillSmartTag_AutoFilterTypeChanged);
                this._dragFillSmartTag.CloseDragFillSmartTagPopup();
                this._dragFillSmartTag = null;
            }
        }

        internal void CloseTooltip()
        {
            this.TooltipHelper.CloseTooltip();
        }

        internal void CloseTouchToolbar()
        {
            if ((this._touchToolbarPopup != null) && this._touchToolbarPopup.IsOpen)
            {
                this._touchToolbarPopup.IsOpen = false;
            }
        }

        internal bool ContainsFilterButton(int row, int column, SheetArea sheetArea)
        {
            return (this.GetFilterButtonInfo(row, column, sheetArea) != null);
        }

        private void ContinueCellSelecting()
        {
            if ((this.IsWorking && this.IsSelectingCells) && (this.MousePosition != this._lastClickPoint))
            {
                int activeColumnViewportIndex = this.GetActiveColumnViewportIndex();
                int activeRowViewportIndex = this.GetActiveRowViewportIndex();
                ColumnLayout viewportColumnLayoutNearX = this.GetViewportColumnLayoutNearX(activeColumnViewportIndex, this.MousePosition.X);
                RowLayout viewportRowLayoutNearY = this.GetViewportRowLayoutNearY(activeRowViewportIndex, this.MousePosition.Y);
                CellLayout layout3 = this.GetViewportCellLayoutModel(activeRowViewportIndex, activeColumnViewportIndex).FindPoint(this.MousePosition.X, this.MousePosition.Y);
                CellRange[] oldSelection = Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections);
                if (layout3 != null)
                {
                    this.ExtendSelection(layout3.Row, layout3.Column);
                }
                else if ((viewportColumnLayoutNearX != null) && (viewportRowLayoutNearY != null))
                {
                    this.ExtendSelection(viewportRowLayoutNearY.Row, viewportColumnLayoutNearX.Column);
                }
                this.RaiseSelectionChanging(oldSelection, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections));
                this.ProcessScrollTimer();
            }
        }

        private void ContinueColumnResizing()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            ColumnLayout viewportResizingColumnLayoutFromX = null;
            switch (savedHitTestInformation.HitTestType)
            {
                case HitTestType.Corner:
                    viewportResizingColumnLayoutFromX = this.GetRowHeaderColumnLayoutModel().FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                    break;

                case HitTestType.ColumnHeader:
                    viewportResizingColumnLayoutFromX = this.GetViewportResizingColumnLayoutFromX(savedHitTestInformation.ColumnViewportIndex, savedHitTestInformation.HitPoint.X);
                    if (viewportResizingColumnLayoutFromX == null)
                    {
                        viewportResizingColumnLayoutFromX = this.GetViewportColumnLayoutModel(savedHitTestInformation.ColumnViewportIndex).FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                        if (viewportResizingColumnLayoutFromX == null)
                        {
                            if (savedHitTestInformation.ColumnViewportIndex == 0)
                            {
                                viewportResizingColumnLayoutFromX = this.GetViewportResizingColumnLayoutFromX(-1, savedHitTestInformation.HitPoint.X);
                            }
                            if ((viewportResizingColumnLayoutFromX == null) && ((savedHitTestInformation.ColumnViewportIndex == 0) || (savedHitTestInformation.ColumnViewportIndex == -1)))
                            {
                                viewportResizingColumnLayoutFromX = this.GetRowHeaderResizingColumnLayoutFromX(savedHitTestInformation.HitPoint.X);
                            }
                        }
                    }
                    break;
            }
            if (viewportResizingColumnLayoutFromX != null)
            {
                double x = viewportResizingColumnLayoutFromX.X;
                if (this.MousePosition.X > this._resizingTracker.X1)
                {
                    this._resizingTracker.X1 = Math.Min(base.ActualWidth, this.MousePosition.X) - 0.5;
                }
                else
                {
                    this._resizingTracker.X1 = Math.Max(x, this.MousePosition.X) - 0.5;
                }
                this._resizingTracker.X2 = this._resizingTracker.X1;
                if ((this.InputDeviceType != Dt.Cells.UI.InputDeviceType.Touch) && ((this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Both) || (this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Column)))
                {
                    this.UpdateResizeToolTip(this.GetHorizontalResizeTip(Math.Max((double)0.0, (double)(this.MousePosition.X - x))), true);
                }
            }
        }

        private void ContinueColumnSelecting()
        {
            if ((this.IsWorking && (this.IsSelectingColumns || this.IsTouchSelectingColumns)) && (this.MousePosition != this._lastClickPoint))
            {
                int activeColumnViewportIndex = this.GetActiveColumnViewportIndex();
                ColumnLayout viewportColumnLayoutNearX = this.GetViewportColumnLayoutNearX(activeColumnViewportIndex, this.MousePosition.X);
                if (viewportColumnLayoutNearX != null)
                {
                    CellRange[] oldSelection = Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections);
                    if (this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch)
                    {
                        this.IsContinueTouchOperation = true;
                    }
                    this.ExtendSelection(-1, viewportColumnLayoutNearX.Column);
                    this.RaiseSelectionChanging(oldSelection, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections));
                    this.ProcessScrollTimer();
                }
            }
        }

        private void ContinueDragDropping()
        {
            if (this.IsDragDropping && (this._dragDropFromRange != null))
            {
                this.DoContinueDragDropping();
            }
        }

        private void ContinueDragFill()
        {
            if (this.IsDraggingFill && (this._dragFillStartRange != null))
            {
                this.DoContinueDragFill();
            }
        }

        private void ContinueFloatingObjectsMoving()
        {
            if (this.IsTouching)
            {
                if (!this.IsTouchingMovingFloatingObjects)
                {
                    return;
                }
            }
            else if (!this.IsMovingFloatingOjects)
            {
                return;
            }
            if ((this._movingResizingFloatingObjects != null) && (this._movingResizingFloatingObjects.Length != 0))
            {
                this.UpdateFloatingObjectsMovingResizingToViewports();
                this.UpdateFloatingObjectsMovingResizingToCoordicates();
                this.RefreshViewportFloatingObjectsContainerMoving();
                this.ProcessScrollTimer();
            }
        }

        private void ContinueFloatingObjectsResizing()
        {
            if (this.IsTouching)
            {
                if (!this.IsTouchingResizingFloatingObjects)
                {
                    return;
                }
            }
            else if (!this.IsResizingFloatingObjects)
            {
                return;
            }
            if ((this._movingResizingFloatingObjects != null) && (this._movingResizingFloatingObjects.Length != 0))
            {
                this.UpdateFloatingObjectsMovingResizingToViewports();
                this.UpdateFloatingObjectsMovingResizingToCoordicates();
                this.RefreshViewportFloatingObjectsContainerResizing();
                this.ProcessScrollTimer();
            }
        }

        private void ContinueRowResizing()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            RowLayout viewportResizingRowLayoutFromY = null;
            switch (savedHitTestInformation.HitTestType)
            {
                case HitTestType.Corner:
                    viewportResizingRowLayoutFromY = this.GetColumnHeaderRowLayoutModel().FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                    break;

                case HitTestType.RowHeader:
                    viewportResizingRowLayoutFromY = this.GetViewportResizingRowLayoutFromY(savedHitTestInformation.RowViewportIndex, savedHitTestInformation.HitPoint.Y);
                    if (((viewportResizingRowLayoutFromY == null) && (savedHitTestInformation.HeaderInfo != null)) && (savedHitTestInformation.HeaderInfo.ResizingRow >= 0))
                    {
                        viewportResizingRowLayoutFromY = this.GetViewportRowLayoutModel(savedHitTestInformation.RowViewportIndex).FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                    }
                    if ((viewportResizingRowLayoutFromY == null) && (savedHitTestInformation.RowViewportIndex == 0))
                    {
                        viewportResizingRowLayoutFromY = this.GetViewportResizingRowLayoutFromY(-1, savedHitTestInformation.HitPoint.Y);
                    }
                    if ((viewportResizingRowLayoutFromY == null) && ((savedHitTestInformation.RowViewportIndex == -1) || (savedHitTestInformation.RowViewportIndex == 0)))
                    {
                        viewportResizingRowLayoutFromY = this.GetColumnHeaderResizingRowLayoutFromY(savedHitTestInformation.HitPoint.Y);
                    }
                    break;
            }
            if (viewportResizingRowLayoutFromY != null)
            {
                double y = viewportResizingRowLayoutFromY.Y;
                if (this.MousePosition.Y > this._resizingTracker.Y1)
                {
                    this._resizingTracker.Y1 = Math.Min(base.ActualHeight, this.MousePosition.Y) - 0.5;
                }
                else
                {
                    this._resizingTracker.Y1 = Math.Max(y, this.MousePosition.Y) - 0.5;
                }
                this._resizingTracker.Y2 = this._resizingTracker.Y1;
                if ((this.InputDeviceType != Dt.Cells.UI.InputDeviceType.Touch) && ((this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Both) || (this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Row)))
                {
                    this.UpdateResizeToolTip(this.GetVerticalResizeTip(Math.Max((double)0.0, (double)(this.MousePosition.Y - y))), false);
                }
            }
        }

        private void ContinueRowSelecting()
        {
            if ((this.IsWorking && (this.IsSelectingRows || this.IsTouchSelectingRows)) && (this.MousePosition != this._lastClickPoint))
            {
                int activeRowViewportIndex = this.GetActiveRowViewportIndex();
                RowLayout viewportRowLayoutNearY = this.GetViewportRowLayoutNearY(activeRowViewportIndex, this.MousePosition.Y);
                if (viewportRowLayoutNearY != null)
                {
                    CellRange[] oldSelection = Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections);
                    if (this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch)
                    {
                        this.IsContinueTouchOperation = true;
                    }
                    this.ExtendSelection(viewportRowLayoutNearY.Row, -1);
                    this.RaiseSelectionChanging(oldSelection, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections));
                    this.ProcessScrollTimer();
                }
            }
        }

        private void ContinueTouchColumnResizing()
        {
            this._DoTouchResizing = true;
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            ColumnLayout viewportResizingColumnLayoutFromXForTouch = null;
            switch (savedHitTestInformation.HitTestType)
            {
                case HitTestType.Corner:
                    viewportResizingColumnLayoutFromXForTouch = this.GetRowHeaderColumnLayoutModel().FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                    break;

                case HitTestType.ColumnHeader:
                    viewportResizingColumnLayoutFromXForTouch = this.GetViewportResizingColumnLayoutFromXForTouch(savedHitTestInformation.ColumnViewportIndex, savedHitTestInformation.HitPoint.X);
                    if (viewportResizingColumnLayoutFromXForTouch == null)
                    {
                        viewportResizingColumnLayoutFromXForTouch = this.GetViewportColumnLayoutModel(savedHitTestInformation.ColumnViewportIndex).FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                        if ((viewportResizingColumnLayoutFromXForTouch == null) && (savedHitTestInformation.ColumnViewportIndex == 0))
                        {
                            viewportResizingColumnLayoutFromXForTouch = this.GetViewportResizingColumnLayoutFromXForTouch(-1, savedHitTestInformation.HitPoint.X);
                        }
                        if ((viewportResizingColumnLayoutFromXForTouch == null) && ((savedHitTestInformation.ColumnViewportIndex == 0) || (savedHitTestInformation.ColumnViewportIndex == -1)))
                        {
                            viewportResizingColumnLayoutFromXForTouch = this.GetRowHeaderResizingColumnLayoutFromXForTouch(savedHitTestInformation.HitPoint.X);
                        }
                    }
                    break;
            }
            if (viewportResizingColumnLayoutFromXForTouch != null)
            {
                double x = viewportResizingColumnLayoutFromXForTouch.X;
                if (this.MousePosition.X > this._resizingTracker.X1)
                {
                    this._resizingTracker.X1 = Math.Min(base.ActualWidth, this.MousePosition.X) - 0.5;
                }
                else
                {
                    this._resizingTracker.X1 = Math.Max(x, this.MousePosition.X) - 0.5;
                }
                this._resizingTracker.X2 = this._resizingTracker.X1;
                if ((this.InputDeviceType != Dt.Cells.UI.InputDeviceType.Touch) && ((this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Both) || (this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Column)))
                {
                    this.UpdateResizeToolTip(this.GetHorizontalResizeTip(Math.Max((double)0.0, (double)(this.MousePosition.X - x))), true);
                }
            }
        }

        private void ContinueTouchDragDropping()
        {
            if (this.IsTouchDrapDropping && (this._dragDropFromRange != null))
            {
                this.DoContinueDragDropping();
            }
        }

        private void ContinueTouchDragFill()
        {
            if (this.IsTouchDragFilling && (this._dragFillStartRange != null))
            {
                this.DoContinueDragFill();
            }
        }

        private void ContinueTouchRowResizing()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            RowLayout viewportResizingRowLayoutFromYForTouch = null;
            this._DoTouchResizing = true;
            switch (savedHitTestInformation.HitTestType)
            {
                case HitTestType.Corner:
                    viewportResizingRowLayoutFromYForTouch = this.GetColumnHeaderRowLayoutModel().FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                    break;

                case HitTestType.RowHeader:
                    viewportResizingRowLayoutFromYForTouch = this.GetViewportResizingRowLayoutFromYForTouch(savedHitTestInformation.RowViewportIndex, savedHitTestInformation.HitPoint.Y);
                    if (((viewportResizingRowLayoutFromYForTouch == null) && (savedHitTestInformation.HeaderInfo != null)) && (savedHitTestInformation.HeaderInfo.ResizingRow >= 0))
                    {
                        viewportResizingRowLayoutFromYForTouch = this.GetViewportRowLayoutModel(savedHitTestInformation.RowViewportIndex).FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                    }
                    if ((viewportResizingRowLayoutFromYForTouch == null) && (savedHitTestInformation.RowViewportIndex == 0))
                    {
                        viewportResizingRowLayoutFromYForTouch = this.GetViewportResizingRowLayoutFromYForTouch(-1, savedHitTestInformation.HitPoint.Y);
                    }
                    if ((viewportResizingRowLayoutFromYForTouch == null) && ((savedHitTestInformation.RowViewportIndex == -1) || (savedHitTestInformation.RowViewportIndex == 0)))
                    {
                        viewportResizingRowLayoutFromYForTouch = this.GetColumnHeaderResizingRowLayoutFromYForTouch(savedHitTestInformation.HitPoint.Y);
                    }
                    break;
            }
            if (viewportResizingRowLayoutFromYForTouch != null)
            {
                double y = viewportResizingRowLayoutFromYForTouch.Y;
                if (this.MousePosition.Y > this._resizingTracker.Y1)
                {
                    this._resizingTracker.Y1 = Math.Min(base.ActualHeight, this.MousePosition.Y) - 0.5;
                }
                else
                {
                    this._resizingTracker.Y1 = Math.Max(y, this.MousePosition.Y) - 0.5;
                }
                this._resizingTracker.Y2 = this._resizingTracker.Y1;
                if ((this.InputDeviceType != Dt.Cells.UI.InputDeviceType.Touch) && ((this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Both) || (this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Row)))
                {
                    this.UpdateResizeToolTip(this.GetVerticalResizeTip(Math.Max((double)0.0, (double)(this.MousePosition.Y - y))), false);
                }
            }
        }

        private void ContinueTouchSelectingCells(Windows.Foundation.Point touchPoint)
        {
            this.IsContinueTouchOperation = true;
            int activeColumnViewportIndex = this.GetActiveColumnViewportIndex();
            int activeRowViewportIndex = this.GetActiveRowViewportIndex();
            ColumnLayout viewportColumnLayoutNearX = this.GetViewportColumnLayoutNearX(activeColumnViewportIndex, touchPoint.X);
            RowLayout viewportRowLayoutNearY = this.GetViewportRowLayoutNearY(activeRowViewportIndex, touchPoint.Y);
            CellLayout layout3 = this.GetViewportCellLayoutModel(activeRowViewportIndex, activeColumnViewportIndex).FindPoint(touchPoint.X, touchPoint.Y);
            if ((this.CachedGripperLocation != null) && this.CachedGripperLocation.TopLeft.Expand(10, 10).Contains(touchPoint))
            {
                CellRange range = this.Worksheet.Selections[0];
                if ((this.Worksheet.ActiveRowIndex != ((range.Row + range.RowCount) - 1)) || (this.Worksheet.ActiveColumnIndex != ((range.Column + range.ColumnCount) - 1)))
                {
                    this.Worksheet.Workbook.SuspendEvent();
                    this.Worksheet.SetActiveCell((range.Row + range.RowCount) - 1, (range.Column + range.ColumnCount) - 1, false);
                    this.Worksheet.Workbook.ResumeEvent();
                }
            }
            CellRange[] oldSelection = Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections);
            if (layout3 != null)
            {
                this.ExtendSelection(layout3.Row, layout3.Column);
            }
            else if ((viewportColumnLayoutNearX != null) && (viewportRowLayoutNearY != null))
            {
                this.ExtendSelection(viewportRowLayoutNearY.Row, viewportColumnLayoutNearX.Column);
            }
            this.RaiseSelectionChanging(oldSelection, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections));
            this.ProcessScrollTimer();
        }

        internal static CopyToOption ConvertPasteOption(ClipboardPasteOptions pasteOption)
        {
            CopyToOption option = 0;
            if ((pasteOption & ClipboardPasteOptions.Values) > ((ClipboardPasteOptions)0))
            {
                option |= CopyToOption.Value;
            }
            if ((pasteOption & ClipboardPasteOptions.Formatting) > ((ClipboardPasteOptions)0))
            {
                option |= CopyToOption.Style;
            }
            if ((pasteOption & ClipboardPasteOptions.Formulas) > ((ClipboardPasteOptions)0))
            {
                option |= CopyToOption.Formula;
            }
            if ((pasteOption & ClipboardPasteOptions.FloatingObjects) > ((ClipboardPasteOptions)0))
            {
                option |= CopyToOption.FloatingObject;
            }
            if ((pasteOption & ClipboardPasteOptions.RangeGroup) > ((ClipboardPasteOptions)0))
            {
                option |= CopyToOption.RangeGroup;
            }
            if ((pasteOption & ClipboardPasteOptions.Sparkline) > ((ClipboardPasteOptions)0))
            {
                option |= CopyToOption.Sparkline;
            }
            if ((pasteOption & ClipboardPasteOptions.Span) > ((ClipboardPasteOptions)0))
            {
                option |= CopyToOption.Span;
            }
            if ((pasteOption & ClipboardPasteOptions.Tags) > ((ClipboardPasteOptions)0))
            {
                option |= CopyToOption.Tag;
            }
            return option;
        }

        private void CopyToClipboard(CellRange range, bool isCutting)
        {
            SpreadXClipboard.Range = range;
            SpreadXClipboard.FloatingObjects = null;
            SpreadXClipboard.IsCutting = isCutting;
            SpreadXClipboard.Worksheet = this.Worksheet;
            ClipboardHelper.SetClipboardData(this.Worksheet.GetCsv(range.Row, range.Column, range.RowCount, range.ColumnCount, "\r\n", "\t", "\"", false));
        }

        private AutoFilterDropDownItemControl CreateAutoFilter(FilterButtonInfo info)
        {
            HideRowFilter rowFilter = info.RowFilter;
            int column = info.Column;
            AutoFilterDropDownItemControl depObj = new AutoFilterDropDownItemControl();
            depObj.SuspendAllHandlers();
            AutoFilterItem item = new AutoFilterItem
            {
                IsChecked = null,
                Criterion = ResourceStrings.Filter_SelectAll
            };
            depObj.FilterItems.Add(item);
            ReadOnlyCollection<object> filterableDataItems = rowFilter.GetFilterableDataItems(column);
            bool flag = false;
            if ((filterableDataItems != null) && (filterableDataItems.Count > 0))
            {
                flag = filterableDataItems[filterableDataItems.Count - 1] == RowFilterBase.BlankItem;
            }
            List<object> filteredInDateItems = new List<object>();
            if (rowFilter.IsColumnFiltered(column))
            {
                filteredInDateItems = this.GetFilteredInDateItems(column, rowFilter);
            }
            else
            {
                filteredInDateItems = Enumerable.ToList<object>((IEnumerable<object>)filterableDataItems);
            }
            HashSet<object> set = new HashSet<object>();
            foreach (object obj2 in filteredInDateItems)
            {
                set.Add(obj2);
            }
            bool flag2 = true;
            bool flag3 = true;
            AutoFilterItem item2 = null;
            for (int i = 0; i < filterableDataItems.Count; i++)
            {
                object obj3 = filterableDataItems[i];
                bool flag4 = set.Contains(obj3);
                if ((obj3 == null) || string.IsNullOrEmpty(obj3.ToString()))
                {
                    if (item2 == null)
                    {
                        item2 = new AutoFilterItem
                        {
                            IsChecked = new bool?(flag4),
                            Criterion = BlankFilterItem.Blank
                        };
                    }
                }
                else
                {
                    AutoFilterItem item4 = new AutoFilterItem
                    {
                        IsChecked = new bool?(flag4),
                        Criterion = obj3
                    };
                    depObj.FilterItems.Add(item4);
                }
                flag2 = flag2 && flag4;
                flag3 = flag3 && !flag4;
            }
            if (flag && (item2 == null))
            {
                bool flag5 = false;
                if (rowFilter.IsColumnFiltered(column))
                {
                    foreach (object obj4 in filteredInDateItems)
                    {
                        if ((obj4 == null) || string.IsNullOrEmpty(obj4.ToString()))
                        {
                            flag5 = true;
                            break;
                        }
                    }
                }
                else
                {
                    flag5 = true;
                }
                item2 = new AutoFilterItem
                {
                    IsChecked = new bool?(flag5),
                    Criterion = BlankFilterItem.Blank
                };
                flag2 = flag2 && flag5;
                flag3 = flag3 && !flag5;
            }
            if (item2 != null)
            {
                depObj.FilterItems.Add(item2);
            }
            if (flag2)
            {
                item.IsChecked = true;
            }
            else if (flag3)
            {
                item.IsChecked = false;
            }
            else
            {
                item.IsChecked = null;
            }
            depObj.Command = new FilterCommand(this, info, column);
            depObj.ResumeAllHandlers();
            return depObj;
        }

        private CellClickEventArgs CreateCellClickEventArgs(int row, int column, SheetSpanModel spanModel, SheetArea area, MouseButtonType button)
        {
            CellRange range = spanModel.Find(row, column);
            if (range != null)
            {
                row = range.Row;
                column = range.Column;
            }
            return new CellClickEventArgs(area, row, column, button);
        }

        internal CellLayoutModel CreateColumnHeaderCellLayoutModel(int columnViewportIndex)
        {
            ColumnLayoutModel viewportColumnLayoutModel = this.GetViewportColumnLayoutModel(columnViewportIndex);
            RowLayoutModel columnHeaderRowLayoutModel = this.GetColumnHeaderRowLayoutModel();
            CellLayoutModel model3 = new CellLayoutModel();
            if ((viewportColumnLayoutModel.Count > 0) && (columnHeaderRowLayoutModel.Count > 0))
            {
                Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
                int row = Enumerable.ElementAt<RowLayout>((IEnumerable<RowLayout>)columnHeaderRowLayoutModel, 0).Row;
                int column = viewportColumnLayoutModel[0].Column;
                int num3 = Enumerable.ElementAt<RowLayout>((IEnumerable<RowLayout>)columnHeaderRowLayoutModel, columnHeaderRowLayoutModel.Count - 1).Row;
                int num4 = viewportColumnLayoutModel[viewportColumnLayoutModel.Count - 1].Column;
                IEnumerator enumerator = this.Worksheet.ColumnHeaderSpanModel.GetEnumerator(row, column, (num3 - row) + 1, (num4 - column) + 1);
                float zoomFactor = this.ZoomFactor;
                while (enumerator.MoveNext())
                {
                    double num6 = 0.0;
                    double num7 = 0.0;
                    double width = 0.0;
                    double height = 0.0;
                    CellRange current = (CellRange)enumerator.Current;
                    for (int i = current.Row; i < row; i++)
                    {
                        num7 -= Math.Ceiling((double)(worksheet.GetActualRowHeight(i, SheetArea.ColumnHeader) * zoomFactor));
                    }
                    for (int j = row; j < current.Row; j++)
                    {
                        num7 += Math.Ceiling((double)(worksheet.GetActualRowHeight(j, SheetArea.ColumnHeader) * zoomFactor));
                    }
                    for (int k = current.Column; k < column; k++)
                    {
                        num6 -= Math.Ceiling((double)(worksheet.GetActualColumnWidth(k, SheetArea.Cells) * zoomFactor));
                    }
                    for (int m = column; m < current.Column; m++)
                    {
                        num6 += Math.Ceiling((double)(worksheet.GetActualColumnWidth(m, SheetArea.Cells) * zoomFactor));
                    }
                    for (int n = current.Row; n < (current.Row + current.RowCount); n++)
                    {
                        if (n < worksheet.ColumnHeader.RowCount)
                        {
                            height += Math.Ceiling((double)(worksheet.GetActualRowHeight(n, SheetArea.ColumnHeader) * zoomFactor));
                        }
                    }
                    for (int num15 = current.Column; num15 < (current.Column + current.ColumnCount); num15++)
                    {
                        if (num15 < worksheet.ColumnCount)
                        {
                            width += Math.Ceiling((double)(worksheet.GetActualColumnWidth(num15, SheetArea.Cells) * zoomFactor));
                        }
                    }
                    model3.Add(new CellLayout(current.Row, current.Column, current.RowCount, current.ColumnCount, viewportColumnLayoutModel[0].X + num6, columnHeaderRowLayoutModel[0].Y + num7, width, height));
                }
            }
            return model3;
        }

        internal virtual RowLayoutModel CreateColumnHeaderRowLayoutModel()
        {
            RowLayoutModel model = new RowLayoutModel();
            SheetLayout sheetLayout = this.GetSheetLayout();
            if (this.Worksheet != null)
            {
                float zoomFactor = this.ZoomFactor;
                double headerY = sheetLayout.HeaderY;
                for (int i = 0; i < this.Worksheet.ColumnHeader.RowCount; i++)
                {
                    double height = Math.Ceiling((double)(this.Worksheet.GetActualRowHeight(i, SheetArea.ColumnHeader) * zoomFactor));
                    model.Add(new RowLayout(i, headerY, height));
                    headerY += height;
                }
            }
            return model;
        }

        internal virtual ColumnLayoutModel CreateEnhancedResizeToZeroColumnHeaderViewportColumnLayoutModel(int columnViewportIndex)
        {
            return this.CreateViewportColumnLayoutModel(columnViewportIndex);
        }

        internal virtual RowLayoutModel CreateEnhancedResizeToZeroRowHeaderViewportRowLayoutModel(int rowViewportIndex)
        {
            return this.CreateViewportRowLayoutModel(rowViewportIndex);
        }

        private FilterButtonInfoModel CreateFilterButtonInfoModel()
        {
            FilterButtonInfoModel model = new FilterButtonInfoModel();
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            if (worksheet != null)
            {
                HideRowFilter rowFilter = worksheet.RowFilter as HideRowFilter;
                if (((rowFilter != null) && (rowFilter.Range != null)) && rowFilter.ShowFilterButton)
                {
                    CellRange range = rowFilter.Range;
                    if (range.Row < 1)
                    {
                        int num = (range.Column < 0) ? 0 : range.Column;
                        int num2 = (range.Column < 0) ? (worksheet.ColumnCount - 1) : ((range.Column + range.ColumnCount) - 1);
                        int row = worksheet.ColumnHeader.RowCount - 1;
                        if (row >= 0)
                        {
                            int column = num;
                            while (column <= num2)
                            {
                                FilterButtonInfo info = new FilterButtonInfo(rowFilter)
                                {
                                    SheetArea = SheetArea.ColumnHeader,
                                    Row = row
                                };
                                CellRange range2 = worksheet.GetSpanCell(row, column, SheetArea.ColumnHeader);
                                if (range2 != null)
                                {
                                    info.Row = range2.Row;
                                    info.Column = range2.Column;
                                    column += range2.ColumnCount;
                                }
                                else
                                {
                                    info.Column = column;
                                    column++;
                                }
                                model.Add(info);
                            }
                        }
                    }
                    else
                    {
                        int num5 = (range.Column < 0) ? 0 : range.Column;
                        int num6 = (range.Column < 0) ? (worksheet.ColumnCount - 1) : ((range.Column + range.ColumnCount) - 1);
                        int num7 = range.Row - 1;
                        int num8 = num5;
                        while (num8 <= num6)
                        {
                            FilterButtonInfo info2 = new FilterButtonInfo(rowFilter)
                            {
                                SheetArea = SheetArea.Cells,
                                Row = num7
                            };
                            CellRange range3 = worksheet.GetSpanCell(num7, num8, SheetArea.Cells);
                            if (range3 != null)
                            {
                                info2.Row = range3.Row;
                                info2.Column = range3.Column;
                                num8 += range3.ColumnCount;
                            }
                            else
                            {
                                info2.Column = num8;
                                num8++;
                            }
                            model.Add(info2);
                        }
                    }
                }
                foreach (SheetTable table in this.Worksheet.GetTables())
                {
                    if (((table != null) && table.ShowHeader) && table.RowFilter.ShowFilterButton)
                    {
                        int headerIndex = table.HeaderIndex;
                        for (int i = 0; i < table.Range.ColumnCount; i++)
                        {
                            int num11 = table.Range.Column + i;
                            FilterButtonInfo info3 = new FilterButtonInfo(table.RowFilter as HideRowFilter, headerIndex, num11, SheetArea.Cells);
                            model.Add(info3);
                        }
                    }
                }
            }
            return model;
        }

        internal Windows.UI.Xaml.Shapes.Line CreateFreezeLine()
        {
            SolidColorBrush brush = null;
            Dt.Cells.Data.UIAdaptor.InvokeSync(delegate
            {
                brush = new SolidColorBrush(Colors.Black);
            });
            Windows.UI.Xaml.Shapes.Line line2 = new Windows.UI.Xaml.Shapes.Line();
            line2.StrokeThickness = 1.0;
            line2.Stroke = brush;
            Windows.UI.Xaml.Shapes.Line element = line2;
            element.TypeSafeSetStyle(this.FreezeLineStyle);
            return element;
        }

        internal GroupLayout CreateGroupLayout()
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            GroupLayout layout = new GroupLayout
            {
                X = 0.0,
                Y = 0.0
            };
            if (worksheet != null)
            {
                if (this.ShowRowRangeGroup && (worksheet.RowRangeGroup != null))
                {
                    int maxLevel = worksheet.RowRangeGroup.GetMaxLevel();
                    if (maxLevel >= 0)
                    {
                        double num2 = Math.Min((double)16.0, (double)(16.0 * this.ZoomFactor));
                        layout.Width = (num2 * (maxLevel + 2)) + 4.0;
                    }
                }
                if (this.ShowColumnRangeGroup && (worksheet.ColumnRangeGroup != null))
                {
                    int num3 = worksheet.ColumnRangeGroup.GetMaxLevel();
                    if (num3 >= 0)
                    {
                        double num4 = Math.Min((double)16.0, (double)(16.0 * this.ZoomFactor));
                        layout.Height = (num4 * (num3 + 2)) + 4.0;
                    }
                }
            }
            return layout;
        }

        internal CellLayoutModel CreateRowHeaderCellLayoutModel(int rowViewportIndex)
        {
            ColumnLayoutModel rowHeaderColumnLayoutModel = this.GetRowHeaderColumnLayoutModel();
            RowLayoutModel viewportRowLayoutModel = this.GetViewportRowLayoutModel(rowViewportIndex);
            CellLayoutModel model3 = new CellLayoutModel();
            if ((rowHeaderColumnLayoutModel.Count > 0) && (viewportRowLayoutModel.Count > 0))
            {
                Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
                int row = Enumerable.ElementAt<RowLayout>((IEnumerable<RowLayout>)viewportRowLayoutModel, 0).Row;
                int column = rowHeaderColumnLayoutModel[0].Column;
                int num3 = Enumerable.ElementAt<RowLayout>((IEnumerable<RowLayout>)viewportRowLayoutModel, viewportRowLayoutModel.Count - 1).Row;
                int num4 = rowHeaderColumnLayoutModel[rowHeaderColumnLayoutModel.Count - 1].Column;
                IEnumerator enumerator = this.Worksheet.RowHeaderSpanModel.GetEnumerator(row, column, (num3 - row) + 1, (num4 - column) + 1);
                float zoomFactor = this.ZoomFactor;
                while (enumerator.MoveNext())
                {
                    double num6 = 0.0;
                    double num7 = 0.0;
                    double width = 0.0;
                    double height = 0.0;
                    CellRange current = (CellRange)enumerator.Current;
                    for (int i = current.Row; i < row; i++)
                    {
                        num7 -= Math.Ceiling((double)(worksheet.GetActualRowHeight(i, SheetArea.Cells) * zoomFactor));
                    }
                    for (int j = row; j < current.Row; j++)
                    {
                        num7 += Math.Ceiling((double)(worksheet.GetActualRowHeight(j, SheetArea.Cells) * zoomFactor));
                    }
                    for (int k = current.Column; k < column; k++)
                    {
                        num6 -= Math.Ceiling((double)(worksheet.GetActualColumnWidth(k, SheetArea.CornerHeader | SheetArea.RowHeader) * zoomFactor));
                    }
                    for (int m = column; m < current.Column; m++)
                    {
                        num6 += Math.Ceiling((double)(worksheet.GetActualColumnWidth(m, SheetArea.CornerHeader | SheetArea.RowHeader) * zoomFactor));
                    }
                    for (int n = current.Row; n < (current.Row + current.RowCount); n++)
                    {
                        if (n < worksheet.RowCount)
                        {
                            height += Math.Ceiling((double)(worksheet.GetActualRowHeight(n, SheetArea.Cells) * zoomFactor));
                        }
                    }
                    for (int num15 = current.Column; num15 < (current.Column + current.ColumnCount); num15++)
                    {
                        if (num15 < worksheet.RowHeader.ColumnCount)
                        {
                            width += Math.Ceiling((double)(worksheet.GetActualColumnWidth(num15, SheetArea.CornerHeader | SheetArea.RowHeader) * zoomFactor));
                        }
                    }
                    model3.Add(new CellLayout(current.Row, current.Column, current.RowCount, current.ColumnCount, rowHeaderColumnLayoutModel[0].X + num6, viewportRowLayoutModel[0].Y + num7, width, height));
                }
            }
            return model3;
        }

        internal virtual ColumnLayoutModel CreateRowHeaderColumnLayoutModel()
        {
            ColumnLayoutModel model = new ColumnLayoutModel();
            SheetLayout sheetLayout = this.GetSheetLayout();
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            if (worksheet != null)
            {
                double headerX = sheetLayout.HeaderX;
                float zoomFactor = this.ZoomFactor;
                for (int i = 0; i < this.Worksheet.RowHeader.ColumnCount; i++)
                {
                    double width = Math.Ceiling((double)(worksheet.GetActualColumnWidth(i, SheetArea.CornerHeader | SheetArea.RowHeader) * zoomFactor));
                    model.Add(new ColumnLayout(i, headerX, width));
                    headerX += width;
                }
            }
            return model;
        }

        private SheetLayout CreateSheetLayout()
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            double width = this.AvailableSize.Width;
            double height = this.AvailableSize.Height;
            SheetLayout layout = new SheetLayout
            {
                X = 0.0,
                Y = 0.0
            };
            if ((worksheet != null) && worksheet.Visible)
            {
                GroupLayout groupLayout = this.GetGroupLayout();
                layout.HeaderX = layout.X + groupLayout.Width;
                layout.HeaderY = layout.Y + groupLayout.Height;
                float zoomFactor = this.ZoomFactor;
                if (worksheet.RowHeader.IsVisible)
                {
                    for (int n = 0; n < worksheet.RowHeader.Columns.Count; n++)
                    {
                        layout.HeaderWidth += worksheet.GetActualColumnWidth(n, SheetArea.CornerHeader | SheetArea.RowHeader) * zoomFactor;
                    }
                }
                if (worksheet.ColumnHeader.IsVisible)
                {
                    for (int num5 = 0; num5 < worksheet.ColumnHeader.Rows.Count; num5++)
                    {
                        layout.HeaderHeight += worksheet.GetActualRowHeight(num5, SheetArea.ColumnHeader) * zoomFactor;
                    }
                }
                layout.FrozenX = layout.HeaderX + layout.HeaderWidth;
                layout.FrozenY = layout.HeaderY + layout.HeaderHeight;
                for (int i = 0; i < worksheet.FrozenColumnCount; i++)
                {
                    layout.FrozenWidth += Math.Ceiling((double)(worksheet.GetActualColumnWidth(i, SheetArea.Cells) * zoomFactor));
                }
                for (int j = 0; j < worksheet.FrozenRowCount; j++)
                {
                    layout.FrozenHeight += Math.Ceiling((double)(worksheet.GetActualRowHeight(j, SheetArea.Cells) * zoomFactor));
                }
                for (int k = Math.Max(worksheet.FrozenColumnCount, worksheet.ColumnCount - worksheet.FrozenTrailingColumnCount); k < worksheet.ColumnCount; k++)
                {
                    layout.FrozenTrailingWidth += Math.Ceiling((double)(worksheet.GetActualColumnWidth(k, SheetArea.Cells) * zoomFactor));
                }
                for (int m = Math.Max(worksheet.FrozenRowCount, worksheet.RowCount - worksheet.FrozenTrailingRowCount); m < worksheet.RowCount; m++)
                {
                    layout.FrozenTrailingHeight += Math.Ceiling((double)(worksheet.GetActualRowHeight(m, SheetArea.Cells) * zoomFactor));
                }
                width -= layout.HeaderX;
                width -= layout.HeaderWidth;
                width -= layout.FrozenWidth;
                width -= layout.FrozenTrailingWidth;
                width = Math.Max(0.0, width);
                height -= layout.HeaderY;
                height -= layout.HeaderHeight;
                height -= layout.FrozenHeight;
                height -= layout.FrozenTrailingHeight;
                height = Math.Max(0.0, height);
                width = Math.Max(0.0, width);
                height = Math.Max(0.0, height);
                layout.SetViewportWidth(0, width);
                layout.SetViewportHeight(0, height);
                layout.SetViewportX(0, (layout.HeaderX + layout.HeaderWidth) + layout.FrozenWidth);
                layout.SetViewportY(0, (layout.HeaderY + layout.HeaderHeight) + layout.FrozenHeight);
            }
            return layout;
        }

        internal CellLayoutModel CreateViewportCellLayoutModel(int rowViewportIndex, int columnViewportIndex)
        {
            ColumnLayoutModel viewportColumnLayoutModel = this.GetViewportColumnLayoutModel(columnViewportIndex);
            RowLayoutModel viewportRowLayoutModel = this.GetViewportRowLayoutModel(rowViewportIndex);
            CellLayoutModel model3 = new CellLayoutModel();
            if ((viewportColumnLayoutModel.Count > 0) && (viewportRowLayoutModel.Count > 0))
            {
                int row = Enumerable.ElementAt<RowLayout>((IEnumerable<RowLayout>)viewportRowLayoutModel, 0).Row;
                int column = viewportColumnLayoutModel[0].Column;
                int num3 = Enumerable.ElementAt<RowLayout>((IEnumerable<RowLayout>)viewportRowLayoutModel, viewportRowLayoutModel.Count - 1).Row;
                int num4 = viewportColumnLayoutModel[viewportColumnLayoutModel.Count - 1].Column;
                IEnumerator enumerator = this.Worksheet.SpanModel.GetEnumerator(row, column, (num3 - row) + 1, (num4 - column) + 1);
                Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
                SheetArea cells = SheetArea.Cells;
                float zoomFactor = this.ZoomFactor;
                Dictionary<int, double> dictionary = new Dictionary<int, double>();
                Dictionary<int, double> dictionary2 = new Dictionary<int, double>();
                while (enumerator.MoveNext() && (worksheet != null))
                {
                    double num6 = 0.0;
                    double num7 = 0.0;
                    double width = 0.0;
                    double height = 0.0;
                    CellRange current = (CellRange)enumerator.Current;
                    for (int i = current.Row; i < row; i++)
                    {
                        double num11 = 0.0;
                        if (!dictionary2.TryGetValue(i, out num11))
                        {
                            num11 = Math.Ceiling((double)(worksheet.GetActualRowHeight(i, cells) * zoomFactor));
                            dictionary2[i] = num11;
                        }
                        num7 -= num11;
                    }
                    for (int j = row; j < current.Row; j++)
                    {
                        double num13 = 0.0;
                        if (!dictionary2.TryGetValue(j, out num13))
                        {
                            num13 = Math.Ceiling((double)(worksheet.GetActualRowHeight(j, cells) * zoomFactor));
                            dictionary2[j] = num13;
                        }
                        num7 += num13;
                    }
                    for (int k = current.Column; k < column; k++)
                    {
                        double num15 = 0.0;
                        if (!dictionary.TryGetValue(k, out num15))
                        {
                            num15 = Math.Ceiling((double)(worksheet.GetActualColumnWidth(k, cells) * zoomFactor));
                            dictionary.Add(k, num15);
                        }
                        num6 -= num15;
                    }
                    for (int m = column; m < current.Column; m++)
                    {
                        double num17 = 0.0;
                        if (!dictionary.TryGetValue(m, out num17))
                        {
                            num17 = Math.Ceiling((double)(worksheet.GetActualColumnWidth(m, cells) * zoomFactor));
                            dictionary.Add(m, num17);
                        }
                        num6 += num17;
                    }
                    for (int n = current.Row; n < (current.Row + current.RowCount); n++)
                    {
                        if (n < worksheet.RowCount)
                        {
                            double num19 = 0.0;
                            if (!dictionary2.TryGetValue(n, out num19))
                            {
                                num19 = Math.Ceiling((double)(worksheet.GetActualRowHeight(n, cells) * zoomFactor));
                                dictionary2[n] = num19;
                            }
                            height += num19;
                        }
                    }
                    for (int num20 = current.Column; num20 < (current.Column + current.ColumnCount); num20++)
                    {
                        if (num20 < worksheet.ColumnCount)
                        {
                            double num21 = 0.0;
                            if (!dictionary.TryGetValue(num20, out num21))
                            {
                                num21 = Math.Ceiling((double)(worksheet.GetActualColumnWidth(num20, cells) * zoomFactor));
                                dictionary.Add(num20, num21);
                            }
                            width += num21;
                        }
                    }
                    model3.Add(new CellLayout(current.Row, current.Column, current.RowCount, current.ColumnCount, viewportColumnLayoutModel[0].X + num6, viewportRowLayoutModel[0].Y + num7, width, height));
                }
            }
            return model3;
        }

        private FloatingObjectLayoutModel CreateViewportChartShapeLayoutMode(int rowViewportIndex, int columnViewportIndex)
        {
            FloatingObjectLayoutModel model = new FloatingObjectLayoutModel();
            FloatingObject[] allFloatingObjects = this.GetAllFloatingObjects();
            if (allFloatingObjects.Length != 0)
            {
                SheetLayout sheetLayout = this.GetSheetLayout();
                double viewportX = sheetLayout.GetViewportX(columnViewportIndex);
                double viewportY = sheetLayout.GetViewportY(rowViewportIndex);
                Windows.Foundation.Point viewportTopLeftCoordinates = this.GetViewportTopLeftCoordinates(rowViewportIndex, columnViewportIndex);
                for (int i = 0; i < allFloatingObjects.Length; i++)
                {
                    FloatingObject obj2 = allFloatingObjects[i];
                    double x = 0.0;
                    for (int j = 0; j < obj2.StartColumn; j++)
                    {
                        double num6 = Math.Ceiling((double)(this.Worksheet.GetActualColumnWidth(j, SheetArea.Cells) * this.ZoomFactor));
                        x += num6;
                    }
                    x += obj2.StartColumnOffset * this.ZoomFactor;
                    double y = 0.0;
                    for (int k = 0; k < obj2.StartRow; k++)
                    {
                        double num9 = Math.Ceiling((double)(this.Worksheet.GetActualRowHeight(k, SheetArea.Cells) * this.ZoomFactor));
                        y += num9;
                    }
                    y += obj2.StartRowOffset * this.ZoomFactor;
                    double with = Math.Ceiling((double)(obj2.Size.Width * this.ZoomFactor));
                    double height = Math.Ceiling((double)(obj2.Size.Height * this.ZoomFactor));
                    x -= viewportTopLeftCoordinates.X;
                    y -= viewportTopLeftCoordinates.Y;
                    x += viewportX;
                    y += viewportY;
                    model.Add(new FloatingObjectLayout(obj2.Name, x, y, with, height));
                }
            }
            return model;
        }

        internal virtual ColumnLayoutModel CreateViewportColumnLayoutModel(int columnViewportIndex)
        {
            SheetLayout sheetLayout = this.GetSheetLayout();
            ColumnLayoutModel model = new ColumnLayoutModel();
            int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            if (worksheet != null)
            {
                float zoomFactor = this.ZoomFactor;
                if (columnViewportIndex == -1)
                {
                    double x = sheetLayout.HeaderX + sheetLayout.HeaderWidth;
                    for (int i = 0; i < this.Worksheet.FrozenColumnCount; i++)
                    {
                        double width = Math.Ceiling((double)(worksheet.GetActualColumnWidth(i, SheetArea.Cells) * zoomFactor));
                        model.Add(new ColumnLayout(i, x, width));
                        x += width;
                    }
                    return model;
                }
                if ((columnViewportIndex >= 0) && (columnViewportIndex < columnViewportCount))
                {
                    double viewportX = sheetLayout.GetViewportX(columnViewportIndex);
                    double viewportWidth = sheetLayout.GetViewportWidth(columnViewportIndex);
                    for (int j = this.GetViewportLeftColumn(columnViewportIndex); ((viewportWidth > 0.0) && (j != -1)) && (j < (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount)); j++)
                    {
                        double num9 = Math.Ceiling((double)(worksheet.GetActualColumnWidth(j, SheetArea.Cells) * zoomFactor));
                        model.Add(new ColumnLayout(j, viewportX, num9));
                        viewportX += num9;
                        viewportWidth -= num9;
                    }
                    return model;
                }
                if (columnViewportIndex == columnViewportCount)
                {
                    double num10 = sheetLayout.GetViewportX(columnViewportCount - 1) + sheetLayout.GetViewportWidth(columnViewportCount - 1);
                    for (int k = Math.Max(this.Worksheet.FrozenColumnCount, this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount); k < this.Worksheet.ColumnCount; k++)
                    {
                        double num12 = Math.Ceiling((double)(worksheet.GetActualColumnWidth(k, SheetArea.Cells) * zoomFactor));
                        model.Add(new ColumnLayout(k, num10, num12));
                        num10 += num12;
                    }
                }
            }
            return model;
        }

        internal virtual RowLayoutModel CreateViewportRowLayoutModel(int rowViewportIndex)
        {
            RowLayoutModel model = new RowLayoutModel();
            SheetLayout sheetLayout = this.GetSheetLayout();
            int rowViewportCount = this.GetViewportInfo().RowViewportCount;
            if (this.Worksheet != null)
            {
                float zoomFactor = this.ZoomFactor;
                if (rowViewportIndex == -1)
                {
                    double y = sheetLayout.HeaderY + sheetLayout.HeaderHeight;
                    int frozenRowCount = this.Worksheet.FrozenRowCount;
                    if (this.Worksheet.RowCount < frozenRowCount)
                    {
                        frozenRowCount = this.Worksheet.RowCount;
                    }
                    for (int i = 0; i < frozenRowCount; i++)
                    {
                        double height = Math.Ceiling((double)(this.Worksheet.GetActualRowHeight(i, SheetArea.Cells) * zoomFactor));
                        model.Add(new RowLayout(i, y, height));
                        y += height;
                    }
                    return model;
                }
                if ((rowViewportIndex >= 0) && (rowViewportIndex < rowViewportCount))
                {
                    double viewportY = sheetLayout.GetViewportY(rowViewportIndex);
                    double viewportHeight = sheetLayout.GetViewportHeight(rowViewportIndex);
                    for (int j = this.GetViewportTopRow(rowViewportIndex); ((viewportHeight > 0.0) && (j != -1)) && (j < (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount)); j++)
                    {
                        double num10 = Math.Ceiling((double)(this.Worksheet.GetActualRowHeight(j, SheetArea.Cells) * zoomFactor));
                        model.Add(new RowLayout(j, viewportY, num10));
                        viewportY += num10;
                        viewportHeight -= num10;
                    }
                    return model;
                }
                if (rowViewportIndex == rowViewportCount)
                {
                    double num11 = sheetLayout.GetViewportY(rowViewportCount - 1) + sheetLayout.GetViewportHeight(rowViewportCount - 1);
                    for (int k = Math.Max(this.Worksheet.FrozenRowCount, this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount); k < this.Worksheet.RowCount; k++)
                    {
                        double num13 = Math.Ceiling((double)(this.Worksheet.GetActualRowHeight(k, SheetArea.Cells) * zoomFactor));
                        model.Add(new RowLayout(k, num11, num13));
                        num11 += num13;
                    }
                }
            }
            return model;
        }

        internal bool DoCommand(ICommand command)
        {
            return this.UndoManager.Do(command);
        }

        private void DoContinueDragDropping()
        {
            this.UpdateMouseCursorLocation();
            RowLayout viewportRowLayoutNearY = this.GetViewportRowLayoutNearY(this._dragStartRowViewport, this.MousePosition.Y);
            ColumnLayout viewportColumnLayoutNearX = this.GetViewportColumnLayoutNearX(this._dragStartColumnViewport, this.MousePosition.X);
            if (((viewportRowLayoutNearY != null) && (viewportColumnLayoutNearX != null)) && ((viewportRowLayoutNearY.Height > 0.0) && (viewportColumnLayoutNearX.Width > 0.0)))
            {
                bool flag;
                bool flag2;
                int row = viewportRowLayoutNearY.Row;
                int column = viewportColumnLayoutNearX.Column;
                int rowViewportIndex = this._dragStartRowViewport;
                int columnViewportIndex = this._dragStartColumnViewport;
                if (this.GetViewportRowLayoutModel(rowViewportIndex).FindRow(row) == null)
                {
                    double y = this.GetSavedHitTestInformation().HitPoint.Y;
                    int rowViewportCount = this.GetViewportInfo().RowViewportCount;
                    if (this.MousePosition.Y < y)
                    {
                        if ((this._dragStartRowViewport == 0) && (row < this.Worksheet.FrozenRowCount))
                        {
                            rowViewportIndex = -1;
                        }
                        else if ((this._dragStartRowViewport == rowViewportCount) && (row < (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount)))
                        {
                            rowViewportIndex = rowViewportCount - 1;
                        }
                    }
                    else if ((this._dragStartRowViewport == -1) && (row >= this.Worksheet.FrozenRowCount))
                    {
                        rowViewportIndex = 0;
                    }
                    else if ((this._dragStartRowViewport == (rowViewportCount - 1)) && (row >= (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount)))
                    {
                        rowViewportIndex = rowViewportCount;
                    }
                }
                if (this.GetViewportColumnLayoutModel(columnViewportIndex).FindColumn(column) == null)
                {
                    double x = this.GetSavedHitTestInformation().HitPoint.X;
                    int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
                    if (this.MousePosition.X < x)
                    {
                        if ((this._dragStartColumnViewport == 0) && (column < this.Worksheet.FrozenColumnCount))
                        {
                            columnViewportIndex = -1;
                        }
                        else if ((this._dragStartColumnViewport == columnViewportCount) && (column < (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount)))
                        {
                            columnViewportIndex = columnViewportCount - 1;
                        }
                    }
                    else if ((this._dragStartColumnViewport == -1) && (column >= this.Worksheet.FrozenColumnCount))
                    {
                        columnViewportIndex = 0;
                    }
                    else if ((this._dragStartColumnViewport == (columnViewportCount - 1)) && (column >= (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount)))
                    {
                        columnViewportIndex = columnViewportCount;
                    }
                }
                this._dragToRowViewport = rowViewportIndex;
                this._dragToColumnViewport = columnViewportIndex;
                this._dragToRow = row;
                this._dragToColumn = column;
                KeyboardHelper.GetMetaKeyState(out flag, out flag2);
                this._isDragInsert = flag;
                this._isDragCopy = flag2;
                if (this._isDragInsert && ((this._dragDropFromRange.Row == -1) || (this._dragDropFromRange.Column == -1)))
                {
                    this.RefreshDragDropInsertIndicator(rowViewportIndex, columnViewportIndex, row, column);
                }
                else
                {
                    this.RefreshDragDropIndicator(rowViewportIndex, columnViewportIndex, row, column);
                }
            }
            this.ProcessScrollTimer();
        }

        private void DoContinueDragFill()
        {
            this.UpdateDragToViewports();
            this.UpdateDragToCoordicates();
            if (((this._dragToRow >= 0) || (this._dragToColumn >= 0)) && !this.IsMouseInDragFillIndicator(this.MousePosition.X, this.MousePosition.Y, this._dragStartRowViewport, this._dragStartColumnViewport, false))
            {
                this.UpdateMouseCursorLocation();
                this.UpdateCurrentFillSettings();
                this.UpdateCurrentFillRange();
                this.RefreshDragFill();
                this.RefreshSelectionBorder();
                this.ProcessScrollTimer();
                int row = (this._currentFillRange.Row + this._currentFillRange.RowCount) - 1;
                int column = (this._currentFillRange.Column + this._currentFillRange.ColumnCount) - 1;
                FillDirection currentFillDirection = this.GetCurrentFillDirection();
                switch (currentFillDirection)
                {
                    case FillDirection.Left:
                    case FillDirection.Up:
                        row = this._currentFillRange.Row;
                        column = this._currentFillRange.Column;
                        break;
                }
                string str = this.Worksheet.GetFillText(row, column, this.GetDragAutoFillType(), currentFillDirection);
                if (str == null)
                {
                    this.TooltipHelper.CloseTooltip();
                }
                if (!string.IsNullOrWhiteSpace(str))
                {
                    Windows.Foundation.Point point = this.ArrangeDragFillTooltip(this._currentFillRange, currentFillDirection);
                    if (this.IsTouchDragFilling)
                    {
                        if (this.ShowDragFillTip)
                        {
                            this.TooltipHelper.ShowTooltip(str, point.X + 40.0, point.Y);
                        }
                    }
                    else if (this.ShowDragFillTip)
                    {
                        this.TooltipHelper.ShowTooltip(str, point.X, point.Y);
                    }
                }
            }
        }

        private void DoDragFloatingObjects()
        {
            this.SuspendFloatingObjectsInvalidate();
            this._floatingObjectsMovingResizingOffset = this.CalcMoveOffset(this._dragStartRowViewport, this._dragStartColumnViewport, this._floatingObjectsMovingResizingStartRow, this._floatingObjectsMovingResizingStartColumn, this._floatingObjectsMovingResizingStartPoint, this._dragToRowViewport, this._dragToColumnViewport, this._dragToRow, this._dragToColumn, this.MousePosition);
            if ((this._movingResizingFloatingObjects != null) && (this._movingResizingFloatingObjects.Length > 0))
            {
                List<string> list = new List<string>();
                foreach (FloatingObject obj2 in this._movingResizingFloatingObjects)
                {
                    list.Add(obj2.Name);
                }
                MoveFloatingObjectExtent extent = new MoveFloatingObjectExtent(list.ToArray(), this._floatingObjectsMovingResizingOffset.X, this._floatingObjectsMovingResizingOffset.Y);
                this.DoCommand(new DragFloatingObjectUndoAction(this.Worksheet, extent));
            }
            this.ResumeFloatingObjectsInvalidate();
        }

        private void DoEndDragDropping(ref bool isInvalid, ref string invalidMessage, ref bool doCommand)
        {
            RowLayout viewportRowLayoutNearY = this.GetViewportRowLayoutNearY(this._dragStartRowViewport, this.MousePosition.Y);
            ColumnLayout viewportColumnLayoutNearX = this.GetViewportColumnLayoutNearX(this._dragStartColumnViewport, this.MousePosition.X);
            if ((viewportRowLayoutNearY != null) && (viewportColumnLayoutNearX != null))
            {
                int row = this._dragDropFromRange.Row;
                int column = this._dragDropFromRange.Column;
                int rowCount = this._dragDropFromRange.RowCount;
                int columnCount = this._dragDropFromRange.ColumnCount;
                int toRow = (viewportRowLayoutNearY.Height > 0.0) ? viewportRowLayoutNearY.Row : this._dragToRow;
                int toColumn = (viewportColumnLayoutNearX.Width > 0.0) ? viewportColumnLayoutNearX.Column : this._dragToColumn;
                CellRange exceptedRange = this._isDragCopy ? null : this._dragDropFromRange;
                if (this._isDragInsert && ((row == -1) || (column == -1)))
                {
                    if ((row < 0) || (column < 0))
                    {
                        if (column < 0)
                        {
                            if (row >= 0)
                            {
                                if (this.MousePosition.Y > (viewportRowLayoutNearY.Y + (viewportRowLayoutNearY.Height / 2.0)))
                                {
                                    toRow = Math.Min(this.Worksheet.RowCount, toRow + 1);
                                }
                                if ((this._isDragCopy && ((toRow <= row) || (toRow >= (row + rowCount)))) || (!this._isDragCopy && ((toRow < row) || (toRow > (row + rowCount)))))
                                {
                                    if (!this.RaiseValidationDragDropBlock(row, column, toRow, toColumn, rowCount, columnCount, this._isDragCopy, true, out isInvalid, out invalidMessage))
                                    {
                                        if (HasPartSpans(this.Worksheet, row, -1, rowCount, -1) || HasPartSpans(this.Worksheet, toRow, -1, 0, -1))
                                        {
                                            isInvalid = true;
                                            invalidMessage = ResourceStrings.SheetViewDragDropChangePartOfMergedCell;
                                        }
                                        if (!isInvalid && (HasPartArrayFormulas(this.Worksheet, row, -1, rowCount, -1, exceptedRange) || HasPartArrayFormulas(this.Worksheet, toRow, -1, 0, -1, exceptedRange)))
                                        {
                                            isInvalid = true;
                                            invalidMessage = ResourceStrings.SheetViewPasteChangePartOfArrayFormula;
                                        }
                                        if (!isInvalid && this.Worksheet.Protect)
                                        {
                                            isInvalid = true;
                                            invalidMessage = ResourceStrings.SheetViewDragDropChangeProtectRow;
                                        }
                                        if ((!isInvalid && !this._isDragCopy) && HasTable(this.Worksheet, row, -1, rowCount, -1, true))
                                        {
                                            isInvalid = true;
                                            invalidMessage = ResourceStrings.SheetViewDragDropChangePartOfTable;
                                        }
                                    }
                                    if (!isInvalid)
                                    {
                                        DragDropExtent dragMoveExtent = new DragDropExtent(row, -1, toRow, -1, rowCount, -1);
                                        CopyToOption all = CopyToOption.All;
                                        if (!this.RaiseDragDropBlock(dragMoveExtent.FromRow, dragMoveExtent.FromColumn, dragMoveExtent.ToRow, dragMoveExtent.ToColumn, dragMoveExtent.RowCount, dragMoveExtent.ColumnCount, this._isDragCopy, true, CopyToOption.All, out all))
                                        {
                                            DragDropUndoAction command = new DragDropUndoAction(this.Worksheet, dragMoveExtent, this._isDragCopy, true, all);
                                            this.DoCommand(command);
                                            this.RaiseDragDropBlockCompleted(dragMoveExtent.FromRow, dragMoveExtent.FromColumn, dragMoveExtent.ToRow, dragMoveExtent.ToColumn, dragMoveExtent.RowCount, dragMoveExtent.ColumnCount, this._isDragCopy, true, all);
                                            doCommand = true;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (this.MousePosition.X > (viewportColumnLayoutNearX.X + (viewportColumnLayoutNearX.Width / 2.0)))
                            {
                                toColumn = Math.Min(this.Worksheet.ColumnCount, toColumn + 1);
                            }
                            if ((this._isDragCopy && ((toColumn <= column) || (toColumn >= (column + columnCount)))) || (!this._isDragCopy && ((toColumn < column) || (toColumn > (column + columnCount)))))
                            {
                                if (!this.RaiseValidationDragDropBlock(row, column, toRow, toColumn, rowCount, columnCount, this._isDragCopy, true, out isInvalid, out invalidMessage))
                                {
                                    if (HasPartSpans(this.Worksheet, -1, column, -1, columnCount) || HasPartSpans(this.Worksheet, -1, toColumn, -1, 0))
                                    {
                                        isInvalid = true;
                                        invalidMessage = ResourceStrings.SheetViewDragDropChangePartOfMergedCell;
                                    }
                                    if (!isInvalid && (HasPartArrayFormulas(this.Worksheet, -1, column, -1, columnCount, exceptedRange) || HasPartArrayFormulas(this.Worksheet, -1, toColumn, -1, 0, exceptedRange)))
                                    {
                                        isInvalid = true;
                                        invalidMessage = ResourceStrings.SheetViewDragDropChangePartOChangePartOfAnArray;
                                    }
                                    if (!isInvalid && this.Worksheet.Protect)
                                    {
                                        isInvalid = true;
                                        invalidMessage = ResourceStrings.SheetViewDragDropChangeProtectColumn;
                                    }
                                    if (!isInvalid && HasTable(this.Worksheet, -1, toColumn, -1, 1, true))
                                    {
                                        isInvalid = true;
                                        invalidMessage = ResourceStrings.SheetViewDragDropShiftTableCell;
                                    }
                                    if ((!isInvalid && !this._isDragCopy) && HasTable(this.Worksheet, -1, column, -1, columnCount, true))
                                    {
                                        isInvalid = true;
                                        invalidMessage = ResourceStrings.SheetViewDragDropChangePartOfTable;
                                    }
                                }
                                if (!isInvalid)
                                {
                                    DragDropExtent extent = new DragDropExtent(-1, column, -1, toColumn, -1, columnCount);
                                    CopyToOption newCopyOption = CopyToOption.All;
                                    if (!this.RaiseDragDropBlock(extent.FromRow, extent.FromColumn, extent.ToRow, extent.ToColumn, extent.RowCount, extent.ColumnCount, this._isDragCopy, true, CopyToOption.All, out newCopyOption))
                                    {
                                        DragDropUndoAction action = new DragDropUndoAction(this.Worksheet, extent, this._isDragCopy, true, newCopyOption);
                                        this.DoCommand(action);
                                        this.RaiseDragDropBlockCompleted(extent.FromRow, extent.FromColumn, extent.ToRow, extent.ToColumn, extent.RowCount, extent.ColumnCount, this._isDragCopy, true, newCopyOption);
                                        doCommand = true;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    toRow = (this._dragDropFromRange.Row < 0) ? -1 : Math.Max(0, Math.Min((int)(this.Worksheet.RowCount - rowCount), (int)(toRow - this._dragDropRowOffset)));
                    toColumn = (this._dragDropFromRange.Column < 0) ? -1 : Math.Max(0, Math.Min((int)(this.Worksheet.ColumnCount - columnCount), (int)(toColumn - this._dragDropColumnOffset)));
                    if ((toRow != row) || (toColumn != column))
                    {
                        if (!this.RaiseValidationDragDropBlock(row, column, toRow, toColumn, rowCount, columnCount, this._isDragCopy, true, out isInvalid, out invalidMessage))
                        {
                            if (HasPartSpans(this.Worksheet, row, column, rowCount, columnCount) || HasPartSpans(this.Worksheet, toRow, toColumn, rowCount, columnCount))
                            {
                                isInvalid = true;
                                invalidMessage = ResourceStrings.SheetViewDragDropChangePartOfMergedCell;
                            }
                            if (!isInvalid && (HasPartArrayFormulas(this.Worksheet, row, column, rowCount, columnCount, exceptedRange) || HasPartArrayFormulas(this.Worksheet, toRow, toColumn, rowCount, columnCount, exceptedRange)))
                            {
                                isInvalid = true;
                                invalidMessage = ResourceStrings.SheetViewPasteChangePartOfArrayFormula;
                            }
                            if ((!isInvalid && this.Worksheet.Protect) && ((!this._isDragCopy && IsAnyCellInRangeLocked(this.Worksheet, row, column, rowCount, columnCount)) || IsAnyCellInRangeLocked(this.Worksheet, toRow, toColumn, rowCount, columnCount)))
                            {
                                isInvalid = true;
                                invalidMessage = ResourceStrings.SheetViewDragDropChangeProtectCell;
                            }
                        }
                        if (!isInvalid)
                        {
                            DragDropExtent extent3 = new DragDropExtent(row, column, toRow, toColumn, rowCount, columnCount);
                            CopyToOption option3 = CopyToOption.All;
                            if (!this.RaiseDragDropBlock(extent3.FromRow, extent3.FromColumn, extent3.ToRow, extent3.ToColumn, extent3.RowCount, extent3.ColumnCount, this._isDragCopy, false, CopyToOption.All, out option3))
                            {
                                DragDropUndoAction action3 = new DragDropUndoAction(this.Worksheet, extent3, this._isDragCopy, false, option3);
                                this.DoCommand(action3);
                                this.RaiseDragDropBlockCompleted(extent3.FromRow, extent3.FromColumn, extent3.ToRow, extent3.ToColumn, extent3.RowCount, extent3.ColumnCount, this._isDragCopy, false, option3);
                                doCommand = true;
                            }
                        }
                    }
                }
            }
        }

        internal void DoMouseClick(PointerRoutedEventArgs e)
        {
            this.SimulateMouseClick(new PointerMouseRoutedEventArgs(e));
        }

        internal void DoMouseMove(PointerRoutedEventArgs e)
        {
            this.OnPointerMoved(this, e);
        }

        private void DoMoveFloatingObjects()
        {
            this.SuspendFloatingObjectsInvalidate();
            this._floatingObjectsMovingResizingOffset = this.CalcMoveOffset(this._dragStartRowViewport, this._dragStartColumnViewport, this._floatingObjectsMovingResizingStartRow, this._floatingObjectsMovingResizingStartColumn, this._floatingObjectsMovingResizingStartPoint, this._dragToRowViewport, this._dragToColumnViewport, this._dragToRow, this._dragToColumn, this.MousePosition);
            if ((this._movingResizingFloatingObjects != null) && (this._movingResizingFloatingObjects.Length > 0))
            {
                List<string> list = new List<string>();
                foreach (FloatingObject obj2 in this._movingResizingFloatingObjects)
                {
                    list.Add(obj2.Name);
                }
                MoveFloatingObjectExtent extent = new MoveFloatingObjectExtent(list.ToArray(), this._floatingObjectsMovingResizingOffset.X, this._floatingObjectsMovingResizingOffset.Y);
                this.DoCommand(new MoveFloatingObjectUndoAction(this.Worksheet, extent));
            }
            this.ResumeFloatingObjectsInvalidate();
        }

        private void DoResizeFloatingObjects()
        {
            this.SuspendFloatingObjectsInvalidate();
            if ((this._movingResizingFloatingObjects != null) && (this._movingResizingFloatingObjects.Length > 0))
            {
                int activeRowViewportIndex = this.GetActiveRowViewportIndex();
                int activeColumnViewportIndex = this.GetActiveColumnViewportIndex();
                Windows.Foundation.Rect[] floatingObjectsResizingRects = this.GetFloatingObjectsResizingRects(activeRowViewportIndex, activeColumnViewportIndex);
                List<string> list = new List<string>();
                List<Windows.Foundation.Rect> list2 = new List<Windows.Foundation.Rect>();
                for (int i = 0; (i < this._movingResizingFloatingObjects.Length) && (i < floatingObjectsResizingRects.Length); i++)
                {
                    FloatingObject obj2 = this._movingResizingFloatingObjects[i];
                    Windows.Foundation.Rect rect = new Windows.Foundation.Rect(floatingObjectsResizingRects[i].X, floatingObjectsResizingRects[i].Y, floatingObjectsResizingRects[i].Width, floatingObjectsResizingRects[i].Height);
                    RowLayout viewportRowLayoutNearY = this.GetViewportRowLayoutNearY(activeRowViewportIndex, rect.Y);
                    if (viewportRowLayoutNearY == null)
                    {
                        viewportRowLayoutNearY = this.GetViewportRowLayoutNearY(-1, rect.Y);
                    }
                    int row = 0;
                    if (viewportRowLayoutNearY != null)
                    {
                        row = viewportRowLayoutNearY.Row;
                    }
                    double num5 = rect.Y - viewportRowLayoutNearY.Y;
                    double y = 0.0;
                    for (int j = 0; j < row; j++)
                    {
                        double num8 = Math.Ceiling((double)(this.Worksheet.GetActualRowHeight(j, SheetArea.Cells) * this.ZoomFactor));
                        y += num8;
                    }
                    y += num5;
                    ColumnLayout viewportColumnLayoutNearX = this.GetViewportColumnLayoutNearX(activeColumnViewportIndex, rect.X);
                    if (viewportColumnLayoutNearX == null)
                    {
                        viewportColumnLayoutNearX = this.GetViewportColumnLayoutNearX(-1, rect.X);
                    }
                    double column = 0.0;
                    if (viewportColumnLayoutNearX != null)
                    {
                        column = viewportColumnLayoutNearX.Column;
                    }
                    double num10 = rect.X - viewportColumnLayoutNearX.X;
                    double x = 0.0;
                    for (int k = 0; k < column; k++)
                    {
                        double num13 = Math.Ceiling((double)(this.Worksheet.GetActualColumnWidth(k, SheetArea.Cells) * this.ZoomFactor));
                        x += num13;
                    }
                    x += num10;
                    x = Math.Floor((double)(x / ((double)this.ZoomFactor)));
                    y = Math.Floor((double)(y / ((double)this.ZoomFactor)));
                    double width = Math.Floor((double)(rect.Width / ((double)this.ZoomFactor)));
                    double height = Math.Floor((double)(rect.Height / ((double)this.ZoomFactor)));
                    list.Add(obj2.Name);
                    list2.Add(new Windows.Foundation.Rect(x, y, width, height));
                }
                ResizeFloatingObjectExtent extent = new ResizeFloatingObjectExtent(list.ToArray(), list2.ToArray());
                this.DoCommand(new ResizeFloatingObjectUndoAction(this.Worksheet, extent));
            }
            this.ResumeFloatingObjectsInvalidate();
        }

        private void DoubleClickStartCellEditing(int row, int column)
        {
            CellRange spanCell = this.Worksheet.GetSpanCell(row, column);
            if (spanCell != null)
            {
                row = spanCell.Row;
                column = spanCell.Column;
            }
            if ((row == this._currentActiveRowIndex) && (column == this._currentActiveColumnIndex))
            {
                object formula = this.Worksheet.GetValue(row, column);
                if (formula == null)
                {
                    formula = this.Worksheet.GetFormula(row, column);
                }
                EditorStatus enter = EditorStatus.Enter;
                if ((formula != null) && (formula.ToString() != ""))
                {
                    enter = EditorStatus.Edit;
                }
                this.StartCellEditing(false, null, enter);
            }
        }

        private void DoubleTapStartCellEediting(int row, int column)
        {
            this.DoubleClickStartCellEditing(row, column);
        }

        private void DragFillSmartTag_AutoFilterTypeChanged(object sender, EventArgs e)
        {
            if (this.IsDragFill)
            {
                DragFillSmartTag tag = sender as DragFillSmartTag;
                AutoFillType autoFilterType = tag.AutoFilterType;
                if (this._preFillCellsInfo != null)
                {
                    try
                    {
                        this.SuspendFloatingObjectsInvalidate();
                        CellRange range = this.AdjustFillRange(this._currentFillRange);
                        CopyMoveHelper.UndoCellsInfo(this.Worksheet, this._preFillCellsInfo, range.Row, range.Column, SheetArea.Cells);
                    }
                    finally
                    {
                        this.ResumeFloatingObjectsInvalidate();
                    }
                }
                FillDirection currentFillDirection = this.GetCurrentFillDirection();
                if (!this.RaiseDragFillBlock(this._currentFillRange, currentFillDirection, autoFilterType))
                {
                    DragFillExtent dragFillExtent = new DragFillExtent(this._dragFillStartRange, this._currentFillRange, autoFilterType, currentFillDirection);
                    DragFillUndoAction command = new DragFillUndoAction(this.Worksheet, dragFillExtent);
                    this.DoCommand(command);
                    this.RaiseDragFillBlockCompleted(dragFillExtent.FillRange, dragFillExtent.FillDirection, dragFillExtent.AutoFillType);
                }
            }
        }

        private void DragFillSmartTagPopup_Closed(object sender, object e)
        {
            if (!this.IsDraggingFill)
            {
                this._dragFillStartRange = null;
                this._preFillCellsInfo = null;
                this._currentFillDirection = DragFillDirection.Down;
                this._currentFillRange = null;
                this._dragFillPopup = null;
            }
        }

        private void DragFillSmartTagPopup_Opened(object sender, EventArgs e)
        {
        }

        private void EndCellSelecting()
        {
            this.IsWorking = false;
            this.IsSelectingCells = false;
            this.StopScrollTimer();
            if (this.SavedOldSelections != null)
            {
                if (!IsRangesEqual(this.SavedOldSelections, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections)))
                {
                    this.RaiseSelectionChanged();
                }
                this.SavedOldSelections = null;
            }
        }

        private void EndColumnResizing()
        {
            this.IsWorking = false;
            this.IsResizingColumns = false;
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if (savedHitTestInformation.HitPoint.X == this.MousePosition.X)
            {
                this._resizingTracker.Visibility = Visibility.Collapsed;
                this.CloseTooltip();
            }
            else
            {
                ColumnLayout viewportResizingColumnLayoutFromX;
                switch (savedHitTestInformation.HitTestType)
                {
                    case HitTestType.Corner:
                        viewportResizingColumnLayoutFromX = this.GetRowHeaderColumnLayoutModel().FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                        if (viewportResizingColumnLayoutFromX != null)
                        {
                            double num6 = (this._resizingTracker.X1 - viewportResizingColumnLayoutFromX.X) - viewportResizingColumnLayoutFromX.Width;
                            int column = viewportResizingColumnLayoutFromX.Column;
                            double size = Math.Ceiling(Math.Max((double)0.0, (double)(this.Worksheet.RowHeader.Columns[column].ActualWidth + (num6 / ((double)this.ZoomFactor)))));
                            ColumnResizeExtent[] columns = new ColumnResizeExtent[] { new ColumnResizeExtent(column, column) };
                            ColumnResizeUndoAction command = new ColumnResizeUndoAction(this.Worksheet, columns, size, true);
                            this.DoCommand(command);
                        }
                        break;

                    case HitTestType.ColumnHeader:
                        {
                            viewportResizingColumnLayoutFromX = this.GetViewportResizingColumnLayoutFromX(savedHitTestInformation.ColumnViewportIndex, savedHitTestInformation.HitPoint.X);
                            bool flag = false;
                            if (viewportResizingColumnLayoutFromX == null)
                            {
                                viewportResizingColumnLayoutFromX = this.GetViewportColumnLayoutModel(savedHitTestInformation.ColumnViewportIndex).FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                                if (viewportResizingColumnLayoutFromX == null)
                                {
                                    if (savedHitTestInformation.ColumnViewportIndex == 0)
                                    {
                                        viewportResizingColumnLayoutFromX = this.GetViewportResizingColumnLayoutFromX(-1, savedHitTestInformation.HitPoint.X);
                                    }
                                    if ((viewportResizingColumnLayoutFromX == null) && ((savedHitTestInformation.ColumnViewportIndex == 0) || (savedHitTestInformation.ColumnViewportIndex == -1)))
                                    {
                                        viewportResizingColumnLayoutFromX = this.GetRowHeaderResizingColumnLayoutFromX(savedHitTestInformation.HitPoint.X);
                                        flag = true;
                                    }
                                }
                            }
                            if (viewportResizingColumnLayoutFromX != null)
                            {
                                double num = (this._resizingTracker.X1 - viewportResizingColumnLayoutFromX.X) - viewportResizingColumnLayoutFromX.Width;
                                int num2 = viewportResizingColumnLayoutFromX.Column;
                                double num3 = Math.Ceiling(Math.Max((double)0.0, (double)(this.Worksheet.Columns[num2].ActualWidth + (num / ((double)this.ZoomFactor)))));
                                if (!flag)
                                {
                                    List<ColumnResizeExtent> list = new List<ColumnResizeExtent>();
                                    if (this.Worksheet.IsSelected(-1, num2))
                                    {
                                        foreach (CellRange range in this.Worksheet.Selections)
                                        {
                                            if (range.Row == -1)
                                            {
                                                int firstColumn = (range.Column == -1) ? 0 : range.Column;
                                                int num5 = ((range.Column == -1) && (range.ColumnCount == -1)) ? this.Worksheet.ColumnCount : range.ColumnCount;
                                                list.Add(new ColumnResizeExtent(firstColumn, (firstColumn + num5) - 1));
                                            }
                                        }
                                    }
                                    else
                                    {
                                        list.Add(new ColumnResizeExtent(num2, num2));
                                    }
                                    ColumnResizeExtent[] extentArray = new ColumnResizeExtent[list.Count];
                                    list.CopyTo(extentArray);
                                    ColumnResizeUndoAction action = new ColumnResizeUndoAction(this.Worksheet, extentArray, num3, false);
                                    this.DoCommand(action);
                                }
                                else
                                {
                                    ColumnResizeExtent[] extentArray2 = new ColumnResizeExtent[] { new ColumnResizeExtent(num2, num2) };
                                    ColumnResizeUndoAction action2 = new ColumnResizeUndoAction(this.Worksheet, extentArray2, num3, true);
                                    this.DoCommand(action2);
                                }
                            }
                            break;
                        }
                }
                this._resizingTracker.Visibility = Visibility.Collapsed;
                this.CloseTooltip();
            }
        }

        private void EndColumnSelecting()
        {
            this.IsWorking = false;
            this.IsTouchSelectingColumns = false;
            this.IsSelectingColumns = false;
            this.StopScrollTimer();
            if (this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch)
            {
                CellRange activeSelection = this.GetActiveSelection();
                if ((activeSelection == null) && (this.Worksheet.Selections.Count > 0))
                {
                    activeSelection = this.Worksheet.Selections[0];
                }
                this.GetSavedHitTestInformation();
                int viewportTopRow = this.GetViewportTopRow(this.GetActiveRowViewportIndex());
                if ((this.Worksheet.ActiveRowIndex != viewportTopRow) || (activeSelection.Column != this.Worksheet.ActiveColumnIndex))
                {
                    this.Worksheet.SetActiveCell(viewportTopRow, activeSelection.Column, false);
                }
                this.RefreshSelection();
            }
            if (this.SavedOldSelections != null)
            {
                if (!IsRangesEqual(this.SavedOldSelections, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections)))
                {
                    this.RaiseSelectionChanged();
                }
                this.SavedOldSelections = null;
            }
        }

        private void EndDragDropping()
        {
            this.ResetMouseCursor();
            bool isInvalid = false;
            string invalidMessage = string.Empty;
            bool doCommand = false;
            if (this.IsDragDropping && (this.GetSavedHitTestInformation().HitPoint != this.MousePosition))
            {
                this.DoEndDragDropping(ref isInvalid, ref invalidMessage, ref doCommand);
            }
            if (doCommand)
            {
                this.SetActiveportIndexAfterDragDrop();
            }
            this.IsDragDropping = false;
            this.ResetFlagasAfterDragDropping();
            this.StopScrollTimer();
            this.TooltipHelper.CloseTooltip();
            if (isInvalid)
            {
                this.RaiseInvalidOperation(invalidMessage, null, null);
            }
        }

        private void EndDragFill()
        {
            if (this._currentFillRange == null)
            {
                this.IsDraggingFill = false;
            }
            else if (!this.IsDraggingFill)
            {
                this.ResetDragFill();
            }
            else
            {
                this.IsDraggingFill = false;
                if (this.IsMouseInDragFillIndicator(this.MousePosition.X, this.MousePosition.Y, this._dragStartRowViewport, this._dragStartColumnViewport, false))
                {
                    this.ResetDragFill();
                }
                else
                {
                    CellRange dragFillFrameRange = this.GetDragFillFrameRange();
                    if (!this.ValidateFillRange(dragFillFrameRange))
                    {
                        this.ResetDragFill();
                        this.RefreshSelection();
                    }
                    else
                    {
                        AutoFillType dragAutoFillType = this.GetDragAutoFillType();
                        bool flag3 = this.ExecuteDragFillAction(this._currentFillRange, dragAutoFillType);
                        if (flag3)
                        {
                            this.ResetDragFill();
                            string sheetViewDragFillInvalidOperation = ResourceStrings.SheetViewDragFillInvalidOperation;
                            this.RaiseInvalidOperation(sheetViewDragFillInvalidOperation, "DragFill", null);
                        }
                        if (!flag3 && this.IsDragFill)
                        {
                            this.ShowDragFillSmartTag(this._currentFillRange, dragAutoFillType);
                            this.ResetDragFill();
                        }
                        else
                        {
                            this.ResetDragFill();
                        }
                        this.RefreshSelection();
                    }
                }
            }
        }

        private void EndFloatingObjectResizing()
        {
            if ((((this._dragStartRowViewport == -2) || (this._dragStartColumnViewport == -2)) || ((this._floatingObjectsMovingResizingStartRow == -2) || (this._floatingObjectsMovingResizingStartColumn == -2))) || (((this._dragToRowViewport == -2) || (this._dragToColumnViewport == -2)) || ((this._dragToRow == -2) || (this._dragToColumn == -2))))
            {
                this.ResetFloatingObjectsMovingResizing();
                this.StopScrollTimer();
            }
            else
            {
                this.DoResizeFloatingObjects();
                this.InvalidateFloatingObjectsLayoutModel();
                this.RefreshViewportFloatingObjectsLayout();
                this.ResetFloatingObjectsMovingResizing();
                this.StopScrollTimer();
            }
        }

        private void EndFloatingObjectsMoving()
        {
            if ((((this._dragStartRowViewport == -2) || (this._dragStartColumnViewport == -2)) || ((this._floatingObjectsMovingResizingStartRow == -2) || (this._floatingObjectsMovingResizingStartColumn == -2))) || (((this._dragToRowViewport == -2) || (this._dragToColumnViewport == -2)) || ((this._dragToRow == -2) || (this._dragToColumn == -2))))
            {
                this.ResetFloatingObjectsMovingResizing();
                this.StopScrollTimer();
            }
            else
            {
                bool ctrl = false;
                bool shift = false;
                KeyboardHelper.GetMetaKeyState(out shift, out ctrl);
                if (ctrl)
                {
                    this.DoDragFloatingObjects();
                }
                else
                {
                    this.DoMoveFloatingObjects();
                }
                this.InvalidateFloatingObjectsLayoutModel();
                this.RefreshViewportFloatingObjectsLayout();
                this.ResetFloatingObjectsMovingResizing();
                this.StopScrollTimer();
                if (this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch)
                {
                    base.InvalidateMeasure();
                }
            }
        }

        /// <summary>
        /// Exits the state where the user can select formulas with the mouse or keyboard.
        /// </summary>
        public void EndFormulaSelection()
        {
            this._formulaSelectionFeature.EndFormulaSelection();
        }

        internal virtual bool EndMouseClick(PointerMouseRoutedEventArgs e)
        {
            this.IsMouseLeftButtonPressed = false;
            base.ReleasePointerCapture(e.Instance.Pointer);
            return true;
        }

        internal virtual bool EndMouseClick(DoubleTappedRoutedEventArgs e)
        {
            this.IsMouseLeftButtonPressed = false;
            base.ReleasePointerCaptures();
            return true;
        }

        private void EndRowResizing()
        {
            this.IsWorking = false;
            this.IsResizingRows = false;
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if (savedHitTestInformation.HitPoint.Y == this.MousePosition.Y)
            {
                this.TooltipHelper.CloseTooltip();
                this._resizingTracker.Visibility = Visibility.Collapsed;
            }
            else
            {
                RowLayout viewportResizingRowLayoutFromY = null;
                switch (savedHitTestInformation.HitTestType)
                {
                    case HitTestType.Corner:
                        viewportResizingRowLayoutFromY = this.GetColumnHeaderRowLayoutModel().FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                        if (viewportResizingRowLayoutFromY != null)
                        {
                            double num6 = (this._resizingTracker.Y1 - viewportResizingRowLayoutFromY.Y) - viewportResizingRowLayoutFromY.Height;
                            int row = viewportResizingRowLayoutFromY.Row;
                            double size = Math.Ceiling(Math.Max((double)0.0, (double)(this.Worksheet.ColumnHeader.Rows[row].ActualHeight + (num6 / ((double)this.ZoomFactor)))));
                            RowResizeExtent[] rows = new RowResizeExtent[] { new RowResizeExtent(row, row) };
                            RowResizeUndoAction command = new RowResizeUndoAction(this.Worksheet, rows, size, true);
                            this.DoCommand(command);
                        }
                        break;

                    case HitTestType.RowHeader:
                        {
                            viewportResizingRowLayoutFromY = this.GetViewportResizingRowLayoutFromY(savedHitTestInformation.RowViewportIndex, savedHitTestInformation.HitPoint.Y);
                            bool flag = false;
                            if (((viewportResizingRowLayoutFromY == null) && (savedHitTestInformation.HeaderInfo != null)) && (savedHitTestInformation.HeaderInfo.ResizingRow >= 0))
                            {
                                viewportResizingRowLayoutFromY = this.GetViewportRowLayoutModel(savedHitTestInformation.RowViewportIndex).FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                            }
                            if ((viewportResizingRowLayoutFromY == null) && (savedHitTestInformation.RowViewportIndex == 0))
                            {
                                viewportResizingRowLayoutFromY = this.GetViewportResizingRowLayoutFromY(-1, savedHitTestInformation.HitPoint.Y);
                            }
                            if ((viewportResizingRowLayoutFromY == null) && ((savedHitTestInformation.RowViewportIndex == -1) || (savedHitTestInformation.RowViewportIndex == 0)))
                            {
                                viewportResizingRowLayoutFromY = this.GetColumnHeaderResizingRowLayoutFromY(savedHitTestInformation.HitPoint.Y);
                                flag = true;
                            }
                            if (viewportResizingRowLayoutFromY != null)
                            {
                                double num = (this._resizingTracker.Y1 - viewportResizingRowLayoutFromY.Y) - viewportResizingRowLayoutFromY.Height;
                                int firstRow = viewportResizingRowLayoutFromY.Row;
                                double num3 = Math.Ceiling(Math.Max((double)0.0, (double)(this.Worksheet.Rows[firstRow].ActualHeight + (num / ((double)this.ZoomFactor)))));
                                if (flag)
                                {
                                    RowResizeExtent[] extentArray2 = new RowResizeExtent[] { new RowResizeExtent(firstRow, firstRow) };
                                    RowResizeUndoAction action2 = new RowResizeUndoAction(this.Worksheet, extentArray2, num3, true);
                                    this.DoCommand(action2);
                                    break;
                                }
                                List<RowResizeExtent> list = new List<RowResizeExtent>();
                                if (this.Worksheet.IsSelected(firstRow, -1))
                                {
                                    foreach (CellRange range in this.Worksheet.Selections)
                                    {
                                        if (range.Column == -1)
                                        {
                                            int num4 = (range.Row == -1) ? 0 : range.Row;
                                            int num5 = ((range.Row == -1) && (range.RowCount == -1)) ? this.Worksheet.RowCount : range.RowCount;
                                            list.Add(new RowResizeExtent(num4, (num4 + num5) - 1));
                                        }
                                    }
                                }
                                else
                                {
                                    list.Add(new RowResizeExtent(firstRow, firstRow));
                                }
                                RowResizeExtent[] extentArray = new RowResizeExtent[list.Count];
                                list.CopyTo(extentArray);
                                RowResizeUndoAction action = new RowResizeUndoAction(this.Worksheet, extentArray, num3, false);
                                this.DoCommand(action);
                            }
                            break;
                        }
                }
                this.TooltipHelper.CloseTooltip();
                this._resizingTracker.Visibility = Visibility.Collapsed;
            }
        }

        private void EndRowSelecting()
        {
            this.IsWorking = false;
            this.IsSelectingRows = false;
            this.IsTouchSelectingRows = false;
            this.StopScrollTimer();
            if (this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch)
            {
                CellRange activeSelection = this.GetActiveSelection();
                if ((activeSelection == null) && (this.Worksheet.Selections.Count > 0))
                {
                    activeSelection = this.Worksheet.Selections[0];
                }
                this.GetSavedHitTestInformation();
                int viewportLeftColumn = this.GetViewportLeftColumn(this.GetActiveColumnViewportIndex());
                if ((this.Worksheet.ActiveColumnIndex != viewportLeftColumn) || (activeSelection.Row != this.Worksheet.ActiveRowIndex))
                {
                    this.Worksheet.SetActiveCell(activeSelection.Row, viewportLeftColumn, false);
                }
                this.RefreshSelection();
            }
            if (this.SavedOldSelections != null)
            {
                if (!IsRangesEqual(this.SavedOldSelections, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections)))
                {
                    this.RaiseSelectionChanged();
                }
                this.SavedOldSelections = null;
            }
        }

        private void EndTouchColumnResizing()
        {
            this.IsWorking = false;
            this.IsTouchResizingColumns = false;
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if ((savedHitTestInformation.HitPoint.X == this.MousePosition.X) || !this._DoTouchResizing)
            {
                this.TooltipHelper.CloseTooltip();
                this._resizingTracker.Visibility = Visibility.Collapsed;
            }
            else
            {
                ColumnLayout viewportResizingColumnLayoutFromXForTouch;
                switch (savedHitTestInformation.HitTestType)
                {
                    case HitTestType.Corner:
                        viewportResizingColumnLayoutFromXForTouch = this.GetRowHeaderColumnLayoutModel().FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                        if (viewportResizingColumnLayoutFromXForTouch != null)
                        {
                            double num6 = (this._resizingTracker.X1 - viewportResizingColumnLayoutFromXForTouch.X) - viewportResizingColumnLayoutFromXForTouch.Width;
                            int column = viewportResizingColumnLayoutFromXForTouch.Column;
                            double size = Math.Ceiling(Math.Max((double)0.0, (double)(this.Worksheet.RowHeader.Columns[column].ActualWidth + (num6 / ((double)this.ZoomFactor)))));
                            ColumnResizeExtent[] columns = new ColumnResizeExtent[] { new ColumnResizeExtent(column, column) };
                            ColumnResizeUndoAction command = new ColumnResizeUndoAction(this.Worksheet, columns, size, true);
                            this.DoCommand(command);
                        }
                        break;

                    case HitTestType.ColumnHeader:
                        {
                            viewportResizingColumnLayoutFromXForTouch = this.GetViewportResizingColumnLayoutFromXForTouch(savedHitTestInformation.ColumnViewportIndex, savedHitTestInformation.HitPoint.X);
                            bool flag = false;
                            if (viewportResizingColumnLayoutFromXForTouch == null)
                            {
                                viewportResizingColumnLayoutFromXForTouch = this.GetViewportColumnLayoutModel(savedHitTestInformation.ColumnViewportIndex).FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                                if ((viewportResizingColumnLayoutFromXForTouch == null) && (savedHitTestInformation.ColumnViewportIndex == 0))
                                {
                                    viewportResizingColumnLayoutFromXForTouch = this.GetViewportResizingColumnLayoutFromXForTouch(-1, savedHitTestInformation.HitPoint.X);
                                }
                                if ((viewportResizingColumnLayoutFromXForTouch == null) && ((savedHitTestInformation.ColumnViewportIndex == 0) || (savedHitTestInformation.ColumnViewportIndex == -1)))
                                {
                                    viewportResizingColumnLayoutFromXForTouch = this.GetRowHeaderResizingColumnLayoutFromXForTouch(savedHitTestInformation.HitPoint.X);
                                    flag = true;
                                }
                            }
                            if (viewportResizingColumnLayoutFromXForTouch != null)
                            {
                                double num = (this._resizingTracker.X1 - viewportResizingColumnLayoutFromXForTouch.X) - viewportResizingColumnLayoutFromXForTouch.Width;
                                int num2 = viewportResizingColumnLayoutFromXForTouch.Column;
                                double num3 = Math.Ceiling(Math.Max((double)0.0, (double)(this.Worksheet.Columns[num2].ActualWidth + (num / ((double)this.ZoomFactor)))));
                                if (!flag)
                                {
                                    List<ColumnResizeExtent> list = new List<ColumnResizeExtent>();
                                    if (this.Worksheet.IsSelected(-1, num2))
                                    {
                                        foreach (CellRange range in this.Worksheet.Selections)
                                        {
                                            if (range.Row == -1)
                                            {
                                                int firstColumn = (range.Column == -1) ? 0 : range.Column;
                                                int num5 = ((range.Column == -1) && (range.ColumnCount == -1)) ? this.Worksheet.ColumnCount : range.ColumnCount;
                                                list.Add(new ColumnResizeExtent(firstColumn, (firstColumn + num5) - 1));
                                            }
                                        }
                                    }
                                    else
                                    {
                                        list.Add(new ColumnResizeExtent(num2, num2));
                                    }
                                    ColumnResizeExtent[] extentArray = new ColumnResizeExtent[list.Count];
                                    list.CopyTo(extentArray);
                                    ColumnResizeUndoAction action = new ColumnResizeUndoAction(this.Worksheet, extentArray, num3, false);
                                    this.DoCommand(action);
                                }
                                else
                                {
                                    ColumnResizeExtent[] extentArray2 = new ColumnResizeExtent[] { new ColumnResizeExtent(num2, num2) };
                                    ColumnResizeUndoAction action2 = new ColumnResizeUndoAction(this.Worksheet, extentArray2, num3, true);
                                    this.DoCommand(action2);
                                }
                            }
                            break;
                        }
                }
                this.TooltipHelper.CloseTooltip();
                this._resizingTracker.Visibility = Visibility.Collapsed;
                this._DoTouchResizing = false;
            }
        }

        private void EndTouchDragDropping()
        {
            this.ResetMouseCursor();
            bool isInvalid = false;
            string invalidMessage = string.Empty;
            bool doCommand = false;
            if (this.IsTouchDrapDropping && (this.GetSavedHitTestInformation().HitPoint != this.MousePosition))
            {
                this.DoEndDragDropping(ref isInvalid, ref invalidMessage, ref doCommand);
            }
            if (doCommand)
            {
                this.SetActiveportIndexAfterDragDrop();
            }
            this.ResetFlagasAfterDragDropping();
            this.StopScrollTimer();
            if (isInvalid)
            {
                this.RaiseInvalidOperation(invalidMessage, null, null);
            }
            this.TooltipHelper.CloseTooltip();
        }

        private void EndTouchDragFill()
        {
            if (this._currentFillRange != null)
            {
                if (!this.IsTouchDragFilling)
                {
                    this.ResetTouchDragFill();
                }
                else if (this.IsMouseInDragFillIndicator(this.MousePosition.X, this.MousePosition.Y, this._dragStartRowViewport, this._dragStartColumnViewport, false))
                {
                    this.ResetTouchDragFill();
                }
                else
                {
                    CellRange dragFillFrameRange = this.GetDragFillFrameRange();
                    if (!this.ValidateFillRange(dragFillFrameRange))
                    {
                        this.ResetTouchDragFill();
                        this.RefreshSelection();
                    }
                    else
                    {
                        AutoFillType dragAutoFillType = this.GetDragAutoFillType();
                        if (!this.ExecuteDragFillAction(this._currentFillRange, dragAutoFillType) && this.IsTouchDragFilling)
                        {
                            this.ShowDragFillSmartTag(this._currentFillRange, dragAutoFillType);
                        }
                        this.ResetTouchDragFill();
                        this.RefreshSelection();
                    }
                }
            }
        }

        private void EndTouchRowResizing()
        {
            this.IsWorking = false;
            this.IsTouchResizingRows = false;
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if ((savedHitTestInformation.HitPoint.Y == this.MousePosition.Y) || !this._DoTouchResizing)
            {
                this.TooltipHelper.CloseTooltip();
                this._resizingTracker.Visibility = Visibility.Collapsed;
            }
            else
            {
                RowLayout viewportResizingRowLayoutFromYForTouch = null;
                switch (savedHitTestInformation.HitTestType)
                {
                    case HitTestType.Corner:
                        viewportResizingRowLayoutFromYForTouch = this.GetColumnHeaderRowLayoutModel().FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                        if (viewportResizingRowLayoutFromYForTouch != null)
                        {
                            double num6 = (this._resizingTracker.Y1 - viewportResizingRowLayoutFromYForTouch.Y) - viewportResizingRowLayoutFromYForTouch.Height;
                            int row = viewportResizingRowLayoutFromYForTouch.Row;
                            double size = Math.Ceiling(Math.Max((double)0.0, (double)(this.Worksheet.ColumnHeader.Rows[row].ActualHeight + (num6 / ((double)this.ZoomFactor)))));
                            RowResizeExtent[] rows = new RowResizeExtent[] { new RowResizeExtent(row, row) };
                            RowResizeUndoAction command = new RowResizeUndoAction(this.Worksheet, rows, size, true);
                            this.DoCommand(command);
                        }
                        break;

                    case HitTestType.RowHeader:
                        {
                            viewportResizingRowLayoutFromYForTouch = this.GetViewportResizingRowLayoutFromYForTouch(savedHitTestInformation.RowViewportIndex, savedHitTestInformation.HitPoint.Y);
                            bool flag = false;
                            if ((viewportResizingRowLayoutFromYForTouch == null) && (savedHitTestInformation.RowViewportIndex == 0))
                            {
                                viewportResizingRowLayoutFromYForTouch = this.GetViewportResizingRowLayoutFromYForTouch(-1, savedHitTestInformation.HitPoint.Y);
                            }
                            if (((viewportResizingRowLayoutFromYForTouch == null) && (savedHitTestInformation.HeaderInfo != null)) && (savedHitTestInformation.HeaderInfo.ResizingRow >= 0))
                            {
                                viewportResizingRowLayoutFromYForTouch = this.GetViewportRowLayoutModel(savedHitTestInformation.RowViewportIndex).FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                            }
                            if ((viewportResizingRowLayoutFromYForTouch == null) && ((savedHitTestInformation.RowViewportIndex == -1) || (savedHitTestInformation.RowViewportIndex == 0)))
                            {
                                viewportResizingRowLayoutFromYForTouch = this.GetColumnHeaderResizingRowLayoutFromYForTouch(savedHitTestInformation.HitPoint.Y);
                                flag = true;
                            }
                            if (viewportResizingRowLayoutFromYForTouch != null)
                            {
                                double num = (this._resizingTracker.Y1 - viewportResizingRowLayoutFromYForTouch.Y) - viewportResizingRowLayoutFromYForTouch.Height;
                                int firstRow = viewportResizingRowLayoutFromYForTouch.Row;
                                double num3 = Math.Ceiling(Math.Max((double)0.0, (double)(this.Worksheet.Rows[firstRow].ActualHeight + (num / ((double)this.ZoomFactor)))));
                                if (flag)
                                {
                                    RowResizeExtent[] extentArray2 = new RowResizeExtent[] { new RowResizeExtent(firstRow, firstRow) };
                                    RowResizeUndoAction action2 = new RowResizeUndoAction(this.Worksheet, extentArray2, num3, true);
                                    this.DoCommand(action2);
                                    break;
                                }
                                List<RowResizeExtent> list = new List<RowResizeExtent>();
                                if (this.Worksheet.IsSelected(firstRow, -1))
                                {
                                    foreach (CellRange range in this.Worksheet.Selections)
                                    {
                                        if (range.Column == -1)
                                        {
                                            int num4 = (range.Row == -1) ? 0 : range.Row;
                                            int num5 = ((range.Row == -1) && (range.RowCount == -1)) ? this.Worksheet.RowCount : range.RowCount;
                                            list.Add(new RowResizeExtent(num4, (num4 + num5) - 1));
                                        }
                                    }
                                }
                                else
                                {
                                    list.Add(new RowResizeExtent(firstRow, firstRow));
                                }
                                RowResizeExtent[] extentArray = new RowResizeExtent[list.Count];
                                list.CopyTo(extentArray);
                                RowResizeUndoAction action = new RowResizeUndoAction(this.Worksheet, extentArray, num3, false);
                                this.DoCommand(action);
                            }
                            break;
                        }
                }
                this.TooltipHelper.CloseTooltip();
                this._resizingTracker.Visibility = Visibility.Collapsed;
                this._DoTouchResizing = false;
            }
        }

        private void EndTouchSelectingCells()
        {
            this.IsWorking = false;
            this.IsTouchSelectingCells = false;
            this.StopScrollTimer();
            if (this.SavedOldSelections != null)
            {
                if (!IsRangesEqual(this.SavedOldSelections, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections)))
                {
                    this.RaiseSelectionChanged();
                }
                this.SavedOldSelections = null;
            }
            CellRange activeSelection = this.GetActiveSelection();
            if ((activeSelection == null) && (this.Worksheet.Selections.Count > 0))
            {
                activeSelection = this.Worksheet.Selections[0];
            }
            if ((activeSelection != null) && ((this.Worksheet.ActiveColumnIndex != activeSelection.Column) || (this.Worksheet.ActiveRowIndex != activeSelection.Row)))
            {
                this.Worksheet.SetActiveCell(activeSelection.Row, activeSelection.Column, false);
            }
        }

        internal virtual bool EndTouchTap(Windows.Foundation.Point point)
        {
            return true;
        }

        private bool ExecuteDragFillAction(CellRange fillRange, AutoFillType autoFillType)
        {
            CellRange range = this.AdjustFillRange(fillRange);
            object[,] objArray = this.Worksheet.FindFormulas(range.Row, range.Column, range.RowCount, range.ColumnCount);
            for (int i = 0; i < objArray.GetLength(0); i++)
            {
                string str = (string)(objArray[i, 1] as string);
                if (str.StartsWith("{"))
                {
                    return true;
                }
            }
            this._preFillCellsInfo = new CopyMoveCellsInfo(range.RowCount, range.ColumnCount);
            CopyMoveHelper.SaveViewportInfo(this.Worksheet, this._preFillCellsInfo, range.Row, range.Column, CopyToOption.All);
            FillDirection currentFillDirection = this.GetCurrentFillDirection();
            if (this.RaiseDragFillBlock(fillRange, currentFillDirection, autoFillType))
            {
                return true;
            }
            DragFillExtent dragFillExtent = new DragFillExtent(this._dragFillStartRange, fillRange, autoFillType, currentFillDirection);
            DragFillUndoAction command = new DragFillUndoAction(this.Worksheet, dragFillExtent);
            if (!this.DoCommand(command))
            {
                command.Undo(this);
                return true;
            }
            this.RaiseDragFillBlockCompleted(dragFillExtent.FillRange, dragFillExtent.FillDirection, dragFillExtent.AutoFillType);
            return false;
        }

        /// <summary>
        /// Specifies the last cell in the cell selection. 
        /// </summary>  
        /// <param name="row">The row index of the extended selection.</param>
        /// <param name="column">The column index of the extended selection.</param>
        public void ExtendSelection(int row, int column)
        {
            this.Worksheet.ExtendSelection(row, column);
        }

        private void FilterPopup_Closed(object sender, object e)
        {
            this.FocusInternal();
            if (this._hitFilterInfo != null)
            {
                this.UpdateHitFilterCellState();
                this._hitFilterInfo.RowViewportIndex = -2;
                this._hitFilterInfo.ColumnViewportIndex = -2;
                this._hitFilterInfo = null;
            }
        }

        private void FilterPopup_Opened(object sender, object e)
        {
            if (this._hitFilterInfo != null)
            {
                this.UpdateHitFilterCellState();
            }
        }

        internal void FocusElement()
        {
            if (this._viewportPresenters != null)
            {
                GcViewport viewport = this._viewportPresenters[1, 1];
                if ((viewport != null) && !viewport.FocusContent())
                {
                    this._host.Focus(FocusState.Programmatic);
                }
            }
        }

        internal void FocusInternal()
        {
            if (this._host != null)
            {
                this._host.IsTabStop = true;
                this.FocusElement();
            }
        }

        private CellRange GetActiveCell()
        {
            int activeRowIndex = this.Worksheet.ActiveRowIndex;
            int activeColumnIndex = this.Worksheet.ActiveColumnIndex;
            CellRange range = new CellRange(activeRowIndex, activeColumnIndex, 1, 1);
            CellRange range2 = this.Worksheet.SpanModel.Find(activeRowIndex, activeColumnIndex);
            if (range2 != null)
            {
                range = range2;
            }
            return range;
        }

        internal int GetActiveColumnViewportIndex()
        {
            return this.Worksheet.GetActiveColumnViewportIndex();
        }

        internal int GetActiveRowViewportIndex()
        {
            return this.Worksheet.GetActiveRowViewportIndex();
        }

        internal CellRange GetActiveSelection()
        {
            CellRange activeCell = this.GetActiveCell();
            ReadOnlyCollection<CellRange> selections = this.Worksheet.Selections;
            int num = selections.Count;
            if (num > 0)
            {
                for (int i = num - 1; i >= 0; i--)
                {
                    CellRange range2 = selections[i];
                    if (range2.Contains(activeCell))
                    {
                        return range2;
                    }
                }
            }
            return null;
        }

        internal Windows.Foundation.Rect GetActiveSelectionBounds()
        {
            CellRange activeSelection = this.GetActiveSelection();
            if (activeSelection == null)
            {
                activeSelection = this.GetActiveCell();
            }
            GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(this.GetActiveRowViewportIndex(), this.GetActiveColumnViewportIndex());
            SheetLayout sheetLayout = this.GetSheetLayout();
            if (viewportRowsPresenter != null)
            {
                double viewportX = sheetLayout.GetViewportX(this.GetActiveColumnViewportIndex());
                double viewportY = sheetLayout.GetViewportY(this.GetActiveRowViewportIndex());
                Windows.Foundation.Rect rangeBounds = viewportRowsPresenter.GetRangeBounds(activeSelection);
                if (!double.IsInfinity(rangeBounds.Width) && !double.IsInfinity(rangeBounds.Height))
                {
                    return new Windows.Foundation.Rect(viewportX + rangeBounds.X, viewportY + rangeBounds.Y, rangeBounds.Width, rangeBounds.Height);
                }
            }
            return Windows.Foundation.Rect.Empty;
        }

        internal FloatingObject[] GetAllFloatingObjects()
        {
            List<FloatingObject> list = new List<FloatingObject>();
            if (this.Worksheet != null)
            {
                if (this.Worksheet.FloatingObjects.Count > 0)
                {
                    list.AddRange((IEnumerable<FloatingObject>)this.Worksheet.FloatingObjects);
                }
                if (this.Worksheet.Pictures.Count > 0)
                {
                    foreach (Picture picture in this.Worksheet.Pictures)
                    {
                        list.Add(picture);
                    }
                }
                if (this.Worksheet.Charts.Count > 0)
                {
                    foreach (FloatingObject obj2 in this.Worksheet.Charts)
                    {
                        list.Add(obj2);
                    }
                }
            }
            return list.ToArray();
        }

        internal FloatingObject[] GetAllSelectedFloatingObjects()
        {
            List<FloatingObject> list = new List<FloatingObject>();
            foreach (FloatingObject obj2 in this.GetAllFloatingObjects())
            {
                if (obj2.IsSelected)
                {
                    list.Add(obj2);
                }
            }
            return list.ToArray();
        }

        private Windows.Foundation.Rect GetAutoFillIndicatorRect(GcViewport vp, CellRange activeSelection)
        {
            SheetLayout sheetLayout = this.GetSheetLayout();
            double viewportX = sheetLayout.GetViewportX(vp.ColumnViewportIndex);
            double viewportY = sheetLayout.GetViewportY(vp.RowViewportIndex);
            Windows.Foundation.Rect rangeBounds = vp._cachedSelectionFrameLayout;
            if (!vp.SelectionContainer.IsAnchorCellInSelection)
            {
                rangeBounds = vp._cachedFocusCellLayout;
            }
            if (vp.Sheet.Worksheet.Selections.Count > 0)
            {
                rangeBounds = vp.GetRangeBounds(activeSelection);
            }
            Windows.Foundation.Rect rect3 = rangeBounds;
            return new Windows.Foundation.Rect(((rect3.Width + viewportX) + rangeBounds.X) - 16.0, (rect3.Height + viewportY) + rangeBounds.Y, 16.0, 16.0);
        }

        private FloatingObjectLayoutModel GetCacheFloatingObjectsMovingResizingLayoutModels(int rowViewport, int columnViewport)
        {
            return this._cachedFloatingObjectMovingResizingLayoutModel[rowViewport + 1, columnViewport + 1];
        }

        private Cell GetCanSelectedCell(int row, int column, int rowCount, int columnCount)
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            int num = (row < 0) ? 0 : row;
            int num2 = (column < 0) ? 0 : column;
            int num3 = (row < 0) ? worksheet.RowCount : (row + rowCount);
            int num4 = (column < 0) ? worksheet.ColumnCount : (column + columnCount);
            for (int i = num; i < num3; i++)
            {
                if (worksheet.GetActualRowVisible(i, SheetArea.Cells))
                {
                    for (int j = num2; j < num4; j++)
                    {
                        CellRange spanCell = worksheet.GetSpanCell(i, j);
                        if (spanCell == null)
                        {
                            if (worksheet.GetActualStyleInfo(i, j, SheetArea.Cells).Focusable && worksheet.GetActualColumnVisible(j, SheetArea.Cells))
                            {
                                return worksheet.Cells[i, j];
                            }
                            j++;
                        }
                        else
                        {
                            if (worksheet.GetActualStyleInfo(spanCell.Row, spanCell.Column, SheetArea.Cells).Focusable && (worksheet.GetActualColumnWidth(spanCell.Column, spanCell.ColumnCount, SheetArea.Cells) > 0.0))
                            {
                                return worksheet.Cells[spanCell.Row, spanCell.Column];
                            }
                            j = spanCell.Column + spanCell.ColumnCount;
                        }
                    }
                }
                i++;
            }
            return null;
        }

        private Cell GetCanSelectedCellInColumn(int startRow, int column)
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            int row = startRow;
            while (row < worksheet.RowCount)
            {
                CellRange spanCell = worksheet.GetSpanCell(row, column);
                if (spanCell == null)
                {
                    if (worksheet.GetActualStyleInfo(row, column, SheetArea.Cells).Focusable && worksheet.GetActualRowVisible(row, SheetArea.Cells))
                    {
                        return worksheet.Cells[row, column];
                    }
                    row++;
                }
                else
                {
                    if (((spanCell.ColumnCount == 1) || ((spanCell.Row + spanCell.RowCount) == worksheet.RowCount)) && (worksheet.GetActualStyleInfo(spanCell.Row, column, SheetArea.Cells).Focusable && worksheet.GetActualRowVisible(spanCell.Row, SheetArea.Cells)))
                    {
                        return worksheet.Cells[spanCell.Row, column];
                    }
                    row = spanCell.Row + spanCell.RowCount;
                }
            }
            return null;
        }

        private Cell GetCanSelectedCellInRow(int row, int startColumn)
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            int column = startColumn;
            while (column < worksheet.ColumnCount)
            {
                CellRange spanCell = worksheet.GetSpanCell(row, column);
                if (spanCell == null)
                {
                    if (worksheet.GetActualStyleInfo(row, column, SheetArea.Cells).Focusable && worksheet.GetActualColumnVisible(column, SheetArea.Cells))
                    {
                        return worksheet.Cells[row, column];
                    }
                    column++;
                }
                else
                {
                    if (((spanCell.RowCount == 1) || ((spanCell.Column + spanCell.ColumnCount) == worksheet.ColumnCount)) && (worksheet.GetActualStyleInfo(row, spanCell.Column, SheetArea.Cells).Focusable && worksheet.GetActualColumnVisible(spanCell.Column, SheetArea.Cells)))
                    {
                        return worksheet.Cells[row, spanCell.Column];
                    }
                    column = spanCell.Column + spanCell.ColumnCount;
                }
            }
            return null;
        }

        internal CellLayoutModel GetCellLayoutModel(int rowViewportIndex, int columnViewportIndex, SheetArea sheetArea)
        {
            switch (sheetArea)
            {
                case SheetArea.Cells:
                    return this.GetViewportCellLayoutModel(rowViewportIndex, columnViewportIndex);

                case (SheetArea.CornerHeader | SheetArea.RowHeader):
                    return this.GetRowHeaderCellLayoutModel(rowViewportIndex);

                case SheetArea.ColumnHeader:
                    return this.GetColumnHeaderCellLayoutModel(columnViewportIndex);
            }
            return null;
        }

        private CellRange GetCellRangeEx(CellRange cellRange, ICellsSupport dataContext)
        {
            return new CellRange((cellRange.Row < 0) ? 0 : cellRange.Row, (cellRange.Column < 0) ? 0 : cellRange.Column, (cellRange.RowCount < 0) ? dataContext.Rows.Count : cellRange.RowCount, (cellRange.ColumnCount < 0) ? dataContext.Columns.Count : cellRange.ColumnCount);
        }

        internal double GetColumnAutoFitValue(int column, bool rowHeader)
        {
            string str = string.Empty;
            double num = -1.0;
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            int rowCount = worksheet.RowCount;
            Cell cell = null;
            FontFamily fontFamily = null;
            fontFamily = this.InheritedControlFontFamily;
            object textFormattingMode = null;
            SheetArea sheetArea = rowHeader ? (SheetArea.CornerHeader | SheetArea.RowHeader) : SheetArea.Cells;
            IDictionary<MeasureInfo, Dictionary<string, object>> dictionary = (IDictionary<MeasureInfo, Dictionary<string, object>>)new Dictionary<MeasureInfo, Dictionary<string, object>>();
            int activeRowViewportIndex = this.GetActiveRowViewportIndex();
            int viewportTopRow = this.GetViewportTopRow(activeRowViewportIndex);
            if (viewportTopRow < 0)
            {
                viewportTopRow = 0;
            }
            int num5 = 500;
            for (int i = 0; i < rowCount; i++)
            {
                cell = rowHeader ? worksheet.RowHeader.Cells[i, column] : worksheet.Cells[i, column];
                string str2 = this.Worksheet.GetText(i, column, sheetArea);
                if (!string.IsNullOrEmpty(str2))
                {
                    CellRange range = worksheet.GetSpanCell(i, column, sheetArea);
                    if ((range == null) || ((range.Column >= column) && (range.ColumnCount <= 1)))
                    {
                        double height = 0.0;
                        if (range == null)
                        {
                            height = worksheet.GetRowHeight(i, sheetArea);
                        }
                        else
                        {
                            for (int j = 0; j < range.RowCount; j++)
                            {
                                height += worksheet.GetRowHeight(i, sheetArea);
                            }
                        }
                        Windows.Foundation.Size maxSize = MeasureHelper.ConvertExcelCellSizeToTextSize(new Windows.Foundation.Size(double.PositiveInfinity, height), 1.0);
                        if ((viewportTopRow <= i) && (i < (viewportTopRow + num5)))
                        {
                            num = Math.Max(num, this.MeasureCellText(cell, i, column, maxSize, fontFamily, textFormattingMode, base.UseLayoutRounding));
                        }
                        else
                        {
                            MeasureInfo info = new MeasureInfo(cell, maxSize);
                            if (dictionary.Keys.Contains(info))
                            {
                                str = (string)(dictionary[info]["t"] as string);
                                if (str2.Length > str.Length)
                                {
                                    dictionary[info]["t"] = str2;
                                    dictionary[info]["r"] = (int)i;
                                }
                            }
                            else
                            {
                                Dictionary<string, object> dictionary2 = new Dictionary<string, object>();
                                dictionary2.Add("t", str2);
                                dictionary2.Add("r", (int)i);
                                dictionary.Add(info, dictionary2);
                            }
                        }
                        if (range != null)
                        {
                            i += range.RowCount - 1;
                        }
                    }
                }
            }
            foreach (MeasureInfo info2 in dictionary.Keys)
            {
                int row = (int)((int)dictionary[info2]["r"]);
                double rowHeight = 0.0;
                cell = rowHeader ? worksheet.RowHeader.Cells[row, column] : worksheet.Cells[row, column];
                CellRange range2 = worksheet.GetSpanCell(row, column, sheetArea);
                if (range2 == null)
                {
                    rowHeight = worksheet.GetRowHeight(row, sheetArea);
                }
                else
                {
                    for (int k = 0; k < range2.RowCount; k++)
                    {
                        rowHeight += worksheet.GetRowHeight(row, sheetArea);
                    }
                }
                Windows.Foundation.Size size2 = MeasureHelper.ConvertExcelCellSizeToTextSize(new Windows.Foundation.Size(double.PositiveInfinity, rowHeight), 1.0);
                num = Math.Max(num, this.MeasureCellText(cell, row, column, size2, fontFamily, textFormattingMode, base.UseLayoutRounding));
            }
            return num;
        }

        internal CellLayoutModel GetColumnHeaderCellLayoutModel(int columnViewportIndex)
        {
            int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
            if (this._cachedColumnHeaderCellLayoutModel == null)
            {
                this._cachedColumnHeaderCellLayoutModel = new CellLayoutModel[columnViewportCount + 2];
            }
            if (this._cachedColumnHeaderCellLayoutModel[columnViewportIndex + 1] == null)
            {
                this._cachedColumnHeaderCellLayoutModel[columnViewportIndex + 1] = this.CreateColumnHeaderCellLayoutModel(columnViewportIndex);
            }
            return this._cachedColumnHeaderCellLayoutModel[columnViewportIndex + 1];
        }

        private Windows.Foundation.Rect GetColumnHeaderRectangle(int columnViewportIndex)
        {
            SheetLayout sheetLayout = this.GetSheetLayout();
            double viewportX = sheetLayout.GetViewportX(columnViewportIndex);
            double headerY = sheetLayout.HeaderY;
            double width = sheetLayout.GetViewportWidth(columnViewportIndex) - 1.0;
            double height = sheetLayout.HeaderHeight - 1.0;
            if ((width >= 0.0) && (height >= 0.0))
            {
                return new Windows.Foundation.Rect(viewportX, headerY, width, height);
            }
            return Windows.Foundation.Rect.Empty;
        }

        private RowLayout GetColumnHeaderResizingRowLayoutFromY(double y)
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            if (worksheet.ColumnCount > 0)
            {
                RowLayoutModel columnHeaderRowLayoutModel = this.GetColumnHeaderRowLayoutModel();
                for (int i = columnHeaderRowLayoutModel.Count - 1; i >= 0; i--)
                {
                    RowLayout layout = Enumerable.ElementAt<RowLayout>((IEnumerable<RowLayout>)columnHeaderRowLayoutModel, i);
                    if (((y >= Math.Max((layout.Y + layout.Height) - 4.0, layout.Y)) && (y < ((layout.Y + layout.Height) + 4.0))) && worksheet.ColumnHeader.Rows[layout.Row].CanUserResize)
                    {
                        return layout;
                    }
                }
            }
            return null;
        }

        private RowLayout GetColumnHeaderResizingRowLayoutFromYForTouch(double y)
        {
            RowLayout columnHeaderResizingRowLayoutFromY = this.GetColumnHeaderResizingRowLayoutFromY(y);
            if (columnHeaderResizingRowLayoutFromY == null)
            {
                for (int i = -5; i < 5; i++)
                {
                    columnHeaderResizingRowLayoutFromY = this.GetColumnHeaderResizingRowLayoutFromY(y);
                    if (columnHeaderResizingRowLayoutFromY != null)
                    {
                        return columnHeaderResizingRowLayoutFromY;
                    }
                }
            }
            return columnHeaderResizingRowLayoutFromY;
        }

        private RowLayout GetColumnHeaderRowLayout(int row)
        {
            return this.GetColumnHeaderRowLayoutModel().FindRow(row);
        }

        private RowLayout GetColumnHeaderRowLayoutFromY(double y)
        {
            return this.GetColumnHeaderRowLayoutModel().FindY(y);
        }

        internal RowLayoutModel GetColumnHeaderRowLayoutModel()
        {
            if (this._cachedColumnHeaderRowLayoutModel == null)
            {
                this._cachedColumnHeaderRowLayoutModel = this.CreateColumnHeaderRowLayoutModel();
            }
            return this._cachedColumnHeaderRowLayoutModel;
        }

        internal GcViewport GetColumnHeaderRowsPresenter(int columnViewportIndex)
        {
            if (this._columnHeaderPresenters == null)
            {
                return null;
            }
            return this._columnHeaderPresenters[columnViewportIndex + 1];
        }

        internal ColumnLayoutModel GetColumnHeaderViewportColumnLayoutModel(int columnViewportIndex)
        {
            if (this._cachedColumnHeaderViewportColumnLayoutModel == null)
            {
                int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
                this._cachedColumnHeaderViewportColumnLayoutModel = new ColumnLayoutModel[columnViewportCount + 2];
            }
            if (this._cachedColumnHeaderViewportColumnLayoutModel[columnViewportIndex + 1] == null)
            {
                if (this.ResizeZeroIndicator == Dt.Cells.UI.ResizeZeroIndicator.Enhanced)
                {
                    this._cachedColumnHeaderViewportColumnLayoutModel[columnViewportIndex + 1] = this.CreateEnhancedResizeToZeroColumnHeaderViewportColumnLayoutModel(columnViewportIndex);
                }
                else
                {
                    this._cachedColumnHeaderViewportColumnLayoutModel[columnViewportIndex + 1] = this.CreateViewportColumnLayoutModel(columnViewportIndex);
                }
            }
            return this._cachedColumnHeaderViewportColumnLayoutModel[columnViewportIndex + 1];
        }

        internal ColumnLayoutModel GetColumnLayoutModel(int columnViewportIndex, SheetArea sheetArea)
        {
            switch (sheetArea)
            {
                case SheetArea.Cells:
                    return this.GetViewportColumnLayoutModel(columnViewportIndex);

                case (SheetArea.CornerHeader | SheetArea.RowHeader):
                    return this.GetRowHeaderColumnLayoutModel();

                case SheetArea.ColumnHeader:
                    if (this.ResizeZeroIndicator != Dt.Cells.UI.ResizeZeroIndicator.Enhanced)
                    {
                        return this.GetViewportColumnLayoutModel(columnViewportIndex);
                    }
                    return this.GetColumnHeaderViewportColumnLayoutModel(columnViewportIndex);
            }
            return null;
        }

        internal GcViewport GetCornerPresenter()
        {
            return this._cornerPresenter;
        }

        private Windows.Foundation.Rect GetCornerRectangle()
        {
            SheetLayout sheetLayout = this.GetSheetLayout();
            double headerX = sheetLayout.HeaderX;
            double headerY = sheetLayout.HeaderY;
            double width = sheetLayout.HeaderWidth - 1.0;
            double height = sheetLayout.HeaderHeight - 1.0;
            if ((width >= 0.0) && (height >= 0.0))
            {
                return new Windows.Foundation.Rect(headerX, headerY, width, height);
            }
            return Windows.Foundation.Rect.Empty;
        }

        private ColumnLayout GetCurrentDragToColumnLayout()
        {
            return this.GetViewportColumnLayoutModel(this._dragToColumnViewport).FindColumn(this._dragToColumn);
        }

        private RowLayout GetCurrentDragToRowLayout()
        {
            return this.GetViewportRowLayoutModel(this._dragToRowViewport).FindRow(this._dragToRow);
        }

        private FillDirection GetCurrentFillDirection()
        {
            switch (this._currentFillDirection)
            {
                case DragFillDirection.Left:
                    return FillDirection.Left;

                case DragFillDirection.Right:
                    return FillDirection.Right;

                case DragFillDirection.Up:
                    return FillDirection.Up;

                case DragFillDirection.Down:
                    return FillDirection.Down;

                case DragFillDirection.LeftClear:
                    return FillDirection.Left;

                case DragFillDirection.UpClear:
                    return FillDirection.Up;
            }
            return FillDirection.Down;
        }

        private CellRange GetCurrentFillRange()
        {
            int row = -1;
            int column = -1;
            int rowCount = -1;
            int columnCount = -1;
            switch (this._currentFillDirection)
            {
                case DragFillDirection.Left:
                    if (!this.IsDragFillWholeColumns)
                    {
                        row = this.DragFillStartTopRow;
                        rowCount = this._dragFillStartRange.RowCount;
                        break;
                    }
                    row = -1;
                    rowCount = -1;
                    break;

                case DragFillDirection.Right:
                    if (!this.IsDragFillWholeColumns)
                    {
                        row = this.DragFillStartTopRow;
                        rowCount = this._dragFillStartRange.RowCount;
                    }
                    else
                    {
                        row = -1;
                        rowCount = -1;
                    }
                    column = this.DragFillStartRightColumn + 1;
                    columnCount = (this._dragToColumn - column) + 1;
                    goto Label_0184;

                case DragFillDirection.Up:
                    row = this._dragToRow;
                    rowCount = this.DragFillStartTopRow - row;
                    if (!this.IsDragFillWholeRows)
                    {
                        column = this.DragFillStartLeftColumn;
                        columnCount = this._dragFillStartRange.ColumnCount;
                    }
                    else
                    {
                        column = -1;
                        columnCount = -1;
                    }
                    goto Label_0184;

                case DragFillDirection.Down:
                    row = this.DragFillStartBottomRow + 1;
                    rowCount = (this._dragToRow - row) + 1;
                    if (!this.IsDragFillWholeRows)
                    {
                        column = this.DragFillStartLeftColumn;
                        columnCount = this._dragFillStartRange.ColumnCount;
                    }
                    else
                    {
                        column = -1;
                        columnCount = -1;
                    }
                    goto Label_0184;

                case DragFillDirection.LeftClear:
                    if (!this.IsDragFillWholeColumns)
                    {
                        row = this._dragFillStartRange.Row;
                        rowCount = this._dragFillStartRange.RowCount;
                    }
                    else
                    {
                        row = -1;
                        rowCount = -1;
                    }
                    column = this._dragToColumn;
                    columnCount = (this.DragFillStartRightColumn - column) + 1;
                    goto Label_0184;

                case DragFillDirection.UpClear:
                    row = this._dragToRow;
                    rowCount = (this.DragFillStartBottomRow - row) + 1;
                    if (!this.IsDragFillWholeRows)
                    {
                        column = this.DragFillStartLeftColumn;
                        columnCount = this._dragFillStartRange.ColumnCount;
                    }
                    else
                    {
                        column = -1;
                        columnCount = -1;
                    }
                    goto Label_0184;

                default:
                    goto Label_0184;
            }
            column = this._dragToColumn;
            columnCount = this.DragFillStartLeftColumn - column;
        Label_0184:
            return new CellRange(row, column, rowCount, columnCount);
        }

        internal DataValidationListButtonInfo GetDataValidationListButtonInfo(int row, int column, SheetArea sheetArea)
        {
            if (((sheetArea != SheetArea.Cells) || (this.Worksheet.ActiveColumnIndex != column)) || (this.Worksheet.ActiveRowIndex != row))
            {
                return null;
            }
            DataValidator actualDataValidator = this.Worksheet.ActiveCell.ActualDataValidator;
            if (((actualDataValidator == null) || (actualDataValidator.Type != CriteriaType.List)) || !actualDataValidator.InCellDropdown)
            {
                return null;
            }
            ViewportInfo viewportInfo = this.GetViewportInfo();
            List<int> list = Enumerable.ToList<int>(Enumerable.Distinct<int>(viewportInfo.LeftColumns));
            list.Add(this.Worksheet.ColumnCount);
            int num = column + 1;
            CellRange spanCell = this.Worksheet.GetSpanCell(row, column);
            if ((spanCell != null) && (spanCell.ColumnCount > 1))
            {
                num = column + spanCell.ColumnCount;
            }
            if (!list.Contains(num))
            {
                return new DataValidationListButtonInfo(actualDataValidator, row, column, SheetArea.Cells) { DisplayColumn = column + 1, ColumnViewportIndex = viewportInfo.ActiveColumnViewport, RowViewportIndex = viewportInfo.ActiveRowViewport };
            }
            return new DataValidationListButtonInfo(actualDataValidator, row, column, SheetArea.Cells) { DisplayColumn = column, ColumnViewportIndex = viewportInfo.ActiveColumnViewport, RowViewportIndex = viewportInfo.ActiveRowViewport };
        }

        private double GetDataValidationListDropdownWidth(int row, int column, int columnViewportIndex)
        {
            double num = 0.0;
            CellRange range = this.Worksheet.GetSpanCell(row, column, SheetArea.Cells);
            if (range != null)
            {
                for (int i = 0; i < range.ColumnCount; i++)
                {
                    ColumnLayout layout = this.GetViewportColumnLayoutModel(columnViewportIndex).Find(column + i);
                    if (layout != null)
                    {
                        num += layout.Width;
                    }
                }
                return num;
            }
            ColumnLayout layout2 = this.GetViewportColumnLayoutModel(columnViewportIndex).Find(column);
            if (layout2 != null)
            {
                num += layout2.Width;
            }
            return num;
        }

        private AutoFillType GetDragAutoFillType()
        {
            bool flag;
            bool flag2;
            if (this.DefaultAutoFillType.HasValue)
            {
                return this.DefaultAutoFillType.Value;
            }
            if (this.IsDragClear)
            {
                return AutoFillType.ClearValues;
            }
            KeyboardHelper.GetMetaKeyState(out flag, out flag2);
            if ((((this._dragFillStartRange.RowCount == 1) && (this._dragFillStartRange.ColumnCount == 1)) && !this.IsDragFillWholeColumns) && !this.IsDragFillWholeRows)
            {
                if (flag2)
                {
                    return AutoFillType.FillSeries;
                }
                return AutoFillType.CopyCells;
            }
            if (flag2)
            {
                return AutoFillType.CopyCells;
            }
            return AutoFillType.FillSeries;
        }

        internal CellRange GetDragClearRange()
        {
            if (this.IsDragClear)
            {
                return this._currentFillRange;
            }
            return null;
        }

        internal CellRange GetDragFillFrameRange()
        {
            if (this.IsDragClear)
            {
                return this._dragFillStartRange;
            }
            int row = 0;
            int rowCount = 0;
            int column = 0;
            int columnCount = 0;
            if (this.IsVerticalDragFill)
            {
                row = (this._currentFillDirection == DragFillDirection.Up) ? this._currentFillRange.Row : this._dragFillStartRange.Row;
                rowCount = this._dragFillStartRange.RowCount + this._currentFillRange.RowCount;
                column = this._dragFillStartRange.Column;
                columnCount = this._dragFillStartRange.ColumnCount;
            }
            else
            {
                row = this._dragFillStartRange.Row;
                rowCount = this._dragFillStartRange.RowCount;
                column = (this._currentFillDirection == DragFillDirection.Left) ? this._currentFillRange.Column : this._dragFillStartRange.Column;
                columnCount = this._dragFillStartRange.ColumnCount + this._currentFillRange.ColumnCount;
            }
            return new CellRange(row, column, rowCount, columnCount);
        }

        internal FilterButtonInfo GetFilterButtonInfo(int row, int column, SheetArea sheetArea)
        {
            return this.GetFilterButtonInfoModel().Find(row, column, sheetArea);
        }

        private FilterButtonInfoModel GetFilterButtonInfoModel()
        {
            if (this._cachedFilterButtonInfoModel == null)
            {
                this._cachedFilterButtonInfoModel = this.CreateFilterButtonInfoModel();
            }
            return this._cachedFilterButtonInfoModel;
        }

        private List<object> GetFilteredInDateItems(int columnIndex, RowFilterBase filter)
        {
            List<object> list = new List<object>();
            if ((filter != null) && filter.IsColumnFiltered(columnIndex))
            {
                int num = (filter.Range.Row == -1) ? 0 : filter.Range.Row;
                int num2 = (filter.Range.RowCount == -1) ? filter.Sheet.RowCount : filter.Range.RowCount;
                for (int i = num; i < (num + num2); i++)
                {
                    if (!filter.IsRowFilteredOut(i))
                    {
                        object obj2 = filter.Sheet.GetValue(i, columnIndex);
                        object text = null;
                        if ((obj2 is DateTime) || (obj2 is TimeSpan))
                        {
                            text = obj2;
                        }
                        else
                        {
                            text = filter.Sheet.GetText(i, columnIndex);
                        }
                        if (!list.Contains(text))
                        {
                            list.Add(text);
                        }
                    }
                }
            }
            return list;
        }

        private Windows.Foundation.Rect[] GetFloatingObjectsBottomCenterResizingRects(int rowViewport, int columnViewport, Windows.Foundation.Point mousePosition)
        {
            List<Windows.Foundation.Rect> list = new List<Windows.Foundation.Rect>();
            FloatingObjectLayoutModel cacheFloatingObjectsMovingResizingLayoutModels = this.GetCacheFloatingObjectsMovingResizingLayoutModels(rowViewport, columnViewport);
            FloatingObjectLayoutModel viewportFloatingObjectLayoutModel = this.GetViewportFloatingObjectLayoutModel(rowViewport, columnViewport);
            Windows.Foundation.Point point = new Windows.Foundation.Point(mousePosition.X - this._floatingObjectsMovingResizingStartPoint.X, mousePosition.Y - this._floatingObjectsMovingResizingStartPoint.Y);
            foreach (FloatingObject obj2 in this._movingResizingFloatingObjects)
            {
                FloatingObjectLayout layout = cacheFloatingObjectsMovingResizingLayoutModels.Find(obj2.Name);
                FloatingObjectLayout layout2 = viewportFloatingObjectLayoutModel.Find(obj2.Name);
                Windows.Foundation.Point point2 = new Windows.Foundation.Point(layout.X + layout.Width, layout.Y + layout.Height);
                Windows.Foundation.Point point3 = new Windows.Foundation.Point(point2.X + point.X, point2.Y + point.Y);
                Windows.Foundation.Point point4 = new Windows.Foundation.Point(layout2.X, layout2.Y);
                double y = Math.Min(point3.Y, point4.Y);
                double height = Math.Abs((double)(point3.Y - point4.Y));
                double width = layout2.Width;
                Windows.Foundation.Rect rect = new Windows.Foundation.Rect(layout2.X, y, width, height);
                list.Add(rect);
            }
            return list.ToArray();
        }

        private Windows.Foundation.Rect[] GetFloatingObjectsBottomLeftResizingRects(int rowViewport, int columnViewport, Windows.Foundation.Point mousePosition)
        {
            List<Windows.Foundation.Rect> list = new List<Windows.Foundation.Rect>();
            FloatingObjectLayoutModel cacheFloatingObjectsMovingResizingLayoutModels = this.GetCacheFloatingObjectsMovingResizingLayoutModels(rowViewport, columnViewport);
            FloatingObjectLayoutModel viewportFloatingObjectLayoutModel = this.GetViewportFloatingObjectLayoutModel(rowViewport, columnViewport);
            Windows.Foundation.Point point = new Windows.Foundation.Point(mousePosition.X - this._floatingObjectsMovingResizingStartPoint.X, mousePosition.Y - this._floatingObjectsMovingResizingStartPoint.Y);
            foreach (FloatingObject obj2 in this._movingResizingFloatingObjects)
            {
                FloatingObjectLayout layout = cacheFloatingObjectsMovingResizingLayoutModels.Find(obj2.Name);
                FloatingObjectLayout layout2 = viewportFloatingObjectLayoutModel.Find(obj2.Name);
                Windows.Foundation.Point point2 = new Windows.Foundation.Point(layout.X, layout.Y + layout.Height);
                Windows.Foundation.Point point3 = new Windows.Foundation.Point(point2.X + point.X, point2.Y + point.Y);
                Windows.Foundation.Point point4 = new Windows.Foundation.Point(layout2.X + layout2.Width, layout2.Y);
                double x = Math.Min(point3.X, point4.X);
                double y = Math.Min(point3.Y, point4.Y);
                double width = Math.Abs((double)(point4.X - point3.X));
                double height = Math.Abs((double)(point4.Y - point3.Y));
                Windows.Foundation.Rect rect = new Windows.Foundation.Rect(x, y, width, height);
                list.Add(rect);
            }
            return list.ToArray();
        }

        private Windows.Foundation.Rect[] GetFloatingObjectsBottomRighResizingRects(int rowViewport, int columnViewport, Windows.Foundation.Point mousePosition)
        {
            List<Windows.Foundation.Rect> list = new List<Windows.Foundation.Rect>();
            FloatingObjectLayoutModel cacheFloatingObjectsMovingResizingLayoutModels = this.GetCacheFloatingObjectsMovingResizingLayoutModels(rowViewport, columnViewport);
            FloatingObjectLayoutModel viewportFloatingObjectLayoutModel = this.GetViewportFloatingObjectLayoutModel(rowViewport, columnViewport);
            Windows.Foundation.Point point = new Windows.Foundation.Point(mousePosition.X - this._floatingObjectsMovingResizingStartPoint.X, mousePosition.Y - this._floatingObjectsMovingResizingStartPoint.Y);
            foreach (FloatingObject obj2 in this._movingResizingFloatingObjects)
            {
                FloatingObjectLayout layout = cacheFloatingObjectsMovingResizingLayoutModels.Find(obj2.Name);
                FloatingObjectLayout layout2 = viewportFloatingObjectLayoutModel.Find(obj2.Name);
                Windows.Foundation.Point point2 = new Windows.Foundation.Point(layout.X + layout.Width, layout.Y + layout.Height);
                Windows.Foundation.Point point3 = new Windows.Foundation.Point(point2.X + point.X, point2.Y + point.Y);
                Windows.Foundation.Point point4 = new Windows.Foundation.Point(layout2.X, layout2.Y);
                double x = Math.Min(point3.X, point4.X);
                double y = Math.Min(point3.Y, point4.Y);
                double width = Math.Abs((double)(point3.X - point4.X));
                double height = Math.Abs((double)(point3.Y - point4.Y));
                Windows.Foundation.Rect rect = new Windows.Foundation.Rect(x, y, width, height);
                list.Add(rect);
            }
            return list.ToArray();
        }

        private Windows.Foundation.Rect[] GetFloatingObjectsMiddleLeftResizingRects(int rowViewport, int columnViewport, Windows.Foundation.Point mousePosition)
        {
            List<Windows.Foundation.Rect> list = new List<Windows.Foundation.Rect>();
            FloatingObjectLayoutModel cacheFloatingObjectsMovingResizingLayoutModels = this.GetCacheFloatingObjectsMovingResizingLayoutModels(rowViewport, columnViewport);
            FloatingObjectLayoutModel viewportFloatingObjectLayoutModel = this.GetViewportFloatingObjectLayoutModel(rowViewport, columnViewport);
            Windows.Foundation.Point point = new Windows.Foundation.Point(mousePosition.X - this._floatingObjectsMovingResizingStartPoint.X, mousePosition.Y - this._floatingObjectsMovingResizingStartPoint.Y);
            foreach (FloatingObject obj2 in this._movingResizingFloatingObjects)
            {
                FloatingObjectLayout layout = cacheFloatingObjectsMovingResizingLayoutModels.Find(obj2.Name);
                FloatingObjectLayout layout2 = viewportFloatingObjectLayoutModel.Find(obj2.Name);
                Windows.Foundation.Point point2 = new Windows.Foundation.Point(layout.X, layout.Y);
                Windows.Foundation.Point point3 = new Windows.Foundation.Point(point2.X + point.X, point2.Y + point.Y);
                Windows.Foundation.Point point4 = new Windows.Foundation.Point(layout2.X + layout2.Width, layout2.Y + layout2.Height);
                double x = Math.Min(point3.X, point4.X);
                double width = Math.Abs((double)(point4.X - point3.X));
                double height = layout2.Height;
                Windows.Foundation.Rect rect = new Windows.Foundation.Rect(x, layout2.Y, width, height);
                list.Add(rect);
            }
            return list.ToArray();
        }

        private Windows.Foundation.Rect[] GetFloatingObjectsMiddleRightResizingRects(int rowViewport, int columnViewport, Windows.Foundation.Point mousePosition)
        {
            List<Windows.Foundation.Rect> list = new List<Windows.Foundation.Rect>();
            FloatingObjectLayoutModel cacheFloatingObjectsMovingResizingLayoutModels = this.GetCacheFloatingObjectsMovingResizingLayoutModels(rowViewport, columnViewport);
            FloatingObjectLayoutModel viewportFloatingObjectLayoutModel = this.GetViewportFloatingObjectLayoutModel(rowViewport, columnViewport);
            Windows.Foundation.Point point = new Windows.Foundation.Point(mousePosition.X - this._floatingObjectsMovingResizingStartPoint.X, mousePosition.Y - this._floatingObjectsMovingResizingStartPoint.Y);
            foreach (FloatingObject obj2 in this._movingResizingFloatingObjects)
            {
                FloatingObjectLayout layout = cacheFloatingObjectsMovingResizingLayoutModels.Find(obj2.Name);
                FloatingObjectLayout layout2 = viewportFloatingObjectLayoutModel.Find(obj2.Name);
                Windows.Foundation.Point point2 = new Windows.Foundation.Point(layout.X + layout.Width, layout.Y + layout.Height);
                Windows.Foundation.Point point3 = new Windows.Foundation.Point(point2.X + point.X, point2.Y + point.Y);
                Windows.Foundation.Point point4 = new Windows.Foundation.Point(layout2.X, layout2.Y);
                double x = Math.Min(point3.X, point4.X);
                double width = Math.Abs((double)(point3.X - point4.X));
                double height = layout2.Height;
                Windows.Foundation.Rect rect = new Windows.Foundation.Rect(x, layout2.Y, width, height);
                list.Add(rect);
            }
            return list.ToArray();
        }

        internal Windows.Foundation.Rect[] GetFloatingObjectsMovingFrameRects(int rowViewport, int columnViewport)
        {
            FloatingObject[] allSelectedFloatingObjects = this.GetAllSelectedFloatingObjects();
            if ((allSelectedFloatingObjects == null) || (allSelectedFloatingObjects.Length == 0))
            {
                return null;
            }
            List<Windows.Foundation.Rect> list = new List<Windows.Foundation.Rect>();
            Windows.Foundation.Point mousePosition = this.MousePosition;
            new Windows.Foundation.Point(mousePosition.X - this._floatingObjectsMovingResizingStartPoint.X, mousePosition.Y - this._floatingObjectsMovingResizingStartPoint.Y);
            FloatingObjectLayoutModel cacheFloatingObjectsMovingResizingLayoutModels = this.GetCacheFloatingObjectsMovingResizingLayoutModels(rowViewport, columnViewport);
            foreach (FloatingObject obj2 in allSelectedFloatingObjects)
            {
                bool flag;
                bool flag2;
                FloatingObjectLayout layout = cacheFloatingObjectsMovingResizingLayoutModels.Find(obj2.Name);
                Windows.Foundation.Point point2 = new Windows.Foundation.Point(this._floatingObjectsMovingResizingStartPoint.X - layout.X, this._floatingObjectsMovingResizingStartPoint.Y - layout.Y);
                double x = mousePosition.X - point2.X;
                double y = mousePosition.Y - point2.Y;
                KeyboardHelper.GetMetaKeyState(out flag, out flag2);
                if (flag)
                {
                    double num3 = x - layout.X;
                    double num4 = y - layout.Y;
                    if (Math.Abs(num3) > Math.Abs(num4))
                    {
                        y = layout.Y;
                    }
                    else
                    {
                        x = layout.X;
                    }
                }
                list.Add(new Windows.Foundation.Rect(x, y, layout.Width, layout.Height));
            }
            return list.ToArray();
        }

        internal Windows.Foundation.Rect[] GetFloatingObjectsResizingRects(int rowViewport, int columnViewport)
        {
            if ((this._movingResizingFloatingObjects == null) || (this._movingResizingFloatingObjects.Length == 0))
            {
                return null;
            }
            Windows.Foundation.Point mousePosition = this.MousePosition;
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if (this.IsTouchingResizingFloatingObjects || this.IsTouchingMovingFloatingObjects)
            {
                savedHitTestInformation = this._touchStartHitTestInfo;
            }
            if (savedHitTestInformation.FloatingObjectInfo == null)
            {
                Debugger.Break();
            }
            if (savedHitTestInformation.FloatingObjectInfo.InTopNWSEResize)
            {
                return this.GetFloatingObjectsTopleftResizingRects(rowViewport, columnViewport, mousePosition);
            }
            if (savedHitTestInformation.FloatingObjectInfo.InTopNSResize)
            {
                return this.GetFloatingObjectsTopCenterResizingRects(rowViewport, columnViewport, mousePosition);
            }
            if (savedHitTestInformation.FloatingObjectInfo.InTopNESWResize)
            {
                return this.GetFloatingObjectsTopRightResizingRects(rowViewport, columnViewport, mousePosition);
            }
            if (savedHitTestInformation.FloatingObjectInfo.InLeftWEResize)
            {
                return this.GetFloatingObjectsMiddleLeftResizingRects(rowViewport, columnViewport, mousePosition);
            }
            if (savedHitTestInformation.FloatingObjectInfo.InRightWEResize)
            {
                return this.GetFloatingObjectsMiddleRightResizingRects(rowViewport, columnViewport, mousePosition);
            }
            if (savedHitTestInformation.FloatingObjectInfo.InBottomNESWResize)
            {
                return this.GetFloatingObjectsBottomLeftResizingRects(rowViewport, columnViewport, mousePosition);
            }
            if (savedHitTestInformation.FloatingObjectInfo.InBottomNSResize)
            {
                return this.GetFloatingObjectsBottomCenterResizingRects(rowViewport, columnViewport, mousePosition);
            }
            if (savedHitTestInformation.FloatingObjectInfo.InBottomNWSEResize)
            {
                return this.GetFloatingObjectsBottomRighResizingRects(rowViewport, columnViewport, mousePosition);
            }
            return new List<Windows.Foundation.Rect>().ToArray();
        }

        private Windows.Foundation.Rect[] GetFloatingObjectsTopCenterResizingRects(int rowViewport, int columnViewport, Windows.Foundation.Point mousePosition)
        {
            List<Windows.Foundation.Rect> list = new List<Windows.Foundation.Rect>();
            FloatingObjectLayoutModel cacheFloatingObjectsMovingResizingLayoutModels = this.GetCacheFloatingObjectsMovingResizingLayoutModels(rowViewport, columnViewport);
            FloatingObjectLayoutModel viewportFloatingObjectLayoutModel = this.GetViewportFloatingObjectLayoutModel(rowViewport, columnViewport);
            Windows.Foundation.Point point = new Windows.Foundation.Point(mousePosition.X - this._floatingObjectsMovingResizingStartPoint.X, mousePosition.Y - this._floatingObjectsMovingResizingStartPoint.Y);
            foreach (FloatingObject obj2 in this._movingResizingFloatingObjects)
            {
                FloatingObjectLayout layout = cacheFloatingObjectsMovingResizingLayoutModels.Find(obj2.Name);
                FloatingObjectLayout layout2 = viewportFloatingObjectLayoutModel.Find(obj2.Name);
                Windows.Foundation.Point point2 = new Windows.Foundation.Point(layout.X, layout.Y);
                Windows.Foundation.Point point3 = new Windows.Foundation.Point(point2.X + point.X, point2.Y + point.Y);
                Windows.Foundation.Point point4 = new Windows.Foundation.Point(layout2.X + layout2.Width, layout2.Y + layout2.Height);
                double y = Math.Min(point3.Y, point4.Y);
                double height = Math.Abs((double)(point4.Y - point3.Y));
                double width = layout2.Width;
                Windows.Foundation.Rect rect = new Windows.Foundation.Rect(layout2.X, y, width, height);
                list.Add(rect);
            }
            return list.ToArray();
        }

        private Windows.Foundation.Rect[] GetFloatingObjectsTopleftResizingRects(int rowViewport, int columnViewport, Windows.Foundation.Point mousePosition)
        {
            List<Windows.Foundation.Rect> list = new List<Windows.Foundation.Rect>();
            FloatingObjectLayoutModel cacheFloatingObjectsMovingResizingLayoutModels = this.GetCacheFloatingObjectsMovingResizingLayoutModels(rowViewport, columnViewport);
            FloatingObjectLayoutModel viewportFloatingObjectLayoutModel = this.GetViewportFloatingObjectLayoutModel(rowViewport, columnViewport);
            Windows.Foundation.Point point = new Windows.Foundation.Point(mousePosition.X - this._floatingObjectsMovingResizingStartPoint.X, mousePosition.Y - this._floatingObjectsMovingResizingStartPoint.Y);
            foreach (FloatingObject obj2 in this._movingResizingFloatingObjects)
            {
                FloatingObjectLayout layout = cacheFloatingObjectsMovingResizingLayoutModels.Find(obj2.Name);
                FloatingObjectLayout layout2 = viewportFloatingObjectLayoutModel.Find(obj2.Name);
                Windows.Foundation.Point point2 = new Windows.Foundation.Point(layout.X, layout.Y);
                Windows.Foundation.Point point3 = new Windows.Foundation.Point(point2.X + point.X, point2.Y + point.Y);
                Windows.Foundation.Point point4 = new Windows.Foundation.Point(layout2.X + layout2.Width, layout2.Y + layout2.Height);
                double x = Math.Min(point3.X, point4.X);
                double y = Math.Min(point3.Y, point4.Y);
                double width = Math.Abs((double)(point4.X - point3.X));
                double height = Math.Abs((double)(point4.Y - point3.Y));
                Windows.Foundation.Rect rect = new Windows.Foundation.Rect(x, y, width, height);
                list.Add(rect);
            }
            return list.ToArray();
        }

        private Windows.Foundation.Rect[] GetFloatingObjectsTopRightResizingRects(int rowViewport, int columnViewport, Windows.Foundation.Point mousePosition)
        {
            List<Windows.Foundation.Rect> list = new List<Windows.Foundation.Rect>();
            FloatingObjectLayoutModel cacheFloatingObjectsMovingResizingLayoutModels = this.GetCacheFloatingObjectsMovingResizingLayoutModels(rowViewport, columnViewport);
            FloatingObjectLayoutModel viewportFloatingObjectLayoutModel = this.GetViewportFloatingObjectLayoutModel(rowViewport, columnViewport);
            Windows.Foundation.Point point = new Windows.Foundation.Point(mousePosition.X - this._floatingObjectsMovingResizingStartPoint.X, mousePosition.Y - this._floatingObjectsMovingResizingStartPoint.Y);
            foreach (FloatingObject obj2 in this._movingResizingFloatingObjects)
            {
                FloatingObjectLayout layout = cacheFloatingObjectsMovingResizingLayoutModels.Find(obj2.Name);
                FloatingObjectLayout layout2 = viewportFloatingObjectLayoutModel.Find(obj2.Name);
                Windows.Foundation.Point point2 = new Windows.Foundation.Point(layout.X + layout.Width, layout.Y);
                Windows.Foundation.Point point3 = new Windows.Foundation.Point(point2.X + point.X, point2.Y + point.Y);
                Windows.Foundation.Point point4 = new Windows.Foundation.Point(layout2.X, layout2.Y + layout2.Height);
                double x = Math.Min(point3.X, point4.X);
                double y = Math.Min(point3.Y, point4.Y);
                double width = Math.Abs((double)(point4.X - point3.X));
                double height = Math.Abs((double)(point4.Y - point3.Y));
                Windows.Foundation.Rect rect = new Windows.Foundation.Rect(x, y, width, height);
                list.Add(rect);
            }
            return list.ToArray();
        }

        /// <summary>
        /// Gets the index of the floating object Z.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <returns></returns>
        public int GetFloatingObjectZIndex(string name)
        {
            int activeRowViewportIndex = this.GetActiveRowViewportIndex();
            int activeColumnViewportIndex = this.GetActiveColumnViewportIndex();
            GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(activeRowViewportIndex, activeColumnViewportIndex);
            if (viewportRowsPresenter != null)
            {
                return viewportRowsPresenter.GetFlotingObjectZIndex(name);
            }
            return -1;
        }

        private CellRange GetFromRange()
        {
            CellRange range = null;
            if (this.Worksheet.Selections.Count > 1)
            {
                return range;
            }
            if (this.Worksheet.Selections.Count == 1)
            {
                return this.Worksheet.Selections[0];
            }
            CellRange spanCell = this.Worksheet.GetSpanCell(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex);
            if (spanCell != null)
            {
                return spanCell;
            }
            return new CellRange(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex, 1, 1);
        }

        internal Windows.UI.Color GetGripperFillColor()
        {
            if (this.Worksheet == null)
            {
                return Colors.White;
            }
            if (!string.IsNullOrWhiteSpace(this.Worksheet.TouchSelectionGripperBackgroundThemeColor))
            {
                return this.Worksheet.Workbook.GetThemeColor(this.Worksheet.TouchSelectionGripperBackgroundThemeColor);
            }
            return this.Worksheet.TouchSelectionGripperBackgroundColor;
        }

        internal Windows.UI.Color GetGripperStrokeColor()
        {
            if (this.Worksheet == null)
            {
                return Windows.UI.Color.FromArgb(220, 0, 0, 0);
            }
            if (!string.IsNullOrWhiteSpace(this.Worksheet.SelectionBorderThemeColor))
            {
                return this.Worksheet.Workbook.GetThemeColor(this.Worksheet.SelectionBorderThemeColor);
            }
            return this.Worksheet.SelectionBorderColor;
        }

        internal GroupLayout GetGroupLayout()
        {
            if (this._cachedGroupLayout == null)
            {
                this._cachedGroupLayout = this.CreateGroupLayout();
            }
            return this._cachedGroupLayout;
        }

        private string GetHorizentalScrollTip(int column)
        {
            return string.Format(ResourceStrings.HorizentalScroll, (object[])new object[] { ((this.Worksheet.ColumnHeader.AutoText == HeaderAutoText.Numbers) ? ((int)column).ToString() : this.IndexToLetter(column)) });
        }

        private string GetHorizontalResizeTip(double size)
        {
            object[] args = new object[1];
            double num = size / ((double)this.ZoomFactor);
            args[0] = ((double)num).ToString("0");
            return string.Format(ResourceStrings.ColumnResize, args);
        }

        internal ImageSource GetImageSource(string image)
        {
            if (this._cachedToolbarImageSources.ContainsKey(image))
            {
                return this._cachedToolbarImageSources[image];
            }
            string name = IntrospectionExtensions.GetTypeInfo((Type)typeof(SheetView)).Assembly.GetName().Name;
            Uri uri = new Uri(string.Format("ms-appx:///{0}/Icons/{1}", (object[])new object[] { name, image }), (UriKind)UriKind.RelativeOrAbsolute);
            BitmapImage image2 = new BitmapImage(uri);
            this._cachedResizerGipper[image] = image2;
            return image2;
        }

        internal int GetMaxBottomScrollableRow()
        {
            int frozenRowCount = this.Worksheet.FrozenRowCount;
            int num2 = (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount) - 1;
            while (num2 > frozenRowCount)
            {
                if (this.Worksheet.Rows[num2].ActualVisible)
                {
                    return num2;
                }
                num2--;
            }
            return num2;
        }

        internal int GetMaxLeftScrollableColumn()
        {
            int frozenColumnCount = this.Worksheet.FrozenColumnCount;
            int num2 = (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount) - 1;
            while (frozenColumnCount < num2)
            {
                if (this.Worksheet.Columns[frozenColumnCount].ActualVisible)
                {
                    return frozenColumnCount;
                }
                frozenColumnCount++;
            }
            return frozenColumnCount;
        }

        internal int GetMaxRightScrollableColumn()
        {
            int frozenColumnCount = this.Worksheet.FrozenColumnCount;
            int num2 = (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount) - 1;
            while (num2 > frozenColumnCount)
            {
                if (this.Worksheet.Columns[num2].ActualVisible)
                {
                    return num2;
                }
                num2--;
            }
            return num2;
        }

        internal int GetMaxTopScrollableRow()
        {
            int frozenRowCount = this.Worksheet.FrozenRowCount;
            int num2 = (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount) - 1;
            while (frozenRowCount < num2)
            {
                if (this.Worksheet.Rows[frozenRowCount].ActualVisible)
                {
                    return frozenRowCount;
                }
                frozenRowCount++;
            }
            return frozenRowCount;
        }

        private DataValidationListButtonInfo GetMouseDownDataValidationButton(HitTestInformation hi, bool touching = false)
        {
            DataValidationListButtonInfo info = null;
            RowLayout columnHeaderRowLayoutFromY = null;
            ColumnLayout viewportColumnLayoutFromX = null;
            SheetArea cells = SheetArea.Cells;
            if (hi.HitTestType == HitTestType.ColumnHeader)
            {
                columnHeaderRowLayoutFromY = this.GetColumnHeaderRowLayoutFromY(hi.HitPoint.Y);
                viewportColumnLayoutFromX = this.GetViewportColumnLayoutFromX(hi.ColumnViewportIndex, hi.HitPoint.X);
                cells = SheetArea.ColumnHeader;
                return null;
            }
            if (hi.HitTestType == HitTestType.Viewport)
            {
                ViewportInfo viewportInfo = this.GetViewportInfo();
                if ((hi.RowViewportIndex != viewportInfo.ActiveRowViewport) || (hi.ColumnViewportIndex != viewportInfo.ActiveColumnViewport))
                {
                    return null;
                }
                columnHeaderRowLayoutFromY = this.GetViewportRowLayoutFromY(hi.RowViewportIndex, hi.HitPoint.Y);
                viewportColumnLayoutFromX = this.GetViewportColumnLayoutFromX(hi.ColumnViewportIndex, hi.HitPoint.X);
                cells = SheetArea.Cells;
            }
            if ((columnHeaderRowLayoutFromY != null) && (viewportColumnLayoutFromX != null))
            {
                int row = columnHeaderRowLayoutFromY.Row;
                int column = viewportColumnLayoutFromX.Column - 1;
                while (column >= 0)
                {
                    CellRange range = this.Worksheet.GetSpanCell(row, column, cells);
                    if (range != null)
                    {
                        row = range.Row;
                        column = range.Column;
                    }
                    info = this.GetDataValidationListButtonInfo(row, column, cells);
                    if (info != null)
                    {
                        ColumnLayout layout3 = this.GetColumnLayoutModel(hi.ColumnViewportIndex, SheetArea.Cells).Find(column);
                        if ((layout3 != null) && (Math.Abs((double)(layout3.Width - 0.0)) >= 1E-06))
                        {
                            break;
                        }
                        info = null;
                        column--;
                    }
                    else
                    {
                        ColumnLayout layout4 = this.GetColumnLayoutModel(hi.ColumnViewportIndex, SheetArea.Cells).Find(column);
                        if ((layout4 == null) || ((Math.Abs((double)(layout4.Width - 0.0)) >= 1E-06) && (layout4.Width > 16.0)))
                        {
                            break;
                        }
                        column--;
                    }
                }
                if ((column >= 0) && (info == null))
                {
                    ColumnLayout layout5 = this.GetColumnLayoutModel(hi.ColumnViewportIndex, SheetArea.Cells).Find(column);
                    if (layout5 != null)
                    {
                        CellRange range2 = this.Worksheet.GetSpanCell(columnHeaderRowLayoutFromY.Row, layout5.Column - 1, cells);
                        if (range2 != null)
                        {
                            row = range2.Row;
                            column = range2.Column;
                        }
                        info = this.GetDataValidationListButtonInfo(row, column, cells);
                    }
                }
                if (info == null)
                {
                    row = columnHeaderRowLayoutFromY.Row;
                    column = viewportColumnLayoutFromX.Column;
                    CellRange range3 = this.Worksheet.GetSpanCell(columnHeaderRowLayoutFromY.Row, viewportColumnLayoutFromX.Column - 1, cells);
                    if (range3 != null)
                    {
                        row = range3.Row;
                        column = range3.Column;
                    }
                    info = this.GetDataValidationListButtonInfo(row, column, cells);
                }
                if (info != null)
                {
                    double x = hi.HitPoint.X;
                    double y = hi.HitPoint.Y;
                    double num5 = Math.Min(16.0, columnHeaderRowLayoutFromY.Height);
                    if (info.Column == info.DisplayColumn)
                    {
                        double num6 = Math.Min(16.0, viewportColumnLayoutFromX.Width);
                        if (!touching)
                        {
                            if (((x >= (((viewportColumnLayoutFromX.X + viewportColumnLayoutFromX.Width) - num6) - 2.0)) && (x < ((viewportColumnLayoutFromX.X + viewportColumnLayoutFromX.Width) - 2.0))) && ((y >= (((columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) - num5) - 2.0)) && (y < ((columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) - 2.0))))
                            {
                                info.RowViewportIndex = hi.RowViewportIndex;
                                info.ColumnViewportIndex = hi.ColumnViewportIndex;
                                return info;
                            }
                        }
                        else if (((x >= (((viewportColumnLayoutFromX.X + viewportColumnLayoutFromX.Width) - num6) - 6.0)) && (x < ((viewportColumnLayoutFromX.X + viewportColumnLayoutFromX.Width) + 4.0))) && ((y >= (((columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) - num5) - 6.0)) && (y < ((columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) + 4.0))))
                        {
                            info.RowViewportIndex = hi.RowViewportIndex;
                            info.ColumnViewportIndex = hi.ColumnViewportIndex;
                            return info;
                        }
                    }
                    else
                    {
                        double num7 = 16.0;
                        double num8 = 0.0;
                        viewportColumnLayoutFromX = this.GetColumnLayoutModel(hi.ColumnViewportIndex, SheetArea.Cells).Find(info.Column);
                        if (viewportColumnLayoutFromX != null)
                        {
                            num8 += viewportColumnLayoutFromX.Width;
                        }
                        CellRange range4 = this.Worksheet.GetSpanCell(columnHeaderRowLayoutFromY.Row, info.Column, cells);
                        if ((range4 != null) && (range4.ColumnCount > 1))
                        {
                            for (int i = 1; i < range4.ColumnCount; i++)
                            {
                                viewportColumnLayoutFromX = this.GetColumnLayoutModel(hi.ColumnViewportIndex, SheetArea.Cells).Find(info.Column + i);
                                if (viewportColumnLayoutFromX != null)
                                {
                                    num8 += viewportColumnLayoutFromX.Width;
                                }
                            }
                        }
                        if (viewportColumnLayoutFromX != null)
                        {
                            if (touching)
                            {
                                if (((x >= ((viewportColumnLayoutFromX.X + viewportColumnLayoutFromX.Width) - 4.0)) && (x < (((viewportColumnLayoutFromX.X + num8) + num7) + 4.0))) && ((y >= (((columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) - num5) - 6.0)) && (y < ((columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) + 4.0))))
                                {
                                    info.RowViewportIndex = hi.RowViewportIndex;
                                    info.ColumnViewportIndex = hi.ColumnViewportIndex;
                                    return info;
                                }
                            }
                            else if (((x >= (viewportColumnLayoutFromX.X + viewportColumnLayoutFromX.Width)) && (x < ((viewportColumnLayoutFromX.X + num8) + num7))) && ((y >= (((columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) - num5) - 2.0)) && (y < ((columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) - 2.0))))
                            {
                                info.RowViewportIndex = hi.RowViewportIndex;
                                info.ColumnViewportIndex = hi.ColumnViewportIndex;
                                return info;
                            }
                        }
                    }
                }
            }
            return null;
        }

        internal FilterButtonInfo GetMouseDownFilterButton()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if (savedHitTestInformation != null)
            {
                return this.GetMouseDownFilterButton(savedHitTestInformation, false);
            }
            return null;
        }

        private FilterButtonInfo GetMouseDownFilterButton(HitTestInformation hi, bool touching = false)
        {
            FilterButtonInfo info = null;
            RowLayout columnHeaderRowLayoutFromY = null;
            ColumnLayout viewportColumnLayoutFromX = null;
            SheetArea cells = SheetArea.Cells;
            if (hi.HitTestType == HitTestType.ColumnHeader)
            {
                columnHeaderRowLayoutFromY = this.GetColumnHeaderRowLayoutFromY(hi.HitPoint.Y);
                viewportColumnLayoutFromX = this.GetViewportColumnLayoutFromX(hi.ColumnViewportIndex, hi.HitPoint.X);
                cells = SheetArea.ColumnHeader;
            }
            else if (hi.HitTestType == HitTestType.Viewport)
            {
                columnHeaderRowLayoutFromY = this.GetViewportRowLayoutFromY(hi.RowViewportIndex, hi.HitPoint.Y);
                viewportColumnLayoutFromX = this.GetViewportColumnLayoutFromX(hi.ColumnViewportIndex, hi.HitPoint.X);
                cells = SheetArea.Cells;
            }
            if ((columnHeaderRowLayoutFromY != null) && (viewportColumnLayoutFromX != null))
            {
                int row = columnHeaderRowLayoutFromY.Row;
                int column = viewportColumnLayoutFromX.Column;
                CellRange range = this.Worksheet.GetSpanCell(columnHeaderRowLayoutFromY.Row, viewportColumnLayoutFromX.Column, cells);
                if (range != null)
                {
                    if ((columnHeaderRowLayoutFromY.Row != ((range.Row + range.RowCount) - 1)) || (viewportColumnLayoutFromX.Column != ((range.Column + range.ColumnCount) - 1)))
                    {
                        return null;
                    }
                    row = range.Row;
                    column = range.Column;
                }
                info = this.GetFilterButtonInfo(row, column, cells);
                if (info != null)
                {
                    double x = hi.HitPoint.X;
                    double y = hi.HitPoint.Y;
                    double num5 = Math.Min(16.0, viewportColumnLayoutFromX.Width);
                    double num6 = Math.Min(16.0, columnHeaderRowLayoutFromY.Height);
                    if (touching)
                    {
                        double num7 = ((viewportColumnLayoutFromX.X + viewportColumnLayoutFromX.Width) - num5) - 6.0;
                        double num8 = ((columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) - num6) - 6.0;
                        double num9 = (viewportColumnLayoutFromX.X + viewportColumnLayoutFromX.Width) + 4.0;
                        double num10 = (columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) + 4.0;
                        if (((x >= num7) && (x < num9)) && ((y >= num8) && (y < num10)))
                        {
                            info.RowViewportIndex = hi.RowViewportIndex;
                            info.ColumnViewportIndex = hi.ColumnViewportIndex;
                            return info;
                        }
                    }
                    else if (((x >= (((viewportColumnLayoutFromX.X + viewportColumnLayoutFromX.Width) - num5) - 2.0)) && (x < ((viewportColumnLayoutFromX.X + viewportColumnLayoutFromX.Width) - 2.0))) && ((y >= (((columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) - num6) - 2.0)) && (y < ((columnHeaderRowLayoutFromY.Y + columnHeaderRowLayoutFromY.Height) - 2.0))))
                    {
                        info.RowViewportIndex = hi.RowViewportIndex;
                        info.ColumnViewportIndex = hi.ColumnViewportIndex;
                        return info;
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// Gets the column count when scrolling right one page.
        /// </summary>
        /// <param name="columnViewportIndex">The column viewport index one page to the right.</param>
        /// <returns>The column count when scrolling right one page.</returns>
        public int GetNextPageColumnCount(int columnViewportIndex)
        {
            return this.GetNextPageColumnCount(this.Worksheet, columnViewportIndex);
        }

        private int GetNextPageColumnCount(Dt.Cells.Data.Worksheet sheet, int columnViewportIndex)
        {
            if (sheet == null)
            {
                return 0;
            }
            float zoomFactor = this.ZoomFactor;
            int viewportLeftColumn = sheet.GetViewportLeftColumn(columnViewportIndex);
            double viewportWidth = this.GetViewportWidth(sheet, columnViewportIndex);
            if ((viewportLeftColumn < ((sheet.ColumnCount - sheet.FrozenTrailingColumnCount) - 1)) && ((sheet.Columns[viewportLeftColumn].ActualWidth * zoomFactor) >= viewportWidth))
            {
                return 1;
            }
            int num4 = 0;
            double num5 = 0.0;
            int column = viewportLeftColumn;
            while (column < (sheet.ColumnCount - sheet.FrozenTrailingColumnCount))
            {
                double num7 = sheet.GetActualColumnWidth(column, SheetArea.Cells) * zoomFactor;
                if ((num5 + num7) > viewportWidth)
                {
                    break;
                }
                num5 += num7;
                num4++;
                column++;
            }
            if (column == (sheet.ColumnCount - sheet.FrozenTrailingColumnCount))
            {
                num4 = 0;
            }
            return num4;
        }

        /// <summary>
        /// Gets the row count when scrolling down one page.
        /// </summary>
        /// <param name="rowViewportIndex">The row viewport index one page down.</param>
        /// <returns>The row count when scrolling down one page.</returns>
        public int GetNextPageRowCount(int rowViewportIndex)
        {
            return this.GetNextPageRowCount(this.Worksheet, rowViewportIndex);
        }

        private int GetNextPageRowCount(Dt.Cells.Data.Worksheet sheet, int rowViewportIndex)
        {
            if (sheet == null)
            {
                return 0;
            }
            float zoomFactor = this.ZoomFactor;
            int viewportTopRow = this.GetViewportTopRow(sheet, rowViewportIndex);
            double viewportHeight = this.GetViewportHeight(sheet, rowViewportIndex);
            if ((viewportTopRow < ((sheet.RowCount - sheet.FrozenTrailingRowCount) - 1)) && ((sheet.Rows[viewportTopRow].ActualHeight * zoomFactor) >= viewportHeight))
            {
                return 1;
            }
            int num4 = 0;
            double num5 = 0.0;
            int row = viewportTopRow;
            while (row < (sheet.RowCount - sheet.FrozenTrailingRowCount))
            {
                double num7 = sheet.GetActualRowHeight(row, SheetArea.Cells) * zoomFactor;
                if ((num5 + num7) > viewportHeight)
                {
                    break;
                }
                num5 += num7;
                num4++;
                row++;
            }
            if (row == (sheet.RowCount - sheet.FrozenTrailingRowCount))
            {
                num4 = 0;
            }
            return num4;
        }

        internal int GetNextScrollableColumn(int startColumn)
        {
            int num = startColumn + 1;
            int num2 = this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount;
            while (num < num2)
            {
                if (this.Worksheet.Columns[num].ActualVisible)
                {
                    return num;
                }
                num++;
            }
            return -1;
        }

        internal int GetNextScrollableRow(int startRow)
        {
            int num = startRow + 1;
            int num2 = this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount;
            while (num < num2)
            {
                if (this.Worksheet.Rows[num].ActualVisible)
                {
                    return num;
                }
                num++;
            }
            return -1;
        }

        private static CellRange GetPastedRange(CellRange toRange, string clipboadText)
        {
            CellRange range = null;
            string[,] strArray = Dt.Cells.Data.Worksheet.ParseCsv(clipboadText, "\r\n", "\t", "\"");
            if (strArray != null)
            {
                int row = (toRange.Row < 0) ? 0 : toRange.Row;
                int column = (toRange.Column < 0) ? 0 : toRange.Column;
                int length = strArray.GetLength(0);
                int columnCount = strArray.GetLength(1);
                range = new CellRange(row, column, length, columnCount);
            }
            return range;
        }

        private static CellRange GetPastedRange(Dt.Cells.Data.Worksheet fromSheet, CellRange fromRange, Dt.Cells.Data.Worksheet toSheet, CellRange toRange, bool isCutting)
        {
            int row = (fromRange.Row < 0) ? 0 : fromRange.Row;
            int column = (fromRange.Column < 0) ? 0 : fromRange.Column;
            int rowCount = (fromRange.Row < 0) ? fromSheet.RowCount : fromRange.RowCount;
            int columnCount = (fromRange.Column < 0) ? fromSheet.ColumnCount : fromRange.ColumnCount;
            int num5 = (toRange.Row < 0) ? 0 : toRange.Row;
            int num6 = (toRange.Column < 0) ? 0 : toRange.Column;
            int num7 = (toRange.Row < 0) ? toSheet.RowCount : toRange.RowCount;
            int num8 = (toRange.Column < 0) ? toSheet.ColumnCount : toRange.ColumnCount;
            if ((isCutting || ((num7 % rowCount) != 0)) || ((num8 % columnCount) != 0))
            {
                num7 = rowCount;
                num8 = columnCount;
            }
            if (!IsValidRange(row, column, rowCount, columnCount, fromSheet.RowCount, fromSheet.ColumnCount))
            {
                return null;
            }
            if (!IsValidRange(num5, num6, num7, num8, toSheet.RowCount, toSheet.ColumnCount))
            {
                return null;
            }
            CellRange range = new CellRange(num5, num6, num7, num8);
            if (!isCutting && object.ReferenceEquals(fromSheet, toSheet))
            {
                if (range.Contains(row, column, rowCount, columnCount))
                {
                    if ((((row - num5) % rowCount) != 0) || (((column - num6) % columnCount) != 0))
                    {
                        return null;
                    }
                }
                else if (range.Intersects(row, column, rowCount, columnCount) && ((num7 > rowCount) || (num8 > columnCount)))
                {
                    return null;
                }
            }
            if (toRange.Row == -1)
            {
                num5 = -1;
                num7 = -1;
            }
            if (toRange.Column == -1)
            {
                num6 = -1;
                num8 = -1;
            }
            return new CellRange(num5, num6, num7, num8);
        }

        /// <summary>
        /// Gets the column count when scrolling left one page.
        /// </summary>
        /// <param name="columnViewportIndex">The column viewport index one page to the left.</param>
        /// <returns>The column count when scrolling left one page.</returns>
        public int GetPrePageColumnCount(int columnViewportIndex)
        {
            return this.GetPrePageColumnCount(this.Worksheet, columnViewportIndex);
        }

        private int GetPrePageColumnCount(Dt.Cells.Data.Worksheet sheet, int columnViewportIndex)
        {
            if (sheet == null)
            {
                return 0;
            }
            float zoomFactor = this.ZoomFactor;
            int viewportLeftColumn = sheet.GetViewportLeftColumn(columnViewportIndex);
            double viewportWidth = this.GetViewportWidth(sheet, columnViewportIndex);
            int column = viewportLeftColumn - 1;
            if ((column > sheet.FrozenColumnCount) && ((sheet.Columns[column].ActualWidth * zoomFactor) >= viewportWidth))
            {
                return 1;
            }
            double num5 = 0.0;
            int num6 = 0;
            while ((column >= sheet.FrozenColumnCount) && (num5 < viewportWidth))
            {
                double num7 = sheet.GetActualColumnWidth(column, SheetArea.Cells) * zoomFactor;
                if ((num5 + num7) > viewportWidth)
                {
                    return num6;
                }
                num5 += num7;
                num6++;
                column--;
            }
            return num6;
        }

        /// <summary>
        /// Gets the row count when scrolling up one page.
        /// </summary>
        /// <param name="rowViewportIndex">The row viewport index one page up.</param>
        /// <returns>The row count when scrolling up one page.</returns>
        public int GetPrePageRowCount(int rowViewportIndex)
        {
            return this.GetPrePageRowCount(this.Worksheet, rowViewportIndex);
        }

        private int GetPrePageRowCount(Dt.Cells.Data.Worksheet sheet, int rowViewportIndex)
        {
            if (sheet == null)
            {
                return 0;
            }
            float zoomFactor = this.ZoomFactor;
            int viewportTopRow = this.GetViewportTopRow(sheet, rowViewportIndex);
            double viewportHeight = this.GetViewportHeight(sheet, rowViewportIndex);
            int row = viewportTopRow - 1;
            if ((row > sheet.FrozenRowCount) && ((sheet.Rows[row].ActualHeight * zoomFactor) >= viewportHeight))
            {
                return 1;
            }
            double num5 = 0.0;
            int num6 = 0;
            while (row >= sheet.FrozenRowCount)
            {
                double num7 = sheet.GetActualRowHeight(row, SheetArea.Cells) * zoomFactor;
                if ((num5 + num7) > viewportHeight)
                {
                    return num6;
                }
                num5 += num7;
                num6++;
                row--;
            }
            return num6;
        }

        private string GetRangeString(CellRange range)
        {
            CalcExpression expression;
            int row = range.Row;
            int column = range.Column;
            int rowCount = range.RowCount;
            int columnCount = range.ColumnCount;
            CalcParser parser = new CalcParser();
            if ((range.RowCount == 1) && (range.ColumnCount == 1))
            {
                expression = new CalcCellExpression(row, column, true, true);
            }
            else
            {
                new CalcCellIdentity(row, column);
                if (((rowCount == -1) && (columnCount == -1)) || ((row == -1) && (column == -1)))
                {
                    expression = new CalcRangeExpression();
                }
                else if ((columnCount == -1) || (column == -1))
                {
                    expression = new CalcRangeExpression(row, (row + rowCount) - 1, true, true, true);
                }
                else if ((rowCount == -1) || (row == -1))
                {
                    expression = new CalcRangeExpression(column, (column + columnCount) - 1, true, true, false);
                }
                else
                {
                    expression = new CalcRangeExpression(row, column, (row + rowCount) - 1, (column + columnCount) - 1, true, true, true, true);
                }
            }
            CalcParserContext context = new CalcParserContext(this.Worksheet.ReferenceStyle == ReferenceStyle.R1C1, 0, 0, null);
            return parser.Unparse(expression, context);
        }

        internal BitmapImage GetResizerBitmapImage(bool rowHeaderResizer)
        {
            string str = "";
            if (rowHeaderResizer)
            {
                str = "ResizeGripperVer.png";
                if (Application.Current.RequestedTheme == ApplicationTheme.Dark)
                {
                    str = "ResizeGripperVer_dark.png";
                }
            }
            else
            {
                str = "ResizeGripperHor.png";
                if (Application.Current.RequestedTheme == ApplicationTheme.Dark)
                {
                    str = "ResizeGripperHor_dark.png";
                }
            }
            if (this._cachedResizerGipper.ContainsKey(str))
            {
                return this._cachedResizerGipper[str];
            }
            string name = IntrospectionExtensions.GetTypeInfo((Type)typeof(SheetView)).Assembly.GetName().Name;
            Uri uri = new Uri(string.Format("ms-appx:///{0}/Icons/{1}", (object[])new object[] { name, str }), (UriKind)UriKind.RelativeOrAbsolute);
            BitmapImage image = new BitmapImage(uri);
            this._cachedResizerGipper[str] = image;
            return image;
        }

        internal double GetRowAutoFitValue(int row, bool columnHeader)
        {
            double num = -1.0;
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            int columnCount = worksheet.ColumnCount;
            Cell cell = null;
            FontFamily unknownFontfamily = null;
            unknownFontfamily = this.InheritedControlFontFamily;
            object textFormattingMode = null;
            for (int i = 0; i < columnCount; i++)
            {
                cell = columnHeader ? worksheet.ColumnHeader.Cells[row, i] : worksheet.Cells[row, i];
                if (!string.IsNullOrEmpty(cell.Text))
                {
                    CellRange range = worksheet.GetSpanCell(row, i, cell.SheetArea);
                    if ((range == null) || ((range.Row >= row) && (range.RowCount <= 1)))
                    {
                        double width = 0.0;
                        if (range == null)
                        {
                            width = worksheet.GetColumnWidth(i, cell.SheetArea);
                        }
                        else
                        {
                            for (int j = 0; j < range.ColumnCount; j++)
                            {
                                width += worksheet.GetColumnWidth(i + j, cell.SheetArea);
                            }
                        }
                        Windows.Foundation.Size maxSize = MeasureHelper.ConvertExcelCellSizeToTextSize(new Windows.Foundation.Size(width, double.PositiveInfinity), 1.0);
                        Windows.Foundation.Size size3 = MeasureHelper.ConvertTextSizeToExcelCellSize(MeasureHelper.MeasureTextInCell(cell, maxSize, 1.0, unknownFontfamily, textFormattingMode, base.UseLayoutRounding), 1.0);
                        num = Math.Max(num, size3.Height);
                        if (range != null)
                        {
                            i += range.ColumnCount - 1;
                        }
                    }
                }
            }
            return num;
        }

        internal CellLayoutModel GetRowHeaderCellLayoutModel(int rowViewportIndex)
        {
            int rowViewportCount = this.GetViewportInfo().RowViewportCount;
            if (this._cachedRowHeaderCellLayoutModel == null)
            {
                this._cachedRowHeaderCellLayoutModel = new CellLayoutModel[rowViewportCount + 2];
            }
            if (this._cachedRowHeaderCellLayoutModel[rowViewportIndex + 1] == null)
            {
                this._cachedRowHeaderCellLayoutModel[rowViewportIndex + 1] = this.CreateRowHeaderCellLayoutModel(rowViewportIndex);
            }
            return this._cachedRowHeaderCellLayoutModel[rowViewportIndex + 1];
        }

        private ColumnLayout GetRowHeaderColumnLayout(int column)
        {
            return this.GetRowHeaderColumnLayoutModel().FindColumn(column);
        }

        private ColumnLayout GetRowHeaderColumnLayoutFromX(double x)
        {
            return this.GetRowHeaderColumnLayoutModel().FindX(x);
        }

        internal ColumnLayoutModel GetRowHeaderColumnLayoutModel()
        {
            if (this._cachedRowHeaderColumnLayoutModel == null)
            {
                this._cachedRowHeaderColumnLayoutModel = this.CreateRowHeaderColumnLayoutModel();
            }
            return this._cachedRowHeaderColumnLayoutModel;
        }

        private Windows.Foundation.Rect GetRowHeaderRectangle(int rowViewportIndex)
        {
            SheetLayout sheetLayout = this.GetSheetLayout();
            double headerX = sheetLayout.HeaderX;
            double viewportY = sheetLayout.GetViewportY(rowViewportIndex);
            double width = sheetLayout.HeaderWidth - 1.0;
            double height = sheetLayout.GetViewportHeight(rowViewportIndex) - 1.0;
            if ((width >= 0.0) && (height >= 0.0))
            {
                return new Windows.Foundation.Rect(headerX, viewportY, width, height);
            }
            return Windows.Foundation.Rect.Empty;
        }

        private ColumnLayout GetRowHeaderResizingColumnLayoutFromX(double x)
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            ColumnLayoutModel rowHeaderColumnLayoutModel = this.GetRowHeaderColumnLayoutModel();
            if (worksheet.RowCount > 0)
            {
                for (int i = rowHeaderColumnLayoutModel.Count - 1; i >= 0; i--)
                {
                    ColumnLayout layout = Enumerable.ElementAt<ColumnLayout>((IEnumerable<ColumnLayout>)rowHeaderColumnLayoutModel, i);
                    if (((x >= Math.Max(layout.X, (layout.X + layout.Width) - 4.0)) && (x < ((layout.X + layout.Width) + 4.0))) && worksheet.RowHeader.Columns[layout.Column].CanUserResize)
                    {
                        return layout;
                    }
                }
            }
            return null;
        }

        private ColumnLayout GetRowHeaderResizingColumnLayoutFromXForTouch(double x)
        {
            ColumnLayout rowHeaderResizingColumnLayoutFromX = this.GetRowHeaderResizingColumnLayoutFromX(x);
            if (rowHeaderResizingColumnLayoutFromX == null)
            {
                for (int i = -5; i < 5; i++)
                {
                    rowHeaderResizingColumnLayoutFromX = this.GetRowHeaderResizingColumnLayoutFromX(x + i);
                    if (rowHeaderResizingColumnLayoutFromX != null)
                    {
                        return rowHeaderResizingColumnLayoutFromX;
                    }
                }
            }
            return rowHeaderResizingColumnLayoutFromX;
        }

        internal GcViewport GetRowHeaderRowsPresenter(int rowViewportIndex)
        {
            if (this._rowHeaderPresenters == null)
            {
                return null;
            }
            return this._rowHeaderPresenters[rowViewportIndex + 1];
        }

        internal RowLayoutModel GetRowHeaderViewportRowLayoutModel(int rowViewportIndex)
        {
            if (this._cachedRowHeaderViewportRowLayoutModel == null)
            {
                int rowViewportCount = this.GetViewportInfo().RowViewportCount;
                this._cachedRowHeaderViewportRowLayoutModel = new RowLayoutModel[rowViewportCount + 2];
            }
            if (this._cachedRowHeaderViewportRowLayoutModel[rowViewportIndex + 1] == null)
            {
                if (this.ResizeZeroIndicator == Dt.Cells.UI.ResizeZeroIndicator.Enhanced)
                {
                    this._cachedRowHeaderViewportRowLayoutModel[rowViewportIndex + 1] = this.CreateEnhancedResizeToZeroRowHeaderViewportRowLayoutModel(rowViewportIndex);
                }
                else
                {
                    this._cachedRowHeaderViewportRowLayoutModel[rowViewportIndex + 1] = this.CreateViewportRowLayoutModel(rowViewportIndex);
                }
            }
            return this._cachedRowHeaderViewportRowLayoutModel[rowViewportIndex + 1];
        }

        internal RowLayoutModel GetRowLayoutModel(int rowViewportIndex, SheetArea sheetArea)
        {
            switch (sheetArea)
            {
                case SheetArea.Cells:
                    return this.GetViewportRowLayoutModel(rowViewportIndex);

                case (SheetArea.CornerHeader | SheetArea.RowHeader):
                    if (this.ResizeZeroIndicator != Dt.Cells.UI.ResizeZeroIndicator.Enhanced)
                    {
                        return this.GetViewportRowLayoutModel(rowViewportIndex);
                    }
                    return this.GetRowHeaderViewportRowLayoutModel(rowViewportIndex);

                case SheetArea.ColumnHeader:
                    return this.GetColumnHeaderRowLayoutModel();
            }
            return null;
        }

        internal static object[,] GetsArrayFormulas(Dt.Cells.Data.Worksheet sheet, int row, int column, int rowCount, int columnCount)
        {
            object[,] objArray = sheet.FindFormulas(row, column, rowCount, columnCount);
            if ((objArray != null) && (objArray.Length > 0))
            {
                List<string> list = new List<string>();
                List<CellRange> list2 = new List<CellRange>();
                int length = objArray.GetLength(0);
                for (int i = 0; i < length; i++)
                {
                    string str = (string)(objArray[i, 1] as string);
                    if ((!string.IsNullOrEmpty(str) && str.StartsWith("{")) && str.EndsWith("}"))
                    {
                        list2.Add((CellRange)objArray[i, 0]);
                        list.Add(str);
                    }
                }
                if (list.Count > 0)
                {
                    object[,] objArray2 = new object[list.Count, 2];
                    for (int j = 0; j < list.Count; j++)
                    {
                        objArray2[j, 0] = list2[j];
                        objArray2[j, 1] = list[j];
                    }
                    return objArray2;
                }
            }
            return null;
        }

        internal HitTestInformation GetSavedHitTestInformation()
        {
            if (this._positionInfo == null)
            {
                this._positionInfo = new HitTestInformation();
            }
            return this._positionInfo;
        }

        internal virtual SheetLayout GetSheetLayout()
        {
            SheetLayout layout = this._cachedLayout;
            if (layout == null)
            {
                this._cachedLayout = layout = this.CreateSheetLayout();
            }
            return layout;
        }

        /// <summary>
        /// Ges the spread chart view.
        /// </summary>
        /// <param name="chartName">Name of the chart.</param>
        /// <returns></returns>
        public SpreadChartView GetSpreadChartView(string chartName)
        {
            int activeRowViewportIndex = this.GetActiveRowViewportIndex();
            int activeColumnViewportIndex = this.GetActiveColumnViewportIndex();
            GcViewport viewport = this._viewportPresenters[activeRowViewportIndex + 1, activeColumnViewportIndex + 1];
            if (viewport != null)
            {
                return viewport.GetSpreadChartView(chartName);
            }
            return null;
        }

        private ColumnLayout GetValidHorDragToColumnLayout()
        {
            if (this.IsIncreaseFill)
            {
                if (this.IsDragToColumnInView)
                {
                    return this.GetCurrentDragToColumnLayout();
                }
                return this.DragFillToViewportRightColumnLayout;
            }
            if (this.IsDragFillStartRightColumnInView)
            {
                return this.DragFillStartRightColumnLayout;
            }
            return this.DragFillStartViewportRightColumnLayout;
        }

        private RowLayout GetValidVerDragToRowLayout()
        {
            if (this.IsIncreaseFill)
            {
                if (this.IsDragToRowInView)
                {
                    return this.GetCurrentDragToRowLayout();
                }
                return this.DragFillToViewportBottomRowLayout;
            }
            if (this.IsDragFillStartBottomRowInView)
            {
                return this.DragFillStartBottomRowLayout;
            }
            return this.DragFillStartViewportBottomRowLayout;
        }

        private string GetVericalScrollTip(int row)
        {
            return string.Format(ResourceStrings.VerticalScroll, (object[])new object[] { ((int)row) });
        }

        private string GetVerticalResizeTip(double size)
        {
            object[] args = new object[1];
            double num = size / ((double)this.ZoomFactor);
            args[0] = ((double)num).ToString("0");
            return string.Format(ResourceStrings.RowResize, args);
        }

        /// <summary>
        /// Gets the row viewport's bottom row index.
        /// </summary>
        /// <param name="rowViewportIndex">The row viewport index.</param>
        /// <returns>The bottom row index in the row viewport.</returns>
        public int GetViewportBottomRow(int rowViewportIndex)
        {
            return this.GetViewportBottomRow(this.Worksheet, rowViewportIndex);
        }

        private int GetViewportBottomRow(Dt.Cells.Data.Worksheet sheet, int rowViewportIndex)
        {
            if (rowViewportIndex == this.GetViewportInfo(sheet).RowViewportCount)
            {
                return (sheet.RowCount - 1);
            }
            int viewportTopRow = this.GetViewportTopRow(rowViewportIndex);
            double viewportHeight = this.GetViewportHeight(sheet, rowViewportIndex);
            double num3 = 0.0;
            int num4 = 0;
            float zoomFactor = this.ZoomFactor;
            int row = viewportTopRow;
            while ((row < (sheet.RowCount - sheet.FrozenTrailingRowCount)) && (num3 < viewportHeight))
            {
                num3 += Math.Ceiling((double)(sheet.GetActualRowHeight(row, SheetArea.Cells) * zoomFactor));
                row++;
                num4++;
            }
            return ((viewportTopRow + num4) - 1);
        }

        private CellPresenterBase GetViewportCell(int rowViewportIndex, int columnViewportIndex, int rowIndex, int columnIndex)
        {
            CellPresenterBase cell = null;
            GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(rowViewportIndex, columnViewportIndex);
            if (viewportRowsPresenter != null)
            {
                RowPresenter row = viewportRowsPresenter.GetRow(rowIndex);
                if (row != null)
                {
                    cell = row.GetCell(columnIndex);
                }
            }
            if (((cell == null) && (viewportRowsPresenter.CurrentRow != null)) && (rowIndex == this.Worksheet.ActiveRowIndex))
            {
                cell = viewportRowsPresenter.CurrentRow.GetCell(columnIndex);
            }
            return cell;
        }

        internal CellLayoutModel GetViewportCellLayoutModel(int rowViewportIndex, int columnViewportIndex)
        {
            ViewportInfo viewportInfo = this.GetViewportInfo();
            int columnViewportCount = viewportInfo.ColumnViewportCount;
            int rowViewportCount = viewportInfo.RowViewportCount;
            if (this._cachedViewportCellLayoutModel == null)
            {
                this._cachedViewportCellLayoutModel = new CellLayoutModel[rowViewportCount + 2, columnViewportCount + 2];
            }
            if (this._cachedViewportCellLayoutModel[rowViewportIndex + 1, columnViewportIndex + 1] == null)
            {
                this._cachedViewportCellLayoutModel[rowViewportIndex + 1, columnViewportIndex + 1] = this.CreateViewportCellLayoutModel(rowViewportIndex, columnViewportIndex);
            }
            return this._cachedViewportCellLayoutModel[rowViewportIndex + 1, columnViewportIndex + 1];
        }

        private ColumnLayout GetViewportColumnLayoutFromX(int columnViewportIndex, double x)
        {
            if (this.ResizeZeroIndicator != Dt.Cells.UI.ResizeZeroIndicator.Enhanced)
            {
                return this.GetViewportColumnLayoutModel(columnViewportIndex).FindX(x);
            }
            ColumnLayoutModel columnHeaderViewportColumnLayoutModel = this.GetColumnHeaderViewportColumnLayoutModel(columnViewportIndex);
            ColumnLayout layout = columnHeaderViewportColumnLayoutModel.FindX(x);
            if ((this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch) && (layout != null))
            {
                if (this.Worksheet.GetActualColumnWidth(layout.Column, SheetArea.Cells).IsZero())
                {
                    return layout;
                }
                if ((layout.Column <= 0) || !this.Worksheet.GetActualColumnWidth(layout.Column - 1, SheetArea.Cells).IsZero())
                {
                    return layout;
                }
                ColumnLayout layout2 = columnHeaderViewportColumnLayoutModel.FindColumn(layout.Column - 1);
                if ((layout2 != null) && (((layout2.X + layout2.Width) + 3.0) >= x))
                {
                    return layout2;
                }
            }
            return layout;
        }

        internal ColumnLayoutModel GetViewportColumnLayoutModel(int columnViewportIndex)
        {
            if (this._cachedViewportColumnLayoutModel == null)
            {
                int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
                this._cachedViewportColumnLayoutModel = new ColumnLayoutModel[columnViewportCount + 2];
            }
            if (this._cachedViewportColumnLayoutModel[columnViewportIndex + 1] == null)
            {
                this._cachedViewportColumnLayoutModel[columnViewportIndex + 1] = this.CreateViewportColumnLayoutModel(columnViewportIndex);
            }
            return this._cachedViewportColumnLayoutModel[columnViewportIndex + 1];
        }

        internal ColumnLayout GetViewportColumnLayoutNearX(int columnViewportIndex, double x)
        {
            SheetLayout sheetLayout = this.GetSheetLayout();
            ColumnLayout layout2 = null;
            int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
            if ((columnViewportIndex == -1) && (x > (sheetLayout.GetViewportX(-1) + sheetLayout.GetViewportWidth(-1))))
            {
                layout2 = this.GetViewportColumnLayoutModel(0).FindNearX(x);
            }
            else if (((columnViewportIndex == 0) && (x < sheetLayout.GetViewportX(0))) && (this.GetViewportLeftColumn(0) == this.Worksheet.FrozenColumnCount))
            {
                layout2 = this.GetViewportColumnLayoutModel(-1).FindNearX(x);
            }
            else if (((columnViewportIndex == (columnViewportCount - 1)) && (x > sheetLayout.GetViewportX(columnViewportCount))) && (this.GetViewportRightColumn(columnViewportCount - 1) == ((this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount) - 1)))
            {
                layout2 = this.GetViewportColumnLayoutModel(columnViewportCount).FindNearX(x);
            }
            else if ((columnViewportIndex == columnViewportCount) && (x < sheetLayout.GetViewportX(columnViewportCount)))
            {
                layout2 = this.GetViewportColumnLayoutModel(columnViewportCount - 1).FindNearX(x);
            }
            if (layout2 == null)
            {
                layout2 = this.GetViewportColumnLayoutModel(columnViewportIndex).FindNearX(x);
            }
            return layout2;
        }

        internal FloatingObjectLayoutModel GetViewportFloatingObjectLayoutModel(int rowViewportIndex, int columnViewportIndex)
        {
            ViewportInfo viewportInfo = this.GetViewportInfo();
            int columnViewportCount = viewportInfo.ColumnViewportCount;
            int rowViewportCount = viewportInfo.RowViewportCount;
            if (this._cachedFloatingObjectLayoutModel == null)
            {
                this._cachedFloatingObjectLayoutModel = new FloatingObjectLayoutModel[rowViewportCount + 2, columnViewportCount + 2];
            }
            if (this._cachedFloatingObjectLayoutModel[rowViewportIndex + 1, columnViewportIndex + 1] == null)
            {
                this._cachedFloatingObjectLayoutModel[rowViewportIndex + 1, columnViewportIndex + 1] = this.CreateViewportChartShapeLayoutMode(rowViewportIndex, columnViewportIndex);
            }
            return this._cachedFloatingObjectLayoutModel[rowViewportIndex + 1, columnViewportIndex + 1];
        }

        internal double GetViewportHeight(int rowViewportIndex)
        {
            return this.GetViewportHeight(this.Worksheet, rowViewportIndex);
        }

        private double GetViewportHeight(Dt.Cells.Data.Worksheet sheet, int rowViewportIndex)
        {
            return this.GetSheetLayout().GetViewportHeight(rowViewportIndex);
        }

        internal ViewportInfo GetViewportInfo()
        {
            return this.GetViewportInfo(this.Worksheet);
        }

        internal virtual ViewportInfo GetViewportInfo(Dt.Cells.Data.Worksheet sheet)
        {
            if (sheet == null)
            {
                return new ViewportInfo();
            }
            return sheet.GetViewportInfo();
        }

        /// <summary>
        /// Gets the column viewport's left column index.
        /// </summary>
        /// <param name="columnViewportIndex">The column viewport index.</param>
        /// <returns>The left column index in the column viewport.</returns>
        public int GetViewportLeftColumn(int columnViewportIndex)
        {
            return this.Worksheet.GetViewportLeftColumn(columnViewportIndex);
        }

        private Windows.Foundation.Rect GetViewportRectangle(int rowViewportIndex, int columnViewportIndex)
        {
            SheetLayout sheetLayout = this.GetSheetLayout();
            double viewportX = sheetLayout.GetViewportX(columnViewportIndex);
            double viewportY = sheetLayout.GetViewportY(rowViewportIndex);
            double width = sheetLayout.GetViewportWidth(columnViewportIndex) - 1.0;
            double height = sheetLayout.GetViewportHeight(rowViewportIndex) - 1.0;
            if ((width >= 0.0) && (height >= 0.0))
            {
                return new Windows.Foundation.Rect(viewportX, viewportY, width, height);
            }
            return Windows.Foundation.Rect.Empty;
        }

        private ColumnLayout GetViewportResizingColumnLayoutFromX(int columnViewportIndex, double x)
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            ColumnLayoutModel viewportColumnLayoutModel = this.GetViewportColumnLayoutModel(columnViewportIndex);
            for (int i = viewportColumnLayoutModel.Count - 1; i >= 0; i--)
            {
                ColumnLayout layout = Enumerable.ElementAt<ColumnLayout>((IEnumerable<ColumnLayout>)viewportColumnLayoutModel, i);
                if (((layout != null) && (x >= Math.Max(layout.X, (layout.X + layout.Width) - 4.0))) && ((x < ((layout.X + layout.Width) + 4.0)) && worksheet.Columns[layout.Column].CanUserResize))
                {
                    return layout;
                }
            }
            if (((columnViewportIndex >= 0) && (columnViewportIndex < this.GetViewportInfo().ColumnViewportCount)) && (viewportColumnLayoutModel.Count > 0))
            {
                ColumnLayout layout2 = viewportColumnLayoutModel[0];
                if (((x >= Math.Max((double)0.0, (double)(layout2.X - 4.0))) && (x < (layout2.X + 4.0))) && ((columnViewportIndex - 1) >= -1))
                {
                    ColumnLayoutModel model2 = this.GetViewportColumnLayoutModel(Math.Max(-1, columnViewportIndex - 1));
                    for (int j = layout2.Column - 1; j >= worksheet.FrozenColumnCount; j--)
                    {
                        if (model2.Find(j) != null)
                        {
                            break;
                        }
                        if ((worksheet.GetActualColumnWidth(j, SheetArea.Cells) == 0.0) && worksheet.Columns[j].CanUserResize)
                        {
                            return new ColumnLayout(j, layout2.X, 0.0);
                        }
                    }
                }
            }
            return null;
        }

        private ColumnLayout GetViewportResizingColumnLayoutFromXForTouch(int columnViewportIndex, double x)
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            ColumnLayoutModel viewportColumnLayoutModel = this.GetViewportColumnLayoutModel(columnViewportIndex);
            for (int i = viewportColumnLayoutModel.Count - 1; i >= 0; i--)
            {
                ColumnLayout layout = Enumerable.ElementAt<ColumnLayout>((IEnumerable<ColumnLayout>)viewportColumnLayoutModel, i);
                if (((layout != null) && (x >= Math.Max(layout.X, (layout.X + layout.Width) - 8.0))) && ((x < ((layout.X + layout.Width) + 8.0)) && worksheet.Columns[layout.Column].CanUserResize))
                {
                    return layout;
                }
            }
            if (((columnViewportIndex >= 0) && (columnViewportIndex < this.GetViewportInfo().ColumnViewportCount)) && (viewportColumnLayoutModel.Count > 0))
            {
                ColumnLayout layout2 = viewportColumnLayoutModel[0];
                if (((x >= Math.Max((double)0.0, (double)(layout2.X - 8.0))) && (x < (layout2.X + 8.0))) && ((columnViewportIndex - 1) >= -1))
                {
                    ColumnLayoutModel model2 = this.GetViewportColumnLayoutModel(Math.Max(-1, columnViewportIndex - 1));
                    for (int j = layout2.Column - 1; j >= worksheet.FrozenColumnCount; j--)
                    {
                        if (model2.Find(j) != null)
                        {
                            break;
                        }
                        if ((worksheet.GetActualColumnWidth(j, SheetArea.Cells) == 0.0) && worksheet.Columns[j].CanUserResize)
                        {
                            return new ColumnLayout(j, layout2.X, 0.0);
                        }
                    }
                }
            }
            return null;
        }

        private RowLayout GetViewportResizingRowLayoutFromY(int rowViewportIndex, double y)
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            RowLayoutModel viewportRowLayoutModel = this.GetViewportRowLayoutModel(rowViewportIndex);
            for (int i = viewportRowLayoutModel.Count - 1; i >= 0; i--)
            {
                RowLayout layout = Enumerable.ElementAt<RowLayout>((IEnumerable<RowLayout>)viewportRowLayoutModel, i);
                if (((layout != null) && (y >= Math.Max(layout.Y, (layout.Y + layout.Height) - 4.0))) && ((y < ((layout.Y + layout.Height) + 4.0)) && worksheet.Rows[layout.Row].CanUserResize))
                {
                    return layout;
                }
            }
            if (((rowViewportIndex >= 0) && (rowViewportIndex < this.GetViewportInfo().RowViewportCount)) && (viewportRowLayoutModel.Count > 0))
            {
                RowLayout layout2 = viewportRowLayoutModel[0];
                if (((y >= Math.Max((double)0.0, (double)(layout2.Y - 4.0))) && (y < (layout2.Y + 4.0))) && ((rowViewportIndex - 1) >= -1))
                {
                    RowLayoutModel model2 = this.GetViewportRowLayoutModel(Math.Max(-1, rowViewportIndex - 1));
                    for (int j = layout2.Row - 1; j >= worksheet.FrozenRowCount; j--)
                    {
                        if (model2.Find(j) != null)
                        {
                            break;
                        }
                        if ((worksheet.GetActualRowHeight(j, SheetArea.Cells) == 0.0) && worksheet.Rows[j].CanUserResize)
                        {
                            return new RowLayout(j, layout2.Y, 0.0);
                        }
                    }
                }
            }
            return null;
        }

        private RowLayout GetViewportResizingRowLayoutFromYForTouch(int rowViewportIndex, double y)
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            RowLayoutModel viewportRowLayoutModel = this.GetViewportRowLayoutModel(rowViewportIndex);
            for (int i = viewportRowLayoutModel.Count - 1; i >= 0; i--)
            {
                RowLayout layout = Enumerable.ElementAt<RowLayout>((IEnumerable<RowLayout>)viewportRowLayoutModel, i);
                if (((layout != null) && (y >= Math.Max(layout.Y, (layout.Y + layout.Height) - 8.0))) && ((y < ((layout.Y + layout.Height) + 8.0)) && worksheet.Rows[layout.Row].CanUserResize))
                {
                    return layout;
                }
            }
            if (((rowViewportIndex >= 0) && (rowViewportIndex < this.GetViewportInfo().RowViewportCount)) && (viewportRowLayoutModel.Count > 0))
            {
                RowLayout layout2 = viewportRowLayoutModel[0];
                if (((y >= Math.Max((double)0.0, (double)(layout2.Y - 8.0))) && (y < (layout2.Y + 8.0))) && ((rowViewportIndex - 1) >= -1))
                {
                    RowLayoutModel model2 = this.GetViewportRowLayoutModel(Math.Max(-1, rowViewportIndex - 1));
                    for (int j = layout2.Row - 1; j >= worksheet.FrozenRowCount; j--)
                    {
                        if (model2.Find(j) != null)
                        {
                            break;
                        }
                        if ((worksheet.GetActualRowHeight(j, SheetArea.Cells) == 0.0) && worksheet.Rows[j].CanUserResize)
                        {
                            return new RowLayout(j, layout2.Y, 0.0);
                        }
                    }
                }
            }
            return null;
        }

        /// <summary>
        /// Gets the column viewport's right column index.
        /// </summary>
        /// <param name="columnViewportIndex">The column viewport index.</param>
        /// <returns>The right column index in the column viewport.</returns>
        public int GetViewportRightColumn(int columnViewportIndex)
        {
            return this.GetViewportRightColumn(this.Worksheet, columnViewportIndex);
        }

        private int GetViewportRightColumn(Dt.Cells.Data.Worksheet sheet, int columnViewportIndex)
        {
            if (columnViewportIndex == this.GetViewportInfo(sheet).ColumnViewportCount)
            {
                return (sheet.ColumnCount - 1);
            }
            int viewportLeftColumn = sheet.GetViewportLeftColumn(columnViewportIndex);
            double viewportWidth = this.GetViewportWidth(sheet, columnViewportIndex);
            int num3 = 0;
            double num4 = 0.0;
            float zoomFactor = this.ZoomFactor;
            int column = viewportLeftColumn;
            while ((column < (sheet.ColumnCount - sheet.FrozenTrailingColumnCount)) && (num4 < viewportWidth))
            {
                num4 += Math.Ceiling((double)(sheet.GetActualColumnWidth(column, SheetArea.Cells) * zoomFactor));
                column++;
                num3++;
            }
            return ((viewportLeftColumn + num3) - 1);
        }

        private RowLayout GetViewportRowLayoutFromY(int rowViewportIndex, double y)
        {
            if (this.ResizeZeroIndicator != Dt.Cells.UI.ResizeZeroIndicator.Enhanced)
            {
                return this.GetViewportRowLayoutModel(rowViewportIndex).FindY(y);
            }
            RowLayoutModel rowHeaderViewportRowLayoutModel = this.GetRowHeaderViewportRowLayoutModel(rowViewportIndex);
            RowLayout layout = rowHeaderViewportRowLayoutModel.FindY(y);
            if ((this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch) && (layout != null))
            {
                if (this.Worksheet.GetActualRowHeight(layout.Row, SheetArea.Cells).IsZero())
                {
                    return layout;
                }
                if ((layout.Row <= 0) || !this.Worksheet.GetActualRowHeight(layout.Row - 1, SheetArea.Cells).IsZero())
                {
                    return layout;
                }
                RowLayout layout2 = rowHeaderViewportRowLayoutModel.FindRow(layout.Row - 1);
                if ((layout2 != null) && (((layout2.Y + layout2.Height) + 3.0) >= y))
                {
                    return layout2;
                }
            }
            return layout;
        }

        internal RowLayoutModel GetViewportRowLayoutModel(int rowViewportIndex)
        {
            if (this._cachedViewportRowLayoutModel == null)
            {
                int rowViewportCount = this.GetViewportInfo().RowViewportCount;
                this._cachedViewportRowLayoutModel = new RowLayoutModel[rowViewportCount + 2];
            }
            if (this._cachedViewportRowLayoutModel[rowViewportIndex + 1] == null)
            {
                this._cachedViewportRowLayoutModel[rowViewportIndex + 1] = this.CreateViewportRowLayoutModel(rowViewportIndex);
            }
            return this._cachedViewportRowLayoutModel[rowViewportIndex + 1];
        }

        internal RowLayout GetViewportRowLayoutNearY(int rowViewportIndex, double y)
        {
            SheetLayout sheetLayout = this.GetSheetLayout();
            RowLayout layout2 = null;
            int rowViewportCount = this.GetViewportInfo().RowViewportCount;
            if ((rowViewportIndex == -1) && (sheetLayout.GetViewportY(0) < y))
            {
                layout2 = this.GetViewportRowLayoutModel(0).FindNearY(y);
            }
            else if (((rowViewportIndex == 0) && (y < sheetLayout.GetViewportY(0))) && (this.GetViewportTopRow(0) == this.Worksheet.FrozenRowCount))
            {
                layout2 = this.GetViewportRowLayoutModel(-1).FindNearY(y);
            }
            else if (((rowViewportIndex == (rowViewportCount - 1)) && (y > sheetLayout.GetViewportY(rowViewportCount))) && (this.GetViewportBottomRow(rowViewportCount - 1) == ((this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount) - 1)))
            {
                layout2 = this.GetViewportRowLayoutModel(rowViewportCount).FindNearY(y);
            }
            else if ((rowViewportIndex == rowViewportCount) && (y < sheetLayout.GetViewportY(rowViewportCount)))
            {
                layout2 = this.GetViewportRowLayoutModel(rowViewportCount - 1).FindNearY(y);
            }
            if (layout2 == null)
            {
                layout2 = this.GetViewportRowLayoutModel(rowViewportIndex).FindNearY(y);
            }
            return layout2;
        }

        internal GcViewport GetViewportRowsPresenter(int rowViewportIndex, int columnViewportIndex)
        {
            if (this._viewportPresenters != null)
            {
                int length = this._viewportPresenters.GetLength(0);
                if ((rowViewportIndex >= -1) && (rowViewportIndex < (length - 1)))
                {
                    int num2 = this._viewportPresenters.GetLength(1);
                    if ((columnViewportIndex >= -1) && (columnViewportIndex < (num2 - 1)))
                    {
                        return this._viewportPresenters[rowViewportIndex + 1, columnViewportIndex + 1];
                    }
                }
            }
            return null;
        }

        private Windows.Foundation.Point GetViewportTopLeftCoordinates(int rowViewportIndex, int columnViewportIndex)
        {
            int viewportTopRow = this.GetViewportTopRow(rowViewportIndex);
            double y = 0.0;
            for (int i = 0; i < viewportTopRow; i++)
            {
                double num4 = Math.Ceiling((double)(this.Worksheet.GetActualRowHeight(i, SheetArea.Cells) * this.ZoomFactor));
                y += num4;
            }
            int viewportLeftColumn = this.GetViewportLeftColumn(columnViewportIndex);
            double x = 0.0;
            for (int j = 0; j < viewportLeftColumn; j++)
            {
                double num8 = Math.Ceiling((double)(this.Worksheet.GetActualColumnWidth(j, SheetArea.Cells) * this.ZoomFactor));
                x += num8;
            }
            return new Windows.Foundation.Point(x, y);
        }

        /// <summary>
        /// Gets the row viewport's top row index.
        /// </summary>
        /// <param name="rowViewportIndex">The row viewport index.</param>
        /// <returns>The top row index in the row viewport.</returns>
        public int GetViewportTopRow(int rowViewportIndex)
        {
            return this.GetViewportTopRow(this.Worksheet, rowViewportIndex);
        }

        private int GetViewportTopRow(Dt.Cells.Data.Worksheet sheet, int rowViewportIndex)
        {
            ViewportInfo viewportInfo = this.GetViewportInfo();
            if ((viewportInfo.RowViewportCount > 0) && (viewportInfo.ColumnViewportCount > 0))
            {
                if (rowViewportIndex == -1)
                {
                    return 0;
                }
                if ((rowViewportIndex >= 0) && (rowViewportIndex < viewportInfo.RowViewportCount))
                {
                    return viewportInfo.TopRows[rowViewportIndex];
                }
                if (rowViewportIndex == viewportInfo.RowViewportCount)
                {
                    return Math.Max(sheet.FrozenRowCount, sheet.RowCount - sheet.FrozenTrailingRowCount);
                }
            }
            return -1;
        }

        internal double GetViewportWidth(int columnViewportIndex)
        {
            return this.GetViewportWidth(this.Worksheet, columnViewportIndex);
        }

        private double GetViewportWidth(Dt.Cells.Data.Worksheet sheet, int columnViewportIndex)
        {
            return this.GetSheetLayout().GetViewportWidth(columnViewportIndex);
        }

        internal int GetVisibleColumnCount()
        {
            return this.GetVisibleColumnCount(this.Worksheet);
        }

        private int GetVisibleColumnCount(Dt.Cells.Data.Worksheet worksheet)
        {
            if (worksheet == null)
            {
                return -1;
            }
            int num = 0;
            for (int i = 0; i < worksheet.ColumnCount; i++)
            {
                if (worksheet.GetActualColumnVisible(i, SheetArea.Cells))
                {
                    num++;
                }
            }
            return num;
        }

        internal int GetVisibleRowCount()
        {
            return this.GetVisibleRowCount(this.Worksheet);
        }

        private int GetVisibleRowCount(Dt.Cells.Data.Worksheet worksheet)
        {
            if (worksheet == null)
            {
                return -1;
            }
            int num = 0;
            for (int i = 0; i < worksheet.RowCount; i++)
            {
                if (worksheet.GetActualRowVisible(i, SheetArea.Cells))
                {
                    num++;
                }
            }
            return num;
        }

        internal void HandleCellChanged(object sender, CellChangedEventArgs e)
        {
            if (sender == this.Worksheet)
            {
                switch (e.SheetArea)
                {
                    case SheetArea.CornerHeader:
                    case (SheetArea.Cells | SheetArea.RowHeader):
                        return;

                    case SheetArea.Cells:
                        if (e.PropertyName != "Formula")
                        {
                            if (e.PropertyName == "Axis")
                            {
                                this.InvalidateLayout();
                            }
                            this.InvalidateRange(e.Row, e.Column, e.RowCount, e.ColumnCount, e.SheetArea);
                            return;
                        }
                        this.InvalidateRange(-1, -1, -1, -1, SheetArea.Cells);
                        return;

                    case (SheetArea.CornerHeader | SheetArea.RowHeader):
                    case SheetArea.ColumnHeader:
                        if (e.PropertyName == "Axis")
                        {
                            this.InvalidateLayout();
                        }
                        this.InvalidateRange(e.Row, e.Column, e.RowCount, e.ColumnCount, e.SheetArea);
                        return;
                }
            }
        }

        internal void HandleChartChanged(object sender, ChartChangedBaseEventArgs e, bool autoRefresh)
        {
            if (this._viewportPresenters != null)
            {
                if (e.Property == "IsSelected")
                {
                    this.UpdateSelectState(e);
                }
                else if (autoRefresh)
                {
                    if (e.Chart == null)
                    {
                        this.InvalidateFloatingObjectLayout();
                    }
                    else if (((e.ChartArea == ChartArea.AxisX) || (e.ChartArea == ChartArea.AxisY)) || (e.ChartArea == ChartArea.AxisZ))
                    {
                        GcViewport[,] viewportArray = this._viewportPresenters;
                        int upperBound = viewportArray.GetUpperBound(0);
                        int num2 = viewportArray.GetUpperBound(1);
                        for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                        {
                            for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                            {
                                GcViewport viewport = viewportArray[i, j];
                                if (viewport != null)
                                {
                                    if (e.Chart == null)
                                    {
                                        viewport.RefreshFloatingObjects();
                                    }
                                    else
                                    {
                                        viewport.RefreshFloatingObject(e);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        bool displayHidden = false;
                        if (e.Chart is SpreadChart)
                        {
                            displayHidden = (e.Chart as SpreadChart).DisplayHidden;
                        }
                        if (((e.Property == "Location") || (e.Property == "Size")) || (((e.Property == "SheetRowChanged") || (e.Property == "SheetColumnChanged")) || (e.Property == "Name")))
                        {
                            GcViewport[,] viewportArray2 = this._viewportPresenters;
                            int num5 = viewportArray2.GetUpperBound(0);
                            int num6 = viewportArray2.GetUpperBound(1);
                            for (int k = viewportArray2.GetLowerBound(0); k <= num5; k++)
                            {
                                for (int m = viewportArray2.GetLowerBound(1); m <= num6; m++)
                                {
                                    if (viewportArray2[k, m] != null)
                                    {
                                        this.InvalidateFloatingObjectLayout();
                                    }
                                }
                            }
                        }
                        else if ((((e.Property == "RowFilter") || (e.Property == "RowRangeGroup")) || ((e.Property == "ColumnRangeGroup") || (e.Property == "TableFilter"))) || (((e.Property == "AxisX") || (e.Property == "AxisY")) || (e.Property == "AxisZ")))
                        {
                            GcViewport[,] viewportArray3 = this._viewportPresenters;
                            int num9 = viewportArray3.GetUpperBound(0);
                            int num10 = viewportArray3.GetUpperBound(1);
                            for (int n = viewportArray3.GetLowerBound(0); n <= num9; n++)
                            {
                                for (int num12 = viewportArray3.GetLowerBound(1); num12 <= num10; num12++)
                                {
                                    GcViewport viewport3 = viewportArray3[n, num12];
                                    if (viewport3 != null)
                                    {
                                        viewport3.InvalidateFloatingObjectMeasureState(e.Chart);
                                        if (e.Chart == null)
                                        {
                                            viewport3.InvalidateFloatingObjectsMeasureState();
                                            foreach (SpreadChart chart in Worksheet.Charts)
                                            {
                                                if (!displayHidden)
                                                {
                                                    viewport3.RefreshFloatingObject(e);
                                                }
                                            }
                                        }
                                        if ((e.Chart != null) && !displayHidden)
                                        {
                                            viewport3.RefreshFloatingObject(e);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            GcViewport[,] viewportArray4 = this._viewportPresenters;
                            int num13 = viewportArray4.GetUpperBound(0);
                            int num14 = viewportArray4.GetUpperBound(1);
                            for (int num15 = viewportArray4.GetLowerBound(0); num15 <= num13; num15++)
                            {
                                for (int num16 = viewportArray4.GetLowerBound(1); num16 <= num14; num16++)
                                {
                                    GcViewport viewport4 = viewportArray4[num15, num16];
                                    if (viewport4 != null)
                                    {
                                        viewport4.InvalidateFloatingObjectsMeasureState();
                                        if (e.Chart == null)
                                        {
                                            foreach (SpreadChart chart in Worksheet.Charts)
                                            {
                                                viewport4.RefreshFloatingObject(e);
                                            }
                                        }
                                        if (e.Chart != null)
                                        {
                                            viewport4.RefreshFloatingObject(e);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        internal void HandleFloatingObjectChanged(FloatingObject floatingObject, string property, bool autoRefresh)
        {
            if (this._viewportPresenters != null)
            {
                if (floatingObject == null)
                {
                    this.InvalidateFloatingObjectLayout();
                }
                else if (property == "IsSelected")
                {
                    GcViewport[,] viewportArray = this._viewportPresenters;
                    int upperBound = viewportArray.GetUpperBound(0);
                    int num2 = viewportArray.GetUpperBound(1);
                    for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                    {
                        for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                        {
                            GcViewport viewport = viewportArray[i, j];
                            if (viewport != null)
                            {
                                if (floatingObject == null)
                                {
                                    viewport.RefreshFloatingObjectContainerIsSelected();
                                }
                                else
                                {
                                    viewport.RefreshFloatingObjectContainerIsSelected(floatingObject);
                                }
                            }
                        }
                    }
                    ReadOnlyCollection<CellRange> selections = this.Worksheet.Selections;
                    if (selections.Count != 0)
                    {
                        foreach (CellRange range in selections)
                        {
                            this.UpdateHeaderCellsState(range.Row, range.RowCount, range.Column, range.ColumnCount);
                        }
                    }
                }
                else if (autoRefresh)
                {
                    if ((((property == "Location") || (property == "Size")) || ((property == "SheetRowChanged") || (property == "SheetColumnChanged"))) || ((((property == "AxisX") || (property == "AxisY")) || ((property == "RowFilter") || (property == "RowRangeGroup"))) || ((property == "ColumnRangeGroup") || (property == "Name"))))
                    {
                        GcViewport[,] viewportArray2 = this._viewportPresenters;
                        int num5 = viewportArray2.GetUpperBound(0);
                        int num6 = viewportArray2.GetUpperBound(1);
                        for (int k = viewportArray2.GetLowerBound(0); k <= num5; k++)
                        {
                            for (int m = viewportArray2.GetLowerBound(1); m <= num6; m++)
                            {
                                GcViewport viewport1 = viewportArray2[k, m];
                                this.InvalidateFloatingObjectLayout();
                            }
                        }
                    }
                    else
                    {
                        GcViewport[,] viewportArray3 = this._viewportPresenters;
                        int num9 = viewportArray3.GetUpperBound(0);
                        int num10 = viewportArray3.GetUpperBound(1);
                        for (int n = viewportArray3.GetLowerBound(0); n <= num9; n++)
                        {
                            for (int num12 = viewportArray3.GetLowerBound(1); num12 <= num10; num12++)
                            {
                                GcViewport viewport2 = viewportArray3[n, num12];
                                if (viewport2 != null)
                                {
                                    viewport2.InvalidateFloatingObjectMeasureState(floatingObject);
                                    viewport2.RefreshFloatingObject(new FloatingObjectChangedEventArgs(floatingObject, null));
                                }
                            }
                        }
                    }
                }
            }
        }

        internal void HandleFloatingObjectChanged(object sender, FloatingObjectChangedEventArgs e, bool autoRefresh)
        {
            this.HandleFloatingObjectChanged(e.FloatingObject, e.Property, autoRefresh);
        }

        internal void HandlePictureChanged(object sender, PictureChangedEventArgs e, bool autoRefresh)
        {
            this.HandleFloatingObjectChanged(e.Picture, e.Property, autoRefresh);
        }

        internal void HandleSheetColumnHeaderPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (sender == this.Worksheet.ColumnHeader)
            {
                switch (e.PropertyName)
                {
                    case "DefaultStyle":
                    case "AutoText":
                    case "AutoTextIndex":
                    case "IsVisible":
                    case "RowCount":
                        this.Invalidate();
                        return;

                    case "DefaultRowHeight":
                        this.InvalidateRows(0, this.Worksheet.ColumnHeader.RowCount, SheetArea.ColumnHeader);
                        return;
                }
            }
        }

        internal void HandleSheetPropertyChanged(object sender, PropertyChangedEventArgs e, bool autoRefresh)
        {
            Action action = null;
            if (this.Worksheet != null)
            {
                if (e.PropertyName == "Visible")
                {
                    Dt.Cells.Data.Worksheet sheet = sender as Dt.Cells.Data.Worksheet;
                    if (sheet != null)
                    {
                        this.HandleVisibleChanged(sheet);
                        if (autoRefresh)
                        {
                            this.Invalidate();
                        }
                    }
                }
                if ((e.PropertyName == "SheetTabColor") || (e.PropertyName == "SheetTabThemeColor"))
                {
                    this.UpdateTabStrip();
                }
                if (sender == this.Worksheet)
                {
                    switch (e.PropertyName)
                    {
                        case "ActiveCell":
                        case "ActiveColumnIndex":
                        case "ActiveRowIndex":
                            this.Navigation.UpdateStartPosition(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex);
                            this.UpdateHeaderCellsStateInSpanArea();
                            this.UpdateFocusIndicator();
                            this.UpdateHeaderCellsStateInSpanArea();
                            this.PrepareCellEditing();
                            this.UpdateDataValidationUI(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex);
                            return;

                        case "FrozenRowCount":
                            this.SetViewportTopRow(this.Worksheet.FrozenRowCount);
                            if (autoRefresh)
                            {
                                this.InvalidateRows(0, this.Worksheet.FrozenRowCount, SheetArea.Cells | SheetArea.RowHeader);
                            }
                            return;

                        case "FrozenColumnCount":
                            this.SetViewportLeftColumn(this.Worksheet.FrozenColumnCount);
                            if (autoRefresh)
                            {
                                this.InvalidateColumns(0, this.Worksheet.FrozenColumnCount, SheetArea.Cells | SheetArea.ColumnHeader);
                            }
                            return;

                        case "FrozenTrailingRowCount":
                            if (autoRefresh)
                            {
                                this.InvalidateRows(Math.Max(0, this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount), this.Worksheet.FrozenTrailingRowCount, SheetArea.Cells | SheetArea.RowHeader);
                            }
                            return;

                        case "FrozenTrailingColumnCount":
                            if (autoRefresh)
                            {
                                this.InvalidateRows(Math.Max(0, this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount), this.Worksheet.FrozenTrailingColumnCount, SheetArea.Cells | SheetArea.ColumnHeader);
                            }
                            return;

                        case "RowFilter":
                            if (this._cachedFilterButtonInfoModel != null)
                            {
                                this._cachedFilterButtonInfoModel.Clear();
                                this._cachedFilterButtonInfoModel = null;
                            }
                            if (autoRefresh)
                            {
                                this.InvalidateRange(-1, -1, -1, -1, SheetArea.Cells | SheetArea.ColumnHeader | SheetArea.RowHeader);
                            }
                            return;

                        case "ShowGridLine":
                        case "GridLineColor":
                        case "ZoomFactor":
                        case "DefaultColumnWidth":
                        case "DefaultRowHeight":
                        case "NamedStyles":
                        case "DefaultStyle":
                        case "[Sort]":
                        case "[MoveTo]":
                        case "[CopyTo]":
                        case "SelectionBorderColor":
                        case "SelectionBorderThemeColor":
                        case "SelectionBackground":
                            if (autoRefresh)
                            {
                                this.InvalidateRange(-1, -1, -1, -1, SheetArea.Cells | SheetArea.ColumnHeader | SheetArea.RowHeader);
                            }
                            return;

                        case "DataSource":
                            if (autoRefresh)
                            {
                                this.Invalidate();
                            }
                            return;

                        case "[ViewportInfo]":
                            return;

                        case "RowCount":
                        case "RowRangeGroup":
                            if (autoRefresh)
                            {
                                this.InvalidateRows(0, this.Worksheet.RowCount, SheetArea.Cells | SheetArea.RowHeader);
                            }
                            return;

                        case "ColumnCount":
                        case "ColumnRangeGroup":
                            if (autoRefresh)
                            {
                                this.InvalidateColumns(0, this.Worksheet.ColumnCount, SheetArea.Cells | SheetArea.ColumnHeader);
                            }
                            return;

                        case "StartingRowNumber":
                        case "RowHeaderColumnCount":
                            if (autoRefresh)
                            {
                                this.InvalidateColumns(0, this.Worksheet.RowHeader.ColumnCount, SheetArea.CornerHeader | SheetArea.RowHeader);
                            }
                            return;

                        case "StartingColumnNumber":
                        case "ColumnHeaderRowCount":
                            if (autoRefresh)
                            {
                                this.InvalidateRows(0, this.Worksheet.ColumnHeader.RowCount, SheetArea.ColumnHeader);
                            }
                            return;

                        case "RowHeaderDefaultStyle":
                            if (autoRefresh)
                            {
                                this.InvalidateRange(-1, -1, -1, -1, SheetArea.CornerHeader | SheetArea.RowHeader);
                            }
                            return;

                        case "ColumnHeaderDefaultStyle":
                            if (autoRefresh)
                            {
                                this.InvalidateRange(-1, -1, -1, -1, SheetArea.ColumnHeader);
                            }
                            return;

                        case "ReferenceStyle":
                        case "Names":
                            if (autoRefresh)
                            {
                                this.InvalidateRange(-1, -1, -1, -1, SheetArea.Cells);
                            }
                            return;

                        case "[ImportFile]":
                            if (autoRefresh)
                            {
                                this.InvalidateRange(-1, -1, -1, -1, SheetArea.Cells | SheetArea.ColumnHeader | SheetArea.RowHeader);
                            }
                            if (this._host is Excel)
                            {
                                if (action == null)
                                {
                                    action = delegate
                                    {
                                        (this._host as Excel).HideProgressRingOnOpenCSVCompleted();
                                    };
                                }
                                Dt.Cells.Data.UIAdaptor.InvokeSync(action);
                            }
                            return;

                        case "[OpenXml]":
                            this.InvalidateRange(-1, -1, -1, -1, SheetArea.Cells | SheetArea.ColumnHeader | SheetArea.RowHeader);
                            return;

                        case "Charts":
                        case "SurfaceCharts":
                        case "FloatingObjects":
                        case "Pictures":
                            if (autoRefresh)
                            {
                                this.InvalidateFloatingObjectLayout();
                            }
                            return;
                    }
                }
            }
        }

        internal void HandleSheetRowHeaderPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            if (sender == this.Worksheet.RowHeader)
            {
                switch (e.PropertyName)
                {
                    case "DefaultStyle":
                    case "AutoText":
                    case "AutoTextIndex":
                    case "IsVisible":
                    case "ColumnCount":
                        this.Invalidate();
                        return;

                    case "DefaultColumnWidth":
                        this.InvalidateColumns(0, this.Worksheet.RowHeader.ColumnCount, SheetArea.CornerHeader | SheetArea.RowHeader);
                        return;
                }
            }
        }

        internal void HandleSheetSelectionChanged(object sender, SheetSelectionChangedEventArgs e)
        {
            this.RefreshSelection();
            this.UpdateHeaderCellsState(e.Row, e.RowCount, e.Column, e.ColumnCount);
            this.Navigation.UpdateStartPosition(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex);
        }

        private void HandleVisibleChanged(Dt.Cells.Data.Worksheet sheet)
        {
            if ((sheet != null) && (sheet.Workbook != null))
            {
                if (sheet.Visible)
                {
                    if (sheet.Workbook.ActiveSheetIndex < 0)
                    {
                        sheet.Workbook.ActiveSheet = sheet;
                    }
                }
                else if (sheet.Workbook.Sheets != null)
                {
                    int index = sheet.Workbook.Sheets.IndexOf(sheet);
                    if ((index != -1) && (index == sheet.Workbook.ActiveSheetIndex))
                    {
                        int count = sheet.Workbook.Sheets.Count;
                        int num3 = index + 1;
                        while ((num3 < count) && !sheet.Workbook.Sheets[num3].Visible)
                        {
                            num3++;
                        }
                        if (num3 >= count)
                        {
                            num3 = index - 1;
                            while ((num3 >= 0) && !sheet.Workbook.Sheets[num3].Visible)
                            {
                                num3--;
                            }
                        }
                        sheet.Workbook.ActiveSheetIndex = num3;
                    }
                }
            }
        }

        internal void HandleWorkbookPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            switch (e.PropertyName)
            {
                case "Sheets":
                case "ActiveSheetIndex":
                case "ActiveSheet":
                    this.Invalidate();
                    return;

                case "StartSheetIndex":
                    this.ProcessStartSheetIndexChanged();
                    return;

                case "CurrentThemeName":
                case "CurrentTheme":
                    this.InvalidateRange(-1, -1, -1, -1, SheetArea.Cells | SheetArea.ColumnHeader | SheetArea.RowHeader);
                    this.InvalidateFloatingObjects();
                    return;

                case "HorizontalScrollBarVisibility":
                case "VerticalScrollBarVisibility":
                case "ReferenceStyle":
                case "Names":
                case "CanCellOverflow":
                case "AutoRefresh":
                case "[OpenXml]":
                    this.InvalidateRange(-1, -1, -1, -1, SheetArea.Cells | SheetArea.ColumnHeader | SheetArea.RowHeader);
                    return;

                case "[OpenExcel]":
                case "[DataCalculated]":
                    if (this._host is Excel)
                    {
                        (this._host as Excel).HideOpeningStatusOnOpenExcelCompleted();
                    }
                    this.InvalidateLayout();
                    base.InvalidateMeasure();
                    base.InvalidateArrange();
                    this.Invalidate();
                    return;
            }
        }

        internal static bool HasArrayFormulas(Dt.Cells.Data.Worksheet sheet, int row, int column, int rowCount, int columnCount)
        {
            object[,] objArray = GetsArrayFormulas(sheet, row, column, rowCount, columnCount);
            return ((objArray != null) && (objArray.Length > 0));
        }

        private static bool HasPartArrayFormulas(Dt.Cells.Data.Worksheet sheet, int row, int column, int rowCount, int columnCount, CellRange exceptedRange)
        {
            object[,] objArray = GetsArrayFormulas(sheet, row, column, rowCount, columnCount);
            if ((objArray != null) && (objArray.Length > 0))
            {
                int length = objArray.GetLength(0);
                for (int i = 0; i < length; i++)
                {
                    CellRange range = (CellRange)objArray[i, 0];
                    if ((exceptedRange == null) || !exceptedRange.Equals(range))
                    {
                        if ((row != -1) && ((range.Row < row) || ((range.Row + range.RowCount) > (row + rowCount))))
                        {
                            return true;
                        }
                        if ((column != -1) && ((range.Column < column) || ((range.Column + range.ColumnCount) > (column + columnCount))))
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private static bool HasPartSpans(Dt.Cells.Data.Worksheet sheet, int row, int column, int rowCount, int columnCount)
        {
            if ((row >= 0) || (column >= 0))
            {
                if (row < 0)
                {
                    SheetSpanModel columnHeaderSpanModel = sheet.ColumnHeaderSpanModel;
                    if ((columnHeaderSpanModel != null) && !columnHeaderSpanModel.IsEmpty())
                    {
                        IEnumerator enumerator = columnHeaderSpanModel.GetEnumerator(-1, column, -1, columnCount);
                        CellRange current = null;
                        while (enumerator.MoveNext())
                        {
                            current = (CellRange)enumerator.Current;
                            if ((current.Column < column) || ((current.Column + current.ColumnCount) > (column + columnCount)))
                            {
                                return true;
                            }
                        }
                    }
                }
                else if (column < 0)
                {
                    SheetSpanModel rowHeaderSpanModel = sheet.RowHeaderSpanModel;
                    if ((rowHeaderSpanModel != null) && !rowHeaderSpanModel.IsEmpty())
                    {
                        IEnumerator enumerator2 = rowHeaderSpanModel.GetEnumerator(row, -1, rowCount, -1);
                        CellRange range2 = null;
                        while (enumerator2.MoveNext())
                        {
                            range2 = (CellRange)enumerator2.Current;
                            if ((range2.Row < row) || ((range2.Row + range2.RowCount) > (row + rowCount)))
                            {
                                return true;
                            }
                        }
                    }
                }
                SheetSpanModel spanModel = sheet.SpanModel;
                if ((spanModel != null) && !spanModel.IsEmpty())
                {
                    IEnumerator enumerator3 = spanModel.GetEnumerator(row, column, rowCount, columnCount);
                    CellRange range3 = null;
                    while (enumerator3.MoveNext())
                    {
                        range3 = (CellRange)enumerator3.Current;
                        if ((row != -1) && ((range3.Row < row) || ((range3.Row + range3.RowCount) > (row + rowCount))))
                        {
                            return true;
                        }
                        if ((column != -1) && ((range3.Column < column) || ((range3.Column + range3.ColumnCount) > (column + columnCount))))
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        internal bool HasSelectedFloatingObject()
        {
            foreach (IFloatingObject obj2 in this.GetAllFloatingObjects())
            {
                if (obj2.IsSelected)
                {
                    return true;
                }
            }
            return false;
        }

        private bool HasSpans(int row, int column, int rowCount, int columnCount)
        {
            IEnumerable spanModel = this.Worksheet.SpanModel;
            if (spanModel != null)
            {
                foreach (CellRange range in spanModel)
                {
                    if (range.Intersects(row, column, rowCount, columnCount))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        internal static bool HasTable(Dt.Cells.Data.Worksheet sheet, int row, int column, int rowCount, int columnCount, bool isInsert)
        {
            int num = (row < 0) ? 0 : row;
            int num2 = (column < 0) ? 0 : column;
            foreach (SheetTable table in sheet.GetTables())
            {
                if (table.Range.Intersects(row, column, rowCount, columnCount))
                {
                    if (!isInsert)
                    {
                        return true;
                    }
                    if ((num > table.Range.Row) || (num2 > table.Range.Column))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        internal void HideCursor()
        {
#if UWP
            Window.Current.CoreWindow.PointerCursor = null;
#endif
        }

        internal void HideFormulaSelectionTouchGrippers()
        {
            if (this._formulaSelectionGripperPanel != null)
            {
                this._formulaSelectionGripperPanel.Visibility = Visibility.Collapsed;
            }
        }

        private void HideMouseCursor()
        {
            if (this._mouseCursor != null)
            {
                this._mouseCursor.Opacity = 0.0;
            }
        }

        internal virtual HitTestInformation HitTest(double x, double y)
        {
            Windows.Foundation.Point hitPoint = new Windows.Foundation.Point(x, y);
            HitTestInformation hi = new HitTestInformation
            {
                HitTestType = HitTestType.Empty,
                ColumnViewportIndex = -2,
                RowViewportIndex = -2,
                HitPoint = hitPoint
            };
            ViewportInfo viewportInfo = this.GetViewportInfo();
            int columnViewportCount = viewportInfo.ColumnViewportCount;
            int rowViewportCount = viewportInfo.RowViewportCount;
            if (this.IsCornerRangeGroupHitTest(hitPoint))
            {
                hi.HitTestType = HitTestType.CornerRangeGroup;
                return hi;
            }
            if (this.IsRowRangeGroupHitTest(hitPoint))
            {
                hi.HitTestType = HitTestType.RowRangeGroup;
                return hi;
            }
            if (this.IsColumnRangeGroupHitTest(hitPoint))
            {
                hi.HitTestType = HitTestType.ColumnRangeGroup;
                return hi;
            }
            if (this.GetCornerRectangle().Contains(hitPoint))
            {
                HeaderHitTestInformation information2 = new HeaderHitTestInformation
                {
                    Column = -1,
                    Row = -1,
                    ResizingColumn = -1,
                    ResizingRow = -1
                };
                hi.HitTestType = HitTestType.Corner;
                hi.HeaderInfo = information2;
                ColumnLayout rowHeaderColumnLayoutFromX = this.GetRowHeaderColumnLayoutFromX(hitPoint.X);
                RowLayout columnHeaderRowLayoutFromY = this.GetColumnHeaderRowLayoutFromY(hitPoint.Y);
                ColumnLayout rowHeaderResizingColumnLayoutFromX = this.GetRowHeaderResizingColumnLayoutFromX(hitPoint.X);
                RowLayout columnHeaderResizingRowLayoutFromY = this.GetColumnHeaderResizingRowLayoutFromY(hitPoint.Y);
                if (rowHeaderColumnLayoutFromX != null)
                {
                    information2.Column = rowHeaderColumnLayoutFromX.Column;
                }
                if (columnHeaderRowLayoutFromY != null)
                {
                    information2.Row = columnHeaderRowLayoutFromY.Row;
                }
                if (rowHeaderResizingColumnLayoutFromX != null)
                {
                    information2.InColumnResize = true;
                    information2.ResizingColumn = rowHeaderResizingColumnLayoutFromX.Column;
                }
                if (columnHeaderResizingRowLayoutFromY != null)
                {
                    information2.InRowResize = true;
                    information2.ResizingRow = columnHeaderResizingRowLayoutFromY.Row;
                }
                return hi;
            }
            for (int i = -1; i <= rowViewportCount; i++)
            {
                if (this.GetRowHeaderRectangle(i).Contains(hitPoint))
                {
                    HeaderHitTestInformation information4 = new HeaderHitTestInformation
                    {
                        Row = -1,
                        Column = -1,
                        ResizingColumn = -1,
                        ResizingRow = -1
                    };
                    hi.HitTestType = HitTestType.RowHeader;
                    hi.RowViewportIndex = i;
                    hi.HeaderInfo = information4;
                    if (((this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch) && this.ResizerGripperRect.HasValue) && this.ResizerGripperRect.Value.Contains(hitPoint))
                    {
                        hi.HeaderInfo.InRowResize = true;
                        hi.HeaderInfo.ResizingRow = this.GetActiveCell().Row;
                        return hi;
                    }
                    ColumnLayout layout5 = this.GetRowHeaderColumnLayoutFromX(hitPoint.X);
                    RowLayout viewportRowLayoutFromY = this.GetViewportRowLayoutFromY(i, hitPoint.Y);
                    RowLayout viewportResizingRowLayoutFromY = this.GetViewportResizingRowLayoutFromY(i, hitPoint.Y);
                    if ((viewportResizingRowLayoutFromY == null) && (hi.RowViewportIndex == 0))
                    {
                        viewportResizingRowLayoutFromY = this.GetViewportResizingRowLayoutFromY(-1, hi.HitPoint.Y);
                    }
                    if ((viewportResizingRowLayoutFromY == null) && ((hi.RowViewportIndex == 0) || (hi.RowViewportIndex == -1)))
                    {
                        viewportResizingRowLayoutFromY = this.GetColumnHeaderResizingRowLayoutFromY(hi.HitPoint.Y);
                        if (viewportResizingRowLayoutFromY != null)
                        {
                            hi.HitTestType = HitTestType.Corner;
                        }
                    }
                    if (layout5 != null)
                    {
                        information4.Column = layout5.Column;
                    }
                    if (viewportRowLayoutFromY != null)
                    {
                        information4.Row = viewportRowLayoutFromY.Row;
                    }
                    if ((viewportResizingRowLayoutFromY != null) && (((viewportResizingRowLayoutFromY.Height > 0.0) || (viewportResizingRowLayoutFromY.Row >= this.Worksheet.RowCount)) || !this.Worksheet.RowRangeGroup.IsCollapsed(viewportResizingRowLayoutFromY.Row)))
                    {
                        information4.InRowResize = true;
                        information4.ResizingRow = viewportResizingRowLayoutFromY.Row;
                    }
                    return hi;
                }
            }
            for (int j = -1; j <= columnViewportCount; j++)
            {
                if (this.GetColumnHeaderRectangle(j).Contains(hitPoint))
                {
                    HeaderHitTestInformation information6 = new HeaderHitTestInformation
                    {
                        Row = -1,
                        Column = -1,
                        ResizingRow = -1,
                        ResizingColumn = -1
                    };
                    hi.HitTestType = HitTestType.ColumnHeader;
                    hi.HeaderInfo = information6;
                    hi.ColumnViewportIndex = j;
                    if (((this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch) && this.ResizerGripperRect.HasValue) && this.ResizerGripperRect.Value.Contains(hitPoint))
                    {
                        hi.HeaderInfo.InColumnResize = true;
                        hi.HeaderInfo.ResizingColumn = this.GetActiveCell().Column;
                        return hi;
                    }
                    ColumnLayout viewportColumnLayoutFromX = this.GetViewportColumnLayoutFromX(j, hitPoint.X);
                    RowLayout layout9 = this.GetColumnHeaderRowLayoutFromY(hitPoint.Y);
                    ColumnLayout viewportResizingColumnLayoutFromX = this.GetViewportResizingColumnLayoutFromX(j, hitPoint.X);
                    if (viewportResizingColumnLayoutFromX == null)
                    {
                        if (hi.ColumnViewportIndex == 0)
                        {
                            viewportResizingColumnLayoutFromX = this.GetViewportResizingColumnLayoutFromX(-1, hitPoint.X);
                        }
                        if ((viewportResizingColumnLayoutFromX == null) && ((hi.ColumnViewportIndex == 0) || (hi.ColumnViewportIndex == -1)))
                        {
                            viewportResizingColumnLayoutFromX = this.GetRowHeaderResizingColumnLayoutFromX(hitPoint.X);
                            if (viewportResizingColumnLayoutFromX != null)
                            {
                                hi.HitTestType = HitTestType.Corner;
                            }
                        }
                    }
                    if (viewportColumnLayoutFromX != null)
                    {
                        hi.HeaderInfo.Column = viewportColumnLayoutFromX.Column;
                    }
                    if (layout9 != null)
                    {
                        hi.HeaderInfo.Row = layout9.Row;
                    }
                    if ((viewportResizingColumnLayoutFromX != null) && (((viewportResizingColumnLayoutFromX.Width > 0.0) || (viewportResizingColumnLayoutFromX.Column >= this.Worksheet.ColumnCount)) || !this.Worksheet.ColumnRangeGroup.IsCollapsed(viewportResizingColumnLayoutFromX.Column)))
                    {
                        hi.HeaderInfo.InColumnResize = true;
                        hi.HeaderInfo.ResizingColumn = viewportResizingColumnLayoutFromX.Column;
                    }
                    return hi;
                }
            }
            for (int k = -1; k <= rowViewportCount; k++)
            {
                for (int m = -1; m <= columnViewportCount; m++)
                {
                    if (this.GetViewportRectangle(k, m).Contains(hitPoint))
                    {
                        hi.ColumnViewportIndex = m;
                        hi.RowViewportIndex = k;
                        ViewportHitTestInformation information8 = new ViewportHitTestInformation
                        {
                            Column = -1,
                            Row = -1
                        };
                        hi.HitTestType = HitTestType.Viewport;
                        hi.ViewportInfo = information8;
                        ColumnLayout layout11 = this.GetViewportColumnLayoutFromX(m, hitPoint.X);
                        RowLayout layout12 = this.GetViewportRowLayoutFromY(k, hitPoint.Y);
                        if (layout11 != null)
                        {
                            hi.ViewportInfo.Column = layout11.Column;
                        }
                        if (layout12 != null)
                        {
                            hi.ViewportInfo.Row = layout12.Row;
                        }
                        if (!this._formulaSelectionFeature.HitTest(k, m, hitPoint.X, hitPoint.Y, hi) && (this.IsInSelectionGripper(new Windows.Foundation.Point(x, y)) || !this.HitTestFloatingObject(k, m, hitPoint.X, hitPoint.Y, hi)))
                        {
                            GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(k, m);
                            if ((layout11 != null) && (layout12 != null))
                            {
                                if (this.IsMouseInDragFillIndicator(hitPoint.X, hitPoint.Y, k, m, false))
                                {
                                    hi.ViewportInfo.InDragFillIndicator = true;
                                }
                                else if (this.IsMouseInDragDropLocation(hitPoint.X, hitPoint.Y, k, m, false))
                                {
                                    hi.ViewportInfo.InSelectionDrag = true;
                                }
                            }
                            if (((this.IsEditing && !hi.ViewportInfo.InSelectionDrag) && (!hi.ViewportInfo.InDragFillIndicator && (viewportRowsPresenter != null))) && viewportRowsPresenter.EditorBounds.Contains(new Windows.Foundation.Point(x - viewportRowsPresenter.Location.X, y - viewportRowsPresenter.Location.Y)))
                            {
                                hi.ViewportInfo.InEditor = true;
                            }
                            return hi;
                        }
                    }
                }
            }
            return hi;
        }

        private bool HitTestFloatingObject(int rowViewportIndex, int columnViewportIndex, double mouseX, double mouseY, HitTestInformation hi)
        {
            FloatingObjectLayoutModel viewportFloatingObjectLayoutModel = this.GetViewportFloatingObjectLayoutModel(rowViewportIndex, columnViewportIndex);
            if ((viewportFloatingObjectLayoutModel != null) && (viewportFloatingObjectLayoutModel.Count != 0))
            {
                FloatingObject[] allFloatingObjects = this.GetAllFloatingObjects();
                foreach (FloatingObject obj2 in this.SortFloatingObjectByZIndex(allFloatingObjects))
                {
                    FloatingObjectLayout layout = viewportFloatingObjectLayoutModel.Find(obj2.Name);
                    if ((layout != null) && obj2.Visible)
                    {
                        bool isSelected = obj2.IsSelected;
                        double x = layout.X;
                        double y = layout.Y;
                        double width = layout.Width;
                        double height = layout.Height;
                        if (isSelected)
                        {
                            double num5 = 7.0;
                            x -= num5;
                            y -= num5;
                            width += 2.0 * num5;
                            height += 2.0 * num5;
                        }
                        Windows.Foundation.Rect rect = new Windows.Foundation.Rect(x, y, width, height);
                        if (rect.Contains(new Windows.Foundation.Point(mouseX, mouseY)))
                        {
                            ViewportFloatingObjectHitTestInformation information = new ViewportFloatingObjectHitTestInformation();
                            hi.HitTestType = HitTestType.FloatingObject;
                            hi.FloatingObjectInfo = information;
                            information.FloatingObject = obj2;
                            if (!isSelected)
                            {
                                information.InMoving = true;
                                return true;
                            }
                            double num6 = 7.0;
                            double size = 10.0;
                            Windows.Foundation.Rect rect2 = new Windows.Foundation.Rect(x, y, num6, num6);
                            if (this.InflateRect(rect2, size).Contains(new Windows.Foundation.Point(mouseX, mouseY)))
                            {
                                information.InTopNWSEResize = true;
                                return true;
                            }
                            Windows.Foundation.Rect rect3 = new Windows.Foundation.Rect((x + (width / 2.0)) - num6, y, 2.0 * num6, num6);
                            if (this.InflateRect(rect3, size).Contains(new Windows.Foundation.Point(mouseX, mouseY)))
                            {
                                information.InTopNSResize = true;
                                return true;
                            }
                            Windows.Foundation.Rect rect4 = new Windows.Foundation.Rect((x + width) - num6, y, num6, num6);
                            if (this.InflateRect(rect4, size).Contains(new Windows.Foundation.Point(mouseX, mouseY)))
                            {
                                information.InTopNESWResize = true;
                                return true;
                            }
                            Windows.Foundation.Rect rect5 = new Windows.Foundation.Rect(x, (y + (height / 2.0)) - num6, num6, 2.0 * num6);
                            if (this.InflateRect(rect5, size).Contains(new Windows.Foundation.Point(mouseX, mouseY)))
                            {
                                information.InLeftWEResize = true;
                                return true;
                            }
                            Windows.Foundation.Rect rect6 = new Windows.Foundation.Rect((x + width) - num6, (y + (height / 2.0)) - num6, num6, 2.0 * num6);
                            if (this.InflateRect(rect6, size).Contains(new Windows.Foundation.Point(mouseX, mouseY)))
                            {
                                information.InRightWEResize = true;
                                return true;
                            }
                            Windows.Foundation.Rect rect7 = new Windows.Foundation.Rect(x, (y + height) - num6, num6, num6);
                            if (this.InflateRect(rect7, size).Contains(new Windows.Foundation.Point(mouseX, mouseY)))
                            {
                                information.InBottomNESWResize = true;
                                return true;
                            }
                            Windows.Foundation.Rect rect8 = new Windows.Foundation.Rect((x + (width / 2.0)) - num6, (y + height) - num6, 2.0 * num6, num6);
                            if (this.InflateRect(rect8, size).Contains(new Windows.Foundation.Point(mouseX, mouseY)))
                            {
                                information.InBottomNSResize = true;
                                return true;
                            }
                            Windows.Foundation.Rect rect9 = new Windows.Foundation.Rect((x + width) - num6, (y + height) - num6, num6, num6);
                            if (this.InflateRect(rect9, size).Contains(new Windows.Foundation.Point(mouseX, mouseY)))
                            {
                                information.InBottomNWSEResize = true;
                                return true;
                            }
                            information.InMoving = true;
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private bool HitTestPopup(PopupHelper popUpHelper, Windows.Foundation.Point point)
        {
            if (popUpHelper == null)
            {
                return false;
            }
            Windows.Foundation.Rect rect = new Windows.Foundation.Rect(popUpHelper.Location.X, popUpHelper.Location.Y, popUpHelper.Size.Width, popUpHelper.Size.Height);
            return rect.Expand(10, 5).Contains(point);
        }

        private string IndexToLetter(int index)
        {
            StringBuilder builder = new StringBuilder();
            while (index > 0)
            {
                builder.Append((char)(0x41 + ((index - 1) % 0x1a)));
                index = (index - 1) / 0x1a;
            }
            for (int i = 0; i < (builder.Length / 2); i++)
            {
                char ch = builder[i];
                builder[i] = builder[(builder.Length - i) - 1];
                builder[(builder.Length - i) - 1] = ch;
            }
            return builder.ToString();
        }

        private Windows.Foundation.Rect InflateRect(Windows.Foundation.Rect rect, double size)
        {
            double x = rect.X - size;
            double y = rect.Y - size;
            double width = rect.Width + (2.0 * size);
            double height = rect.Height + (2.0 * size);
            if (width < 0.0)
            {
                width = 0.0;
            }
            if (height < 0.0)
            {
                height = 0.0;
            }
            return new Windows.Foundation.Rect(x, y, width, height);
        }

        private void Init()
        {
            this._allowUserFormula = true;
            this._allowUndo = true;
            this._freezeLineStyle = null;
            this._trailingFreezeLineStyle = null;
            this._showFreezeLine = true;
            this._allowUserZoom = true;
            this._autoClipboard = true;
            this._clipBoardOptions = ClipboardPasteOptions.All;
            this._allowEditOverflow = true;
            this._protect = false;
            this._vScrollable = true;
            this._hScrollable = true;
            this._sheet = null;
            this._cachedColumnHeaderRowLayoutModel = null;
            this._cachedViewportRowLayoutModel = null;
            this._cachedRowHeaderColumnLayoutModel = null;
            this._cachedViewportColumnLayoutModel = null;
            this._cachedColumnHeaderViewportColumnLayoutModel = null;
            this._cachedRowHeaderViewportRowLayoutModel = null;
            this._cachedRowHeaderCellLayoutModel = null;
            this._cachedColumnHeaderCellLayoutModel = null;
            this._cachedViewportCellLayoutModel = null;
            this._cachedGroupLayout = null;
            this._cachedFloatingObjectLayoutModel = null;
            this._cornerPresenter = null;
            this._rowHeaderPresenters = null;
            this._columnHeaderPresenters = null;
            this._viewportPresenters = null;
            this._groupCornerPresenter = null;
            this._rowGroupHeaderPresenter = null;
            this._columnGroupHeaderPresenter = null;
            this._rowGroupPresenters = null;
            this._columnGroupPresenters = null;
            this._showColumnRangeGroup = true;
            this._showRowRangeGroup = true;
            this._shapeDrawingContainer = null;
            this._trackersContainer = null;
            this._columnFreezeLine = null;
            this._rowFreezeLine = null;
            this._columnTrailingFreezeLine = null;
            this._rowTrailingFreezeLine = null;
            this._resizingTracker = null;
            this._currentActiveColumnIndex = 0;
            this._currentActiveRowIndex = 0;
            this._verticalSelectionMgr = null;
            this._horizontalSelectionMgr = null;
            this._keyMap = null;
            this._floatingObjectsKeyMap = null;
            this._availableSize = new Windows.Foundation.Size(double.PositiveInfinity, double.PositiveInfinity);
            this._isEditing = false;
            this._isDoubleClick = false;
            this._positionInfo = null;
            this._navigation = null;
            this._undoManager = null;
            this._eventSuspended = 0;
            this._lastClickPoint = new Windows.Foundation.Point();
            this._lastClickLocation = new Windows.Foundation.Point(-1.0, -1.0);
            this._hoverManager = new Dt.Cells.UI.HoverManager(this);
            this._allowDragDrop = true;
            this._dragDropIndicator = null;
            this._dragDropInsertIndicator = null;
            this._dragDropFromRange = null;
            this._dragDropColumnOffset = 0;
            this._dragDropRowOffset = 0;
            this._isDragInsert = false;
            this._isDragCopy = false;
            this._dragStartRowViewport = -2;
            this._dragStartColumnViewport = -2;
            this._dragToColumnViewport = -2;
            this._dragToRowViewport = -2;
            this._dragToColumn = -2;
            this._dragToRow = -2;
            this._allowDragFill = true;
            this._highlightDataValidationInvalidData = false;
            this._mouseCursor = null;
            this._tooltipHelper = null;
            this._filterPopupHelper = null;
            this._dataValidationPopUpHelper = null;
            this._inputDeviceType = Dt.Cells.UI.InputDeviceType.Mouse;
            this._canTouchMultiSelect = false;
            this._resizeZeroIndicator = Dt.Cells.UI.ResizeZeroIndicator.Default;
            this._cachedResizerGipper = new Dictionary<string, BitmapImage>();
            this._cachedToolbarImageSources = new Dictionary<string, ImageSource>();
        }

        private void InitDefaultKeyMap()
        {
            if (this._keyMap == null)
            {
                this._keyMap = new Dictionary<KeyStroke, SpreadAction>();
                this._keyMap.Add(new KeyStroke(VirtualKey.Z, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.Undo));
                this._keyMap.Add(new KeyStroke(VirtualKey.Y, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.Redo));
                this._keyMap.Add(new KeyStroke(VirtualKey.Down, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.NavigationBottom));
                this._keyMap.Add(new KeyStroke(VirtualKey.Down, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.NavigationDown));
                this._keyMap.Add(new KeyStroke(VirtualKey.End, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.NavigationEnd));
                this._keyMap.Add(new KeyStroke(VirtualKey.Right, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.NavigationEnd));
                this._keyMap.Add(new KeyStroke(VirtualKey.Home, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.NavigationFirst));
                this._keyMap.Add(new KeyStroke(VirtualKey.Home, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.NavigationHome));
                this._keyMap.Add(new KeyStroke(VirtualKey.Left, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.NavigationHome));
                this._keyMap.Add(new KeyStroke(VirtualKey.End, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.NavigationLast));
                this._keyMap.Add(new KeyStroke(VirtualKey.Left, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.NavigationLeft));
                this._keyMap.Add(new KeyStroke(VirtualKey.Tab, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.CommitInputNavigationTabNext));
                this._keyMap.Add(new KeyStroke(VirtualKey.PageDown, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.NavigationPageDown));
                this._keyMap.Add(new KeyStroke(VirtualKey.PageUp, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.NavigationPreviousSheet));
                this._keyMap.Add(new KeyStroke(VirtualKey.PageDown, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.NavigationNextSheet));
                this._keyMap.Add(new KeyStroke(VirtualKey.PageUp, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.NavigationPageUp));
                this._keyMap.Add(new KeyStroke(VirtualKey.Tab, VirtualKeyModifiers.None | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.CommitInputNavigationTabPrevious));
                this._keyMap.Add(new KeyStroke(VirtualKey.Right, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.NavigationRight));
                this._keyMap.Add(new KeyStroke(VirtualKey.Up, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.NavigationTop));
                this._keyMap.Add(new KeyStroke(VirtualKey.Up, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.NavigationUp));
                this._keyMap.Add(new KeyStroke(VirtualKey.Delete, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.Clear));
                this._keyMap.Add(new KeyStroke(VirtualKey.Back, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.ClearAndEditing));
                this._keyMap.Add(new KeyStroke(VirtualKey.Enter, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.CommitInputNavigationDown));
                this._keyMap.Add(new KeyStroke(VirtualKey.Enter, VirtualKeyModifiers.None | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.CommitInputNavigationUp));
                this._keyMap.Add(new KeyStroke(VirtualKey.Escape, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.CancelInput));
                this._keyMap.Add(new KeyStroke(VirtualKey.Left, VirtualKeyModifiers.None | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionLeft));
                this._keyMap.Add(new KeyStroke(VirtualKey.Right, VirtualKeyModifiers.None | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionRight));
                this._keyMap.Add(new KeyStroke(VirtualKey.Up, VirtualKeyModifiers.None | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionUp));
                this._keyMap.Add(new KeyStroke(VirtualKey.Down, VirtualKeyModifiers.None | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionDown));
                this._keyMap.Add(new KeyStroke(VirtualKey.Home, VirtualKeyModifiers.None | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionHome));
                this._keyMap.Add(new KeyStroke(VirtualKey.Left, VirtualKeyModifiers.Control | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionHome));
                this._keyMap.Add(new KeyStroke(VirtualKey.End, VirtualKeyModifiers.None | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionEnd));
                this._keyMap.Add(new KeyStroke(VirtualKey.Right, VirtualKeyModifiers.Control | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionEnd));
                this._keyMap.Add(new KeyStroke(VirtualKey.PageUp, VirtualKeyModifiers.None | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionPageUp));
                this._keyMap.Add(new KeyStroke(VirtualKey.PageDown, VirtualKeyModifiers.None | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionPageDown));
                this._keyMap.Add(new KeyStroke(VirtualKey.Up, VirtualKeyModifiers.Control | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionTop));
                this._keyMap.Add(new KeyStroke(VirtualKey.Down, VirtualKeyModifiers.Control | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionBottom));
                this._keyMap.Add(new KeyStroke(VirtualKey.Home, VirtualKeyModifiers.Control | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionFirst));
                this._keyMap.Add(new KeyStroke(VirtualKey.End, VirtualKeyModifiers.Control | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.SelectionLast));
                this._keyMap.Add(new KeyStroke(VirtualKey.C, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.Copy));
                this._keyMap.Add(new KeyStroke(VirtualKey.X, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.Cut));
                this._keyMap.Add(new KeyStroke(VirtualKey.V, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.Paste));
                this._keyMap.Add(new KeyStroke(VirtualKey.Enter, VirtualKeyModifiers.Menu), new SpreadAction(SpreadActions.InputNewLine));
                this._keyMap.Add(new KeyStroke(VirtualKey.F2, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.StartEditing));
                this._keyMap.Add(new KeyStroke(VirtualKey.Enter, VirtualKeyModifiers.Control | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.InputArrayFormula));
                this._keyMap.Add(new KeyStroke(VirtualKey.A, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.SelectionAll));
            }
        }

        private void InitFloatingObjectKeyMap()
        {
            if (this._floatingObjectsKeyMap == null)
            {
                this._floatingObjectsKeyMap = new Dictionary<KeyStroke, SpreadAction>();
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.Escape, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.UnSelectAllFloatingObjects));
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.Delete, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.DeleteFloatingObject));
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.Tab, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.NavigationNextFloatingObject));
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.Tab, VirtualKeyModifiers.None | VirtualKeyModifiers.Shift), new SpreadAction(SpreadActions.NavigationPreviousFloatingObject));
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.X, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.ClipboardCutFloatingObjects));
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.C, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.ClipboardCopyFloatingObjects));
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.V, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.ClipboardPasteFloatingObjects));
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.A, VirtualKeyModifiers.Control), new SpreadAction(SpreadActions.SelectionAll));
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.Left, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.MoveFloatingObjectLeft));
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.Up, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.MoveFloatingObjectTop));
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.Right, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.MoveFloatingObjectRight));
                this._floatingObjectsKeyMap.Add(new KeyStroke(VirtualKey.Down, VirtualKeyModifiers.None), new SpreadAction(SpreadActions.MoveFloatingObjectDown));
            }
        }

        private bool InitFloatingObjectsMovingResizing()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if (this.IsTouching)
            {
                savedHitTestInformation = this._touchStartHitTestInfo;
            }
            if (((savedHitTestInformation.ViewportInfo == null) || (savedHitTestInformation.RowViewportIndex == -2)) || (savedHitTestInformation.ColumnViewportIndex == 2))
            {
                return false;
            }
            this._floatingObjectsMovingResizingStartRow = savedHitTestInformation.ViewportInfo.Row;
            this._floatingObjectsMovingResizingStartColumn = savedHitTestInformation.ViewportInfo.Column;
            this._dragStartRowViewport = savedHitTestInformation.RowViewportIndex;
            this._dragStartColumnViewport = savedHitTestInformation.ColumnViewportIndex;
            this._dragToRowViewport = savedHitTestInformation.RowViewportIndex;
            this._dragToColumnViewport = savedHitTestInformation.ColumnViewportIndex;
            this._floatingObjectsMovingResizingStartPoint = savedHitTestInformation.HitPoint;
            this.SetActiveColumnViewportIndex(savedHitTestInformation.ColumnViewportIndex);
            this.SetActiveRowViewportIndex(savedHitTestInformation.RowViewportIndex);
            this.CachFloatingObjectsMovingResizingLayoutModels();
            RowLayout viewportRowLayoutNearY = this.GetViewportRowLayoutNearY(this._dragStartRowViewport, this._floatingObjectsMovingResizingStartPoint.Y);
            ColumnLayout viewportColumnLayoutNearX = this.GetViewportColumnLayoutNearX(this._dragToColumnViewport, this._floatingObjectsMovingResizingStartPoint.X);
            this._floatingObjectsMovingResizingStartPointCellBounds = new Windows.Foundation.Rect(viewportColumnLayoutNearX.X, viewportRowLayoutNearY.Y, viewportColumnLayoutNearX.Width, viewportRowLayoutNearY.Height);
            this._floatingObjectsMovingStartLocations = new Dictionary<string, Windows.Foundation.Point>();
            FloatingObject[] objArray = this._movingResizingFloatingObjects;
            for (int i = 0; i < objArray.Length; i++)
            {
                IFloatingObject obj2 = objArray[i];
                this._floatingObjectsMovingStartLocations.Add(obj2.Name, obj2.Location);
            }
            return true;
        }

        private void InitTouch()
        {
            this.IsTouchPromotedMouseMessage = false;
            this._gestrueRecognizer = new GestureRecognizer();
            this._gestrueRecognizer.GestureSettings = GestureSettings.DoubleTap | GestureSettings.Hold | GestureSettings.ManipulationScale | GestureSettings.ManipulationTranslateInertia | GestureSettings.ManipulationTranslateX | GestureSettings.ManipulationTranslateY | GestureSettings.Tap;
            this._gestrueRecognizer.ShowGestureFeedback = false;
            _gestrueRecognizer.Tapped += OnGestureRecognizerTapped;
            _gestrueRecognizer.Holding += OnGestrueRecognizerHolding;
            _gestrueRecognizer.ManipulationStarted += OnGestrueRecognizerManipulationStarted;
            _gestrueRecognizer.ManipulationUpdated += OnGestrueRecognizerManipulationUpdated;
            _gestrueRecognizer.ManipulationCompleted += OnGestrueRecognizerManipulationCompleted;
        }

        private void InvaidateViewportHorizontalArrangementInternal(int columnViewportIndex)
        {
            int rowViewportCount = this.GetViewportInfo().RowViewportCount;
            for (int i = -1; i <= rowViewportCount; i++)
            {
                GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(i, columnViewportIndex);
                if (viewportRowsPresenter != null)
                {
                    viewportRowsPresenter.InvalidateRowsMeasureState(true);
                    viewportRowsPresenter.InvalidateBordersMeasureState();
                    viewportRowsPresenter.InvalidateSelectionMeasureState();
                    viewportRowsPresenter.InvalidateFloatingObjectsMeasureState();
                    viewportRowsPresenter.InvalidateMeasure();
                }
            }
            GcViewport columnHeaderRowsPresenter = this.GetColumnHeaderRowsPresenter(columnViewportIndex);
            if (columnHeaderRowsPresenter != null)
            {
                columnHeaderRowsPresenter.InvalidateRowsMeasureState(true);
                columnHeaderRowsPresenter.InvalidateBordersMeasureState();
                columnHeaderRowsPresenter.InvalidateMeasure();
            }
        }

        /// <summary>
        /// Invalidates the measurement state (layout) and the arranged state (layout) for the control.
        /// The view layout and data is updated after the invalidation.
        /// </summary>
        public void Invalidate()
        {
            Action action = null;
            if (!this.IsSuspendInvalidate())
            {
                if (this.IsEditing)
                {
                    this.StopCellEditing(true);
                }
                this.InvalidateLayout();
                if (action == null)
                {
                    action = delegate
                    {
                        base.Children.Clear();
                    };
                }
                Dt.Cells.Data.UIAdaptor.InvokeAsync(action);
                this._cornerPresenter = null;
                this._rowHeaderPresenters = null;
                this._columnHeaderPresenters = null;
                if (this._viewportPresenters != null)
                {
                    GcViewport[,] viewportArray = this._viewportPresenters;
                    int upperBound = viewportArray.GetUpperBound(0);
                    int num2 = viewportArray.GetUpperBound(1);
                    for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                    {
                        for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                        {
                            GcViewport viewport = viewportArray[i, j];
                            if (viewport != null)
                            {
                                viewport.RemoveDataValidationUI();
                            }
                        }
                    }
                }
                this._viewportPresenters = null;
                this._groupCornerPresenter = null;
                this._rowGroupHeaderPresenter = null;
                this._columnGroupHeaderPresenter = null;
                this._rowGroupPresenters = null;
                this._columnGroupPresenters = null;
                this._tooltipHelper = null;
                this._currentActiveColumnIndex = (this.Worksheet == null) ? -1 : this.Worksheet.ActiveColumnIndex;
                this._currentActiveRowIndex = (this.Worksheet == null) ? -1 : this.Worksheet.ActiveRowIndex;
                this.Navigation.UpdateStartPosition(this._currentActiveRowIndex, this._currentActiveColumnIndex);
            }
        }

        /// <summary>
        /// Invalidates the charts.
        /// </summary>
        public void InvalidateCharts()
        {
            if ((this.Worksheet != null) && (this.Worksheet.Charts.Count > 0))
            {
                this.InvalidateCharts(this.Worksheet.Charts.ToArray());
            }
        }

        /// <summary>
        /// Invalidates the charts.
        /// </summary>
        /// <param name="charts">The charts.</param>
        public void InvalidateCharts(params SpreadChart[] charts)
        {
            this.InvalidateFloatingObjectLayout();
            foreach (SpreadChart chart in charts)
            {
                this.RefreshViewportFloatingObjects(chart);
            }
        }

        /// <summary>
        /// Invalidates the column state in the control; the column layout and data is updated after the invalidation.
        /// </summary>
        /// <param name="column">The start column index.</param>
        /// <param name="columnCount">The column count.</param>
        /// <param name="sheetArea">The invalidated sheet area.</param>
        public void InvalidateColumns(int column, int columnCount, SheetArea sheetArea)
        {
            if (!this.IsSuspendInvalidate())
            {
                this.InvalidateRange(-1, column, -1, columnCount, sheetArea);
            }
        }

        /// <summary>
        /// Invalidates the custom floating objects.
        /// </summary>
        public void InvalidateCustomFloatingObjects()
        {
            if ((this.Worksheet != null) && (this.Worksheet.FloatingObjects.Count > 0))
            {
                List<CustomFloatingObject> list = new List<CustomFloatingObject>();
                foreach (FloatingObject obj2 in this.Worksheet.FloatingObjects)
                {
                    if (obj2 is CustomFloatingObject)
                    {
                        list.Add(obj2 as CustomFloatingObject);
                    }
                }
                this.InvalidateCustomFloatingObjects(list.ToArray());
            }
        }

        /// <summary>
        /// Invalidates the custom floating objects.
        /// </summary>
        /// <param name="floatingObjects">The floating objects.</param>
        public void InvalidateCustomFloatingObjects(params CustomFloatingObject[] floatingObjects)
        {
            this.InvalidateFloatingObjectLayout();
            foreach (CustomFloatingObject obj2 in floatingObjects)
            {
                this.RefreshViewportFloatingObjects(obj2);
            }
        }

        internal void InvalidateFloatingObjectLayout()
        {
            this.InvalidateFloatingObjectsLayoutModel();
            this.RefreshViewportFloatingObjectsLayout();
        }

        /// <summary>
        /// Invalidates the charts.
        /// </summary>
        public void InvalidateFloatingObjects()
        {
            this.InvalidateFloatingObjectLayout();
            this.RefreshViewportFloatingObjects();
        }

        /// <summary>
        /// Invalidates the floating object.
        /// </summary>
        /// <param name="floatingObjects">The floating objects.</param>
        public void InvalidateFloatingObjects(params FloatingObject[] floatingObjects)
        {
            this.InvalidateFloatingObjectLayout();
            foreach (FloatingObject obj2 in floatingObjects)
            {
                this.RefreshViewportFloatingObjects(obj2);
            }
        }

        private void InvalidateFloatingObjectsLayoutModel()
        {
            this._cachedFloatingObjectLayoutModel = null;
        }

        internal void InvalidateHeaderHorizontalArrangement()
        {
            if (!this.IsSuspendInvalidate())
            {
                int rowViewportCount = this.GetViewportInfo().RowViewportCount;
                for (int i = -1; i <= rowViewportCount; i++)
                {
                    GcViewport rowHeaderRowsPresenter = this.GetRowHeaderRowsPresenter(i);
                    if (rowHeaderRowsPresenter != null)
                    {
                        rowHeaderRowsPresenter.InvalidateRowsMeasureState(true);
                        rowHeaderRowsPresenter.InvalidateBordersMeasureState();
                        rowHeaderRowsPresenter.InvalidateMeasure();
                    }
                }
                GcViewport cornerPresenter = this.GetCornerPresenter();
                if (cornerPresenter != null)
                {
                    cornerPresenter.InvalidateRowsMeasureState(true);
                    cornerPresenter.InvalidateBordersMeasureState();
                    cornerPresenter.InvalidateMeasure();
                }
            }
        }

        private void InvalidateHeaderRowMeasure(int rowIndex)
        {
            RowPresenter objRow;
            int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
            for (int i = -1; i <= columnViewportCount; i++)
            {
                Action<CellLayout> action = null;
                GcViewport columnHeaderViewport = this.GetColumnHeaderRowsPresenter(i);
                if (columnHeaderViewport != null)
                {
                    objRow = columnHeaderViewport.GetRow(rowIndex);
                    if (objRow != null)
                    {
                        objRow.InvalidateMeasure();
                    }
                    if (action == null)
                    {
                        action = delegate (CellLayout cellLayout)
                        {
                            if ((rowIndex >= cellLayout.Row) && (rowIndex < (cellLayout.Row + cellLayout.RowCount)))
                            {
                                objRow = columnHeaderViewport.GetRow(cellLayout.Row);
                                if (objRow != null)
                                {
                                    objRow.InvalidateMeasure();
                                }
                            }
                        };
                    }
                    Enumerable.ToList<CellLayout>(this.GetColumnHeaderCellLayoutModel(i)).ForEach<CellLayout>(action);
                }
            }
            GcViewport cornerPresenter = this.GetCornerPresenter();
            if (cornerPresenter != null)
            {
                objRow = cornerPresenter.GetRow(rowIndex);
                if (objRow != null)
                {
                    objRow.InvalidateMeasure();
                }
            }
        }

        private void InvalidateHeaderRowsPresenterMeasure(bool invalidateRowMeasure)
        {
            int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
            for (int i = -1; i <= columnViewportCount; i++)
            {
                GcViewport columnHeaderRowsPresenter = this.GetColumnHeaderRowsPresenter(i);
                if (columnHeaderRowsPresenter != null)
                {
                    if (invalidateRowMeasure)
                    {
                        columnHeaderRowsPresenter.InvalidateRowsMeasureState(true);
                        columnHeaderRowsPresenter.InvalidateBordersMeasureState();
                    }
                    columnHeaderRowsPresenter.InvalidateMeasure();
                }
            }
        }

        internal virtual void InvalidateLayout()
        {
            if (!this.IsSuspendInvalidate())
            {
                this._cachedLayout = null;
                this._cachedViewportRowLayoutModel = null;
                this._cachedViewportColumnLayoutModel = null;
                this._cachedColumnHeaderRowLayoutModel = null;
                this._cachedColumnHeaderViewportColumnLayoutModel = null;
                this._cachedRowHeaderViewportRowLayoutModel = null;
                this._cachedRowHeaderColumnLayoutModel = null;
                this._cachedViewportCellLayoutModel = null;
                this._cachedColumnHeaderCellLayoutModel = null;
                this._cachedRowHeaderCellLayoutModel = null;
                this._cachedGroupLayout = null;
                this._cachedFilterButtonInfoModel = null;
                this._cachedFloatingObjectLayoutModel = null;
            }
        }

        /// <summary>
        /// Invalidates the pictures.
        /// </summary>
        public void InvalidatePictures()
        {
            if ((this.Worksheet != null) && (this.Worksheet.Pictures.Count > 0))
            {
                this.InvalidatePictures(this.Worksheet.Pictures.ToArray());
            }
        }

        /// <summary>
        /// Invalidates the pictures.
        /// </summary>
        /// <param name="pictures">The pictures.</param>
        public void InvalidatePictures(params Picture[] pictures)
        {
            this.InvalidateFloatingObjectLayout();
            foreach (Picture picture in pictures)
            {
                this.RefreshViewportFloatingObjects(picture);
            }
        }

        /// <summary>
        /// Invalidates a range state in the control; the range layout and data is updated after the invalidation.
        /// </summary>
        /// <param name="row">The start row index.</param>
        /// <param name="column">The start column index.</param>
        /// <param name="rowCount">The row count.</param>
        /// <param name="columnCount">The column count.</param>
        /// <param name="sheetArea">The invalidated sheet area.</param>
        public void InvalidateRange(int row, int column, int rowCount, int columnCount, SheetArea sheetArea)
        {
            Action action = null;
            Action action2 = null;
            Action action3 = null;
            Action action4 = null;
            if (!this.IsSuspendInvalidate())
            {
                if ((row < 0) || (column < 0))
                {
                    this.InvalidateLayout();
                }
                this._cachedFilterButtonInfoModel = null;
                if (action == null)
                {
                    action = delegate
                    {
                        base.InvalidateMeasure();
                    };
                }
                Dt.Cells.Data.UIAdaptor.InvokeAsync(action);
                Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
                if (((byte)(sheetArea & SheetArea.Cells)) == 1)
                {
                    if (row < 0)
                    {
                        row = 0;
                        rowCount = (worksheet == null) ? 0 : worksheet.RowCount;
                    }
                    if (column < 0)
                    {
                        column = 0;
                        columnCount = (worksheet == null) ? 0 : worksheet.ColumnCount;
                    }
                    this._cachedViewportCellLayoutModel = null;
                    if (action2 == null)
                    {
                        action2 = delegate
                        {
                            this.RefreshViewportCells(this._viewportPresenters, row, column, rowCount, columnCount);
                        };
                    }
                    Dt.Cells.Data.UIAdaptor.InvokeAsync(action2);
                }
                if (((byte)(sheetArea & SheetArea.ColumnHeader)) == 4)
                {
                    if (row < 0)
                    {
                        row = 0;
                        rowCount = (worksheet == null) ? 0 : worksheet.RowCount;
                    }
                    if (column < 0)
                    {
                        column = 0;
                        columnCount = (worksheet == null) ? 0 : worksheet.ColumnCount;
                    }
                    this._cachedColumnHeaderCellLayoutModel = null;
                    if (action3 == null)
                    {
                        action3 = delegate
                        {
                            this.RefreshHeaderCells(this._columnHeaderPresenters, row, column, rowCount, columnCount);
                        };
                    }
                    Dt.Cells.Data.UIAdaptor.InvokeAsync(action3);
                }
                if (((byte)(sheetArea & (SheetArea.CornerHeader | SheetArea.RowHeader))) == 2)
                {
                    if (row < 0)
                    {
                        row = 0;
                        rowCount = (worksheet == null) ? 0 : worksheet.RowCount;
                    }
                    if (column < 0)
                    {
                        column = 0;
                        columnCount = (worksheet == null) ? 0 : worksheet.ColumnCount;
                    }
                    this._cachedRowHeaderCellLayoutModel = null;
                    if (action4 == null)
                    {
                        action4 = delegate
                        {
                            this.RefreshHeaderCells(this._rowHeaderPresenters, row, column, rowCount, columnCount);
                        };
                    }
                    Dt.Cells.Data.UIAdaptor.InvokeAsync(action4);
                }
            }
        }

        /// <summary>
        /// Invalidates the row state in the control; the row layout and data is updated after the invalidation.
        /// </summary>
        /// <param name="row">The start row index.</param>
        /// <param name="rowCount">The row count.</param>
        /// <param name="sheetArea">The invalidated sheet area.</param>
        public void InvalidateRows(int row, int rowCount, SheetArea sheetArea)
        {
            if (!this.IsSuspendInvalidate())
            {
                this.InvalidateRange(row, -1, rowCount, -1, sheetArea);
            }
        }

        internal void InvalidateViewportColumnsLayout()
        {
            if (!this.IsSuspendInvalidate())
            {
                this._cachedViewportColumnLayoutModel = null;
                this._cachedColumnHeaderViewportColumnLayoutModel = null;
                this._cachedViewportCellLayoutModel = null;
                this._cachedColumnHeaderCellLayoutModel = null;
                this._cachedFloatingObjectLayoutModel = null;
            }
        }

        internal void InvalidateViewportHorizontalArrangement(int columnViewportIndex)
        {
            if (!this.IsSuspendInvalidate())
            {
                int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
                if (columnViewportIndex < -1)
                {
                    for (int i = -1; i <= columnViewportCount; i++)
                    {
                        this.InvaidateViewportHorizontalArrangementInternal(i);
                    }
                }
                else
                {
                    this.InvaidateViewportHorizontalArrangementInternal(columnViewportIndex);
                }
            }
        }

        private void InvalidateViewportRowMeasure(int rowViewportIndex, int rowIndex)
        {
            if (rowViewportIndex < -1)
            {
                int rowViewportCount = this.GetViewportInfo().RowViewportCount;
                for (int i = -1; i <= rowViewportCount; i++)
                {
                    this.InvalidateViewportRowMeasureInternal(i, rowIndex);
                }
            }
            else
            {
                this.InvalidateViewportRowMeasureInternal(rowViewportIndex, rowIndex);
            }
        }

        private void InvalidateViewportRowMeasureInternal(int rowViewportIndex, int rowIndex)
        {
            Action<CellLayout> action2 = null;
            RowPresenter objRow;
            int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
            for (int i = -1; i <= columnViewportCount; i++)
            {
                Action<CellLayout> action = null;
                GcViewport viewport = this.GetViewportRowsPresenter(rowViewportIndex, i);
                if (viewport != null)
                {
                    viewport.InvalidateMeasure();
                    objRow = viewport.GetRow(rowIndex);
                    if (objRow != null)
                    {
                        objRow.InvalidateMeasure();
                    }
                    if (action == null)
                    {
                        action = delegate (CellLayout cellLayout)
                        {
                            if ((rowIndex >= cellLayout.Row) && (rowIndex < (cellLayout.Row + cellLayout.RowCount)))
                            {
                                objRow = viewport.GetRow(cellLayout.Row);
                                if (objRow != null)
                                {
                                    objRow.InvalidateMeasure();
                                }
                            }
                        };
                    }
                    Enumerable.ToList<CellLayout>(this.GetViewportCellLayoutModel(rowViewportIndex, i)).ForEach<CellLayout>(action);
                }
            }
            GcViewport rowHeaderViewport = this.GetRowHeaderRowsPresenter(rowViewportIndex);
            if (rowHeaderViewport != null)
            {
                rowHeaderViewport.InvalidateMeasure();
                objRow = rowHeaderViewport.GetRow(rowIndex);
                if (objRow != null)
                {
                    objRow.InvalidateMeasure();
                }
                if (action2 == null)
                {
                    action2 = delegate (CellLayout cellLayout)
                    {
                        if ((rowIndex >= cellLayout.Row) && (rowIndex < (cellLayout.Row + cellLayout.RowCount)))
                        {
                            objRow = rowHeaderViewport.GetRow(cellLayout.Row);
                            if (objRow != null)
                            {
                                objRow.InvalidateMeasure();
                            }
                        }
                    };
                }
                Enumerable.ToList<CellLayout>(this.GetRowHeaderCellLayoutModel(rowViewportIndex)).ForEach<CellLayout>(action2);
            }
        }

        internal void InvalidateViewportRowsLayout()
        {
            if (!this.IsSuspendInvalidate())
            {
                this._cachedViewportRowLayoutModel = null;
                this._cachedRowHeaderViewportRowLayoutModel = null;
                this._cachedViewportCellLayoutModel = null;
                this._cachedRowHeaderCellLayoutModel = null;
                this._cachedFloatingObjectLayoutModel = null;
            }
        }

        /// <summary>
        /// Invalidate the specified RowsPresenter.
        /// </summary>
        internal void InvalidateViewportRowsPresenterMeasure(int rowViewportIndex, bool invalidateRowsMeasure)
        {
            if (!this.IsSuspendInvalidate())
            {
                int rowViewportCount = this.GetViewportInfo().RowViewportCount;
                if (rowViewportIndex < -1)
                {
                    for (int i = -1; i <= rowViewportCount; i++)
                    {
                        this.InvalidateViewportRowsPresenterMeasureInternal(i, invalidateRowsMeasure);
                    }
                }
                else
                {
                    this.InvalidateViewportRowsPresenterMeasureInternal(rowViewportIndex, invalidateRowsMeasure);
                }
            }
        }

        private void InvalidateViewportRowsPresenterMeasureInternal(int rowViewportIndex, bool invalidateRowsMeasure)
        {
            int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
            for (int i = -1; i <= columnViewportCount; i++)
            {
                GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(rowViewportIndex, i);
                if (viewportRowsPresenter != null)
                {
                    viewportRowsPresenter.InvalidateBordersMeasureState();
                    viewportRowsPresenter.InvalidateSelectionMeasureState();
                    viewportRowsPresenter.InvalidateRowsMeasureState(false);
                    viewportRowsPresenter.InvalidateMeasure();
                }
            }
            GcViewport rowHeaderRowsPresenter = this.GetRowHeaderRowsPresenter(rowViewportIndex);
            if (rowHeaderRowsPresenter != null)
            {
                rowHeaderRowsPresenter.InvalidateMeasure();
                rowHeaderRowsPresenter.InvalidateRowsMeasureState(false);
            }
        }

        internal static bool IsAnyCellInRangeLocked(Dt.Cells.Data.Worksheet sheet, int row, int column, int rowCount, int columnCount)
        {
            if (sheet != null)
            {
                int num = (row < 0) ? 0 : row;
                int num2 = (column < 0) ? 0 : column;
                int num3 = (row < 0) ? sheet.RowCount : rowCount;
                int num4 = (column < 0) ? sheet.ColumnCount : columnCount;
                for (int i = 0; i < num3; i++)
                {
                    for (int j = 0; j < num4; j++)
                    {
                        if (sheet.Cells[num + i, num2 + j].ActualLocked)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private bool IsCellEditable(int rowIndex, int columnIndex)
        {
            // hdt 在报表预览中实现单元格不可编辑且图表可拖动
            if (Worksheet != null)
            {
                if (Worksheet.LockCell)
                    return false;
                if (Worksheet.Protect)
                    return !Worksheet.Cells[rowIndex, columnIndex].ActualLocked;
            }
            return true;
        }

        private bool IsColumnInViewport(int columnViewport, int column)
        {
            int viewportLeftColumn = this.GetViewportLeftColumn(columnViewport);
            int viewportRightColumn = this.GetViewportRightColumn(columnViewport);
            return ((column >= viewportLeftColumn) && (column <= viewportRightColumn));
        }

        private bool IsColumnRangeGroupHitTest(Windows.Foundation.Point hitPoint)
        {
            GroupLayout groupLayout = this.GetGroupLayout();
            if ((this.Worksheet != null) && (groupLayout.Height > 0.0))
            {
                SheetLayout sheetLayout = this.GetSheetLayout();
                double headerX = sheetLayout.HeaderX;
                double y = groupLayout.Y;
                double width = sheetLayout.HeaderWidth - 1.0;
                double height = groupLayout.Height - 1.0;
                Windows.Foundation.Rect empty = Windows.Foundation.Rect.Empty;
                if ((width >= 0.0) && (height >= 0.0))
                {
                    empty = new Windows.Foundation.Rect(headerX, y, width, height);
                }
                if (empty.Contains(hitPoint))
                {
                    return true;
                }
                int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
                for (int i = -1; i <= columnViewportCount; i++)
                {
                    double viewportX = sheetLayout.GetViewportX(i);
                    double num8 = groupLayout.Y;
                    double num9 = groupLayout.Height - 1.0;
                    double num10 = sheetLayout.GetViewportWidth(i) - 1.0;
                    Windows.Foundation.Rect rect2 = Windows.Foundation.Rect.Empty;
                    if ((num9 >= 0.0) && (num10 >= 0.0))
                    {
                        rect2 = new Windows.Foundation.Rect(viewportX, num8, num10, num9);
                    }
                    if (rect2.Contains(hitPoint))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private bool IsCornerRangeGroupHitTest(Windows.Foundation.Point hitPoint)
        {
            GroupLayout groupLayout = this.GetGroupLayout();
            if ((groupLayout.Width > 0.0) && (groupLayout.Height > 0.0))
            {
                double x = groupLayout.X;
                double y = groupLayout.Y;
                double width = groupLayout.Width - 1.0;
                double height = groupLayout.Height - 1.0;
                Windows.Foundation.Rect empty = Windows.Foundation.Rect.Empty;
                if ((width >= 0.0) && (height >= 0.0))
                {
                    empty = new Windows.Foundation.Rect(x, y, width, height);
                }
                if (empty.Contains(hitPoint))
                {
                    return true;
                }
            }
            return false;
        }

        private bool IsEntrieColumnSelection()
        {
            if (this.Worksheet.Selections.Count != 1)
            {
                return false;
            }
            CellRange range = this.Worksheet.Selections[0];
            return ((range.Row == -1) && (range.RowCount == -1));
        }

        private bool IsEntrieRowSelection()
        {
            if (this.Worksheet.Selections.Count != 1)
            {
                return false;
            }
            CellRange range = this.Worksheet.Selections[0];
            return ((range.Column == -1) && (range.ColumnCount == -1));
        }

        private bool IsEntrieSheetSelection()
        {
            return (this.IsEntrieRowSelection() && this.IsEntrieColumnSelection());
        }

        private bool IsInSelectionGripper(Windows.Foundation.Point point)
        {
            if (this.CachedGripperLocation == null)
            {
                return false;
            }
            Windows.Foundation.Rect topLeft = this.CachedGripperLocation.TopLeft;
            if (this.CachedGripperLocation.TopLeft.Expand(10, 10).Contains(point))
            {
                return true;
            }
            Windows.Foundation.Rect bottomRight = this.CachedGripperLocation.BottomRight;
            return this.CachedGripperLocation.BottomRight.Expand(10, 10).Contains(point);
        }

        private bool IsMouseInDragDropLocation(double mouseX, double mouseY, int rowViewportIndex, int columnViewportIndex, bool isTouching = false)
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            if (worksheet != null)
            {
                int row;
                int column;
                int rowCount;
                int columnCount;
                CellRange spanCell = worksheet.GetSpanCell(worksheet.ActiveRowIndex, worksheet.ActiveColumnIndex);
                if (spanCell == null)
                {
                    spanCell = new CellRange(worksheet.ActiveRowIndex, worksheet.ActiveColumnIndex, 1, 1);
                }
                if (worksheet.Selections.Count > 1)
                {
                    return false;
                }
                if (worksheet.Selections.Count == 1)
                {
                    CellRange range2 = worksheet.Selections[0];
                    row = range2.Row;
                    column = range2.Column;
                    rowCount = range2.RowCount;
                    columnCount = range2.ColumnCount;
                }
                else
                {
                    row = spanCell.Row;
                    column = spanCell.Column;
                    rowCount = spanCell.RowCount;
                    columnCount = spanCell.ColumnCount;
                }
                if ((row == -1) && (column == -1))
                {
                    return false;
                }
                if (row == -1)
                {
                    row = 0;
                    rowCount = worksheet.RowCount;
                }
                if (column == -1)
                {
                    column = 0;
                    columnCount = worksheet.ColumnCount;
                }
                SheetLayout sheetLayout = this.GetSheetLayout();
                RowLayout layout2 = this.GetViewportRowLayoutModel(rowViewportIndex).Find(row);
                RowLayout layout3 = this.GetViewportRowLayoutModel(rowViewportIndex).Find((row + rowCount) - 1);
                ColumnLayout layout4 = this.GetViewportColumnLayoutModel(columnViewportIndex).Find(column);
                ColumnLayout layout5 = this.GetViewportColumnLayoutModel(columnViewportIndex).Find((column + columnCount) - 1);
                if (((rowCount < worksheet.RowCount) && (layout2 == null)) && (layout3 == null))
                {
                    return false;
                }
                if (((columnCount < worksheet.ColumnCount) && (layout4 == null)) && (layout5 == null))
                {
                    return false;
                }
                double num5 = Math.Ceiling((layout4 == null) ? sheetLayout.GetViewportX(columnViewportIndex) : layout4.X);
                double num6 = Math.Ceiling((layout5 == null) ? ((double)((sheetLayout.GetViewportX(columnViewportIndex) + sheetLayout.GetViewportWidth(columnViewportIndex)) - 1.0)) : ((double)((layout5.X + layout5.Width) - 1.0)));
                double num7 = Math.Ceiling((layout2 == null) ? sheetLayout.GetViewportY(rowViewportIndex) : layout2.Y);
                double num8 = Math.Ceiling((layout3 == null) ? ((double)((sheetLayout.GetViewportY(rowViewportIndex) + sheetLayout.GetViewportHeight(rowViewportIndex)) - 1.0)) : ((double)((layout3.Y + layout3.Height) - 1.0)));
                double num9 = 2.0;
                double num10 = 1.0;
                if (isTouching)
                {
                    num9 = 10.0;
                    num10 = 5.0;
                }
                if (this.IsEditing && spanCell.Equals(row, column, rowCount, columnCount))
                {
                    if ((mouseY >= (num7 - num9)) && (mouseY <= (num8 + num10)))
                    {
                        if (((layout4 != null) && (mouseX >= (num5 - num9))) && (mouseX <= (num5 - num10)))
                        {
                            return true;
                        }
                        if (((layout5 != null) && (mouseX >= (num6 + num10))) && (mouseX <= (num6 + num10)))
                        {
                            return true;
                        }
                    }
                    if (((mouseX >= (num5 - num9)) && (mouseX <= (num6 + num10))) && ((((layout2 != null) && (mouseY >= (num7 - num9))) && (mouseY <= (num7 - num10))) || (((layout3 != null) && (mouseY >= (num8 + num10))) && (mouseY <= (num8 + num10)))))
                    {
                        return true;
                    }
                }
                else
                {
                    if ((mouseY >= (num7 - num9)) && (mouseY <= (num8 + num10)))
                    {
                        if (((layout4 != null) && (mouseX >= (num5 - num9))) && (mouseX <= num5))
                        {
                            return true;
                        }
                        if (((layout5 != null) && (mouseX >= (num6 - num10))) && (mouseX <= (num6 + num10)))
                        {
                            return true;
                        }
                    }
                    if ((mouseX >= (num5 - num9)) && (mouseX <= (num6 + num10)))
                    {
                        if (((layout2 != null) && (mouseY >= (num7 - num9))) && (mouseY <= num7))
                        {
                            return true;
                        }
                        if (((layout3 != null) && (mouseY >= (num8 - num10))) && (mouseY <= (num8 + num10)))
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private bool IsMouseInDragFillIndicator(double mouseX, double mouseY, int rowViewportIndex, int columnViewportIndex, bool isTouching = false)
        {
            int row;
            int column;
            CellRange spanCell;
            double num7;
            double num8;
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            if (worksheet == null)
            {
                return false;
            }
            GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(rowViewportIndex, columnViewportIndex);
            if ((viewportRowsPresenter == null) || !viewportRowsPresenter.SelectionContainer.FocusIndicator.IsFillIndicatorVisible)
            {
                return false;
            }
            FillIndicatorPosition fillIndicatorPosition = viewportRowsPresenter.SelectionContainer.FocusIndicator.FillIndicatorPosition;
            if (worksheet.Selections.Count > 1)
            {
                return false;
            }
            if (worksheet.Selections.Count == 1)
            {
                spanCell = worksheet.Selections[0];
            }
            else
            {
                spanCell = worksheet.GetSpanCell(worksheet.ActiveRowIndex, worksheet.ActiveColumnIndex);
                if (spanCell == null)
                {
                    spanCell = new CellRange(worksheet.ActiveRowIndex, worksheet.ActiveColumnIndex, 1, 1);
                }
            }
            spanCell = this.AdjustViewportRange(rowViewportIndex, columnViewportIndex, spanCell);
            switch (fillIndicatorPosition)
            {
                case FillIndicatorPosition.BottomRight:
                    row = (spanCell.Row + spanCell.RowCount) - 1;
                    column = (spanCell.Column + spanCell.ColumnCount) - 1;
                    break;

                case FillIndicatorPosition.BottomLeft:
                    row = (spanCell.Row + spanCell.RowCount) - 1;
                    column = spanCell.Column;
                    break;

                default:
                    row = spanCell.Row;
                    column = (spanCell.Column + spanCell.ColumnCount) - 1;
                    break;
            }
            SheetLayout sheetLayout = this.GetSheetLayout();
            double viewportX = sheetLayout.GetViewportX(columnViewportIndex);
            double viewportY = sheetLayout.GetViewportY(rowViewportIndex);
            double viewportWidth = sheetLayout.GetViewportWidth(columnViewportIndex);
            double viewportHeight = sheetLayout.GetViewportHeight(rowViewportIndex);
            Windows.Foundation.Rect rect = new Windows.Foundation.Rect(viewportX, viewportY, viewportWidth, viewportHeight);
            if (!rect.Contains(new Windows.Foundation.Point(mouseX, mouseY)))
            {
                return false;
            }
            RowLayout layout2 = this.GetViewportRowLayoutModel(rowViewportIndex).Find(row);
            ColumnLayout layout3 = this.GetViewportColumnLayoutModel(columnViewportIndex).FindColumn(column);
            if ((layout2 == null) || (layout3 == null))
            {
                return false;
            }
            int num9 = 5;
            double num10 = 3.0;
            switch (fillIndicatorPosition)
            {
                case FillIndicatorPosition.BottomRight:
                    num7 = (layout3.X + layout3.Width) - num10;
                    num8 = (layout2.Y + layout2.Height) - num10;
                    break;

                case FillIndicatorPosition.BottomLeft:
                    num7 = layout3.X + 1.0;
                    num8 = (layout2.Y + layout2.Height) - num10;
                    break;

                default:
                    num7 = (layout3.X + layout3.Width) - num10;
                    num8 = layout2.Y + 1.0;
                    break;
            }
            Windows.Foundation.Point point = new Windows.Foundation.Point(mouseX, mouseY);
            if (this.IsTouching)
            {
                if (this.IsEditing)
                {
                    return false;
                }
                double x = Math.Max((double)0.0, (double)(num7 - 15.0));
                double y = Math.Max((double)0.0, (double)(num8 - 5.0));
                Windows.Foundation.Rect rect2 = new Windows.Foundation.Rect(x, y, 30.0, 25.0);
                return rect2.Contains(point);
            }
            Windows.Foundation.Rect rect3 = new Windows.Foundation.Rect(num7, num8, (double)num9, (double)num9);
            if (!this.IsEditing)
            {
                return rect3.Contains(point);
            }
            Windows.Foundation.Rect empty = Windows.Foundation.Rect.Empty;
            switch (fillIndicatorPosition)
            {
                case FillIndicatorPosition.BottomRight:
                    empty = new Windows.Foundation.Rect(num7, num8, 2.0, 2.0);
                    break;

                case FillIndicatorPosition.TopRight:
                    empty = new Windows.Foundation.Rect(num7, num8, 2.0, (double)num9);
                    break;

                case FillIndicatorPosition.BottomLeft:
                    empty = new Windows.Foundation.Rect(num7, num8, (double)num9, 2.0);
                    break;
            }
            return (rect3.Contains(point) && !empty.Contains(point));
        }

        private bool IsMouseInEditor()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            return ((this.IsEditing && (savedHitTestInformation.HitTestType == HitTestType.Viewport)) && savedHitTestInformation.ViewportInfo.InEditor);
        }

        private bool IsMouseInRangeGroup()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if ((savedHitTestInformation.HitTestType != HitTestType.RowRangeGroup) && (savedHitTestInformation.HitTestType != HitTestType.ColumnRangeGroup))
            {
                return false;
            }
            return true;
        }

        private bool IsNeedRefreshFloatingObjectsMovingResizingContainer(int rowViewport, int columnViewport)
        {
            return true;
        }

        private static bool IsPastedInternal(Dt.Cells.Data.Worksheet srcSheet, CellRange srcRange, Dt.Cells.Data.Worksheet destSheet, string clipboadText)
        {
            string str = null;
            if ((srcSheet != null) && (srcRange != null))
            {
                str = srcSheet.GetCsv(srcRange.Row, srcRange.Column, srcRange.RowCount, srcRange.ColumnCount, "\r\n", "\t", "\"", false);
                if (str == string.Empty)
                {
                    str = null;
                }
            }
            return ((((srcSheet != null) && (srcRange != null)) && ((destSheet.Workbook != null) && (destSheet.Workbook == srcSheet.Workbook))) && (str == clipboadText));
        }

        private static bool IsRangesEqual(CellRange[] oldSelection, CellRange[] newSelection)
        {
            int num = (oldSelection == null) ? 0 : oldSelection.Length;
            int num2 = (newSelection == null) ? 0 : newSelection.Length;
            bool flag = true;
            if (num == num2)
            {
                for (int i = 0; i < num; i++)
                {
                    if (!object.Equals(oldSelection[i], newSelection[i]))
                    {
                        return false;
                    }
                }
                return flag;
            }
            return false;
        }

        private bool IsRowInViewport(int rowViewport, int row)
        {
            int viewportTopRow = this.GetViewportTopRow(rowViewport);
            int viewportBottomRow = this.GetViewportBottomRow(rowViewport);
            return ((row >= viewportTopRow) && (row <= viewportBottomRow));
        }

        private bool IsRowRangeGroupHitTest(Windows.Foundation.Point hitPoint)
        {
            GroupLayout groupLayout = this.GetGroupLayout();
            if ((this.Worksheet != null) && (groupLayout.Width > 0.0))
            {
                SheetLayout sheetLayout = this.GetSheetLayout();
                double x = groupLayout.X;
                double headerY = sheetLayout.HeaderY;
                double width = groupLayout.Width - 1.0;
                double height = sheetLayout.HeaderHeight - 1.0;
                Windows.Foundation.Rect empty = Windows.Foundation.Rect.Empty;
                if ((width >= 0.0) && (height >= 0.0))
                {
                    empty = new Windows.Foundation.Rect(x, headerY, width, height);
                }
                if (empty.Contains(hitPoint))
                {
                    return true;
                }
                int rowViewportCount = this.GetViewportInfo().RowViewportCount;
                for (int i = -1; i <= rowViewportCount; i++)
                {
                    double num7 = groupLayout.X;
                    double viewportY = sheetLayout.GetViewportY(i);
                    double num9 = groupLayout.Width - 1.0;
                    double num10 = sheetLayout.GetViewportHeight(i) - 1.0;
                    Windows.Foundation.Rect rect2 = Windows.Foundation.Rect.Empty;
                    if ((num9 >= 0.0) && (num10 >= 0.0))
                    {
                        rect2 = new Windows.Foundation.Rect(num7, viewportY, num9, num10);
                    }
                    if (rect2.Contains(hitPoint))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        internal bool IsSuspendInvalidate()
        {
            return (this._suspendViewInvalidate > 0);
        }

        internal static bool IsValidRange(int row, int column, int rowCount, int columnCount, int maxRowCount, int maxColumnCount)
        {
            if (((-1 <= row) && (row < maxRowCount)) && ((-1 <= column) && (column < maxColumnCount)))
            {
                if ((row == -1) && (column == -1))
                {
                    return true;
                }
                if (row == -1)
                {
                    if ((columnCount != 0) && ((column + columnCount) <= maxColumnCount))
                    {
                        return true;
                    }
                }
                else if (column == -1)
                {
                    if ((rowCount != 0) && ((row + rowCount) <= maxRowCount))
                    {
                        return true;
                    }
                }
                else if (((columnCount != 0) && ((column + columnCount) <= maxColumnCount)) && ((rowCount != 0) && ((row + rowCount) <= maxRowCount)))
                {
                    return true;
                }
            }
            return false;
        }

        private double MeasureCellText(Cell cell, int row, int column, Windows.Foundation.Size maxSize, FontFamily fontFamily, object textFormattingMode, bool useLayoutRounding)
        {
            double num = 0.0;
            Windows.Foundation.Size size2 = MeasureHelper.ConvertTextSizeToExcelCellSize(MeasureHelper.MeasureTextInCell(cell, maxSize, 1.0, fontFamily, textFormattingMode, useLayoutRounding), 1.0);
            num = Math.Max(num, size2.Width);
            if (!this.ContainsFilterButton(row, column, cell.SheetArea))
            {
                return num;
            }
            switch (cell.ToHorizontalAlignment())
            {
                case HorizontalAlignment.Right:
                    return num;

                case HorizontalAlignment.Center:
                    return Math.Max(num, size2.Width + 36.0);
            }
            return Math.Max(num, size2.Width + 16.0);
        }

        /// <summary>
        /// This method measures the layout size required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class, when overridden in a derived class.
        /// </summary>
        /// <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will base the size on the available content.</param>
        /// <returns>
        /// The size that this element determines it needs during layout, based on its calculations of child element sizes.
        /// </returns>
        protected override Windows.Foundation.Size MeasureOverride(Windows.Foundation.Size availableSize)
        {
            double viewportX;
            double viewportY;
            if (this.AvailableSize != availableSize)
            {
                this.AvailableSize = availableSize;
                this.InvalidateLayout();
            }
            if (!this.IsWorking)
            {
                this.SaveHitTestInfo(null);
            }
            ViewportInfo viewportInfo = this.GetViewportInfo();
            int columnViewportCount = viewportInfo.ColumnViewportCount;
            int rowViewportCount = viewportInfo.RowViewportCount;
            SheetLayout sheetLayout = this.GetSheetLayout();
            this.UpdateFreezeLines();
            if (!base.Children.Contains(this.TrackersContainer))
            {
                base.Children.Add(this.TrackersContainer);
            }
            this.TrackersContainer.Measure(new Windows.Foundation.Size(double.PositiveInfinity, double.PositiveInfinity));
            if (!base.Children.Contains(this.CursorsContainer))
            {
                base.Children.Add(this.CursorsContainer);
            }
            this.CursorsContainer.Measure(new Windows.Foundation.Size(double.PositiveInfinity, double.PositiveInfinity));
            if (this._cornerPresenter == null)
            {
                this._cornerPresenter = new GcHeaderCornerViewport(this);
            }
            this._cornerPresenter.Location = new Windows.Foundation.Point(sheetLayout.HeaderX, sheetLayout.HeaderY);
            if ((sheetLayout.HeaderWidth > 0.0) && (sheetLayout.HeaderHeight > 0.0))
            {
                if (!base.Children.Contains(this._cornerPresenter))
                {
                    base.Children.Add(this._cornerPresenter);
                }
                this._cornerPresenter.InvalidateMeasure();
                this._cornerPresenter.Measure(new Windows.Foundation.Size(sheetLayout.HeaderWidth, sheetLayout.HeaderHeight));
            }
            else
            {
                base.Children.Remove(this._cornerPresenter);
                this._cornerPresenter = null;
            }
            if ((this._columnHeaderPresenters != null) && ((this.Worksheet == null) || (this._columnHeaderPresenters.Length != (columnViewportCount + 2))))
            {
                foreach (GcViewport viewport in this._columnHeaderPresenters)
                {
                    base.Children.Remove(viewport);
                }
                this._columnHeaderPresenters = null;
            }
            if (this._columnHeaderPresenters == null)
            {
                this._columnHeaderPresenters = new GcColumnHeaderViewport[columnViewportCount + 2];
            }
            if (sheetLayout.HeaderHeight > 0.0)
            {
                for (int j = -1; j <= columnViewportCount; j++)
                {
                    viewportX = sheetLayout.GetViewportX(j);
                    double viewportWidth = sheetLayout.GetViewportWidth(j);
                    if (this._columnHeaderPresenters[j + 1] == null)
                    {
                        this._columnHeaderPresenters[j + 1] = new GcColumnHeaderViewport(this);
                    }
                    GcViewport viewport2 = this._columnHeaderPresenters[j + 1];
                    viewport2.Location = new Windows.Foundation.Point(viewportX, sheetLayout.HeaderY);
                    viewport2.ColumnViewportIndex = j;
                    if (viewportWidth > 0.0)
                    {
                        if (!base.Children.Contains(viewport2))
                        {
                            base.Children.Add(viewport2);
                        }
                        viewport2.InvalidateMeasure();
                        viewport2.Measure(new Windows.Foundation.Size(viewportWidth, sheetLayout.HeaderHeight));
                    }
                    else
                    {
                        base.Children.Remove(viewport2);
                        this._columnHeaderPresenters[j + 1] = null;
                    }
                }
            }
            else
            {
                foreach (GcViewport viewport3 in this._columnHeaderPresenters)
                {
                    base.Children.Remove(viewport3);
                }
            }
            if ((this._rowHeaderPresenters != null) && ((this.Worksheet == null) || (this._rowHeaderPresenters.Length != (rowViewportCount + 2))))
            {
                foreach (GcViewport viewport4 in this._rowHeaderPresenters)
                {
                    base.Children.Remove(viewport4);
                }
                this._rowHeaderPresenters = null;
            }
            if (this._rowHeaderPresenters == null)
            {
                this._rowHeaderPresenters = new GcRowHeaderViewport[rowViewportCount + 2];
            }
            if (sheetLayout.HeaderWidth > 0.0)
            {
                for (int k = -1; k <= rowViewportCount; k++)
                {
                    double viewportHeight = sheetLayout.GetViewportHeight(k);
                    viewportY = sheetLayout.GetViewportY(k);
                    if (this._rowHeaderPresenters[k + 1] == null)
                    {
                        this._rowHeaderPresenters[k + 1] = new GcRowHeaderViewport(this);
                    }
                    GcViewport viewport5 = this._rowHeaderPresenters[k + 1];
                    viewport5.Location = new Windows.Foundation.Point(sheetLayout.HeaderX, viewportY);
                    viewport5.RowViewportIndex = k;
                    if (viewportHeight > 0.0)
                    {
                        if (!base.Children.Contains(viewport5))
                        {
                            base.Children.Add(viewport5);
                        }
                        viewport5.InvalidateMeasure();
                        viewport5.Measure(new Windows.Foundation.Size(sheetLayout.HeaderWidth, viewportHeight));
                    }
                    else
                    {
                        base.Children.Remove(viewport5);
                        this._rowHeaderPresenters[k + 1] = null;
                    }
                }
            }
            else
            {
                foreach (GcViewport viewport6 in this._rowHeaderPresenters)
                {
                    base.Children.Remove(viewport6);
                }
            }
            if ((this._viewportPresenters != null) && (((this.Worksheet == null) || (this._viewportPresenters.GetUpperBound(0) != (rowViewportCount + 1))) || (this._viewportPresenters.GetUpperBound(1) != (columnViewportCount + 1))))
            {
                GcViewport[,] viewportArray5 = this._viewportPresenters;
                int upperBound = viewportArray5.GetUpperBound(0);
                int num18 = viewportArray5.GetUpperBound(1);
                for (int m = viewportArray5.GetLowerBound(0); m <= upperBound; m++)
                {
                    for (int n = viewportArray5.GetLowerBound(1); n <= num18; n++)
                    {
                        GcViewport viewport7 = viewportArray5[m, n];
                        if (viewport7 != null)
                        {
                            base.Children.Remove(viewport7);
                        }
                    }
                }
                this._viewportPresenters = null;
            }
            if (this._viewportPresenters == null)
            {
                this._viewportPresenters = new GcViewport[rowViewportCount + 2, columnViewportCount + 2];
            }
            for (int i = -1; i <= columnViewportCount; i++)
            {
                double width = sheetLayout.GetViewportWidth(i);
                viewportX = sheetLayout.GetViewportX(i);
                for (int num11 = -1; num11 <= rowViewportCount; num11++)
                {
                    double height = sheetLayout.GetViewportHeight(num11);
                    viewportY = sheetLayout.GetViewportY(num11);
                    if (this._viewportPresenters[num11 + 1, i + 1] == null)
                    {
                        this._viewportPresenters[num11 + 1, i + 1] = new GcViewport(this);
                    }
                    GcViewport viewport8 = this._viewportPresenters[num11 + 1, i + 1];
                    viewport8.Location = new Windows.Foundation.Point(viewportX, viewportY);
                    viewport8.ColumnViewportIndex = i;
                    viewport8.RowViewportIndex = num11;
                    if ((width > 0.0) && (height > 0.0))
                    {
                        if (!base.Children.Contains(viewport8))
                        {
                            base.Children.Add(viewport8);
                        }
                        viewport8.InvalidateMeasure();
                        viewport8.InvalidateRowsMeasureState(false);
                        viewport8.Measure(new Windows.Foundation.Size(width, height));
                    }
                    else
                    {
                        base.Children.Remove(viewport8);
                        this._viewportPresenters[num11 + 1, i + 1] = null;
                    }
                }
            }
            this.MeasureRangeGroup(rowViewportCount, columnViewportCount, sheetLayout);
            return this.AvailableSize;
        }

        internal void MeasureRangeGroup(int rowPaneCount, int columnPaneCount, SheetLayout layout)
        {
            GroupLayout groupLayout = this.GetGroupLayout();
            if ((this._rowGroupPresenters != null) && ((this.Worksheet == null) || (this._rowGroupPresenters.Length != rowPaneCount)))
            {
                foreach (GcRangeGroup group in this._rowGroupPresenters)
                {
                    base.Children.Remove(group);
                }
                this._rowGroupPresenters = null;
            }
            if (this._rowGroupPresenters == null)
            {
                this._rowGroupPresenters = new GcRangeGroup[rowPaneCount + 2];
            }
            if (groupLayout.Width > 0.0)
            {
                for (int i = -1; i <= rowPaneCount; i++)
                {
                    double viewportY = layout.GetViewportY(i);
                    double viewportHeight = layout.GetViewportHeight(i);
                    if (this._rowGroupPresenters[i + 1] == null)
                    {
                        GcRangeGroup group2 = new GcRangeGroup(this);
                        this._rowGroupPresenters[i + 1] = group2;
                    }
                    GcRangeGroup group3 = this._rowGroupPresenters[i + 1];
                    group3.Orientation = Orientation.Horizontal;
                    group3.ViewportIndex = i;
                    group3.Location = new Windows.Foundation.Point(groupLayout.X, viewportY);
                    if (viewportHeight > 0.0)
                    {
                        if (!base.Children.Contains(group3))
                        {
                            base.Children.Add(group3);
                        }
                        group3.InvalidateMeasure();
                        group3.Measure(new Windows.Foundation.Size(groupLayout.Width, viewportHeight));
                    }
                    else
                    {
                        base.Children.Remove(group3);
                        this._rowGroupPresenters[i + 1] = null;
                    }
                }
            }
            else
            {
                GcRangeGroup[] groupArray2 = this._rowGroupPresenters;
                for (int j = 0; j < groupArray2.Length; j++)
                {
                    GcGroupBase base2 = groupArray2[j];
                    base.Children.Remove(base2);
                }
            }
            if ((this._columnGroupPresenters != null) && ((this.Worksheet == null) || (this._columnGroupPresenters.Length != columnPaneCount)))
            {
                foreach (GcRangeGroup group4 in this._columnGroupPresenters)
                {
                    base.Children.Remove(group4);
                }
                this._columnGroupPresenters = null;
            }
            if (this._columnGroupPresenters == null)
            {
                this._columnGroupPresenters = new GcRangeGroup[columnPaneCount + 2];
            }
            if (groupLayout.Height > 0.0)
            {
                for (int k = -1; k <= columnPaneCount; k++)
                {
                    double viewportX = layout.GetViewportX(k);
                    double viewportWidth = layout.GetViewportWidth(k);
                    if (this._columnGroupPresenters[k + 1] == null)
                    {
                        GcRangeGroup group5 = new GcRangeGroup(this);
                        this._columnGroupPresenters[k + 1] = group5;
                    }
                    GcRangeGroup group6 = this._columnGroupPresenters[k + 1];
                    group6.Orientation = Orientation.Vertical;
                    group6.ViewportIndex = k;
                    group6.Location = new Windows.Foundation.Point(viewportX, groupLayout.Y);
                    if (viewportWidth > 0.0)
                    {
                        if (!base.Children.Contains(group6))
                        {
                            base.Children.Add(group6);
                        }
                        group6.InvalidateMeasure();
                        group6.Measure(new Windows.Foundation.Size(viewportWidth, groupLayout.Height));
                    }
                    else
                    {
                        base.Children.Remove(group6);
                        this._columnGroupPresenters[k + 1] = null;
                    }
                }
            }
            else
            {
                GcRangeGroup[] groupArray4 = this._columnGroupPresenters;
                for (int m = 0; m < groupArray4.Length; m++)
                {
                    GcGroupBase base3 = groupArray4[m];
                    base.Children.Remove(base3);
                }
            }
            if (this._rowGroupHeaderPresenter == null)
            {
                this._rowGroupHeaderPresenter = new GcRangeGroupHeader(this);
            }
            this._rowGroupHeaderPresenter.Orientation = Orientation.Horizontal;
            this._rowGroupHeaderPresenter.Location = new Windows.Foundation.Point(groupLayout.X, groupLayout.Y + groupLayout.Height);
            if (groupLayout.Width > 0.0)
            {
                if (!base.Children.Contains(this._rowGroupHeaderPresenter))
                {
                    base.Children.Add(this._rowGroupHeaderPresenter);
                }
                this._rowGroupHeaderPresenter.InvalidateMeasure();
                this._rowGroupHeaderPresenter.Measure(new Windows.Foundation.Size(groupLayout.Width, layout.HeaderHeight));
            }
            else
            {
                base.Children.Remove(this._rowGroupHeaderPresenter);
                this._rowGroupHeaderPresenter = null;
            }
            if (this._columnGroupHeaderPresenter == null)
            {
                this._columnGroupHeaderPresenter = new GcRangeGroupHeader(this);
            }
            this._columnGroupHeaderPresenter.Orientation = Orientation.Vertical;
            this._columnGroupHeaderPresenter.Location = new Windows.Foundation.Point(groupLayout.X + groupLayout.Width, groupLayout.Y);
            if (groupLayout.Height > 0.0)
            {
                if (!base.Children.Contains(this._columnGroupHeaderPresenter))
                {
                    base.Children.Add(this._columnGroupHeaderPresenter);
                }
                this._columnGroupHeaderPresenter.InvalidateMeasure();
                this._columnGroupHeaderPresenter.Measure(new Windows.Foundation.Size(layout.HeaderWidth, groupLayout.Height));
            }
            else
            {
                base.Children.Remove(this._columnGroupHeaderPresenter);
                this._columnGroupHeaderPresenter = null;
            }
            if (this._groupCornerPresenter == null)
            {
                this._groupCornerPresenter = new GcRangeGroupCorner(this);
            }
            this._groupCornerPresenter.Location = new Windows.Foundation.Point(groupLayout.X, groupLayout.Y);
            if ((groupLayout.Width > 0.0) && (groupLayout.Height > 0.0))
            {
                if (!base.Children.Contains(this._groupCornerPresenter))
                {
                    base.Children.Add(this._groupCornerPresenter);
                }
                this._groupCornerPresenter.InvalidateMeasure();
                this._groupCornerPresenter.Measure(new Windows.Foundation.Size(groupLayout.Width, groupLayout.Height));
            }
            else
            {
                base.Children.Remove(this._groupCornerPresenter);
                this._groupCornerPresenter = null;
            }
        }

        private void MoveActiveCellToBottom()
        {
            CellRange activeSelection = this.GetActiveSelection();
            if ((activeSelection == null) && (this.Worksheet.Selections.Count > 0))
            {
                activeSelection = this.Worksheet.Selections[0];
            }
            if ((this.Worksheet.ActiveRowIndex != ((activeSelection.Row + activeSelection.RowCount) - 1)) || (this.Worksheet.ActiveColumnIndex != ((activeSelection.Column + activeSelection.ColumnCount) - 1)))
            {
                this.Worksheet.Workbook.SuspendEvent();
                this.Worksheet.SetActiveCell((activeSelection.Row + activeSelection.RowCount) - 1, (activeSelection.Column + activeSelection.ColumnCount) - 1, false);
                this.Worksheet.Workbook.ResumeEvent();
            }
        }

        private bool NeedRefresh(int rowViewport, int columnViewport)
        {
            bool flag = false;
            bool flag2 = false;
            ViewportInfo viewportInfo = this.GetViewportInfo();
            if (this.IsDragFillWholeColumns)
            {
                if (this.Worksheet.FrozenRowCount == 0)
                {
                    flag = (rowViewport == this._dragToRowViewport) || (rowViewport == viewportInfo.RowViewportCount);
                }
                else if (this._dragToRowViewport >= 1)
                {
                    flag = ((rowViewport == -1) || (rowViewport == viewportInfo.RowViewportCount)) || (rowViewport == this._dragToRowViewport);
                }
                else
                {
                    flag = ((rowViewport == -1) || (rowViewport == viewportInfo.RowViewportCount)) || (rowViewport == 0);
                }
                flag2 = ((columnViewport == this._dragFillStartLeftColumnViewport) || (columnViewport == this._dragFillStartRightColumnViewport)) || (columnViewport == this._dragToColumnViewport);
            }
            else if (this.IsDragFillWholeRows)
            {
                if (this.Worksheet.FrozenColumnCount == 0)
                {
                    flag2 = (columnViewport == this._dragToColumnViewport) || (columnViewport == viewportInfo.ColumnViewportCount);
                }
                else if (this._dragToColumnViewport >= 1)
                {
                    flag2 = ((columnViewport == -1) || (columnViewport == viewportInfo.ColumnViewportCount)) || (columnViewport == this._dragToColumnViewport);
                }
                else
                {
                    flag2 = ((columnViewport == -1) || (columnViewport == viewportInfo.ColumnViewportCount)) || (columnViewport == 0);
                }
                flag = ((rowViewport == this._dragFillStartTopRowViewport) || (rowViewport == this._dragFillStartBottomRowViewport)) || (rowViewport == this._dragToRowViewport);
            }
            else
            {
                flag = ((rowViewport >= this._dragFillStartTopRowViewport) && (rowViewport <= this._dragFillStartBottomRowViewport)) || (rowViewport == this._dragToRowViewport);
                flag2 = ((columnViewport >= this._dragFillStartLeftColumnViewport) && (columnViewport <= this._dragFillStartRightColumnViewport)) || (columnViewport == this._dragToColumnViewport);
            }
            return (flag && flag2);
        }

        internal void OnActiveSheetChanged()
        {
            if (this.EditorConnector.IsFormulaSelectionBegined)
            {
                this.EditorConnector.UpdateSelectionItemsForCurrentSheet();
                this.EditorConnector.ActivateEditor = true;
            }
            this.Invalidate();
        }

        private void OnCurrentGestureActionCompleted(object sender, EventArgs e)
        {
            if (this._currentGestureAction != null)
            {
                this._currentGestureAction.ActionCompleted -= new EventHandler(this.OnCurrentGestureActionCompleted);
                this._currentGestureAction.Release();
                this._currentGestureAction = null;
            }
        }

        private void OnDoubleTapped(object sender, DoubleTappedRoutedEventArgs e)
        {
            if (this.Worksheet != null)
            {
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                if (((savedHitTestInformation != null) && (savedHitTestInformation.HitTestType != HitTestType.Viewport)) || this.IsMouseLeftButtonPressed)
                {
                    HitTestInformation information2 = this.GetSavedHitTestInformation();
                    this._isDoubleClick = true;
                    this.EndMouseClick(e);
                    this.ProcessMouseLeftButtonDoubleClick(e);
                    this._isDoubleClick = false;
                    this.ClearMouseLeftButtonDownStates();
                    bool flag = ((information2.HitTestType == HitTestType.Viewport) || (information2.HitTestType == HitTestType.RowHeader)) || (information2.HitTestType == HitTestType.ColumnHeader);
                    bool flag2 = ((information2.HitTestType == HitTestType.ColumnHeader) && information2.HeaderInfo.InColumnResize) || ((information2.HitTestType == HitTestType.RowHeader) && information2.HeaderInfo.InRowResize);
                    if (flag && !flag2)
                    {
                        this.RaiseCellDoubleClick(e.GetPosition(this));
                    }
                }
            }
        }

        private void OnEditedCellChanged(object sender, CellChangedEventArgs e)
        {
            if (string.Equals(e.PropertyName, "Value"))
            {
                this.RaiseValueChanged(e.Row, e.Column);
            }
        }

        private void OnGestrueRecognizerHolding(GestureRecognizer sender, HoldingEventArgs args)
        {
            if ((args.HoldingState != HoldingState.Canceled) && (args.HoldingState != HoldingState.Completed))
            {
                this.ProcessTouchHold(args.Position);
            }
        }

        private void OnGestrueRecognizerManipulationCompleted(GestureRecognizer sender, ManipulationCompletedEventArgs args)
        {
            this.OnManipulationComplete(args.Position);
            this._isTouchScrolling = false;
            this.IsTouching = false;
        }

        private void OnGestrueRecognizerManipulationStarted(GestureRecognizer sender, ManipulationStartedEventArgs args)
        {
            this._touchStartPoint = args.Position;
            this.OnManipulationStarted(args.Position);
        }

        private void OnGestrueRecognizerManipulationUpdated(GestureRecognizer sender, ManipulationUpdatedEventArgs args)
        {
            double num = args.Velocities.Linear.Y * 1000.0;
            double num2 = args.Velocities.Linear.X * 1000.0;
            if ((Math.Abs(num) > 1200.0) || (Math.Abs(num2) > 1700.0))
            {
                this.fastScroll = true;
            }
            else
            {
                this.fastScroll = false;
            }
            if (this._gestrueRecognizer.IsInertial)
            {
                int viewportTopRow = this.GetViewportTopRow(this._touchStartHitTestInfo.RowViewportIndex);
                if ((viewportTopRow <= this.GetMaxTopScrollableRow()) && (this._translateOffsetY > 0.0))
                {
                    this._translateOffsetY = 0.0;
                    try
                    {
                        this._gestrueRecognizer.CompleteGesture();
                    }
                    catch
                    {
                        this.ResetTouchWhenError();
                    }
                }
                else if ((viewportTopRow >= this.GetMaxBottomScrollableRow()) && ((this._translateOffsetY + this.Worksheet.Rows[this.GetMaxBottomScrollableRow()].ActualHeight) < 0.0))
                {
                    try
                    {
                        this._gestrueRecognizer.CompleteGesture();
                    }
                    catch
                    {
                        this.ResetTouchWhenError();
                    }
                }
                else
                {
                    int viewportLeftColumn = this.GetViewportLeftColumn(this._touchStartHitTestInfo.ColumnViewportIndex);
                    if ((viewportLeftColumn <= this.GetMaxLeftScrollableColumn()) && (this._translateOffsetX > 0.0))
                    {
                        this._translateOffsetX = 0.0;
                        try
                        {
                            this._gestrueRecognizer.CompleteGesture();
                        }
                        catch
                        {
                            this.ResetTouchWhenError();
                        }
                    }
                    else
                    {
                        if ((viewportLeftColumn >= this.GetMaxRightScrollableColumn()) && ((this._translateOffsetX + this.Worksheet.Columns[this.GetMaxRightScrollableColumn()].ActualWidth) < 0.0))
                        {
                            try
                            {
                                this._gestrueRecognizer.CompleteGesture();
                            }
                            catch
                            {
                                this.ResetTouchWhenError();
                            }
                        }
                        this.ProcessGestrueRecognizerManipulationUpdated(args);
                    }
                }
            }
            else
            {
                this.ProcessGestrueRecognizerManipulationUpdated(args);
            }
        }

        private void OnGestureRecognizerTapped(GestureRecognizer sender, TappedEventArgs args)
        {
            if (args.TapCount == 1)
            {
                this.ProcessTap(args.Position);
                base.InvalidateMeasure();
            }
            else if (args.TapCount == 2)
            {
                this.ProcessDoubleTap(args.Position);
            }
        }

        private void OnHorizontalSelectionTick(bool needIncrease)
        {
            if (this._hScrollable)
            {
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                int viewportLeftColumn = this.GetViewportLeftColumn(savedHitTestInformation.ColumnViewportIndex);
                int viewportRightColumn = this.GetViewportRightColumn(savedHitTestInformation.ColumnViewportIndex);
                Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
                if (needIncrease)
                {
                    if (viewportRightColumn < ((worksheet.ColumnCount - worksheet.FrozenTrailingColumnCount) - 1))
                    {
                        this.SetViewportLeftColumn(savedHitTestInformation.ColumnViewportIndex, viewportLeftColumn + 1);
                        base.InvalidateMeasure();
                    }
                    else
                    {
                        ColumnLayout layout = Enumerable.Last<ColumnLayout>((IEnumerable<ColumnLayout>)this.GetViewportColumnLayoutModel(savedHitTestInformation.ColumnViewportIndex));
                        if (layout != null)
                        {
                            SheetLayout sheetLayout = this.GetSheetLayout();
                            double num3 = sheetLayout.GetViewportX(savedHitTestInformation.ColumnViewportIndex) + sheetLayout.GetViewportWidth(savedHitTestInformation.ColumnViewportIndex);
                            if ((layout.X + layout.Width) >= num3)
                            {
                                this.SetViewportLeftColumn(savedHitTestInformation.ColumnViewportIndex, viewportLeftColumn + 1);
                                base.InvalidateMeasure();
                            }
                        }
                    }
                }
                else if ((viewportLeftColumn - 1) >= 0)
                {
                    this.SetViewportLeftColumn(savedHitTestInformation.ColumnViewportIndex, viewportLeftColumn - 1);
                    base.InvalidateMeasure();
                }
                if (this._formulaSelectionFeature.IsDragging)
                {
                    this._formulaSelectionFeature.ContinueDragging();
                }
                if (this.IsSelectingCells)
                {
                    this.ContinueCellSelecting();
                }
                if (this.IsSelectingColumns)
                {
                    this.ContinueColumnSelecting();
                }
                if (this.IsTouchSelectingCells)
                {
                    this.ContinueTouchSelectingCells(this._currentGestureAction.ActionCurrentPosition);
                }
                if (this.IsTouchSelectingColumns)
                {
                    this.ContinueColumnSelecting();
                }
                if (this.IsTouchDragFilling)
                {
                    this.ContinueTouchDragFill();
                }
                if (this.IsTouchDrapDropping)
                {
                    this.ContinueTouchDragDropping();
                }
                if (this.IsDragDropping)
                {
                    this.ContinueDragDropping();
                }
                if (this.IsDraggingFill)
                {
                    this.ContinueDragFill();
                }
                if (this.IsMovingFloatingOjects)
                {
                    this.ContinueFloatingObjectsMoving();
                }
                if (this.IsResizingFloatingObjects)
                {
                    this.ContinueFloatingObjectsResizing();
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="currentPoint"></param>
        internal virtual void OnManipulationComplete(Windows.Foundation.Point currentPoint)
        {
            if ((this._currentGestureAction != null) && this._currentGestureAction.IsValid)
            {
                this._currentGestureAction.Release();
                this._currentGestureAction.HandleManipulationCompleted(currentPoint);
            }
            this.IsTouching = false;
            this.IsTouchPromotedMouseMessage = false;
            if (this.FSelectionFeature.IsDragging)
            {
                this.FSelectionFeature.EndDragging();
            }
            if (this.IsTouchSelectingCells)
            {
                this.EndTouchSelectingCells();
                if (this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch)
                {
                    this.RefreshSelection();
                }
            }
            if (this.IsTouchDragFilling)
            {
                this.EndTouchDragFill();
                this.CloseAutoFilterIndicator();
                if (this._resetSelectionFrameStroke)
                {
                    GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(this._touchStartHitTestInfo.RowViewportIndex, this._touchStartHitTestInfo.ColumnViewportIndex);
                    if (viewportRowsPresenter != null)
                    {
                        viewportRowsPresenter.SelectionContainer.ResetSelectionFrameStroke();
                    }
                    this._resetSelectionFrameStroke = false;
                }
            }
            if (this.IsTouchDrapDropping)
            {
                this.EndTouchDragDropping();
                if (this._resetSelectionFrameStroke)
                {
                    GcViewport viewport2 = this.GetViewportRowsPresenter(this._touchStartHitTestInfo.RowViewportIndex, this._touchStartHitTestInfo.ColumnViewportIndex);
                    if (viewport2 != null)
                    {
                        viewport2.SelectionContainer.ResetSelectionFrameStroke();
                    }
                    this._resetSelectionFrameStroke = false;
                }
            }
            if (this.IsTouchSelectingColumns)
            {
                this.EndColumnSelecting();
            }
            if (this.IsTouchResizingColumns)
            {
                this.EndTouchColumnResizing();
            }
            if (this.IsTouchResizingRows)
            {
                this.EndTouchRowResizing();
            }
            if (this.IsTouchSelectingRows)
            {
                this.EndRowSelecting();
            }
            if (this.IsTouchingMovingFloatingObjects)
            {
                this.EndFloatingObjectsMoving();
            }
            if (this.IsTouchingResizingFloatingObjects)
            {
                this.EndFloatingObjectResizing();
            }
            this._cachedViewportSplitBarY = null;
            this._cachedViewportSplitBarX = null;
            this._cachedViewportWidths = null;
            this._cachedViewportHeights = null;
            this._updateViewportAfterTouch = false;
            this._touchStartLeftColumn = -1;
            this._touchStartTopRow = -1;
            this._IsTouchStartColumnSelecting = false;
            this._IsTouchStartRowSelecting = false;
            this.IsTouchDragFilling = false;
            this.IsTouchDrapDropping = false;
            this.IsTouchingMovingFloatingObjects = false;
            this.IsTouchingResizingFloatingObjects = false;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="point"></param>
        internal virtual void OnManipulationStarted(Windows.Foundation.Point point)
        {
            this.InputDeviceType = Dt.Cells.UI.InputDeviceType.Touch;
            this.UpdateTouchHitTestInfo(new Windows.Foundation.Point(point.X, point.Y));
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            this._touchStartHitTestInfo = savedHitTestInformation;
            this.IsTouchingMovingFloatingObjects = false;
            this.IsTouchingResizingFloatingObjects = false;
            this._translateOffsetX = 0.0;
            this._translateOffsetY = 0.0;
            if (((this._dragFillSmartTag != null) && (this._dragFillPopup != null)) && !this.HitTestPopup(this._dragFillPopup, point))
            {
                this.CloseDragFillPopup();
            }
            if (this._formulaSelectionFeature.TouchHitTest(point.X, point.Y, savedHitTestInformation))
            {
                this.FSelectionFeature.StartDragResizing();
            }
            else
            {
                if ((savedHitTestInformation.HitTestType == HitTestType.Viewport) && (this.Worksheet.Selections != null))
                {
                    this.IsTouchSelectingCells = false;
                    if ((!this.IsEditing && !this.IsTouchDrapDropping) && !this.IsTouchDragFilling)
                    {
                        if (this.AutoFillIndicatorRec.HasValue && this.AutoFillIndicatorRec.Value.Contains(point))
                        {
                            this.StartTouchDragFill();
                        }
                        else if (this.CachedGripperLocation != null)
                        {
                            if (this.CachedGripperLocation.TopLeft.Expand(5, 5).Contains(point))
                            {
                                this.MoveActiveCellToBottom();
                                this.StartTouchingSelecting();
                            }
                            else if (this.CachedGripperLocation.BottomRight.Expand(5, 5).Contains(point))
                            {
                                this.StartTouchingSelecting();
                            }
                        }
                    }
                }
                if (((savedHitTestInformation.HitTestType == HitTestType.RowHeader) && !this._formulaSelectionFeature.IsSelectionBegined) && !this.AutoFillIndicatorRec.HasValue)
                {
                    if ((this.CachedGripperLocation != null) && this.CachedGripperLocation.TopLeft.Expand(5, 5).Contains(point))
                    {
                        this.MoveActiveCellToBottom();
                        this.StartTouchingSelecting();
                    }
                    else if (this.ResizerGripperRect.HasValue && this.ResizerGripperRect.Value.Contains(point))
                    {
                        this.StartTouchRowResizing();
                    }
                    else
                    {
                        this._IsTouchStartRowSelecting = true;
                    }
                }
                if (((savedHitTestInformation.HitTestType == HitTestType.ColumnHeader) && (this.GetMouseDownFilterButton(savedHitTestInformation, false) == null)) && (!this._formulaSelectionFeature.IsSelectionBegined && !this.AutoFillIndicatorRec.HasValue))
                {
                    if ((this.CachedGripperLocation != null) && this.CachedGripperLocation.TopLeft.Expand(5, 5).Contains(point))
                    {
                        this.MoveActiveCellToBottom();
                        this.StartTouchingSelecting();
                    }
                    else if (this.ResizerGripperRect.HasValue && this.ResizerGripperRect.Value.Contains(point))
                    {
                        this.StartTouchColumnResizing();
                    }
                    else
                    {
                        this._IsTouchStartColumnSelecting = true;
                    }
                }
            }
            if (this._currentGestureAction == null)
            {
                this._currentGestureAction = new TouchGestureAction(this);
                this._currentGestureAction.ActionCompleted += new EventHandler(this.OnCurrentGestureActionCompleted);
            }
            if (this._currentGestureAction.Initialize())
            {
                Windows.Foundation.Point currentPosition = new Windows.Foundation.Point(point.X, point.Y);
                this._currentGestureAction.HandleSingleManipulationStarted(currentPosition);
            }
        }

        private void OnPointerCaptureLost(object sender, PointerRoutedEventArgs e)
        {
            if (e.Pointer.PointerDeviceType == PointerDeviceType.Touch)
            {
                IList<PointerPoint> intermediatePoints = e.GetIntermediatePoints(this);
                if (((intermediatePoints != null) && (intermediatePoints.Count > 0)) && this._primaryTouchDeviceId.HasValue)
                {
                    foreach (PointerPoint point in intermediatePoints)
                    {
                        if (this._primaryTouchDeviceId.Value == point.PointerId)
                        {
                            this._primaryTouchDeviceId = null;
                            this._primaryTouchDeviceReleased = true;
                            this._touchProcessedPointIds.Clear();
                            break;
                        }
                    }
                }
            }
            if (!this.IsTouching && (e.Pointer.PointerDeviceType == PointerDeviceType.Mouse))
            {
                this.ClearMouseLeftButtonDownStates();
                this.IsWorking = false;
            }
        }

        private void OnPointerExited(object sender, PointerRoutedEventArgs e)
        {
            if (e.Pointer.PointerDeviceType != PointerDeviceType.Touch)
            {
                if (!this.IsWorking)
                {
                    this.ResetMouseCursor();
                }
                return;
            }
            IList<PointerPoint> intermediatePoints = e.GetIntermediatePoints(this);
            if (!this.IsTouching && (e.Pointer.PointerDeviceType == PointerDeviceType.Touch))
            {
                if (this.Worksheet != null)
                {
                    this.ProcessMouseLeftButtonUp(new PointerMouseRoutedEventArgs(e));
                }
                return;
            }
            if (((this._gestrueRecognizer.IsActive && !this._gestrueRecognizer.IsInertial) && (!this._isTouchScrolling && !this.IsTouchDragFilling)) && ((!this.IsTouchDrapDropping && !this.IsTouchSelectingCells) && (!this.IsTouchSelectingColumns && !this.IsTouchSelectingRows)))
            {
                try
                {
                    if (this._primaryTouchDeviceId.HasValue)
                    {
                        using (IEnumerator<PointerPoint> enumerator = intermediatePoints.GetEnumerator())
                        {
                            while (enumerator.MoveNext())
                            {
                                if (enumerator.Current.PointerId == this._primaryTouchDeviceId.Value)
                                {
                                    this._gestrueRecognizer.CompleteGesture();
                                    goto Label_00F2;
                                }
                            }
                        }
                    }
                }
                catch
                {
                    this.ResetTouchWhenError();
                }
            }
        Label_00F2:
            this.ResetTouchStates(intermediatePoints);
        }

        internal virtual void OnPointerMoved(object sender, PointerRoutedEventArgs e)
        {
            if (this.IsTouching && (e.Pointer.PointerDeviceType == PointerDeviceType.Touch))
            {
                try
                {
                    this._gestrueRecognizer.ProcessMoveEvents(e.GetIntermediatePoints(this));
                }
                catch
                {
                    this.ResetTouchWhenError();
                }
                e.Handled = true;
            }
            else if (!this.IsTouching && (e.Pointer.PointerDeviceType == PointerDeviceType.Touch))
            {
                if (this.Worksheet != null)
                {
                    this.ProcessMouseMove(new PointerMouseRoutedEventArgs(e));
                }
            }
            else if ((this.Worksheet != null) && (e.Pointer.PointerDeviceType != PointerDeviceType.Touch))
            {
                this.ProcessMouseMove(new PointerMouseRoutedEventArgs(e));
            }
        }

        private void OnPointerPressed(object sender, PointerRoutedEventArgs e)
        {
            bool flag = false;
            if (e.Pointer.PointerDeviceType == PointerDeviceType.Touch)
            {
                this.IsTouching = false;
                this._isTouchScrolling = false;
                IList<PointerPoint> intermediatePoints = e.GetIntermediatePoints(this);
                if ((intermediatePoints != null) && (intermediatePoints.Count > 0))
                {
                    PointerPoint point = intermediatePoints[0];
                    this.InputDeviceType = Dt.Cells.UI.InputDeviceType.Touch;
                    if (this.CanTouchManipulate(point.Position))
                    {
                        this.IsTouching = true;
                        this._isTouchScrolling = false;
                        if (!this._touchProcessedPointIds.Contains(point.PointerId))
                        {
                            if (!this._primaryTouchDeviceId.HasValue)
                            {
                                this._mouseDownPosition = e.GetCurrentPoint(this).Position;
                                base.CapturePointer(e.Pointer);
                                this._primaryTouchDeviceId = new uint?(point.PointerId);
                                this._primaryTouchDeviceReleased = false;
                                if ((this.Worksheet != null) && (this.Worksheet.Selections != null))
                                {
                                    CellRange[] rangeArray = Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections);
                                    this.SavedOldSelections = rangeArray;
                                }
                            }
                            this._touchProcessedPointIds.Add(point.PointerId);
                            try
                            {
                                this._gestrueRecognizer.ProcessDownEvent(point);
                                e.Handled = true;
                                flag = true;
                            }
                            catch
                            {
                                this.ResetTouchWhenError();
                            }
                        }
                    }
                    else
                    {
                        PointerMouseRoutedEventArgs args = new PointerMouseRoutedEventArgs(e);
                        if (this.StartMouseClick(args))
                        {
                            this._mouseDownPosition = e.GetCurrentPoint(this).Position;
                            this.ProcessMouseLeftButtonDown(args);
                            e.Handled = true;
                        }
                    }
                }
            }
            if ((e.Pointer.PointerDeviceType != PointerDeviceType.Touch) && !flag)
            {
                this.InputDeviceType = Dt.Cells.UI.InputDeviceType.Mouse;
                PointerPoint currentPoint = e.GetCurrentPoint(this);
                if (currentPoint.Properties.IsLeftButtonPressed)
                {
                    Point pos = currentPoint.Position;
                    this.IsTouching = false;
                    if ((this.Worksheet == null) && (this.HitTest(pos.X, pos.Y).HitTestType != HitTestType.TabStrip))
                    {
                        return;
                    }
                    PointerMouseRoutedEventArgs args2 = new PointerMouseRoutedEventArgs(e);
                    if (this.StartMouseClick(args2))
                    {
                        this._mouseDownPosition = pos;
                        this.ProcessMouseLeftButtonDown(args2);
                        e.Handled = true;
                    }
                }
                this.IsMouseRightButtonPressed = currentPoint.Properties.IsRightButtonPressed;
            }
        }

        internal virtual void OnPointerReleased(object sender, PointerRoutedEventArgs e)
        {
            if (e.Pointer.PointerDeviceType == PointerDeviceType.Touch)
            {
                IList<PointerPoint> intermediatePoints = e.GetIntermediatePoints(this);
                this.ResetTouchStates(intermediatePoints);
                if ((intermediatePoints != null) && (intermediatePoints.Count > 0))
                {
                    try
                    {
                        this._gestrueRecognizer.ProcessUpEvent(intermediatePoints[0]);
                        e.Handled = true;
                    }
                    catch
                    {
                        this.ResetTouchWhenError();
                    }
                    if (!this._isTouchScrolling || this.IsTouchZooming)
                    {
                        try
                        {
                            if (!this._primaryTouchDeviceId.HasValue)
                            {
                                this._gestrueRecognizer.CompleteGesture();
                            }
                        }
                        catch
                        {
                            this.ResetTouchWhenError();
                        }
                        this.IsTouching = false;
                    }
                }
            }
            else if (this.Worksheet != null)
            {
                bool flag = ((this.IsResizingColumns || this.IsResizingRows) || this.IsDragDropping) || this.IsDraggingFill;
                PointerMouseRoutedEventArgs args = new PointerMouseRoutedEventArgs(e);
                if (this.IsMouseLeftButtonPressed)
                {
                    if (this.EndMouseClick(args))
                    {
                        this.ProcessMouseLeftButtonUp(args);
                    }
                    if (!flag)
                    {
                        this.RaiseCellClick(args, MouseButtonType.Left);
                    }
                }
                else if (this.IsMouseRightButtonPressed)
                {
                    this.IsMouseRightButtonPressed = false;
                    if (!flag)
                    {
                        this.RaiseCellClick(args, MouseButtonType.Right);
                    }
                }
                e.Handled = true;
                if ((!this.IsTouching && (e.Pointer.PointerDeviceType == PointerDeviceType.Mouse)) && (this.Worksheet != null))
                {
                    this.ProcessMouseLeftButtonUp(new PointerMouseRoutedEventArgs(e));
                }
            }
        }

        private void OnPointerWheelChanged(object sender, PointerRoutedEventArgs e)
        {
            if ((this.Worksheet != null) && (e.Pointer.PointerDeviceType == PointerDeviceType.Mouse))
            {
                this.ProcessMouseWheel(new PointerMouseRoutedEventArgs(e));
            }
        }

        internal void OnTouchDoubleTap(Windows.Foundation.Point point)
        {
            if (this.Worksheet != null)
            {
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                base.ReleasePointerCaptures();
                this.ProcessDoubleTap(point);
                bool flag = ((savedHitTestInformation.HitTestType == HitTestType.Viewport) || (savedHitTestInformation.HitTestType == HitTestType.RowHeader)) || (savedHitTestInformation.HitTestType == HitTestType.ColumnHeader);
                bool flag2 = ((savedHitTestInformation.HitTestType == HitTestType.ColumnHeader) && savedHitTestInformation.HeaderInfo.InColumnResize) || ((savedHitTestInformation.HitTestType == HitTestType.RowHeader) && savedHitTestInformation.HeaderInfo.InRowResize);
                if (flag && !flag2)
                {
                    this.RaiseCellDoubleClick(point);
                }
            }
        }

        internal void OnTouchTap(Windows.Foundation.Point point)
        {
        }

        private void OnVerticalSelectionTick(bool needIncrease)
        {
            if (this._vScrollable)
            {
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                int viewportTopRow = this.GetViewportTopRow(savedHitTestInformation.RowViewportIndex);
                int viewportBottomRow = this.GetViewportBottomRow(savedHitTestInformation.RowViewportIndex);
                Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
                if (needIncrease)
                {
                    if (viewportBottomRow < ((this.Worksheet.RowCount - worksheet.FrozenTrailingRowCount) - 1))
                    {
                        this.SetViewportTopRow(savedHitTestInformation.RowViewportIndex, viewportTopRow + 1);
                        base.InvalidateMeasure();
                    }
                    else
                    {
                        RowLayout layout = Enumerable.Last<RowLayout>((IEnumerable<RowLayout>)this.GetViewportRowLayoutModel(savedHitTestInformation.RowViewportIndex));
                        if (layout != null)
                        {
                            SheetLayout sheetLayout = this.GetSheetLayout();
                            double num3 = sheetLayout.GetViewportY(savedHitTestInformation.RowViewportIndex) + sheetLayout.GetViewportHeight(savedHitTestInformation.RowViewportIndex);
                            if ((layout.Y + layout.Height) >= num3)
                            {
                                this.SetViewportTopRow(savedHitTestInformation.RowViewportIndex, viewportTopRow + 1);
                                base.InvalidateMeasure();
                            }
                        }
                    }
                }
                else if ((viewportTopRow - 1) >= 0)
                {
                    this.SetViewportTopRow(savedHitTestInformation.RowViewportIndex, viewportTopRow - 1);
                    base.InvalidateMeasure();
                }
                if (this._formulaSelectionFeature.IsDragging)
                {
                    this._formulaSelectionFeature.ContinueDragging();
                }
                if (this.IsSelectingCells)
                {
                    this.ContinueCellSelecting();
                }
                if (this.IsSelectingRows)
                {
                    this.ContinueRowSelecting();
                }
                if (this.IsTouchSelectingCells)
                {
                    this.ContinueTouchSelectingCells(this._currentGestureAction.ActionCurrentPosition);
                }
                if (this.IsTouchSelectingRows)
                {
                    this.ContinueRowSelecting();
                }
                if (this.IsTouchDragFilling)
                {
                    this.ContinueTouchDragFill();
                }
                if (this.IsDragDropping)
                {
                    this.ContinueDragDropping();
                }
                if (this.IsTouchDrapDropping)
                {
                    this.ContinueTouchDragDropping();
                }
                if (this.IsDraggingFill)
                {
                    this.ContinueDragFill();
                }
                if (this.IsMovingFloatingOjects)
                {
                    this.ContinueFloatingObjectsMoving();
                }
                if (this.IsResizingFloatingObjects)
                {
                    this.ContinueFloatingObjectsResizing();
                }
            }
        }

        private void PrepareCellEditing()
        {
            if (this.IsCellEditable(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex))
            {
                GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(this.GetActiveRowViewportIndex(), this.GetActiveColumnViewportIndex());
                if (viewportRowsPresenter != null)
                {
                    viewportRowsPresenter.PrepareCellEditing(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex);
                }
            }
        }

        private bool PreviewLeaveCell(int row, int column)
        {
            return (((row != this.Worksheet.ActiveRowIndex) || (column != this.Worksheet.ActiveColumnIndex)) && this.RaiseLeaveCell(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex, row, column));
        }

        internal virtual void ProcessDoubleTap(Windows.Foundation.Point point)
        {
            this.UpdateTouchHitTestInfo(point);
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if (((savedHitTestInformation.HitTestType == HitTestType.Viewport) && (savedHitTestInformation.ViewportInfo.Row > -1)) && (savedHitTestInformation.ViewportInfo.Column > -1))
            {
                if ((this._touchToolbarPopup != null) && this._touchToolbarPopup.IsOpen)
                {
                    this._touchToolbarPopup.IsOpen = false;
                }
                this.SetSelection(savedHitTestInformation.ViewportInfo.Row, savedHitTestInformation.ViewportInfo.Column, 1, 1);
                this.DoubleClickStartCellEditing(savedHitTestInformation.ViewportInfo.Row, savedHitTestInformation.ViewportInfo.Column);
                this.RaiseCellDoubleClick(point);
                this.RefreshSelection();
            }
            else
            {
                savedHitTestInformation = this.TouchHitTest(point.X, point.Y);
                if (savedHitTestInformation.HitTestType == HitTestType.ColumnHeader)
                {
                    this.AutoFitColumnForTouch(savedHitTestInformation);
                }
                else if (savedHitTestInformation.HitTestType == HitTestType.RowHeader)
                {
                    this.AutoFitRowForTouch(savedHitTestInformation);
                }
                else if (savedHitTestInformation.HitTestType == HitTestType.Corner)
                {
                    if (savedHitTestInformation.HeaderInfo.InColumnResize)
                    {
                        this.AutoFitColumnForTouch(savedHitTestInformation);
                    }
                    else if (savedHitTestInformation.HeaderInfo.InRowResize)
                    {
                        this.AutoFitRowForTouch(savedHitTestInformation);
                    }
                }
            }
        }

        internal virtual void ProcessGestrueRecognizerManipulationUpdated(ManipulationUpdatedEventArgs e)
        {
        }

        internal void ProcessIMEInputInWinRT(KeyRoutedEventArgs e)
        {
            if (this.AllowEnterEditing(e) && (!this.IsEditing && this.IsCellEditable(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex)))
            {
                if (this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch)
                {
                    this.RefreshSelection();
                }
                this.InputDeviceType = Dt.Cells.UI.InputDeviceType.Keyboard;
                this.UpdateCursorType();
                GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(this.GetActiveRowViewportIndex(), this.GetActiveColumnViewportIndex());
                if (viewportRowsPresenter != null)
                {
                    CoreWindow.GetForCurrentThread().ReleasePointerCapture();
                    this.EditingViewport = viewportRowsPresenter;
                    bool flag2 = false;
                    flag2 = viewportRowsPresenter.StartTextInputForWinRT(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex, EditorStatus.Enter);
                    this.IsEditing = flag2;
                    this._host.IsTabStop = !flag2;
                    if (!flag2)
                    {
                        this.EditingViewport = null;
                    }
                }
            }
        }

        internal virtual void ProcessKeyDown(KeyRoutedEventArgs e)
        {
            bool flag2;
            bool flag3;
            bool flag4;
            bool flag = this.AllowEnterEditing(e);
            if (this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch)
            {
                this.RefreshSelection();
            }
            this.InputDeviceType = Dt.Cells.UI.InputDeviceType.Keyboard;
            this.UpdateCursorType();
            VirtualKey keyCode = e.Key;
            if (keyCode == VirtualKey.Enter)
            {
                Dt.Cells.Data.Worksheet activeSheet = (this._host as Excel).ActiveSheet;
                if (this.EditorInfo.Sheet != activeSheet)
                {
                    int index = activeSheet.Workbook.Sheets.IndexOf(this.EditorInfo.Sheet);
                    activeSheet.Workbook.ActiveSheetIndex = index;
                    this.StopCellEditing(false);
                    this.EditorConnector.ActivateEditor = false;
                    e.Handled = true;
                    return;
                }
            }
            KeyboardHelper.GetMetaKeyState(out flag3, out flag2, out flag4);
            VirtualKeyModifiers none = VirtualKeyModifiers.None;
            if (flag2)
            {
                none |= VirtualKeyModifiers.Control;
            }
            if (flag3)
            {
                none |= VirtualKeyModifiers.None | VirtualKeyModifiers.Shift;
            }
            if (flag4)
            {
                none |= VirtualKeyModifiers.Menu;
            }
            KeyStroke ks = new KeyStroke(keyCode, none, false);
            if (this.ProcessKeyDownOnFloatingObjectSelected(ks))
            {
                e.Handled = true;
            }
            else
            {
                if (this.KeyMap.ContainsKey(ks))
                {
                    SpreadAction action = this.KeyMap[ks];
                    if (action != null)
                    {
                        this.CloseDragFillPopup();
                        ActionEventArgs args = new ActionEventArgs();
                        action(this, args);
                        if (args.Handled)
                        {
                            e.Handled = true;
                        }
                    }
                }
                if (this.IsDragDropping)
                {
                    this.SwitchDragDropIndicator();
                }
                else
                {
                    if (!this.IsEditing && flag)
                    {
                        this.StartCellEditing(true, null, EditorStatus.Enter);
                    }
                    if (!this.IsEditing)
                    {
                        this.FocusInternal();
                    }
                }
            }
        }

        private bool ProcessKeyDownOnFloatingObjectSelected(KeyStroke ks)
        {
            if ((((ks.KeyCode != VirtualKey.Z) || (ks.Modifiers != VirtualKeyModifiers.Control)) && ((ks.KeyCode != VirtualKey.Y) || (ks.Modifiers != VirtualKeyModifiers.Control))) && (this.HasSelectedFloatingObject() || this.FloatingObjectKeyMap.ContainsKey(ks)))
            {
                SpreadAction action = null;
                if (this.FloatingObjectKeyMap.TryGetValue(ks, out action) && (action != null))
                {
                    ActionEventArgs e = new ActionEventArgs();
                    action(this, e);
                    return e.Handled;
                }
            }
            return false;
        }

        internal void ProcessKeyUp(KeyRoutedEventArgs e)
        {
            this.UpdateCursorType();
            if (!this.IsEditing)
            {
                bool flag;
                bool flag2;
                VirtualKey keyCode = e.Key;
                KeyboardHelper.GetMetaKeyState(out flag, out flag2);
                VirtualKeyModifiers none = VirtualKeyModifiers.None;
                if (flag2)
                {
                    none |= VirtualKeyModifiers.Control;
                }
                if (flag)
                {
                    none |= VirtualKeyModifiers.None | VirtualKeyModifiers.Shift;
                }
                KeyStroke stroke = new KeyStroke(keyCode, none, true);
                if (this.KeyMap.ContainsKey(stroke))
                {
                    SpreadAction action = this.KeyMap[stroke];
                    if (action != null)
                    {
                        ActionEventArgs args = new ActionEventArgs();
                        action(this, args);
                        if (args.Handled)
                        {
                            e.Handled = true;
                        }
                    }
                }
            }
            if (this.IsDragDropping)
            {
                this.SwitchDragDropIndicator();
            }
        }

        private void ProcessMouseDownDataValidationListButton(DataValidationListButtonInfo dataBtnInfo)
        {
            if (!this.RaiseDataValidationListPopupOpening(dataBtnInfo.Row, dataBtnInfo.Column) && (dataBtnInfo != null))
            {
                this._dataValidationPopUpHelper = new PopupHelper(this.DataValidationListPopUp);
                DataValidationListBox dvListBox = new DataValidationListBox();
                Dt.Cells.Data.UIAdaptor.InvokeSync(delegate
                {
                    dvListBox.Background = new SolidColorBrush(Colors.White);
                });
                object[] array = dataBtnInfo.Validator.GetValidList(this.Worksheet, dataBtnInfo.Row, dataBtnInfo.Column);
                if ((dataBtnInfo.Validator.Type == CriteriaType.List) && (dataBtnInfo.Validator.Value1 != null))
                {
                    string str = (string)(dataBtnInfo.Validator.Value1 as string);
                    if (!str.StartsWith("="))
                    {
                        string listSeparator = CultureInfo.InvariantCulture.TextInfo.ListSeparator;
                        string[] strArray = new string[] { listSeparator, @"\0" };
                        string[] strArray2 = str.Split(strArray, (StringSplitOptions)StringSplitOptions.None);
                        if (strArray2 != null)
                        {
                            List<string> list = new List<string>();
                            foreach (string str3 in strArray2)
                            {
                                list.Add(str3.Trim(new char[] { ' ' }));
                            }
                            array = list.ToArray();
                        }
                    }
                }
                object obj2 = this.Worksheet.GetValue(dataBtnInfo.Row, dataBtnInfo.Column);
                if (array != null)
                {
                    int index = -1;
                    index = Array.IndexOf<object>(array, obj2);
                    float zoomFactor = this.Worksheet.ZoomFactor;
                    for (int i = 0; i < array.Length; i++)
                    {
                        object obj3 = array[i];
                        DataValidationListItem item = new DataValidationListItem
                        {
                            Value = obj3,
                            TextSize = 14f * zoomFactor
                        };
                        dvListBox.Items.Add(item);
                    }
                    dvListBox.SelectedIndex = index;
                    dvListBox.Command = new SetValueCommand(this, dataBtnInfo);
                }
                dvListBox.Popup = this._dataValidationPopUpHelper;
                int row = dataBtnInfo.Row;
                int column = dataBtnInfo.Column;
                CellRange range = this.Worksheet.GetSpanCell(row, column, dataBtnInfo.SheetArea);
                if (range != null)
                {
                    row = (range.Row + range.RowCount) - 1;
                    column = (range.Column + range.ColumnCount) - 1;
                }
                RowLayout columnHeaderRowLayout = null;
                ColumnLayout layout2 = this.GetViewportColumnLayoutModel(dataBtnInfo.ColumnViewportIndex).Find(column);
                if (dataBtnInfo.SheetArea == SheetArea.ColumnHeader)
                {
                    columnHeaderRowLayout = this.GetColumnHeaderRowLayout(row);
                }
                else if (dataBtnInfo.SheetArea == SheetArea.Cells)
                {
                    columnHeaderRowLayout = this.GetViewportRowLayoutModel(dataBtnInfo.RowViewportIndex).Find(row);
                }
                if ((columnHeaderRowLayout != null) && (layout2 != null))
                {
                    double num6 = Math.Min(16.0, layout2.Width);
                    if (dataBtnInfo.Column == dataBtnInfo.DisplayColumn)
                    {
                        dvListBox.Width = Math.Max((double)60.0, (double)(this.GetDataValidationListDropdownWidth(row, dataBtnInfo.Column, dataBtnInfo.ColumnViewportIndex) + 5.0));
                        dvListBox.MaxHeight = 200.0;
                        this._dataValidationPopUpHelper.ShowAsModal(this, dvListBox, new Windows.Foundation.Point(layout2.X + layout2.Width, columnHeaderRowLayout.Y + columnHeaderRowLayout.Height));
                    }
                    else
                    {
                        dvListBox.Width = Math.Max((double)60.0, (double)((this.GetDataValidationListDropdownWidth(row, dataBtnInfo.Column, dataBtnInfo.ColumnViewportIndex) + 5.0) + 16.0));
                        dvListBox.MaxHeight = 200.0;
                        this._dataValidationPopUpHelper.ShowAsModal(this, dvListBox, new Windows.Foundation.Point((layout2.X + layout2.Width) + num6, columnHeaderRowLayout.Y + columnHeaderRowLayout.Height));
                    }
                }
            }
        }

        private void ProcessMouseDownFilterButton(FilterButtonInfo filterBtnInfo)
        {
            if (!this.RaiseFilterPopupOpening(filterBtnInfo.Row, filterBtnInfo.Column) && (filterBtnInfo != null))
            {
                this._filterPopupHelper = new PopupHelper(this.FilterPopup);
                ColumnDropDownList dropdown = new ColumnDropDownList();
                this.AddSortItems(dropdown, filterBtnInfo);
                dropdown.Items.Add(new SeparatorDropDownItemControl());
                AutoFilterDropDownItemControl control = this.CreateAutoFilter(filterBtnInfo);
                dropdown.Items.Add(control);
                dropdown.Popup = this._filterPopupHelper;
                int row = filterBtnInfo.Row;
                int column = filterBtnInfo.Column;
                CellRange range = this.Worksheet.GetSpanCell(row, column, filterBtnInfo.SheetArea);
                if (range != null)
                {
                    row = (range.Row + range.RowCount) - 1;
                    column = (range.Column + range.ColumnCount) - 1;
                }
                RowLayout columnHeaderRowLayout = null;
                ColumnLayout layout2 = this.GetViewportColumnLayoutModel(filterBtnInfo.ColumnViewportIndex).Find(column);
                if (filterBtnInfo.SheetArea == SheetArea.ColumnHeader)
                {
                    columnHeaderRowLayout = this.GetColumnHeaderRowLayout(row);
                }
                else if (filterBtnInfo.SheetArea == SheetArea.Cells)
                {
                    columnHeaderRowLayout = this.GetViewportRowLayoutModel(filterBtnInfo.RowViewportIndex).Find(row);
                }
                if ((columnHeaderRowLayout != null) && (layout2 != null))
                {
                    this._filterPopupHelper.ShowAsModal(this, dropdown, new Windows.Foundation.Point(layout2.X + layout2.Width, columnHeaderRowLayout.Y + columnHeaderRowLayout.Height));
                }
            }
        }

        private void ProcessMouseLeave(PointerMouseRoutedEventArgs e)
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            this.MouseOverColumnIndex = -1;
            this.MouseOverRowIndex = -1;
            if (savedHitTestInformation.HitTestType == HitTestType.ColumnHeader)
            {
                this.UpdateColumnHeaderCellsState(this.Worksheet.ColumnHeader.RowCount - 1, savedHitTestInformation.HeaderInfo.Column, 1, 1);
            }
            else if (savedHitTestInformation.HitTestType == HitTestType.RowHeader)
            {
                this.UpdateRowHeaderCellsState(savedHitTestInformation.HeaderInfo.Row, this.Worksheet.RowHeader.ColumnCount - 1, 1, 1);
            }
            if (!this.IsWorking)
            {
                this.SaveHitTestInfo(new HitTestInformation());
            }
            if (!this.IsWorking)
            {
                this.ResetMouseCursor();
            }
        }

        internal virtual void ProcessMouseLeftButtonDoubleClick(DoubleTappedRoutedEventArgs e)
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if (((savedHitTestInformation.HitTestType == HitTestType.Viewport) && (savedHitTestInformation.ViewportInfo.Row > -1)) && (savedHitTestInformation.ViewportInfo.Column > -1))
            {
                this.DoubleClickStartCellEditing(savedHitTestInformation.ViewportInfo.Row, savedHitTestInformation.ViewportInfo.Column);
            }
            else if ((savedHitTestInformation.HitTestType == HitTestType.ColumnHeader) && savedHitTestInformation.HeaderInfo.InColumnResize)
            {
                this.AutoFitColumn();
            }
            else if ((savedHitTestInformation.HitTestType == HitTestType.RowHeader) && savedHitTestInformation.HeaderInfo.InRowResize)
            {
                this.AutoFitRow();
            }
            else if (savedHitTestInformation.HitTestType == HitTestType.Corner)
            {
                if (savedHitTestInformation.HeaderInfo.InColumnResize)
                {
                    this.AutoFitColumn();
                }
                else if (savedHitTestInformation.HeaderInfo.InRowResize)
                {
                    this.AutoFitRow();
                }
            }
        }

        internal virtual void ProcessMouseLeftButtonDown(PointerMouseRoutedEventArgs e)
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if ((!this.IsEditing || this._formulaSelectionFeature.CanSelectFormula) || ((savedHitTestInformation.HitTestType == HitTestType.FormulaSelection) || this.StopCellEditing(false)))
            {
                Windows.Foundation.Point position = e.GetPosition(this);
                if (position != savedHitTestInformation.HitPoint)
                {
                    this.SaveHitTestInfo(savedHitTestInformation = this.HitTest(position.X, position.Y));
                }
                this._lastClickPoint = new Windows.Foundation.Point(position.X, position.Y);
                this.UpdateLastClickLocation(savedHitTestInformation);
                this._hitFilterInfo = this.GetMouseDownFilterButton(savedHitTestInformation, false);
                DataValidationListButtonInfo mouseDownDataValidationButton = this.GetMouseDownDataValidationButton(savedHitTestInformation, false);
                if ((this._hitFilterInfo != null) || (mouseDownDataValidationButton != null))
                {
                    if (mouseDownDataValidationButton != null)
                    {
                        this.ProcessMouseDownDataValidationListButton(mouseDownDataValidationButton);
                    }
                    else if (this._hitFilterInfo != null)
                    {
                        this.ProcessMouseDownFilterButton(this._hitFilterInfo);
                    }
                }
                else
                {
                    switch (savedHitTestInformation.HitTestType)
                    {
                        case HitTestType.Corner:
                            {
                                bool flag3 = false;
                                if (this._formulaSelectionFeature.IsSelectionBegined)
                                {
                                    flag3 = this._formulaSelectionFeature.StartSelecting(SheetArea.CornerHeader);
                                }
                                if (!flag3)
                                {
                                    if (savedHitTestInformation.HeaderInfo.InRowResize)
                                    {
                                        this.StartRowResizing();
                                        return;
                                    }
                                    if (savedHitTestInformation.HeaderInfo.InColumnResize)
                                    {
                                        this.StartColumnResizing();
                                        return;
                                    }
                                    this.StartSheetSelecting();
                                }
                                return;
                            }
                        case HitTestType.TabStrip:
                        case HitTestType.RowRangeGroup:
                        case HitTestType.ColumnRangeGroup:
                            return;

                        case HitTestType.RowHeader:
                            {
                                bool flag5 = false;
                                if (this._formulaSelectionFeature.IsSelectionBegined)
                                {
                                    flag5 = this._formulaSelectionFeature.StartSelecting(SheetArea.CornerHeader | SheetArea.RowHeader);
                                }
                                if (!flag5)
                                {
                                    if (savedHitTestInformation.HeaderInfo.InRowResize)
                                    {
                                        this.StartRowResizing();
                                        return;
                                    }
                                    this.UnSelectedAllFloatingObjects();
                                    this.StartRowsSelecting();
                                }
                                return;
                            }
                        case HitTestType.ColumnHeader:
                            {
                                bool flag4 = false;
                                if (this._formulaSelectionFeature.IsSelectionBegined)
                                {
                                    flag4 = this._formulaSelectionFeature.StartSelecting(SheetArea.ColumnHeader);
                                }
                                if (!flag4)
                                {
                                    if (savedHitTestInformation.HeaderInfo.InColumnResize)
                                    {
                                        this.StartColumnResizing();
                                        return;
                                    }
                                    this.UnSelectedAllFloatingObjects();
                                    this.StartColumnSelecting();
                                }
                                return;
                            }
                        case HitTestType.Viewport:
                            {
                                bool flag6 = false;
                                if (this._formulaSelectionFeature.IsSelectionBegined)
                                {
                                    flag6 = this._formulaSelectionFeature.StartSelecting(SheetArea.Cells);
                                }
                                if (!flag6)
                                {
                                    if (!this._allowDragFill || !savedHitTestInformation.ViewportInfo.InDragFillIndicator)
                                    {
                                        if (this._allowDragDrop && savedHitTestInformation.ViewportInfo.InSelectionDrag)
                                        {
                                            if (this.IsEditing)
                                            {
                                                this.StopCellEditing(false);
                                            }
                                            this.StartDragDropping();
                                        }
                                        else if (!this.IsEditing)
                                        {
                                            this.StartCellSelecting();
                                        }
                                    }
                                    else
                                    {
                                        if (this.IsEditing)
                                        {
                                            this.StopCellEditing(false);
                                        }
                                        this.StartDragFill();
                                    }
                                }
                                this.UnSelectedAllFloatingObjects();
                                return;
                            }
                        case HitTestType.CornerRangeGroup:
                            {
                                bool flag2 = false;
                                if (this._formulaSelectionFeature.IsSelectionBegined)
                                {
                                    flag2 = this._formulaSelectionFeature.StartSelecting(SheetArea.CornerHeader);
                                }
                                if (!flag2)
                                {
                                    this.StartSheetSelecting();
                                }
                                return;
                            }
                        case HitTestType.FloatingObject:
                            if (!this.IsWorking)
                            {
                                // hdt
                                bool shift;
                                bool ctrl;
                                bool flag9 = false;
                                KeyboardHelper.GetMetaKeyState(out shift, out ctrl);
                                FloatingObject obj = savedHitTestInformation.FloatingObjectInfo.FloatingObject;
                                if (obj != null)
                                {
                                    // hdt 此处原来为 &&
                                    flag9 = obj.Locked || Worksheet.Protect;
                                    if (!ctrl && !shift)
                                    {
                                        if (!obj.IsSelected && !flag9)
                                        {
                                            this.UnSelectedAllFloatingObjects();
                                            obj.IsSelected = true;
                                        }
                                    }
                                    else if (!flag9 && !obj.IsSelected)
                                    {
                                        obj.IsSelected = true;
                                        _isMouseDownFloatingObject = true;
                                    }
                                    if (!flag9)
                                    {
                                        if (savedHitTestInformation.FloatingObjectInfo.InMoving)
                                        {
                                            this.StartFloatingObjectsMoving();
                                            return;
                                        }
                                        if (((savedHitTestInformation.FloatingObjectInfo.InBottomNESWResize || savedHitTestInformation.FloatingObjectInfo.InBottomNSResize) || (savedHitTestInformation.FloatingObjectInfo.InBottomNWSEResize || savedHitTestInformation.FloatingObjectInfo.InLeftWEResize)) || ((savedHitTestInformation.FloatingObjectInfo.InRightWEResize || savedHitTestInformation.FloatingObjectInfo.InTopNESWResize) || (savedHitTestInformation.FloatingObjectInfo.InTopNSResize || savedHitTestInformation.FloatingObjectInfo.InTopNWSEResize)))
                                        {
                                            this.StartFloatingObjectsResizing();
                                        }
                                    }
                                }
                            }
                            return;

                        case HitTestType.FormulaSelection:
                            if (!savedHitTestInformation.FormulaSelectionInfo.CanMove)
                            {
                                this._formulaSelectionFeature.StartDragResizing();
                                return;
                            }
                            this._formulaSelectionFeature.StartDragDropping();
                            return;
                    }
                }
            }
        }

        internal virtual void ProcessMouseLeftButtonUp(PointerMouseRoutedEventArgs e)
        {
            this.ClearMouseLeftButtonDownStates();
            if (!this.IsEditing && !this._formulaSelectionFeature.IsSelectionBegined)
            {
                this.FocusInternal();
            }
            if (!this.IsWorking)
            {
                HitTestInformation information = this.HitTest(this.MousePosition.X, this.MousePosition.Y);
                if ((this._allowDragDrop && (information.HitTestType == HitTestType.Viewport)) && information.ViewportInfo.InSelectionDrag)
                {
                    SetBuiltInCursor(CoreCursorType.Hand);
                }
                if (((this._lastClickPoint == this.MousePosition) && (information.HitTestType == HitTestType.FloatingObject)) && (information.FloatingObjectInfo.FloatingObject != null))
                {
                    this.UnSelectFloatingObject(information.FloatingObjectInfo.FloatingObject);
                }
            }
        }

        internal virtual void ProcessMouseMove(PointerMouseRoutedEventArgs e)
        {
            this.MousePosition = e.GetPosition(this);
            HitTestInformation hi = this.HitTest(this.MousePosition.X, this.MousePosition.Y);
            if (!this.IsWorking)
            {
                this.ResetMouseCursor();
            }
            switch (hi.HitTestType)
            {
                case HitTestType.Corner:
                    if (!this.IsWorking)
                    {
                        if (hi.HeaderInfo.InColumnResize)
                        {
                            this.SetBuiltInCursor(CoreCursorType.SizeWestEast);
                        }
                        if (hi.HeaderInfo.InRowResize)
                        {
                            this.SetBuiltInCursor(CoreCursorType.SizeNorthSouth);
                        }
                    }
                    break;

                case HitTestType.RowHeader:
                    if (hi.HeaderInfo.InRowResize && !this.IsWorking)
                    {
                        if (this.Worksheet.GetActualRowHeight(hi.HeaderInfo.ResizingRow, SheetArea.Cells) != 0.0)
                        {
                            this.SetMouseCursor(CursorType.Resize_VerticalCursor);
                            break;
                        }
                        this.SetMouseCursor(CursorType.Resize_VerticalSplitCursor);
                    }
                    break;

                case HitTestType.ColumnHeader:
                    if (hi.HeaderInfo.InColumnResize && !this.IsWorking)
                    {
                        if (this.Worksheet.GetActualColumnWidth(hi.HeaderInfo.ResizingColumn, SheetArea.Cells) != 0.0)
                        {
                            this.SetMouseCursor(CursorType.Resize_HorizontalCursor);
                            break;
                        }
                        this.SetMouseCursor(CursorType.Resize_HorizontalSplitCursor);
                    }
                    break;

                case HitTestType.Viewport:
                    if (this.IsWorking)
                    {
                        if (this.IsMovingFloatingOjects)
                        {
                            this.SetMouseCursor(CursorType.DragCell_DragCursor);
                        }
                        break;
                    }
                    this.SetCursor(hi);
                    break;

                case HitTestType.FloatingObject:
                    if (!this.IsTouching)
                    {
                        if (this.IsWorking)
                        {
                            if (this.IsMovingFloatingOjects)
                            {
                                this.SetMouseCursor(CursorType.DragCell_DragCursor);
                            }
                            break;
                        }
                        this.SetCursorForFloatingObject(hi.FloatingObjectInfo);
                    }
                    break;

                case HitTestType.FormulaSelection:
                    if (!this.IsWorking)
                    {
                        this._formulaSelectionFeature.SetCursor(hi.FormulaSelectionInfo);
                    }
                    break;
            }
            if (this._formulaSelectionFeature.IsDragging)
            {
                this._formulaSelectionFeature.ContinueDragging();
            }
            if (this.IsResizingColumns)
            {
                this.SetMouseCursor(CursorType.Resize_HorizontalCursor);
                this.ContinueColumnResizing();
            }
            if (this.IsResizingRows)
            {
                this.SetMouseCursor(CursorType.Resize_VerticalCursor);
                this.ContinueRowResizing();
            }
            if (this.IsSelectingCells)
            {
                this.ContinueCellSelecting();
            }
            if (this.IsSelectingColumns)
            {
                this.ContinueColumnSelecting();
            }
            if (this.IsSelectingRows)
            {
                this.ContinueRowSelecting();
            }
            if (this.IsDragDropping)
            {
                this.ContinueDragDropping();
            }
            if (this.IsDraggingFill)
            {
                this.ContinueDragFill();
            }
            if (this.IsMovingFloatingOjects)
            {
                this.ContinueFloatingObjectsMoving();
            }
            if (this.IsResizingFloatingObjects)
            {
                this.ContinueFloatingObjectsResizing();
            }
            if (!this.IsWorking)
            {
                this.SaveHitTestInfo(hi);
                this._hoverManager.DoHover(hi);
            }
        }

        internal virtual void ProcessMouseWheel(PointerMouseRoutedEventArgs e)
        {
            bool flag;
            bool flag2;
            this.GetSheetLayout();
            int mouseWheelDelta = e.Instance.GetCurrentPoint(this).Properties.MouseWheelDelta;
            int num2 = (-mouseWheelDelta * 3) / 120;
            int activeRowViewportIndex = this.GetActiveRowViewportIndex();
            int rowViewportCount = this.GetViewportInfo().RowViewportCount;
            if (activeRowViewportIndex < 0)
            {
                activeRowViewportIndex = 0;
            }
            else if (activeRowViewportIndex >= rowViewportCount)
            {
                activeRowViewportIndex = rowViewportCount - 1;
            }
            KeyboardHelper.GetMetaKeyState(out flag2, out flag);
            if (flag)
            {
                if (this.CanUserZoom)
                {
                    float newZoomFactor = this.ZoomFactor + ((mouseWheelDelta > 0) ? 0.1f : -0.1f);
                    if (newZoomFactor < 0.1f)
                    {
                        newZoomFactor = 0.1f;
                    }
                    if (4f < newZoomFactor)
                    {
                        newZoomFactor = 4f;
                    }
                    float zoomFactor = this.ZoomFactor;
                    ZoomUndoAction command = new ZoomUndoAction(this.Worksheet, newZoomFactor);
                    this.DoCommand(command);
                    this.PrepareCellEditing();
                    this.RaiseUserZooming(zoomFactor, newZoomFactor);
                }
            }
            else if ((this.VerticalScrollable && (this.Worksheet != null)) && ((activeRowViewportIndex >= 0) && (activeRowViewportIndex < rowViewportCount)))
            {
                int viewportTopRow = this.GetViewportTopRow(activeRowViewportIndex);
                int num8 = num2 + viewportTopRow;
                num8 = Math.Max(this.TryGetNextScrollableRow(this.Worksheet.FrozenRowCount), num8);
                num8 = Math.Min(this.TryGetPreviousScrollableRow((this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount) - 1), num8);
                if (mouseWheelDelta <= 0)
                {
                    num8 = this.TryGetNextScrollableRow(num8);
                    if (num8 == -1)
                    {
                        num8 = this.TryGetNextScrollableRow(viewportTopRow + 1);
                    }
                }
                else
                {
                    num8 = this.TryGetPreviousScrollableRow(num8);
                    if (num8 == -1)
                    {
                        num8 = this.TryGetPreviousScrollableRow(viewportTopRow - 1);
                    }
                }
                if (num8 != -1)
                {
                    this.SetViewportTopRow(activeRowViewportIndex, num8);
                }
            }
            e.Instance.Handled = true;
        }

        private void ProcessScrollTimer()
        {
            if (this.IsWorking)
            {
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                SheetLayout sheetLayout = this.GetSheetLayout();
                ViewportInfo viewportInfo = this.GetViewportInfo();
                double viewportX = sheetLayout.GetViewportX(savedHitTestInformation.ColumnViewportIndex);
                double viewportY = sheetLayout.GetViewportY(savedHitTestInformation.RowViewportIndex);
                if (this._verticalSelectionMgr != null)
                {
                    int rowViewportCount = viewportInfo.RowViewportCount;
                    if (savedHitTestInformation.RowViewportIndex == -1)
                    {
                        RowLayoutModel viewportRowLayoutModel = this.GetViewportRowLayoutModel(0);
                        if ((viewportRowLayoutModel != null) && (viewportRowLayoutModel.Count > 0))
                        {
                            RowLayout layout2 = viewportRowLayoutModel[0];
                            if (((this.MousePosition.Y >= sheetLayout.GetViewportY(0)) && ((this._verticalSelectionMgr.MousePosition + viewportY) < sheetLayout.GetViewportY(0))) && (layout2.Row > this.Worksheet.FrozenRowCount))
                            {
                                this.SetViewportTopRow(0, this.Worksheet.FrozenRowCount);
                            }
                        }
                    }
                    else if (savedHitTestInformation.RowViewportIndex == rowViewportCount)
                    {
                        RowLayoutModel model2 = this.GetViewportRowLayoutModel(rowViewportCount - 1);
                        if ((model2 != null) && (model2.Count > 0))
                        {
                            RowLayout layout3 = model2[model2.Count - 1];
                            if (((this.MousePosition.Y < sheetLayout.GetViewportY(rowViewportCount)) && ((this._verticalSelectionMgr.MousePosition + viewportY) >= sheetLayout.GetViewportY(rowViewportCount))) && ((layout3.Y + layout3.Height) > sheetLayout.GetViewportY(rowViewportCount)))
                            {
                                double viewportHeight = sheetLayout.GetViewportHeight(rowViewportCount - 1);
                                double num5 = 0.0;
                                int num6 = (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount) - 1;
                                for (int i = num6; i >= this.Worksheet.FrozenRowCount; i--)
                                {
                                    num5 += this.Worksheet.GetActualRowHeight(i, SheetArea.Cells) * this.Worksheet.ZoomFactor;
                                    if (num5 > viewportHeight)
                                    {
                                        num6 = Math.Min(i + 1, num6);
                                        break;
                                    }
                                }
                                this.SetViewportTopRow(rowViewportCount - 1, num6);
                            }
                        }
                    }
                    this._verticalSelectionMgr.MousePosition = this.MousePosition.Y - viewportY;
                }
                if (this._horizontalSelectionMgr != null)
                {
                    int columnViewportCount = viewportInfo.ColumnViewportCount;
                    if (savedHitTestInformation.ColumnViewportIndex == -1)
                    {
                        ColumnLayoutModel viewportColumnLayoutModel = this.GetViewportColumnLayoutModel(0);
                        if ((viewportColumnLayoutModel != null) && (viewportColumnLayoutModel.Count > 0))
                        {
                            ColumnLayout layout4 = viewportColumnLayoutModel[0];
                            if (((this.MousePosition.X >= sheetLayout.GetViewportX(0)) && ((this._horizontalSelectionMgr.MousePosition + viewportX) < sheetLayout.GetViewportX(0))) && (layout4.Column > this.Worksheet.FrozenColumnCount))
                            {
                                this.SetViewportLeftColumn(0, this.Worksheet.FrozenColumnCount);
                            }
                        }
                    }
                    else if (savedHitTestInformation.ColumnViewportIndex == columnViewportCount)
                    {
                        ColumnLayoutModel model4 = this.GetViewportColumnLayoutModel(columnViewportCount - 1);
                        if ((model4 != null) && (model4.Count > 0))
                        {
                            ColumnLayout layout5 = model4[model4.Count - 1];
                            if (((this.MousePosition.X < sheetLayout.GetViewportX(columnViewportCount)) && ((this._horizontalSelectionMgr.MousePosition + viewportX) >= sheetLayout.GetViewportX(columnViewportCount))) && ((layout5.X + layout5.Width) > sheetLayout.GetViewportX(columnViewportCount)))
                            {
                                double viewportWidth = sheetLayout.GetViewportWidth(columnViewportCount - 1);
                                double num10 = 0.0;
                                int num11 = (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount) - 1;
                                for (int j = num11; j >= this.Worksheet.FrozenColumnCount; j--)
                                {
                                    num10 += this.Worksheet.GetActualColumnWidth(j, SheetArea.Cells) * this.Worksheet.ZoomFactor;
                                    if (num10 > viewportWidth)
                                    {
                                        num11 = Math.Min(j + 1, num11);
                                        break;
                                    }
                                }
                                this.SetViewportLeftColumn(columnViewportCount - 1, num11);
                            }
                        }
                    }
                    this._horizontalSelectionMgr.MousePosition = this.MousePosition.X - viewportX;
                }
            }
        }

        internal virtual void ProcessStartSheetIndexChanged()
        {
        }

        internal virtual void ProcessTap(Windows.Foundation.Point point)
        {
            if ((this.GetActiveSelection() == null) && (this.Worksheet.Selections.Count > 0))
            {
                CellRange range = this.Worksheet.Selections[0];
            }
            if ((this.IsEditing && !this._formulaSelectionFeature.CanSelectFormula) && !this.StopCellEditing(false))
            {
                return;
            }
            this.UpdateTouchHitTestInfo(point);
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            this.CloseAutoFilterIndicator();
            this._hitFilterInfo = this.GetMouseDownFilterButton(savedHitTestInformation, true);
            DataValidationListButtonInfo mouseDownDataValidationButton = this.GetMouseDownDataValidationButton(savedHitTestInformation, true);
            if ((this._hitFilterInfo != null) || (mouseDownDataValidationButton != null))
            {
                if (mouseDownDataValidationButton != null)
                {
                    this.ProcessMouseDownDataValidationListButton(mouseDownDataValidationButton);
                    return;
                }
                if (this._hitFilterInfo != null)
                {
                    this.ProcessMouseDownFilterButton(this._hitFilterInfo);
                    return;
                }
                return;
            }
            switch (savedHitTestInformation.HitTestType)
            {
                case HitTestType.Corner:
                case HitTestType.CornerRangeGroup:
                    this.UnSelectedAllFloatingObjects();
                    this.StartSheetSelecting();
                    goto Label_0568;

                case HitTestType.RowHeader:
                    if (savedHitTestInformation.HeaderInfo.InRowResize)
                    {
                        if (this.TapInSelectionRow(savedHitTestInformation.HeaderInfo.Row) && !savedHitTestInformation.HeaderInfo.InRowResize)
                        {
                            this.TapInRowHeaderSelection(point, savedHitTestInformation);
                        }
                        else
                        {
                            this.UnSelectedAllFloatingObjects();
                            this.StartRowsSelecting();
                            this.EndRowSelecting();
                            this.RaiseTouchCellClick(savedHitTestInformation);
                        }
                    }
                    else if (this.IsEditing)
                    {
                        if (this._formulaSelectionFeature.IsSelectionBegined)
                        {
                            this._formulaSelectionFeature.TouchSelect(SheetArea.CornerHeader | SheetArea.RowHeader);
                        }
                    }
                    else if (!this.TapInSelectionRow(savedHitTestInformation.HeaderInfo.Row))
                    {
                        if (this._formulaSelectionFeature.IsSelectionBegined)
                        {
                            this._formulaSelectionFeature.TouchSelect(SheetArea.CornerHeader | SheetArea.RowHeader);
                        }
                        else if (savedHitTestInformation.HeaderInfo.Row > -1)
                        {
                            this.UnSelectedAllFloatingObjects();
                            this.StartRowsSelecting();
                            this.EndRowSelecting();
                            this.RaiseTouchCellClick(savedHitTestInformation);
                        }
                    }
                    else
                    {
                        this.TapInRowHeaderSelection(point, savedHitTestInformation);
                    }
                    goto Label_0568;

                case HitTestType.ColumnHeader:
                    if (this._hitFilterInfo == null)
                    {
                        if (savedHitTestInformation.HeaderInfo.InColumnResize)
                        {
                            if (this.TapInSelectionColumn(savedHitTestInformation.HeaderInfo.Column) && !savedHitTestInformation.HeaderInfo.InColumnResize)
                            {
                                this.TapInColumnHeaderSelection(point, savedHitTestInformation);
                            }
                            else
                            {
                                this.UnSelectedAllFloatingObjects();
                                this.StartColumnSelecting();
                                this.EndColumnSelecting();
                                this.RaiseTouchCellClick(savedHitTestInformation);
                            }
                        }
                        else if (this.IsEditing)
                        {
                            if (this._formulaSelectionFeature.IsSelectionBegined)
                            {
                                this._formulaSelectionFeature.TouchSelect(SheetArea.ColumnHeader);
                            }
                        }
                        else if (this.TapInSelectionColumn(savedHitTestInformation.HeaderInfo.Column))
                        {
                            this.TapInColumnHeaderSelection(point, savedHitTestInformation);
                        }
                        else if (this._formulaSelectionFeature.IsSelectionBegined)
                        {
                            this._formulaSelectionFeature.TouchSelect(SheetArea.ColumnHeader);
                        }
                        else if (savedHitTestInformation.HeaderInfo.Column > -1)
                        {
                            this.UnSelectedAllFloatingObjects();
                            this.StartColumnSelecting();
                            this.EndColumnSelecting();
                            this.RaiseTouchCellClick(savedHitTestInformation);
                        }
                    }
                    goto Label_0568;

                case HitTestType.Viewport:
                    if (this._dragFillSmartTag != null)
                    {
                        if ((this._dragFillPopup == null) || !this.HitTestPopup(this._dragFillPopup, point))
                        {
                            if (this._dragFillSmartTag.IsContextMenuOpened && (this._dragFillSmartTag.GetTappedDragFillContextMenu(point) != null))
                            {
                                DragFillContextMenuItem tappedDragFillContextMenu = this._dragFillSmartTag.GetTappedDragFillContextMenu(point);
                                if (tappedDragFillContextMenu != null)
                                {
                                    tappedDragFillContextMenu.Click();
                                }
                            }
                            else
                            {
                                this.CloseDragFillPopup();
                                if (!this.IsEditing)
                                {
                                    this.UnSelectedAllFloatingObjects();
                                    this.StartTapSelectCells();
                                    this.EndTouchSelectingCells();
                                    this.RaiseTouchCellClick(savedHitTestInformation);
                                }
                            }
                            break;
                        }
                        this._dragFillSmartTag.DragFillSmartTagTap(point);
                    }
                    break;

                case HitTestType.FloatingObject:
                    if (!this.IsWorking)
                    {
                        // hdt 添加判断
                        bool flag2 = false;
                        FloatingObject obj = savedHitTestInformation.FloatingObjectInfo.FloatingObject;
                        if (obj != null)
                        {
                            bool flag9 = obj.Locked || Worksheet.Protect;
                            if (!obj.IsSelected && !flag9)
                            {
                                UnSelectedAllFloatingObjects();
                                obj.IsSelected = true;
                                flag2 = true;
                            }
                        }

                        if (!flag2)
                        {
                            this.RaiseTouchToolbarOpeningEvent(point, TouchToolbarShowingArea.FloatingObjects);
                        }
                    }
                    goto Label_0568;

                default:
                    goto Label_0568;
            }
            if (((this._dataValidationListPopUp != null) && this._dataValidationListPopUp.IsOpen) && (this._dataValidationPopUpHelper != null))
            {
                this._dataValidationPopUpHelper.Close();
                if (!this.IsEditing)
                {
                    this.UnSelectedAllFloatingObjects();
                    this.StartTapSelectCells();
                    this.EndTouchSelectingCells();
                    this.RaiseTouchCellClick(savedHitTestInformation);
                }
            }
            if (((this._filterPopup != null) && this._filterPopup.IsOpen) && (this._filterPopupHelper != null))
            {
                this._filterPopupHelper.Close();
                if (!this.IsEditing)
                {
                    this.UnSelectedAllFloatingObjects();
                    this.StartTapSelectCells();
                    this.EndTouchSelectingCells();
                    this.RaiseTouchCellClick(savedHitTestInformation);
                }
            }
            else if (!this.IsEditing)
            {
                if (this.TapInSelection(point))
                {
                    FloatingObject[] allSelectedFloatingObjects = this.GetAllSelectedFloatingObjects();
                    if ((allSelectedFloatingObjects != null) && (allSelectedFloatingObjects.Length > 0))
                    {
                        this.UnSelectedAllFloatingObjects();
                        this.StartTapSelectCells();
                        this.EndTouchSelectingCells();
                        this.RaiseTouchCellClick(savedHitTestInformation);
                        this.UpdateTouchSelectionGripper();
                    }
                    else
                    {
                        TouchToolbarShowingArea cells = TouchToolbarShowingArea.Cells;
                        if (this.IsEntrieColumnSelection() && this.IsEntrieRowSelection())
                        {
                            cells = TouchToolbarShowingArea.Cells;
                        }
                        else if (this.IsEntrieColumnSelection())
                        {
                            cells = TouchToolbarShowingArea.Columns;
                        }
                        else if (this.IsEntrieRowSelection())
                        {
                            cells = TouchToolbarShowingArea.Rows;
                        }
                        if (this.IsEntrieColumnSelection() && this.IsEntrieRowSelection())
                        {
                            this.StartTapSelectCells();
                            this.EndTouchSelectingCells();
                            this.RaiseTouchCellClick(savedHitTestInformation);
                            this.UpdateTouchSelectionGripper();
                        }
                        else
                        {
                            this.RaiseTouchToolbarOpeningEvent(point, cells);
                        }
                    }
                }
                else if (this._formulaSelectionFeature.IsSelectionBegined)
                {
                    this._formulaSelectionFeature.TouchSelect(SheetArea.Cells);
                }
                else
                {
                    this.StartTapSelectCells();
                    this.EndTouchSelectingCells();
                    this.RaiseTouchCellClick(savedHitTestInformation);
                }
            }
            else if (this._formulaSelectionFeature.IsSelectionBegined)
            {
                this._formulaSelectionFeature.TouchSelect(SheetArea.Cells);
            }
            this.UnSelectedAllFloatingObjects();
        Label_0568:
            if (!this.CanSelectFormula)
            {
                this.FocusInternal();
            }
        }

        internal void ProcessTextInput(string c, bool replace, bool justInputText = false)
        {
            if (!justInputText)
            {
                bool flag;
                bool flag2;
                KeyboardHelper.GetMetaKeyState(out flag, out flag2);
                if (flag2)
                {
                    return;
                }
            }
            if (this.IsEditing)
            {
                GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(this.GetActiveRowViewportIndex(), this.GetActiveColumnViewportIndex());
                if (viewportRowsPresenter != null)
                {
                    viewportRowsPresenter.SendFirstKey(c, replace);
                }
            }
        }

        /// <summary>
        /// Occurs when touch free drag happening
        /// </summary>
        /// <param name="startPoint">The start point which the touch action started</param>
        /// <param name="currentPoint">The current point</param>
        /// <param name="deltaPoint">The offset of the current point and the previous point</param>
        /// <param name="orientation">The orientation of the drag move</param>
        internal virtual void ProcessTouchFreeDrag(Windows.Foundation.Point startPoint, Windows.Foundation.Point currentPoint, Windows.Foundation.Point deltaPoint, DragOrientation orientation)
        {
            this.MousePosition = currentPoint;
            if (this.IsTouching)
            {
                this.HideMouseCursor();
                if (this.IsTouchDragFilling)
                {
                    this.ContinueTouchDragFill();
                }
                else if (this.IsTouchDrapDropping)
                {
                    this.ContinueTouchDragDropping();
                }
                else if (this.FSelectionFeature.IsDragging)
                {
                    this.FSelectionFeature.ContinueDragging();
                }
                else if (this.IsTouchSelectingCells)
                {
                    this.ContinueTouchSelectingCells(currentPoint);
                }
                else if (this._IsTouchStartColumnSelecting)
                {
                    if (!this.StopCellEditing(false))
                    {
                        return;
                    }
                    this.UnSelectedAllFloatingObjects();
                    this.StartColumnSelecting();
                    this._IsTouchStartColumnSelecting = false;
                }
                else if (this.IsTouchResizingColumns)
                {
                    this.ContinueTouchColumnResizing();
                }
                else if (this._IsTouchStartRowSelecting)
                {
                    if (!this.StopCellEditing(false))
                    {
                        return;
                    }
                    this.UnSelectedAllFloatingObjects();
                    this.StartRowsSelecting();
                    this._IsTouchStartRowSelecting = false;
                }
                else if (this.IsTouchSelectingColumns)
                {
                    this.ContinueColumnSelecting();
                }
                else if (this.IsTouchResizingRows)
                {
                    this.ContinueTouchRowResizing();
                }
                else if (this.IsTouchSelectingRows)
                {
                    this.ContinueRowSelecting();
                }
                HitTestInformation information = this._touchStartHitTestInfo;
                if (((information.HitTestType == HitTestType.FloatingObject) && (information.FloatingObjectInfo != null)) && ((information.FloatingObjectInfo.FloatingObject != null) && information.FloatingObjectInfo.FloatingObject.IsSelected))
                {
                    if (this.IsTouchingMovingFloatingObjects)
                    {
                        this.ContinueFloatingObjectsMoving();
                    }
                    else if (this.IsTouchingResizingFloatingObjects)
                    {
                        this.ContinueFloatingObjectsResizing();
                    }
                    else if (information.FloatingObjectInfo.InMoving)
                    {
                        this.StartFloatingObjectsMoving();
                    }
                    else if (((information.FloatingObjectInfo.InBottomNESWResize || information.FloatingObjectInfo.InBottomNSResize) || (information.FloatingObjectInfo.InBottomNWSEResize || information.FloatingObjectInfo.InLeftWEResize)) || ((information.FloatingObjectInfo.InRightWEResize || information.FloatingObjectInfo.InTopNESWResize) || (information.FloatingObjectInfo.InTopNSResize || information.FloatingObjectInfo.InTopNWSEResize)))
                    {
                        this.StartFloatingObjectsResizing();
                    }
                }
            }
        }

        /// <summary>
        /// Occurs when touch holding happening
        /// </summary>
        /// <param name="point">The current point related to SheetView</param>
        internal virtual void ProcessTouchHold(Windows.Foundation.Point point)
        {
        }

        private void RaiseCellClick(PointerMouseRoutedEventArgs e, MouseButtonType button)
        {
            if ((this.CellClick != null) && (this._eventSuspended == 0))
            {
                Windows.Foundation.Point position = e.GetPosition(this);
                HitTestInformation information = this.HitTest(position.X, position.Y);
                CellClickEventArgs args = null;
                Windows.Foundation.Point point2 = new Windows.Foundation.Point(-1.0, -1.0);
                if (information.HitTestType == HitTestType.Viewport)
                {
                    args = this.CreateCellClickEventArgs(information.ViewportInfo.Row, information.ViewportInfo.Column, this.Worksheet.SpanModel, SheetArea.Cells, button);
                    point2 = new Windows.Foundation.Point((double)information.ViewportInfo.Row, (double)information.ViewportInfo.Column);
                }
                else if (information.HitTestType == HitTestType.RowHeader)
                {
                    args = this.CreateCellClickEventArgs(information.HeaderInfo.Row, information.HeaderInfo.Column, this.Worksheet.RowHeaderSpanModel, SheetArea.CornerHeader | SheetArea.RowHeader, button);
                    point2 = new Windows.Foundation.Point((double)information.HeaderInfo.Row, (double)information.HeaderInfo.Column);
                }
                else if (information.HitTestType == HitTestType.ColumnHeader)
                {
                    args = this.CreateCellClickEventArgs(information.HeaderInfo.Row, information.HeaderInfo.Column, this.Worksheet.ColumnHeaderSpanModel, SheetArea.ColumnHeader, button);
                    point2 = new Windows.Foundation.Point((double)information.HeaderInfo.Row, (double)information.HeaderInfo.Column);
                }
                if (((args != null) && (point2.X != -1.0)) && ((point2.Y != -1.0) && point2.Equals(this._lastClickLocation)))
                {
                    this.CellClick(this, args);
                }
            }
        }

        private void RaiseCellDoubleClick(Windows.Foundation.Point point)
        {
            if ((this.CellDoubleClick != null) && (this._eventSuspended == 0))
            {
                HitTestInformation information = this.HitTest(point.X, point.Y);
                CellDoubleClickEventArgs args = null;
                if (information.HitTestType == HitTestType.Viewport)
                {
                    args = new CellDoubleClickEventArgs(SheetArea.Cells, information.ViewportInfo.Row, information.ViewportInfo.Column);
                }
                else if (information.HitTestType == HitTestType.RowHeader)
                {
                    args = new CellDoubleClickEventArgs(SheetArea.CornerHeader | SheetArea.RowHeader, information.HeaderInfo.Row, information.HeaderInfo.Column);
                }
                else if (information.HitTestType == HitTestType.ColumnHeader)
                {
                    args = new CellDoubleClickEventArgs(SheetArea.ColumnHeader, information.HeaderInfo.Row, information.HeaderInfo.Column);
                }
                if (args != null)
                {
                    this.CellDoubleClick(this, args);
                }
            }
        }

        internal string RaiseCellTextRendering(int row, int column, string text)
        {
            if (this.CellTextRendering != null)
            {
                CellTextRenderingEventArgs args = new CellTextRenderingEventArgs(row, column, text);
                this.CellTextRendering(this, args);
                return args.CellText;
            }
            return text;
        }

        internal object RaiseCellValueApplying(int row, int column, object value)
        {
            if (this.CellValueApplying != null)
            {
                CellValueApplyingEventArgs args = new CellValueApplyingEventArgs(row, column, value);
                this.CellValueApplying(this, args);
                return args.CellValue;
            }
            return value;
        }

        internal void RaiseClipboardChanged()
        {
            if ((this.ClipboardChanged != null) && (this._eventSuspended == 0))
            {
                this.ClipboardChanged(this, EventArgs.Empty);
            }
        }

        internal void RaiseClipboardChanging()
        {
            if ((this.ClipboardChanging != null) && (this._eventSuspended == 0))
            {
                this.ClipboardChanging(this, EventArgs.Empty);
            }
        }

        internal void RaiseClipboardPasted(Dt.Cells.Data.Worksheet sourceSheet, CellRange sourceRange, Dt.Cells.Data.Worksheet worksheet, CellRange cellRange, ClipboardPasteOptions pastOption)
        {
            if ((this.ClipboardPasted != null) && (this._eventSuspended == 0))
            {
                this.ClipboardPasted(this, new ClipboardPastedEventArgs(sourceSheet, sourceRange, worksheet, cellRange, pastOption));
            }
        }

        internal bool RaiseClipboardPasting(Dt.Cells.Data.Worksheet sourceSheet, CellRange sourceRange, Dt.Cells.Data.Worksheet worksheet, CellRange cellRange, ClipboardPasteOptions pastOption, bool isCutting, out ClipboardPasteOptions newPastOption)
        {
            newPastOption = pastOption;
            if ((this.ClipboardPasting != null) && (this._eventSuspended == 0))
            {
                ClipboardPastingEventArgs args = new ClipboardPastingEventArgs(sourceSheet, sourceRange, worksheet, cellRange, pastOption, isCutting);
                this.ClipboardPasting(this, args);
                newPastOption = args.PasteOption;
                if (args.Cancel)
                {
                    return true;
                }
            }
            return false;
        }

        internal void RaiseColumnWidthChanged(int[] columnList, bool header)
        {
            if ((this.ColumnWidthChanged != null) && (this._eventSuspended == 0))
            {
                this.ColumnWidthChanged(this, new ColumnWidthChangedEventArgs(columnList, header));
            }
        }

        internal bool RaiseColumnWidthChanging(int[] columnList, bool header)
        {
            if ((this.ColumnWidthChanging != null) && (this._eventSuspended == 0))
            {
                ColumnWidthChangingEventArgs args = new ColumnWidthChangingEventArgs(columnList, header);
                this.ColumnWidthChanging(this, args);
                if (args.Cancel)
                {
                    return true;
                }
            }
            return false;
        }

        internal bool RaiseDataValidationListPopupOpening(int row, int column)
        {
            if (this.DataValidationListPopupOpening != null)
            {
                CellCancelEventArgs args = new CellCancelEventArgs(row, column);
                this.DataValidationListPopupOpening(this, args);
                return args.Cancel;
            }
            return false;
        }

        internal bool RaiseDragDropBlock(int fromRow, int fromColumn, int toRow, int toColumn, int rowCount, int columnCount, bool copy, bool insert, CopyToOption copyOption, out CopyToOption newCopyOption)
        {
            newCopyOption = copyOption;
            if ((this.DragDropBlock != null) && (this._eventSuspended == 0))
            {
                DragDropBlockEventArgs args = new DragDropBlockEventArgs(fromRow, fromColumn, toRow, toColumn, rowCount, columnCount, copy, insert, copyOption);
                this.DragDropBlock(this, args);
                newCopyOption = args.CopyOption;
                if (args.Cancel)
                {
                    return true;
                }
            }
            return false;
        }

        internal void RaiseDragDropBlockCompleted(int fromRow, int fromColumn, int toRow, int toColumn, int rowCount, int columnCount, bool copy, bool insert, CopyToOption copyOption)
        {
            if ((this.DragDropBlockCompleted != null) && (this._eventSuspended == 0))
            {
                this.DragDropBlockCompleted(this, new DragDropBlockCompletedEventArgs(fromRow, fromColumn, toRow, toColumn, rowCount, columnCount, copy, insert, copyOption));
            }
        }

        internal bool RaiseDragFillBlock(CellRange fillRange, FillDirection fillDirection, AutoFillType fillType)
        {
            if ((this.DragFillBlock != null) && (this._eventSuspended == 0))
            {
                DragFillBlockEventArgs args = new DragFillBlockEventArgs(fillRange, fillDirection, fillType);
                this.DragFillBlock(this, args);
                if (args.Cancel)
                {
                    return true;
                }
            }
            return false;
        }

        internal void RaiseDragFillBlockCompleted(CellRange fillRange, FillDirection fillDirection, AutoFillType fillType)
        {
            if ((this.DragFillBlockCompleted != null) && (this._eventSuspended == 0))
            {
                this.DragFillBlockCompleted(this, new DragFillBlockCompletedEventArgs(fillRange, fillDirection, fillType));
            }
        }

        internal void RaiseEditChange(int row, int column)
        {
            if ((this.EditChange != null) && (this._eventSuspended == 0))
            {
                this.EditChange(this, new EditCellEventArgs(row, column));
            }
        }

        internal void RaiseEditEnd(int row, int column)
        {
            if ((this.EditEnd != null) && (this._eventSuspended == 0))
            {
                this.EditEnd(this, new EditCellEventArgs(row, column));
            }
        }

        internal bool RaiseEditStarting(int row, int column)
        {
            if ((this.EditStarting != null) && (this._eventSuspended == 0))
            {
                EditCellStartingEventArgs args = new EditCellStartingEventArgs(row, column);
                this.EditStarting(this, args);
                if (args.Cancel)
                {
                    return true;
                }
            }
            return false;
        }

        internal void RaiseEnterCell(int row, int column)
        {
            if ((this.EnterCell != null) && (this._eventSuspended == 0))
            {
                EnterCellEventArgs args = new EnterCellEventArgs(row, column);
                this.EnterCell(this, args);
            }
        }

        /// <summary>
        /// Raises the error.
        /// </summary>
        /// <param name="row">The row</param>
        /// <param name="column">The column</param>
        /// <param name="errorMessage">The error message</param>
        /// <param name="exception">The exception</param>
        /// <returns>Return if ignore the error</returns>
        internal bool RaiseError(int row, int column, string errorMessage, Exception exception)
        {
            if ((this.Error != null) && (this._eventSuspended == 0))
            {
                UserErrorEventArgs args = new UserErrorEventArgs(this, row, column, errorMessage, exception);
                this.Error(this, args);
                return args.Cancel;
            }
            return false;
        }

        internal bool RaiseFilterPopupOpening(int row, int column)
        {
            if (this.FilterPopupOpening != null)
            {
                CellCancelEventArgs args = new CellCancelEventArgs(row, column);
                this.FilterPopupOpening(this, args);
                return args.Cancel;
            }
            return false;
        }

        internal void RaiseFloatingObjectPasted(Dt.Cells.Data.Worksheet worksheet, FloatingObject pastedObject)
        {
            if ((this.FloatingObjectPasted != null) && (this._eventSuspended == 0))
            {
                this.FloatingObjectPasted(this, new FloatingObjectPastedEventArgs(worksheet, pastedObject));
            }
        }

        internal void RaiseInvalidOperation(string message, string operation = null, object context = null)
        {
            if ((this.InvalidOperation != null) && (this._eventSuspended == 0))
            {
                InvalidOperationEventArgs args = new InvalidOperationEventArgs(message, operation, context);
                this.InvalidOperation(this, args);
            }
        }

        internal bool RaiseLeaveCell(int row, int column, int toRow, int toColumn)
        {
            if ((this.LeaveCell != null) && (this._eventSuspended == 0))
            {
                LeaveCellEventArgs args = new LeaveCellEventArgs(row, column, toRow, toColumn);
                this.LeaveCell(this, args);
                if (args.Cancel)
                {
                    return true;
                }
            }
            return false;
        }

        private void RaiseLeftChanged(int oldIndex, int newIndex, int viewportIndex)
        {
            if ((this.LeftColumnChanged != null) && (this._eventSuspended == 0))
            {
                this.LeftColumnChanged(this, new ViewportEventArgs(oldIndex, newIndex, viewportIndex));
            }
        }

        internal void RaiseRangeFiltered(int column, object[] filterValues)
        {
            if ((this.RangeFiltered != null) && (this._eventSuspended == 0))
            {
                this.RangeFiltered(this, new RangeFilteredEventArgs(column, filterValues));
            }
        }

        internal bool RaiseRangeFiltering(int column, object[] filterValues)
        {
            if ((this.RangeFiltering != null) && (this._eventSuspended == 0))
            {
                RangeFilteringEventArgs args = new RangeFilteringEventArgs(column, filterValues);
                this.RangeFiltering(this, args);
                if (args.Cancel)
                {
                    return true;
                }
            }
            return false;
        }

        internal void RaiseRangeGroupStateChanged(bool isRowGroup, int index, int level)
        {
            if ((this.RangeGroupStateChanged != null) && (this._eventSuspended == 0))
            {
                this.RangeGroupStateChanged(this, new RangeGroupStateChangedEventArgs(isRowGroup, index, level));
            }
        }

        internal bool RaiseRangeGroupStateChanging(bool isRowGroup, int index, int level)
        {
            if ((this.RangeGroupStateChanging != null) && (this._eventSuspended == 0))
            {
                RangeGroupStateChangingEventArgs args = new RangeGroupStateChangingEventArgs(isRowGroup, index, level);
                this.RangeGroupStateChanging(this, args);
                if (args.Cancel)
                {
                    return true;
                }
            }
            return false;
        }

        internal void RaiseRangeSorted(int column, bool isAscending)
        {
            if ((this.RangeSorted != null) && (this._eventSuspended == 0))
            {
                this.RangeSorted(this, new RangeSortedEventArgs(column, isAscending));
            }
        }

        internal bool RaiseRangeSorting(int column, bool isAscending)
        {
            if ((this.RangeSorting != null) && (this._eventSuspended == 0))
            {
                RangeSortingEventArgs args = new RangeSortingEventArgs(column, isAscending);
                this.RangeSorting(this, args);
                if (args.Cancel)
                {
                    return true;
                }
            }
            return false;
        }

        internal void RaiseRowHeightChanged(int[] rowList, bool header)
        {
            if ((this.RowHeightChanged != null) && (this._eventSuspended == 0))
            {
                this.RowHeightChanged(this, new RowHeightChangedEventArgs(rowList, header));
            }
        }

        internal bool RaiseRowHeightChanging(int[] rowList, bool header)
        {
            if ((this.RowHeightChanging != null) && (this._eventSuspended == 0))
            {
                RowHeightChangingEventArgs args = new RowHeightChangingEventArgs(rowList, header);
                this.RowHeightChanging(this, args);
                if (args.Cancel)
                {
                    return true;
                }
            }
            return false;
        }

        internal void RaiseSelectionChanged()
        {
            if ((this.SelectionChanged != null) && (this._eventSuspended == 0))
            {
                this.SelectionChanged(this, EventArgs.Empty);
            }
        }

        internal bool RaiseSelectionChanging(CellRange[] oldSelection, CellRange[] newSelection)
        {
            if (((this.SelectionChanging != null) && (this._eventSuspended == 0)) && !IsRangesEqual(oldSelection, newSelection))
            {
                this.SelectionChanging(this, new SelectionChangingEventArgs(oldSelection, newSelection));
                return true;
            }
            return false;
        }

        internal void RaiseSheetTabClick(int sheetTabIndex)
        {
            if ((this.SheetTabClick != null) && (this._eventSuspended == 0))
            {
                this.SheetTabClick(this, new SheetTabClickEventArgs(sheetTabIndex));
            }
        }

        internal void RaiseSheetTabDoubleClick(int sheetTabIndex)
        {
            if ((this.SheetTabDoubleClick != null) && (this._eventSuspended == 0))
            {
                this.SheetTabDoubleClick(this, new SheetTabDoubleClickEventArgs(sheetTabIndex));
            }
        }

        private void RaiseTopChanged(int oldIndex, int newIndex, int viewportIndex)
        {
            if ((this.TopRowChanged != null) && (this._eventSuspended == 0))
            {
                this.TopRowChanged(this, new ViewportEventArgs(oldIndex, newIndex, viewportIndex));
            }
        }

        internal void RaiseTouchCellClick(HitTestInformation hi)
        {
            if ((this.CellClick != null) && (this._eventSuspended == 0))
            {
                CellClickEventArgs args = null;
                Windows.Foundation.Point point = new Windows.Foundation.Point(-1.0, -1.0);
                if (hi.HitTestType == HitTestType.Viewport)
                {
                    args = this.CreateCellClickEventArgs(hi.ViewportInfo.Row, hi.ViewportInfo.Column, this.Worksheet.SpanModel, SheetArea.Cells, MouseButtonType.Left);
                    point = new Windows.Foundation.Point((double)hi.ViewportInfo.Row, (double)hi.ViewportInfo.Column);
                }
                else if (hi.HitTestType == HitTestType.RowHeader)
                {
                    args = this.CreateCellClickEventArgs(hi.ViewportInfo.Row, hi.ViewportInfo.Column, this.Worksheet.SpanModel, SheetArea.CornerHeader | SheetArea.RowHeader, MouseButtonType.Left);
                    point = new Windows.Foundation.Point((double)hi.HeaderInfo.Row, (double)hi.HeaderInfo.Column);
                }
                else if (hi.HitTestType == HitTestType.ColumnHeader)
                {
                    args = this.CreateCellClickEventArgs(hi.ViewportInfo.Row, hi.ViewportInfo.Column, this.Worksheet.SpanModel, SheetArea.ColumnHeader, MouseButtonType.Left);
                    point = new Windows.Foundation.Point((double)hi.HeaderInfo.Row, (double)hi.HeaderInfo.Column);
                }
                if (((args != null) && (point.X != -1.0)) && (point.Y != -1.0))
                {
                    this.CellClick(this, args);
                }
            }
        }

        internal bool RaiseTouchToolbarOpeningEvent(Windows.Foundation.Point touchPoint, TouchToolbarShowingArea area)
        {
            if ((this.TouchToolbarOpening != null) && (this._eventSuspended == 0))
            {
                TouchToolbarOpeningEventArgs args = new TouchToolbarOpeningEventArgs((int)touchPoint.X, (int)touchPoint.Y, area);
                this.TouchToolbarOpening(this, args);
                return false;
            }
            return true;
        }

        internal void RaiseUserFormulaEntered(int row, int column, string formula)
        {
            if ((this.UserFormulaEntered != null) && (this._eventSuspended == 0))
            {
                if (formula != null)
                {
                    formula = formula.ToUpperInvariant();
                }
                else
                {
                    formula = "";
                }
                this.UserFormulaEntered(this, new UserFormulaEnteredEventArgs(row, column, formula));
            }
        }

        internal void RaiseUserZooming(float oldZoomFactor, float newZoomFactor)
        {
            if ((this.UserZooming != null) && (this._eventSuspended == 0))
            {
                this.UserZooming(this, new ZoomEventArgs(oldZoomFactor, newZoomFactor));
            }
        }

        internal bool RaiseValidationDragDropBlock(int fromRow, int fromColumn, int toRow, int toColumn, int rowCount, int columnCount, bool copy, bool insert, out bool isInValid, out string invalidMessage)
        {
            isInValid = false;
            invalidMessage = "";
            if ((this.ValidationDragDropBlock != null) && (this._eventSuspended == 0))
            {
                ValidationDragDropBlockEventArgs args = new ValidationDragDropBlockEventArgs(fromRow, fromColumn, toRow, toColumn, rowCount, columnCount, copy, insert);
                this.ValidationDragDropBlock(this, args);
                if (args.Handle)
                {
                    isInValid = args.IsInvalid;
                    invalidMessage = args.InvalidMessage;
                    return true;
                }
            }
            return false;
        }

        internal void RaiseValidationError(int row, int column, ValidationErrorEventArgs eventArgs)
        {
            if ((this.ValidationError != null) && (this._eventSuspended == 0))
            {
                this.ValidationError(this, eventArgs);
            }
        }

        internal bool RaiseValidationPasting(Dt.Cells.Data.Worksheet sourceSheet, CellRange sourceRange, Dt.Cells.Data.Worksheet worksheet, CellRange cellRange, CellRange pastingRange, bool isCutting, out bool isInvalid, out string invalidMessage)
        {
            isInvalid = false;
            invalidMessage = "";
            if ((this.ValidationPasting == null) || (this._eventSuspended != 0))
            {
                return false;
            }
            ValidationPastingEventArgs args = new ValidationPastingEventArgs(sourceSheet, sourceRange, worksheet, cellRange, pastingRange, isCutting);
            this.ValidationPasting(this, args);
            if (args.Handle)
            {
                isInvalid = args.IsInvalid;
                invalidMessage = args.InvalidMessage;
            }
            return args.Handle;
        }

        internal void RaiseValueChanged(int row, int column)
        {
            if ((this.ValueChanged != null) && (this._eventSuspended == 0))
            {
                this.ValueChanged(this, new CellEventArgs(row, column));
            }
        }

        internal virtual void ReadXmlInternal(XmlReader reader)
        {
            Action action = null;
            Action action2 = null;
            Action action3 = null;
            switch (reader.Name)
            {
                case "AllowUserFormula":
                    this._allowUserFormula = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "AllowUndo":
                    this._allowUndo = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "FreezeLineStyle":
                    this._freezeLineStyle = Serializer.DeserializeObj(typeof(Style), reader) as Style;
                    return;

                case "TrailingFreezeLineStyle":
                    this._trailingFreezeLineStyle = Serializer.DeserializeObj(typeof(Style), reader) as Style;
                    return;

                case "ShowFreezeLine":
                    this._showFreezeLine = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "AllowUserZoom":
                    this._allowUserZoom = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "AutoClipboard":
                    this._autoClipboard = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "ClipBoardOptions":
                    this._clipBoardOptions = (ClipboardPasteOptions)Serializer.DeserializeObj(typeof(ClipboardPasteOptions), reader);
                    return;

                case "AllowEditOverflow":
                    this._allowEditOverflow = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "Protect":
                    this._protect = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "AllowDragDrop":
                    this._allowDragDrop = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "ShowRowRangeGroup":
                    this._showRowRangeGroup = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "ShowColumnRangeGroup":
                    this._showColumnRangeGroup = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "AllowDragFill":
                    this._allowDragFill = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "CanTouchMultiSelect":
                    this._canTouchMultiSelect = (bool)((bool)Serializer.DeserializeObj(typeof(bool), reader));
                    return;

                case "ResizeZeroIndicator":
                    this._resizeZeroIndicator = (Dt.Cells.UI.ResizeZeroIndicator)Serializer.DeserializeObj(typeof(Dt.Cells.UI.ResizeZeroIndicator), reader);
                    return;

                case "RangeGroupBackground":
                    if (action == null)
                    {
                        action = delegate
                        {
                            this._rangeGroupBackground = (Brush)Serializer.DeserializeObj(typeof(Brush), reader);
                        };
                    }
                    Dt.Cells.Data.UIAdaptor.InvokeSync(action);
                    return;

                case "RangeGroupBorderBrush":
                    if (action2 == null)
                    {
                        action2 = delegate
                        {
                            this._rangeGroupBorderBrush = (Brush)Serializer.DeserializeObj(typeof(Brush), reader);
                        };
                    }
                    Dt.Cells.Data.UIAdaptor.InvokeSync(action2);
                    return;

                case "RangeGroupLineStroke":
                    if (action3 == null)
                    {
                        action3 = delegate
                        {
                            this._rangeGroupLineStroke = (Brush)Serializer.DeserializeObj(typeof(Brush), reader);
                        };
                    }
                    Dt.Cells.Data.UIAdaptor.InvokeSync(action3);
                    return;
            }
        }

        internal void RefreshCellAreaViewport(int row, int column, int rowCount, int columnCount)
        {
            this.RefreshViewportCells(this._viewportPresenters, 0, 0, rowCount, columnCount);
        }

        internal void RefreshCells(GcViewport viewport, int row, int column, int rowCount, int columnCount)
        {
            foreach (RowLayout layout in viewport.GetRowLayoutModel())
            {
                if ((row <= layout.Row) && (layout.Row < (row + rowCount)))
                {
                    RowPresenter presenter = viewport.GetRow(layout.Row);
                    if (presenter != null)
                    {
                        foreach (CellPresenterBase base2 in presenter.Children)
                        {
                            if ((column <= base2.Column) && (base2.Column < (column + columnCount)))
                            {
                                base2.Invalidate();
                            }
                        }
                    }
                }
            }
        }

        internal void RefreshDataValidationInvalidCircles()
        {
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if ((viewport != null) && (viewport.SheetArea == SheetArea.Cells))
                        {
                            viewport.RefreshDataValidationInvalidCircles();
                        }
                    }
                }
            }
        }

        private void RefreshDragDropIndicator(int dragToRowViewportIndex, int dragToColumnViewportIndex, int dragToRow, int dragToColumn)
        {
            RowLayout layout = this.GetViewportRowLayoutModel(dragToRowViewportIndex).FindRow(dragToRow);
            ColumnLayout layout2 = this.GetViewportColumnLayoutModel(dragToColumnViewportIndex).FindColumn(dragToColumn);
            if ((layout != null) && (layout2 != null))
            {
                this._dragDropInsertIndicator.Visibility = Visibility.Collapsed;
                int row = this._dragDropFromRange.Row;
                int column = this._dragDropFromRange.Column;
                int rowCount = this._dragDropFromRange.RowCount;
                int columnCount = this._dragDropFromRange.ColumnCount;
                int num5 = (row < 0) ? -1 : Math.Max(0, Math.Min((int)(this.Worksheet.RowCount - rowCount), (int)(dragToRow - this._dragDropRowOffset)));
                int num6 = (column < 0) ? -1 : Math.Max(0, Math.Min((int)(this.Worksheet.ColumnCount - columnCount), (int)(dragToColumn - this._dragDropColumnOffset)));
                int index = (num6 < 0) ? 0 : num6;
                int num8 = (num6 < 0) ? (this.Worksheet.ColumnCount - 1) : ((index + columnCount) - 1);
                int num9 = (num5 < 0) ? 0 : num5;
                int num10 = (num5 < 0) ? (this.Worksheet.RowCount - 1) : ((num9 + rowCount) - 1);
                int columnViewportIndex = dragToColumnViewportIndex;
                int num12 = dragToColumnViewportIndex;
                int rowViewportIndex = dragToRowViewportIndex;
                int num14 = dragToRowViewportIndex;
                int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
                int rowViewportCount = this.GetViewportInfo().RowViewportCount;
                if ((this.Worksheet.FrozenColumnCount > 0) && ((dragToColumnViewportIndex == -1) || (dragToColumnViewportIndex == 0)))
                {
                    if (index < this.Worksheet.FrozenColumnCount)
                    {
                        columnViewportIndex = -1;
                    }
                    if (num8 < this.Worksheet.FrozenColumnCount)
                    {
                        num12 = -1;
                    }
                    else if (((columnViewportCount == 1) && (this.Worksheet.FrozenTrailingColumnCount > 0)) && (num8 >= (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount)))
                    {
                        num12 = 1;
                    }
                    else
                    {
                        num12 = 0;
                    }
                }
                else if ((this.Worksheet.FrozenTrailingColumnCount > 0) && ((dragToColumnViewportIndex == (columnViewportCount - 1)) || (dragToColumnViewportIndex == columnViewportCount)))
                {
                    if (index < (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount))
                    {
                        if (((columnViewportCount == 1) && (this.Worksheet.FrozenColumnCount > 0)) && (index < this.Worksheet.FrozenColumnCount))
                        {
                            columnViewportIndex = -1;
                        }
                        else
                        {
                            columnViewportIndex = columnViewportCount - 1;
                        }
                        if (num8 < (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount))
                        {
                            num12 = columnViewportCount - 1;
                        }
                        else
                        {
                            num12 = columnViewportCount;
                        }
                    }
                    else
                    {
                        columnViewportIndex = columnViewportCount;
                        num12 = columnViewportCount;
                    }
                }
                if ((this.Worksheet.FrozenRowCount > 0) && ((dragToRowViewportIndex == -1) || (dragToRowViewportIndex == 0)))
                {
                    if (num5 < this.Worksheet.FrozenRowCount)
                    {
                        rowViewportIndex = -1;
                    }
                    if (num10 < this.Worksheet.FrozenRowCount)
                    {
                        num14 = -1;
                    }
                    else if (((rowViewportCount == 1) && (this.Worksheet.FrozenTrailingRowCount > 0)) && (num10 >= (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount)))
                    {
                        num14 = 1;
                    }
                    else
                    {
                        num14 = 0;
                    }
                }
                else if ((this.Worksheet.FrozenTrailingRowCount > 0) && ((dragToRowViewportIndex == (rowViewportCount - 1)) || (dragToRowViewportIndex == rowViewportCount)))
                {
                    if (num9 < (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount))
                    {
                        if (((rowViewportCount == 1) && (this.Worksheet.FrozenRowCount > 0)) && (num9 < this.Worksheet.FrozenRowCount))
                        {
                            rowViewportIndex = -1;
                        }
                        else
                        {
                            rowViewportIndex = rowViewportCount - 1;
                        }
                        if (num10 < (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount))
                        {
                            num14 = rowViewportCount - 1;
                        }
                        else
                        {
                            num14 = rowViewportCount;
                        }
                    }
                    else
                    {
                        rowViewportIndex = rowViewportCount;
                        num14 = rowViewportCount;
                    }
                }
                ColumnLayoutModel viewportColumnLayoutModel = this.GetViewportColumnLayoutModel(columnViewportIndex);
                ColumnLayoutModel model2 = viewportColumnLayoutModel;
                if (num12 != columnViewportIndex)
                {
                    model2 = this.GetViewportColumnLayoutModel(num12);
                }
                RowLayoutModel viewportRowLayoutModel = this.GetViewportRowLayoutModel(rowViewportIndex);
                RowLayoutModel model4 = viewportRowLayoutModel;
                if (num14 != rowViewportIndex)
                {
                    model4 = this.GetViewportRowLayoutModel(num14);
                }
                if ((((viewportRowLayoutModel != null) && (viewportRowLayoutModel.Count > 0)) && ((model4 != null) && (model4.Count > 0))) && (((viewportColumnLayoutModel != null) && (viewportColumnLayoutModel.Count > 0)) && ((model2 != null) && (model2.Count > 0))))
                {
                    double d = -1.0;
                    double num18 = -1.0;
                    double num19 = -1.0;
                    double num20 = -1.0;
                    ColumnLayout layout3 = viewportColumnLayoutModel.Find(index);
                    ColumnLayout layout4 = model2.Find(num8);
                    if (layout3 != null)
                    {
                        d = layout3.X;
                    }
                    else
                    {
                        d = viewportColumnLayoutModel[0].X;
                    }
                    if (layout4 != null)
                    {
                        num19 = layout4.X + layout4.Width;
                    }
                    else
                    {
                        num19 = model2[model2.Count - 1].X + model2[model2.Count - 1].Width;
                    }
                    RowLayout layout5 = viewportRowLayoutModel.Find(num9);
                    RowLayout layout6 = model4.Find(num10);
                    if (layout5 != null)
                    {
                        num18 = layout5.Y;
                    }
                    else
                    {
                        num18 = viewportRowLayoutModel[0].Y;
                    }
                    if (layout6 != null)
                    {
                        num20 = layout6.Y + layout6.Height;
                    }
                    else
                    {
                        num20 = model4[model4.Count - 1].Y + model4[model4.Count - 1].Height;
                    }
                    SheetLayout sheetLayout = this.GetSheetLayout();
                    bool flag = ((index >= viewportColumnLayoutModel[0].Column) && (index <= viewportColumnLayoutModel[viewportColumnLayoutModel.Count - 1].Column)) && this.Worksheet.GetActualColumnVisible(index, SheetArea.Cells);
                    bool flag2 = ((num8 >= model2[0].Column) && (num8 <= model2[model2.Count - 1].Column)) && this.Worksheet.GetActualColumnVisible(num8, SheetArea.Cells);
                    bool flag3 = ((num9 >= viewportRowLayoutModel[0].Row) && (num9 <= viewportRowLayoutModel[viewportRowLayoutModel.Count - 1].Row)) && this.Worksheet.GetActualRowVisible(num9, SheetArea.Cells);
                    bool flag4 = ((num10 >= model4[0].Row) && (num10 <= model4[model4.Count - 1].Row)) && this.Worksheet.GetActualRowVisible(num10, SheetArea.Cells);
                    double num21 = sheetLayout.GetViewportX(num12) + sheetLayout.GetViewportWidth(num12);
                    double num22 = sheetLayout.GetViewportY(num14) + sheetLayout.GetViewportHeight(num14);
                    if (flag2 && (num21 < num19))
                    {
                        flag2 = false;
                    }
                    if (flag4 && (num22 < num20))
                    {
                        flag4 = false;
                    }
                    double num23 = Math.Floor((double)((Math.Min(num21, num19) - d) + 3.0));
                    double num24 = Math.Floor((double)((Math.Min(num22, num20) - num18) + 3.0));
                    d -= 2.0;
                    num18 -= 2.0;
                    Canvas.SetLeft(this._dragDropIndicator, Math.Floor(d));
                    Canvas.SetTop(this._dragDropIndicator, Math.Floor(num18));
                    this._dragDropIndicator.Visibility = Visibility.Visible;
                    this._dragDropIndicator.Height = num24;
                    this._dragDropIndicator.Width = num23;
                    double x = (index <= viewportColumnLayoutModel[0].Column) ? 2.0 : 0.0;
                    double y = (num9 <= viewportRowLayoutModel[0].Row) ? 2.0 : 0.0;
                    double width = 3.0;
                    Windows.Foundation.Rect empty = Windows.Foundation.Rect.Empty;
                    Windows.Foundation.Rect rect2 = Windows.Foundation.Rect.Empty;
                    Windows.Foundation.Rect rect3 = Windows.Foundation.Rect.Empty;
                    Windows.Foundation.Rect rect4 = Windows.Foundation.Rect.Empty;
                    if (flag)
                    {
                        empty = new Windows.Foundation.Rect(x, y, width - x, num24 - y);
                    }
                    if (flag3)
                    {
                        rect2 = new Windows.Foundation.Rect(x, y, num23 - x, width - y);
                    }
                    if (flag2)
                    {
                        rect3 = new Windows.Foundation.Rect(num23 - width, y, width, num24 - y);
                    }
                    if (flag4)
                    {
                        rect4 = new Windows.Foundation.Rect(x, num24 - width, num23 - x, width);
                    }
                    if (this._dragDropIndicator.Children.Count >= 8)
                    {
                        if (flag)
                        {
                            RectangleGeometry geometry = new RectangleGeometry();
                            geometry.Rect = empty;
                            ((UIElement)_dragDropIndicator.Children[0]).Clip = geometry;
                            RectangleGeometry geometry2 = new RectangleGeometry();
                            geometry2.Rect = empty;
                            ((UIElement)_dragDropIndicator.Children[4]).Clip = geometry2;
                        }
                        if (flag3)
                        {
                            RectangleGeometry geometry3 = new RectangleGeometry();
                            geometry3.Rect = rect2;
                            ((UIElement)_dragDropIndicator.Children[1]).Clip = geometry3;
                            RectangleGeometry geometry4 = new RectangleGeometry();
                            geometry4.Rect = rect2;
                            ((UIElement)_dragDropIndicator.Children[5]).Clip = geometry4;
                        }
                        if (flag2)
                        {
                            RectangleGeometry geometry5 = new RectangleGeometry();
                            geometry5.Rect = rect3;
                            ((UIElement)_dragDropIndicator.Children[2]).Clip = geometry5;
                            RectangleGeometry geometry6 = new RectangleGeometry();
                            geometry6.Rect = rect3;
                            ((UIElement)_dragDropIndicator.Children[6]).Clip = geometry6;
                        }
                        if (flag4)
                        {
                            RectangleGeometry geometry7 = new RectangleGeometry();
                            geometry7.Rect = rect4;
                            ((UIElement)_dragDropIndicator.Children[3]).Clip = geometry7;
                            RectangleGeometry geometry8 = new RectangleGeometry();
                            geometry8.Rect = rect4;
                            ((UIElement)_dragDropIndicator.Children[7]).Clip = geometry8;
                        }
                    }
                    if (this.ShowDragDropTip)
                    {
                        this.TooltipHelper.ShowTooltip(this.GetRangeString(new CellRange(num5, num6, rowCount, columnCount)), num19 + 2.0, num20 + 5.0);
                    }
                }
            }
        }

        private void RefreshDragDropInsertIndicator(int dragToRowViewportIndex, int dragToColumnViewportIndex, int dragToRow, int dragToColumn)
        {
            RowLayout layout = this.GetViewportRowLayoutModel(dragToRowViewportIndex).FindRow(dragToRow);
            ColumnLayout layout2 = this.GetViewportColumnLayoutModel(dragToColumnViewportIndex).FindColumn(dragToColumn);
            if ((layout != null) && (layout2 != null))
            {
                this._dragDropIndicator.Visibility = Visibility.Collapsed;
                SheetLayout sheetLayout = this.GetSheetLayout();
                int row = this._dragDropFromRange.Row;
                int column = this._dragDropFromRange.Column;
                int rowCount = this._dragDropFromRange.RowCount;
                int columnCount = this._dragDropFromRange.ColumnCount;
                double width = 3.0;
                if ((row < 0) || (column < 0))
                {
                    if (column >= 0)
                    {
                        int num6 = (column < 0) ? 0 : column;
                        int num7 = (column < 0) ? this.Worksheet.ColumnCount : columnCount;
                        double d = layout2.X - (width / 2.0);
                        if (this.MousePosition.X > (layout2.X + (layout2.Width / 2.0)))
                        {
                            d = (layout2.X + layout2.Width) - (width / 2.0);
                            dragToColumn++;
                        }
                        if (d > (sheetLayout.GetViewportX(dragToColumnViewportIndex) + sheetLayout.GetViewportWidth(dragToColumnViewportIndex)))
                        {
                            this._dragDropInsertIndicator.Visibility = Visibility.Collapsed;
                        }
                        else if (((this._isDragCopy && (dragToColumn > num6)) && (dragToColumn < (num6 + num7))) || ((!this._isDragCopy && (dragToColumn >= num6)) && (dragToColumn < (num6 + num7))))
                        {
                            this._dragDropInsertIndicator.Visibility = Visibility.Collapsed;
                        }
                        else
                        {
                            this._dragDropInsertIndicator.Visibility = Visibility.Visible;
                            int rowViewportCount = this.GetViewportInfo().RowViewportCount;
                            double viewportY = 0.0;
                            double num11 = 0.0;
                            if ((this.Worksheet.FrozenRowCount > 0) && ((dragToRowViewportIndex == -1) || (dragToRowViewportIndex == 0)))
                            {
                                viewportY = sheetLayout.GetViewportY(-1);
                                if ((rowViewportCount == 1) && (this.Worksheet.FrozenTrailingRowCount > 0))
                                {
                                    num11 = sheetLayout.GetViewportY(1) + sheetLayout.GetViewportHeight(1);
                                }
                                else
                                {
                                    RowLayoutModel viewportRowLayoutModel = this.GetViewportRowLayoutModel(0);
                                    if ((viewportRowLayoutModel != null) && (viewportRowLayoutModel.Count > 0))
                                    {
                                        RowLayout layout4 = viewportRowLayoutModel[viewportRowLayoutModel.Count - 1];
                                        num11 = Math.Min((double)(layout4.Y + layout4.Height), (double)(sheetLayout.GetViewportY(0) + sheetLayout.GetViewportHeight(0)));
                                    }
                                    else
                                    {
                                        num11 = sheetLayout.GetViewportY(-1) + sheetLayout.GetViewportHeight(-1);
                                    }
                                }
                            }
                            else if ((this.Worksheet.FrozenTrailingRowCount > 0) && ((dragToRowViewportIndex == rowViewportCount) || (dragToRowViewportIndex == (rowViewportCount - 1))))
                            {
                                if ((rowViewportCount == 1) && (this.Worksheet.FrozenRowCount > 0))
                                {
                                    viewportY = sheetLayout.GetViewportY(-1);
                                }
                                else
                                {
                                    viewportY = sheetLayout.GetViewportY(rowViewportCount - 1);
                                }
                                num11 = sheetLayout.GetViewportY(rowViewportCount) + sheetLayout.GetViewportHeight(rowViewportCount);
                            }
                            else
                            {
                                viewportY = sheetLayout.GetViewportY(dragToRowViewportIndex);
                                RowLayoutModel model2 = this.GetViewportRowLayoutModel(dragToRowViewportIndex);
                                if ((model2 != null) && (model2.Count > 0))
                                {
                                    RowLayout layout5 = model2[model2.Count - 1];
                                    num11 = Math.Min((double)(layout5.Y + layout5.Height), (double)(sheetLayout.GetViewportY(dragToRowViewportIndex) + sheetLayout.GetViewportHeight(dragToRowViewportIndex)));
                                }
                                else
                                {
                                    num11 = sheetLayout.GetViewportY(dragToRowViewportIndex) + sheetLayout.GetViewportHeight(dragToRowViewportIndex);
                                }
                            }
                            Canvas.SetLeft(this._dragDropInsertIndicator, Math.Floor(d));
                            Canvas.SetTop(this._dragDropInsertIndicator, Math.Floor(viewportY));
                            double num12 = width * 2.0;
                            double num13 = Math.Floor((double)(num11 - viewportY));
                            this._dragDropInsertIndicator.Width = num12;
                            this._dragDropInsertIndicator.Height = num13;
                            RectangleGeometry geometry = new RectangleGeometry();
                            geometry.Rect = new Windows.Foundation.Rect(0.0, 0.0, width, num13);
                            this._dragDropInsertIndicator.Clip = geometry;
                            if (this.ShowDragDropTip)
                            {
                                this.TooltipHelper.ShowTooltip(this.GetRangeString(new CellRange(-1, dragToColumn, -1, num7)), this.MousePosition.X + 10.0, this._mouseDownPosition.Y + 10.0);
                            }
                        }
                    }
                    else if (row >= 0)
                    {
                        int num14 = (row < 0) ? 0 : row;
                        int num15 = (row < 0) ? this.Worksheet.RowCount : rowCount;
                        double num16 = layout.Y - (width / 2.0);
                        if (this.MousePosition.Y > (layout.Y + (layout.Height / 2.0)))
                        {
                            num16 = (layout.Y + layout.Height) - (width / 2.0);
                            dragToRow++;
                        }
                        if (num16 > (sheetLayout.GetViewportY(dragToRowViewportIndex) + sheetLayout.GetViewportHeight(dragToRowViewportIndex)))
                        {
                            this._dragDropInsertIndicator.Visibility = Visibility.Collapsed;
                        }
                        else if (((this._isDragCopy && (dragToRow > num14)) && (dragToRow < (num14 + num15))) || ((!this._isDragCopy && (dragToRow >= num14)) && (dragToRow < (num14 + num15))))
                        {
                            this._dragDropInsertIndicator.Visibility = Visibility.Collapsed;
                        }
                        else
                        {
                            this._dragDropInsertIndicator.Visibility = Visibility.Visible;
                            int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
                            double viewportX = 0.0;
                            double num19 = 0.0;
                            if ((this.Worksheet.FrozenColumnCount > 0) && ((dragToColumnViewportIndex == -1) || (dragToColumnViewportIndex == 0)))
                            {
                                viewportX = sheetLayout.GetViewportX(-1);
                                if ((columnViewportCount == 1) && (this.Worksheet.FrozenTrailingColumnCount > 0))
                                {
                                    num19 = sheetLayout.GetViewportX(1) + sheetLayout.GetViewportWidth(1);
                                }
                                else
                                {
                                    ColumnLayoutModel viewportColumnLayoutModel = this.GetViewportColumnLayoutModel(0);
                                    if ((viewportColumnLayoutModel != null) && (viewportColumnLayoutModel.Count > 0))
                                    {
                                        ColumnLayout layout6 = viewportColumnLayoutModel[viewportColumnLayoutModel.Count - 1];
                                        num19 = Math.Min((double)(layout6.X + layout6.Width), (double)(sheetLayout.GetViewportX(0) + sheetLayout.GetViewportWidth(0)));
                                    }
                                    else
                                    {
                                        num19 = sheetLayout.GetViewportX(-1) + sheetLayout.GetViewportWidth(-1);
                                    }
                                }
                            }
                            else if ((this.Worksheet.FrozenTrailingColumnCount > 0) && ((dragToColumnViewportIndex == columnViewportCount) || (dragToColumnViewportIndex == (columnViewportCount - 1))))
                            {
                                if ((columnViewportCount == 1) && (this.Worksheet.FrozenColumnCount > 0))
                                {
                                    viewportX = sheetLayout.GetViewportX(-1);
                                }
                                else
                                {
                                    viewportX = sheetLayout.GetViewportX(columnViewportCount - 1);
                                }
                                num19 = sheetLayout.GetViewportX(columnViewportCount) + sheetLayout.GetViewportWidth(columnViewportCount);
                            }
                            else
                            {
                                viewportX = sheetLayout.GetViewportX(dragToColumnViewportIndex);
                                ColumnLayoutModel model4 = this.GetViewportColumnLayoutModel(dragToColumnViewportIndex);
                                if ((model4 != null) && (model4.Count > 0))
                                {
                                    ColumnLayout layout7 = model4[model4.Count - 1];
                                    num19 = Math.Min((double)(layout7.X + layout7.Width), (double)(sheetLayout.GetViewportX(dragToColumnViewportIndex) + sheetLayout.GetViewportWidth(dragToColumnViewportIndex)));
                                }
                                else
                                {
                                    num19 = sheetLayout.GetViewportX(dragToColumnViewportIndex) + sheetLayout.GetViewportWidth(dragToColumnViewportIndex);
                                }
                            }
                            Canvas.SetLeft(this._dragDropInsertIndicator, Math.Floor(viewportX));
                            Canvas.SetTop(this._dragDropInsertIndicator, Math.Floor(num16));
                            double num20 = Math.Floor((double)(num19 - viewportX));
                            double num21 = width * 2.0;
                            this._dragDropInsertIndicator.Width = num20;
                            this._dragDropInsertIndicator.Height = num21;
                            RectangleGeometry geometry2 = new RectangleGeometry();
                            geometry2.Rect = new Windows.Foundation.Rect(0.0, 0.0, num20, width);
                            this._dragDropInsertIndicator.Clip = geometry2;
                            if (this.ShowDragDropTip)
                            {
                                this.TooltipHelper.ShowTooltip(this.GetRangeString(new CellRange(dragToRow, -1, num15, -1)), this._mouseDownPosition.X + 10.0, this.MousePosition.Y + 10.0);
                            }
                        }
                    }
                }
            }
        }

        private void RefreshDragFill()
        {
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            if (this.NeedRefresh(viewport.RowViewportIndex, viewport.ColumnViewportIndex))
                            {
                                viewport.RefreshDragFill();
                            }
                            else
                            {
                                viewport.ResetDragFill();
                            }
                        }
                    }
                }
            }
        }

        internal void RefreshFormulaSelectionGrippers()
        {
            if (this._formulaSelectionGripperPanel != null)
            {
                this._formulaSelectionGripperPanel.Refresh();
            }
        }

        internal void RefreshHeaderCells(GcViewport[] viewportPresenters, int row, int column, int rowCount, int columnCount)
        {
            if (!this.IsSuspendInvalidate() && (viewportPresenters != null))
            {
                foreach (GcViewport viewport in viewportPresenters)
                {
                    if (viewport != null)
                    {
                        this.RefreshCells(viewport, row, column, rowCount, columnCount);
                        viewport.InvalidateBordersMeasureState();
                        viewport.InvalidateRowsMeasureState(true);
                    }
                }
            }
        }

        internal void RefreshSelection()
        {
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            viewport.RefreshSelection();
                        }
                    }
                }
            }
        }

        private void RefreshSelectionBorder()
        {
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num4 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num4; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            int rowViewportIndex = viewport.RowViewportIndex;
                            int columnViewportIndex = viewport.ColumnViewportIndex;
                            if (this.NeedRefresh(rowViewportIndex, columnViewportIndex))
                            {
                                viewport.SelectionContainer.FocusIndicator.IsTopVisible = false;
                                viewport.SelectionContainer.FocusIndicator.IsLeftVisible = false;
                                viewport.SelectionContainer.FocusIndicator.IsRightVisible = false;
                                viewport.SelectionContainer.FocusIndicator.IsBottomVisible = false;
                                if (this.IsVerticalDragFill)
                                {
                                    if (this._currentFillDirection == DragFillDirection.Down)
                                    {
                                        if (rowViewportIndex == this._dragFillStartBottomRowViewport)
                                        {
                                            viewport.SelectionContainer.FocusIndicator.IsBottomVisible = true;
                                        }
                                    }
                                    else if (this._currentFillDirection == DragFillDirection.Up)
                                    {
                                        if (rowViewportIndex == this._dragFillStartTopRowViewport)
                                        {
                                            viewport.SelectionContainer.FocusIndicator.IsTopVisible = true;
                                        }
                                    }
                                    else if (this._currentFillDirection == DragFillDirection.UpClear)
                                    {
                                    }
                                }
                                else if (this._currentFillDirection == DragFillDirection.Right)
                                {
                                    if (columnViewportIndex == this._dragFillStartRightColumnViewport)
                                    {
                                        viewport.SelectionContainer.FocusIndicator.IsRightVisible = true;
                                    }
                                }
                                else if (this._currentFillDirection == DragFillDirection.Left)
                                {
                                    if (columnViewportIndex == this._dragFillStartLeftColumnViewport)
                                    {
                                        viewport.SelectionContainer.FocusIndicator.IsLeftVisible = true;
                                    }
                                }
                                else
                                {
                                    DragFillDirection direction1 = this._currentFillDirection;
                                }
                                viewport.SelectionContainer.FocusIndicator.InvalidateMeasure();
                                viewport.SelectionContainer.FocusIndicator.InvalidateArrange();
                            }
                        }
                    }
                }
            }
        }

        internal void RefreshViewportCells(GcViewport[,] viewportPresenters, int row, int column, int rowCount, int columnCount)
        {
            if (viewportPresenters != null)
            {
                GcViewport[,] viewportArray = viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            if (((this.IsEditing && (viewport.EditingContainer != null)) && viewport.IsActived) && ((viewport.EditingContainer.EditingRowIndex != this.Worksheet.ActiveRowIndex) || (this.Worksheet.ActiveColumnIndex != viewport.EditingContainer.EditingColumnIndex)))
                            {
                                this.StopCellEditing(true);
                            }
                            this.RefreshCells(viewport, row, column, rowCount, columnCount);
                            viewport.InvalidateBordersMeasureState();
                            viewport.InvalidateSelectionMeasureState();
                            viewport.InvalidateRowsMeasureState(true);
                        }
                    }
                }
            }
        }

        private void RefreshViewportFloatingObjects()
        {
            if ((this._viewportPresenters != null) && (this._viewportPresenters != null))
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            viewport.RefreshFloatingObjects();
                        }
                    }
                }
            }
        }

        private void RefreshViewportFloatingObjects(FloatingObject floatingObject)
        {
            if ((this._viewportPresenters != null) && (this._viewportPresenters != null))
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            if (floatingObject is SpreadChart)
                            {
                                viewport.RefreshFloatingObject(new ChartChangedEventArgs(floatingObject as SpreadChart, ChartArea.All, null));
                            }
                            else if (floatingObject is Picture)
                            {
                                viewport.RefreshFloatingObject(new PictureChangedEventArgs(floatingObject as Picture, null));
                            }
                            else if (floatingObject != null)
                            {
                                viewport.RefreshFloatingObject(new FloatingObjectChangedEventArgs(floatingObject, null));
                            }
                        }
                    }
                }
            }
        }

        private void RefreshViewportFloatingObjectsContainerMoving()
        {
            if ((this._viewportPresenters != null) && (this._viewportPresenters != null))
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            if (this.IsNeedRefreshFloatingObjectsMovingResizingContainer(viewport.RowViewportIndex, viewport.ColumnViewportIndex))
                            {
                                viewport.RefreshFloatingObjectMovingFrames();
                            }
                            else
                            {
                                viewport.ResetFloatingObjectovingFrames();
                            }
                        }
                    }
                }
            }
        }

        private void RefreshViewportFloatingObjectsContainerResizing()
        {
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            if (this.IsNeedRefreshFloatingObjectsMovingResizingContainer(viewport.RowViewportIndex, viewport.ColumnViewportIndex))
                            {
                                viewport.RefreshFlaotingObjectResizingFrames();
                            }
                            else
                            {
                                viewport.ResetFloatingObjectResizingFrames();
                            }
                        }
                    }
                }
            }
        }

        private void RefreshViewportFloatingObjectsLayout()
        {
            if ((this._viewportPresenters != null) && (this._viewportPresenters != null))
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            viewport.InvalidateFloatingObjectsMeasureState();
                        }
                    }
                }
            }
        }

        internal void RemoveDataValidationUI()
        {
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            viewport.RemoveDataValidationUI();
                        }
                    }
                }
            }
        }

        internal virtual void Reset()
        {
            this.Init();
        }

        internal void ResetCursor()
        {
            SetBuiltInCursor(CoreCursorType.Arrow);
        }

        private void ResetDragFill()
        {
            this.ResetMouseCursor();
            this.IsWorking = false;
            this.IsDraggingFill = false;
            this.ResetDragFillViewportInfo();
            this.StopScrollTimer();
            this.TooltipHelper.CloseTooltip();
        }

        private void ResetDragFillViewportInfo()
        {
            this._dragStartRowViewport = -2;
            this._dragStartColumnViewport = -2;
            this._dragToRowViewport = -2;
            this._dragToColumnViewport = -2;
            this._dragToRow = -2;
            this._dragToColumn = -2;
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            viewport.ResetDragFill();
                        }
                    }
                }
            }
        }

        private void ResetFlagasAfterDragDropping()
        {
            this.IsWorking = false;
            this._dragDropIndicator.Clip = null;
            this._dragDropIndicator.Visibility = Visibility.Collapsed;
            this._dragDropInsertIndicator.Visibility = Visibility.Collapsed;
            this._dragDropFromRange = null;
            this._dragDropRowOffset = 0;
            this._dragDropColumnOffset = 0;
            this._isDragInsert = false;
            this._isDragCopy = false;
            this._dragStartRowViewport = -2;
            this._dragStartColumnViewport = -2;
            this._dragToRowViewport = -2;
            this._dragToColumnViewport = -2;
            this._dragToRow = -2;
            this._dragToColumn = -2;
        }

        private void ResetFloatingObjectsMovingResizing()
        {
            this.IsWorking = false;
            this.IsMovingFloatingOjects = false;
            this.IsResizingFloatingObjects = false;
            this.IsTouchingMovingFloatingObjects = false;
            this.IsTouchingResizingFloatingObjects = false;
            this._movingResizingFloatingObjects = null;
            this._dragStartRowViewport = -2;
            this._dragStartColumnViewport = -2;
            this._dragToRowViewport = -2;
            this._dragToColumnViewport = -2;
            this._dragToRow = -2;
            this._dragToColumn = -2;
            this._floatingObjectsMovingResizingStartRow = -2;
            this._floatingObjectsMovingResizingStartColumn = -2;
            this._floatingObjectsMovingResizingOffset = new Windows.Foundation.Point(0.0, 0.0);
            this._floatingObjectsMovingStartLocations = null;
            this._floatingObjectsMovingResizingStartPointCellBounds = new Windows.Foundation.Rect(0.0, 0.0, 0.0, 0.0);
            this._cachedFloatingObjectMovingResizingLayoutModel = null;
            this.ResetViewportFloatingObjectsContainerMoving();
            this.ResetViewportFloatingObjectsContainerReSizing();
        }

        private void ResetMouseCursor()
        {
            if (this._mouseCursor != null)
            {
                this._mouseCursor.Opacity = 0.0;
            }
            this.ResetCursor();
        }

        private void ResetSelectionFrameStroke()
        {
            if (this._resetSelectionFrameStroke)
            {
                ViewportInfo viewportInfo = this.GetViewportInfo();
                int rowViewportCount = viewportInfo.RowViewportCount;
                int columnViewportCount = viewportInfo.ColumnViewportCount;
                for (int i = -1; i <= rowViewportCount; i++)
                {
                    for (int j = -1; j <= columnViewportCount; j++)
                    {
                        GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(i, j);
                        if (viewportRowsPresenter != null)
                        {
                            viewportRowsPresenter.SelectionContainer.ResetSelectionFrameStroke();
                        }
                    }
                }
            }
            this._resetSelectionFrameStroke = false;
        }

        private void ResetTouchDragFill()
        {
            this.ResetMouseCursor();
            this.IsWorking = false;
            this.ResetDragFillViewportInfo();
            this.StopScrollTimer();
            this.TooltipHelper.CloseTooltip();
        }

        internal virtual void ResetTouchStates(IList<PointerPoint> ps)
        {
            if (((ps != null) && (ps.Count > 0)) && this._primaryTouchDeviceId.HasValue)
            {
                foreach (PointerPoint point in ps)
                {
                    if (point.PointerId == this._primaryTouchDeviceId.Value)
                    {
                        if (this._touchStartHitTestInfo == null)
                        {
                            this._touchStartHitTestInfo = this.HitTest(point.Position.X, point.Position.Y);
                        }
                        if (this.IsTouchResizingColumns)
                        {
                            this.EndTouchColumnResizing();
                        }
                        if (this.IsTouchResizingRows)
                        {
                            this.EndTouchRowResizing();
                        }
                        this.ResetSelectionFrameStroke();
                    }
                }
            }
            foreach (PointerPoint point2 in ps)
            {
                if (this._touchProcessedPointIds.Contains(point2.PointerId))
                {
                    if (this._primaryTouchDeviceId.HasValue && (this._primaryTouchDeviceId.Value == point2.PointerId))
                    {
                        this._primaryTouchDeviceId = null;
                        this._primaryTouchDeviceReleased = true;
                    }
                    this._touchProcessedPointIds.Remove(point2.PointerId);
                }
            }
            if (!this._primaryTouchDeviceId.HasValue)
            {
                this._touchProcessedPointIds.Clear();
            }
        }

        private void ResetTouchWhenError()
        {
            this._primaryTouchDeviceId = null;
            this._primaryTouchDeviceReleased = false;
            this.IsTouching = false;
            this._isTouchScrolling = false;
            this.IsTouchZooming = false;
            this._touchProcessedPointIds.Clear();
        }

        private void ResetViewportFloatingObjectsContainerMoving()
        {
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            viewport.ResetFloatingObjectovingFrames();
                        }
                    }
                }
            }
        }

        private void ResetViewportFloatingObjectsContainerReSizing()
        {
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            viewport.ResetFloatingObjectResizingFrames();
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Resumes the events.
        /// </summary>
        public void ResumeEvent()
        {
            this._eventSuspended--;
            if (this._eventSuspended < 0)
            {
                this._eventSuspended = 0;
            }
        }

        internal void ResumeFloatingObjectsInvalidate()
        {
            if ((this._viewportPresenters != null) && (this._viewportPresenters != null))
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            viewport.ResumeFloatingObjectsInvalidate(false);
                        }
                    }
                }
            }
        }

        internal void ResumeInvalidate()
        {
            this._suspendViewInvalidate--;
            if (this._suspendViewInvalidate < 0)
            {
                this._suspendViewInvalidate = 0;
            }
            this.ResumeFloatingObjectsInvalidate();
        }

        private double RoundToPoint(double value)
        {
            return Math.Floor(value);
        }

        internal void SaveHitTestInfo(HitTestInformation hitTestInfo)
        {
            this._positionInfo = hitTestInfo;
        }

        /// <summary>
        /// Sets the active cell of the sheet.
        /// </summary>
        /// <param name="row">The active row index.</param>
        /// <param name="column">The active column index.</param>
        /// <param name="clearSelection"> if set to <c>true</c> clears the old selection.</param>
        public void SetActiveCell(int row, int column, bool clearSelection)
        {
            if (this.Worksheet.GetActualStyleInfo(row, column, SheetArea.Cells).Focusable)
            {
                this.SetActiveCellInternal(row, column, clearSelection);
            }
        }

        internal void SetActiveCellInternal(int row, int column, bool clearSelection)
        {
            if ((row != this.Worksheet.ActiveRowIndex) || (column != this.Worksheet.ActiveColumnIndex))
            {
                this.Worksheet.SetActiveCell(row, column, clearSelection);
                this.RaiseEnterCell(row, column);
            }
        }

        internal void SetActiveColumnViewportIndex(int value)
        {
            ViewportInfo viewportInfo = this.Worksheet.GetViewportInfo();
            if (viewportInfo.ActiveColumnViewport != value)
            {
                viewportInfo.ActiveColumnViewport = value;
                this.Worksheet.SetViewportInfo(viewportInfo);
                this.UpdateFocusIndicator();
                this.UpdateDataValidationUI(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex);
            }
        }

        private void SetActiveportIndexAfterDragDrop()
        {
            ViewportInfo viewportInfo = this.GetViewportInfo();
            if ((this._dragToRowViewport != -2) && (this._dragToColumnViewport != -2))
            {
                int num = this._dragToRowViewport;
                int num2 = this._dragToColumnViewport;
                int activeRowIndex = this.Worksheet.ActiveRowIndex;
                int activeColumnIndex = this.Worksheet.ActiveColumnIndex;
                if ((num == 0) && (activeRowIndex < this.Worksheet.FrozenRowCount))
                {
                    num = -1;
                }
                else if ((num == viewportInfo.RowViewportCount) && (activeRowIndex < (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount)))
                {
                    num = viewportInfo.RowViewportCount - 1;
                }
                if ((num2 == 0) && (activeColumnIndex < this.Worksheet.FrozenColumnCount))
                {
                    num2 = -1;
                }
                else if ((num2 == viewportInfo.ColumnViewportCount) && (activeColumnIndex < (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount)))
                {
                    num2 = viewportInfo.ColumnViewportCount - 1;
                }
                if (num != this.GetActiveRowViewportIndex())
                {
                    this.SetActiveRowViewportIndex(num);
                }
                if (num2 != this.GetActiveColumnViewportIndex())
                {
                    this.SetActiveColumnViewportIndex(num2);
                }
            }
        }

        internal void SetActiveRowViewportIndex(int value)
        {
            ViewportInfo viewportInfo = this.Worksheet.GetViewportInfo();
            if (viewportInfo.ActiveRowViewport != value)
            {
                viewportInfo.ActiveRowViewport = value;
                this.Worksheet.SetViewportInfo(viewportInfo);
                this.UpdateFocusIndicator();
                this.UpdateDataValidationUI(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex);
            }
        }

        internal void SetBuiltInCursor(CoreCursorType cursorType)
        {
#if UWP
            CoreWindow win = Windows.UI.Xaml.Window.Current.CoreWindow;
            win.PointerCursor = new CoreCursor(cursorType, 0);
#endif
        }

        private void SetCursor(HitTestInformation hi)
        {
            if (this._allowDragFill && hi.ViewportInfo.InDragFillIndicator)
            {
                bool flag;
                bool flag2;
                KeyboardHelper.GetMetaKeyState(out flag, out flag2);
                CursorType cursorType = flag2 ? CursorType.DragFill_CtrlDragCursor : CursorType.DragFill_DragCursor;
                this.SetMouseCursor(cursorType);
            }
            else if (this._allowDragDrop && hi.ViewportInfo.InSelectionDrag)
            {
                bool flag3;
                bool flag4;
                KeyboardHelper.GetMetaKeyState(out flag3, out flag4);
                CursorType type2 = flag4 ? CursorType.DragCell_CtrlDragCursor : CursorType.DragCell_DragCursor;
                this.SetMouseCursor(type2);
            }
            else
            {
                if (this._mouseCursor != null)
                {
                    this._mouseCursor.Opacity = 0.0;
                }
                this.ResetCursor();
            }
        }

        private void SetCursorForFloatingObject(ViewportFloatingObjectHitTestInformation chartInfo)
        {
            // hdt 图表锁定时显示默认光标
            if (chartInfo.FloatingObject != null && chartInfo.FloatingObject.Locked)
            {
                ResetCursor();
            }
            else if (chartInfo.InMoving)
            {
                this.SetMouseCursor(CursorType.DragCell_DragCursor);
            }
            else if (chartInfo.InTopNWSEResize || chartInfo.InBottomNWSEResize)
            {
                this.SetBuiltInCursor(CoreCursorType.SizeNorthwestSoutheast);
            }
            else if (chartInfo.InLeftWEResize || chartInfo.InRightWEResize)
            {
                this.SetBuiltInCursor(CoreCursorType.SizeWestEast);
            }
            else if (chartInfo.InTopNSResize || chartInfo.InBottomNSResize)
            {
                this.SetBuiltInCursor(CoreCursorType.SizeNorthSouth);
            }
            else if (chartInfo.InTopNESWResize || chartInfo.InBottomNESWResize)
            {
                this.SetBuiltInCursor(CoreCursorType.SizeNortheastSouthwest);
            }
            else
            {
                this.ResetCursor();
            }
        }

        /// <summary>
        /// Sets the index of the floating object Z.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="zIndex">Index of the z.</param>
        public void SetFloatingObjectZIndex(string name, int zIndex)
        {
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            viewport.SetFlotingObjectZIndex(name, zIndex);
                        }
                    }
                }
            }
        }

        internal void SetMouseCursor(CursorType cursorType)
        {
            if (this._mouseCursor == null)
            {
                this._mouseCursor = new Image();
                this._mouseCursor.IsHitTestVisible = false;
                this.CursorsContainer.Children.Add(this._mouseCursor);
            }
            this._mouseCursor.Opacity = 1.0;
            this.HideCursor();
            this._mouseCursor.Source = CursorGenerator.GetCursor(cursorType);
            this._mouseCursor.SetValue(Canvas.LeftProperty, (double)(this.MousePosition.X - 32.0));
            this._mouseCursor.SetValue(Canvas.TopProperty, (double)(this.MousePosition.Y - 32.0));
        }

        /// <summary>
        /// Selects the specified cells.
        /// </summary>
        /// <param name="row">The row index of the first cell.</param>
        /// <param name="column">The column index of the first cell.</param>
        /// <param name="rowCount">The number of rows in the selection.</param>
        /// <param name="columnCount">The number of columns in the selection.</param>
        public void SetSelection(int row, int column, int rowCount, int columnCount)
        {
            if (this.Worksheet.GetActualStyleInfo(row, column, SheetArea.Cells).Focusable)
            {
                this.Worksheet.SetSelection(row, column, rowCount, columnCount);
            }
        }

        private void SetSelectionFrame(int rowViewportIndex, int columnViewportIndex)
        {
            ViewportInfo viewportInfo = this.GetViewportInfo();
            int rowViewportCount = viewportInfo.RowViewportCount;
            int columnViewportCount = viewportInfo.ColumnViewportCount;
            List<Tuple<int, int>> list = new List<Tuple<int, int>> {
                new Tuple<int, int>(rowViewportIndex, columnViewportIndex)
            };
            if ((columnViewportIndex == -1) || (columnViewportIndex == 0))
            {
                list.Add(new Tuple<int, int>(rowViewportIndex, 0));
                list.Add(new Tuple<int, int>(rowViewportIndex, -1));
            }
            if ((columnViewportIndex == columnViewportCount) || (columnViewportIndex == (columnViewportCount - 1)))
            {
                list.Add(new Tuple<int, int>(rowViewportIndex, columnViewportCount - 1));
                list.Add(new Tuple<int, int>(rowViewportIndex, columnViewportCount));
            }
            if ((rowViewportIndex == -1) || (rowViewportIndex == 0))
            {
                list.Add(new Tuple<int, int>(0, columnViewportIndex));
                list.Add(new Tuple<int, int>(-1, columnViewportIndex));
            }
            if ((rowViewportIndex == rowViewportCount) || (rowViewportIndex == (rowViewportCount - 1)))
            {
                list.Add(new Tuple<int, int>(rowViewportCount, columnViewportIndex));
                list.Add(new Tuple<int, int>(rowViewportCount - 1, columnViewportIndex));
            }
            foreach (Tuple<int, int> tuple in Enumerable.Distinct<Tuple<int, int>>((IEnumerable<Tuple<int, int>>)list))
            {
                GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(tuple.Item1, tuple.Item2);
                if (viewportRowsPresenter != null)
                {
                    SolidColorBrush brush = null;
                    Dt.Cells.Data.UIAdaptor.InvokeSync(delegate
                    {
                        brush = new SolidColorBrush(Windows.UI.Color.FromArgb(0xff, 0x21, 0x73, 70));
                    });
                    viewportRowsPresenter.SelectionContainer.SetSelectionFrameStroke(brush);
                    this._resetSelectionFrameStroke = true;
                }
            }
        }

        internal virtual void SetViewportInfo(Dt.Cells.Data.Worksheet sheet, ViewportInfo value)
        {
            sheet.SetViewportInfo(value);
        }

        /// <summary>
        /// Sets the active column viewport's left column.
        /// </summary>
        /// <param name="value">The column index.</param>
        public void SetViewportLeftColumn(int value)
        {
            this.SetViewportLeftColumn(0, value);
        }

        /// <summary>
        /// Sets the column viewport's left column.
        /// </summary>
        /// <param name="columnViewportIndex">The column viewport index.</param>
        /// <param name="value">The column index.</param>
        public virtual void SetViewportLeftColumn(int columnViewportIndex, int value)
        {
            if ((this.Worksheet != null) && (this._hScrollable || this._isTouchScrolling))
            {
                ViewportInfo viewportInfo = this.GetViewportInfo();
                value = Math.Max(this.Worksheet.FrozenColumnCount, value);
                value = Math.Min((this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount) - 1, value);
                value = this.TryGetNextScrollableColumn(value);
                if (((columnViewportIndex >= 0) && (columnViewportIndex < viewportInfo.ColumnViewportCount)) && (viewportInfo.LeftColumns[columnViewportIndex] != value))
                {
                    int oldIndex = viewportInfo.LeftColumns[columnViewportIndex];
                    viewportInfo.LeftColumns[columnViewportIndex] = value;
                    this.InvalidateViewportColumnsLayout();
                    this.InvalidateViewportHorizontalArrangement(columnViewportIndex);
                    if (this._columnGroupPresenters != null)
                    {
                        GcRangeGroup group = this._columnGroupPresenters[columnViewportIndex + 1];
                        if (group != null)
                        {
                            group.InvalidateMeasure();
                        }
                    }
                    this.RaiseLeftChanged(oldIndex, value, columnViewportIndex);
                }
                if (!this.IsWorking)
                {
                    this.SaveHitTestInfo(null);
                }
            }
        }

        /// <summary>
        /// Sets the active row viewport's top row.
        /// </summary>
        /// <param name="value">The row index.</param>
        public void SetViewportTopRow(int value)
        {
            this.SetViewportTopRow(0, value);
        }

        /// <summary>
        /// Sets the row viewport's top row.
        /// </summary>
        /// <param name="rowViewportIndex">The row viewport index.</param>
        /// <param name="value">The row index.</param>
        public virtual void SetViewportTopRow(int rowViewportIndex, int value)
        {
            if ((this.Worksheet != null) && (this._vScrollable || this._isTouchScrolling))
            {
                ViewportInfo viewportInfo = this.GetViewportInfo();
                value = Math.Max(this.Worksheet.FrozenRowCount, value);
                value = Math.Min((this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount) - 1, value);
                value = this.TryGetNextScrollableRow(value);
                if (((rowViewportIndex >= 0) && (rowViewportIndex < viewportInfo.RowViewportCount)) && (viewportInfo.TopRows[rowViewportIndex] != value))
                {
                    int oldIndex = viewportInfo.TopRows[rowViewportIndex];
                    viewportInfo.TopRows[rowViewportIndex] = value;
                    this.InvalidateViewportRowsLayout();
                    this.InvalidateViewportRowsPresenterMeasure(rowViewportIndex, false);
                    for (int i = -1; i < viewportInfo.ColumnViewportCount; i++)
                    {
                        GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(rowViewportIndex, i);
                        if (viewportRowsPresenter != null)
                        {
                            if ((viewportRowsPresenter.RowViewportIndex == this.GetActiveRowViewportIndex()) && (viewportRowsPresenter.ColumnViewportIndex == this.GetActiveColumnViewportIndex()))
                            {
                                viewportRowsPresenter.UpdateDataValidationUI(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex);
                            }
                            viewportRowsPresenter.InvalidateMeasure();
                            viewportRowsPresenter.InvalidateBordersMeasureState();
                            viewportRowsPresenter.InvalidateSelectionMeasureState();
                            viewportRowsPresenter.InvalidateFloatingObjectsMeasureState();
                        }
                    }
                    GcViewport rowHeaderRowsPresenter = this.GetRowHeaderRowsPresenter(rowViewportIndex);
                    if (rowHeaderRowsPresenter != null)
                    {
                        rowHeaderRowsPresenter.InvalidateBordersMeasureState();
                        rowHeaderRowsPresenter.InvalidateMeasure();
                    }
                    if (this._rowGroupPresenters != null)
                    {
                        GcRangeGroup group = this._rowGroupPresenters[rowViewportIndex + 1];
                        if (group != null)
                        {
                            group.InvalidateMeasure();
                        }
                    }
                    this.RaiseTopChanged(oldIndex, value, rowViewportIndex);
                }
                if (!this.IsWorking)
                {
                    this.SaveHitTestInfo(null);
                }
            }
        }

        /// <summary>
        /// Displays the automatic fill indicator.
        /// </summary>
        public void ShowAutoFillIndicator()
        {
            if (this.CanUserDragFill)
            {
                GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(this.GetActiveRowViewportIndex(), this.GetActiveColumnViewportIndex());
                if (viewportRowsPresenter != null)
                {
                    CellRange activeSelection = this.GetActiveSelection();
                    if ((activeSelection == null) && (this.Worksheet.Selections.Count > 0))
                    {
                        activeSelection = this.Worksheet.Selections[0];
                    }
                    if (activeSelection != null)
                    {
                        this._autoFillIndicatorContainer.Width = 16.0;
                        this._autoFillIndicatorContainer.Height = 16.0;
                        this.AutoFillIndicatorRec = new Windows.Foundation.Rect?(this.GetAutoFillIndicatorRect(viewportRowsPresenter, activeSelection));
                        base.InvalidateArrange();
                        this.CachedGripperLocation = null;
                    }
                }
            }
        }

        internal void ShowCell(int rowViewportIndex, int columnViewportIndex, int row, int column, VerticalPosition verticalPosition, HorizontalPosition horizontalPosition)
        {
            Dt.Cells.Data.Worksheet worksheet = this.Worksheet;
            if (((worksheet != null) && (row <= worksheet.RowCount)) && (column <= worksheet.ColumnCount))
            {
                int viewportTopRow = this.GetViewportTopRow(rowViewportIndex);
                int viewportLeftColumn = this.GetViewportLeftColumn(columnViewportIndex);
                switch (horizontalPosition)
                {
                    case HorizontalPosition.Center:
                        {
                            double num3 = this.RoundToPoint((this.GetViewportWidth(columnViewportIndex) - this.RoundToPoint(worksheet.Columns[column].ActualWidth * this.ZoomFactor)) / 2.0);
                            while (0 < column)
                            {
                                num3 -= this.RoundToPoint(worksheet.Columns[column - 1].ActualWidth * this.ZoomFactor);
                                if (num3 < 0.0)
                                {
                                    break;
                                }
                                column--;
                            }
                            break;
                        }
                    case HorizontalPosition.Right:
                        {
                            double num4 = this.GetViewportWidth(columnViewportIndex) - this.RoundToPoint(worksheet.Columns[column].ActualWidth * this.ZoomFactor);
                            while (0 < column)
                            {
                                num4 -= this.RoundToPoint(worksheet.Columns[column - 1].ActualWidth * this.ZoomFactor);
                                if (num4 < 0.0)
                                {
                                    break;
                                }
                                column--;
                            }
                            break;
                        }
                    case HorizontalPosition.Nearest:
                        if (column >= viewportLeftColumn)
                        {
                            double num5 = this.GetViewportWidth(columnViewportIndex) - this.RoundToPoint(worksheet.Columns[column].Width * this.ZoomFactor);
                            while (viewportLeftColumn < column)
                            {
                                num5 -= this.RoundToPoint(worksheet.Columns[column - 1].ActualWidth * this.ZoomFactor);
                                if (num5 < 0.0)
                                {
                                    break;
                                }
                                column--;
                            }
                        }
                        break;
                }
                switch (verticalPosition)
                {
                    case VerticalPosition.Center:
                        {
                            double num6 = this.RoundToPoint((this.GetViewportHeight(rowViewportIndex) - this.RoundToPoint(worksheet.Rows[row].ActualHeight * this.ZoomFactor)) / 2.0);
                            while (0 < row)
                            {
                                num6 -= this.RoundToPoint(worksheet.Rows[row - 1].ActualHeight * this.ZoomFactor);
                                if (num6 < 0.0)
                                {
                                    break;
                                }
                                row--;
                            }
                            break;
                        }
                    case VerticalPosition.Bottom:
                        {
                            double num7 = this.GetViewportHeight(rowViewportIndex) - this.RoundToPoint(worksheet.Rows[row].ActualHeight * this.ZoomFactor);
                            while (0 < row)
                            {
                                num7 -= this.RoundToPoint(worksheet.Rows[row - 1].ActualHeight * this.ZoomFactor);
                                if (num7 < 0.0)
                                {
                                    break;
                                }
                                row--;
                            }
                            break;
                        }
                    case VerticalPosition.Nearest:
                        if ((row >= viewportTopRow) && (viewportTopRow != -1))
                        {
                            double num8 = this.GetViewportHeight(rowViewportIndex) - this.RoundToPoint(worksheet.Rows[row].ActualHeight * this.ZoomFactor);
                            while (viewportTopRow < row)
                            {
                                num8 -= this.RoundToPoint(worksheet.Rows[row - 1].ActualHeight * this.ZoomFactor);
                                if (num8 < 0.0)
                                {
                                    break;
                                }
                                row--;
                            }
                        }
                        break;
                }
                if (row != viewportTopRow)
                {
                    this.SetViewportTopRow(rowViewportIndex, row);
                }
                if (column != viewportLeftColumn)
                {
                    this.SetViewportLeftColumn(columnViewportIndex, column);
                }
            }
        }

        internal void ShowColumn(int columnViewportIndex, int column, HorizontalPosition horizontalPosition)
        {
            int viewportTopRow = this.GetViewportTopRow(0);
            this.ShowCell(0, columnViewportIndex, viewportTopRow, column, VerticalPosition.Top, horizontalPosition);
        }

        private void ShowDragFillSmartTag(CellRange fillRange, AutoFillType initFillType)
        {
            double x = 0.0;
            double y = 0.0;
            if (!this.IsDragFillWholeColumns && !this.IsDragFillWholeRows)
            {
                int index = (fillRange.Row + fillRange.RowCount) - 1;
                int num4 = (fillRange.Column + fillRange.ColumnCount) - 1;
                if (this.IsVerticalDragFill)
                {
                    ColumnLayout layout = this.GetViewportColumnLayoutModel(this._dragFillStartRightColumnViewport).Find(num4);
                    if (layout == null)
                    {
                        int viewportRightColumn = this.GetViewportRightColumn(this._dragFillStartLeftColumnViewport);
                        layout = this.GetViewportColumnLayoutModel(this._dragFillStartLeftColumnViewport).FindColumn(viewportRightColumn);
                    }
                    x = layout.X + layout.Width;
                    RowLayout validVerDragToRowLayout = this.GetValidVerDragToRowLayout();
                    y = validVerDragToRowLayout.Y + validVerDragToRowLayout.Height;
                }
                else
                {
                    RowLayout layout3 = this.GetViewportRowLayoutModel(this._dragFillStartBottomRowViewport).Find(index);
                    if (layout3 == null)
                    {
                        int viewportBottomRow = this.GetViewportBottomRow(this._dragFillStartTopRowViewport);
                        layout3 = this.GetViewportRowLayoutModel(this._dragFillStartTopRowViewport).FindRow(viewportBottomRow);
                    }
                    y = layout3.Y + layout3.Height;
                    ColumnLayout validHorDragToColumnLayout = this.GetValidHorDragToColumnLayout();
                    x = validHorDragToColumnLayout.X + validHorDragToColumnLayout.Width;
                }
            }
            else if (this.IsDragFillWholeColumns && !this.IsDragFillWholeRows)
            {
                int column = fillRange.Column;
                int columnCount = fillRange.ColumnCount;
                ColumnLayout layout5 = this.GetValidHorDragToColumnLayout();
                x = layout5.X + layout5.Width;
                y = this.DragFillStartViewportTopRowLayout.Y;
            }
            else if (this.IsDragFillWholeRows && !this.IsDragFillWholeColumns)
            {
                int row = fillRange.Row;
                int rowCount = fillRange.RowCount;
                RowLayout layout6 = this.GetValidVerDragToRowLayout();
                y = layout6.Y + layout6.Height;
                x = this.DragFillStartViewportLeftColumnLayout.X;
                y = layout6.Y + layout6.Height;
            }
            if ((x != 0.0) && (y != 0.0))
            {
                x -= 4.0;
                y++;
                Windows.UI.Xaml.Controls.Primitives.Popup popup = new Windows.UI.Xaml.Controls.Primitives.Popup();
                this._dragFillPopup = new PopupHelper(popup);
                base.Children.Add(popup);
                popup.Closed += DragFillSmartTagPopup_Closed;
                this._dragFillSmartTag = new DragFillSmartTag(this);
                this._dragFillSmartTag.AutoFilterType = initFillType;
                this._dragFillSmartTag.AutoFilterTypeChanged += new EventHandler(this.DragFillSmartTag_AutoFilterTypeChanged);
                if (this.InputDeviceType == Dt.Cells.UI.InputDeviceType.Touch)
                {
                    x += 4.0;
                    y += 4.0;
                }
                this._dragFillPopup.ShowAsModal(this, this._dragFillSmartTag, new Windows.Foundation.Point(x, y), PopupDirection.BottomRight, false, false);
            }
        }

        internal void ShowFormulaSelectionTouchGrippers()
        {
            if (this._formulaSelectionGripperPanel != null)
            {
                this._formulaSelectionGripperPanel.Visibility = Visibility.Visible;
            }
        }

        internal void ShowRow(int rowViewportIndex, int row, VerticalPosition verticalPosition)
        {
            int viewportLeftColumn = this.GetViewportLeftColumn(0);
            this.ShowCell(rowViewportIndex, 0, row, viewportLeftColumn, verticalPosition, HorizontalPosition.Left);
        }

        private void SimulateMouseClick(PointerMouseRoutedEventArgs e)
        {
            if (this.StartMouseClick(e))
            {
                this._mouseDownPosition = e.GetPosition(this);
                this.ProcessMouseLeftButtonDown(e);
            }
            bool isMouseLeftButtonPressed = this.IsMouseLeftButtonPressed;
            if (this.EndMouseClick(e))
            {
                this.ProcessMouseLeftButtonUp(e);
            }
            if (isMouseLeftButtonPressed)
            {
                this.RaiseCellClick(e, MouseButtonType.Left);
            }
        }

        private IEnumerable<FloatingObject> SortFloatingObjectByZIndex(FloatingObject[] floatingObjects)
        {
            Dictionary<int, List<FloatingObject>> dictionary = new Dictionary<int, List<FloatingObject>>();
            foreach (FloatingObject obj2 in floatingObjects)
            {
                int floatingObjectZIndex = this.GetFloatingObjectZIndex(obj2.Name);
                List<FloatingObject> list = null;
                dictionary.TryGetValue(floatingObjectZIndex, out list);
                if (list == null)
                {
                    list = new List<FloatingObject> {
                        obj2
                    };
                    dictionary.Add(floatingObjectZIndex, list);
                }
                else
                {
                    list.Add(obj2);
                }
            }
            IOrderedEnumerable<KeyValuePair<int, List<FloatingObject>>> enumerable = Enumerable.OrderBy<KeyValuePair<int, List<FloatingObject>>, int>((IEnumerable<KeyValuePair<int, List<FloatingObject>>>)dictionary, delegate (KeyValuePair<int, List<FloatingObject>> p)
            {
                return p.Key;
            });
            List<FloatingObject> list2 = new List<FloatingObject>();
            foreach (KeyValuePair<int, List<FloatingObject>> pair in enumerable)
            {
                list2.AddRange(pair.Value);
            }
            list2.Reverse();
            return (IEnumerable<FloatingObject>)list2;
        }

        /// <summary>
        /// Starts to edit the active cell.
        /// </summary>
        /// <param name="selectAll">if set to <c>true</c> selects all the text when the text is changed during editing.</param>
        /// <param name="defaultText">if set to <c>true</c> [default text].</param>
        public void StartCellEditing(bool selectAll = false, string defaultText = null)
        {
            this.StartCellEditing(selectAll, defaultText, EditorStatus.Edit);
        }

        /// <summary>
        /// Starts to edit the active cell.
        /// </summary>
        /// <param name="selectAll">if set to <c>true</c> will select all the text when text changed during editing.</param>
        /// <param name="defaultText">The default text of editor.</param>
        /// <param name="status">The status of the editor</param>
        internal void StartCellEditing(bool selectAll = false, string defaultText = null, EditorStatus status = EditorStatus.Edit)
        {
            this.StartTextInputInternal(selectAll, defaultText, status, false);
        }

        private void StartCellSelecting()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if (savedHitTestInformation.ViewportInfo != null)
            {
                int row = savedHitTestInformation.ViewportInfo.Row;
                int column = savedHitTestInformation.ViewportInfo.Column;
                int rowCount = 1;
                int columnCount = 1;
                if ((savedHitTestInformation.ViewportInfo.Row > -1) && (savedHitTestInformation.ViewportInfo.Column > -1))
                {
                    bool flag;
                    bool flag2;
                    CellLayout layout = this.GetViewportCellLayoutModel(savedHitTestInformation.RowViewportIndex, savedHitTestInformation.ColumnViewportIndex).FindCell(savedHitTestInformation.ViewportInfo.Row, savedHitTestInformation.ViewportInfo.Column);
                    KeyboardHelper.GetMetaKeyState(out flag2, out flag);
                    if (layout != null)
                    {
                        row = layout.Row;
                        column = layout.Column;
                        rowCount = layout.RowCount;
                        columnCount = layout.ColumnCount;
                    }
                    if (this.Worksheet.GetActualStyleInfo(row, column, SheetArea.Cells).Focusable)
                    {
                        this.IsWorking = true;
                        if (this.PreviewLeaveCell(row, column))
                        {
                            this.IsWorking = false;
                        }
                        else
                        {
                            this.IsSelectingCells = true;
                            this.IsTouchSelectingCells = false;
                            this.SetActiveColumnViewportIndex(savedHitTestInformation.ColumnViewportIndex);
                            this.SetActiveRowViewportIndex(savedHitTestInformation.RowViewportIndex);
                            CellRange[] oldSelection = Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections);
                            this.SavedOldSelections = oldSelection;
                            if (!flag2)
                            {
                                this.SetActiveCellInternal(row, column, false);
                            }
                            if (flag)
                            {
                                this.AddSelection(row, column, 1, 1);
                            }
                            else if (flag2)
                            {
                                this.ExtendSelection((row + rowCount) - 1, (column + columnCount) - 1);
                            }
                            else
                            {
                                this.Worksheet.SetSelection(row, column, 1, 1);
                            }
                            this.RaiseSelectionChanging(oldSelection, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections));
                            if (!this.IsWorking || !this.IsSelectingCells)
                            {
                                this.EndCellSelecting();
                            }
                            this.StartScrollTimer();
                        }
                    }
                }
            }
        }

        private void StartColumnResizing()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            SheetLayout sheetLayout = this.GetSheetLayout();
            ColumnLayout viewportResizingColumnLayoutFromX = null;
            this.IsWorking = true;
            this.IsResizingColumns = true;
            SolidColorBrush brush = null;
            Dt.Cells.Data.UIAdaptor.InvokeSync(delegate
            {
                brush = new SolidColorBrush(Colors.Black);
            });
            if (this._resizingTracker == null)
            {
                Windows.UI.Xaml.Shapes.Line line = new Windows.UI.Xaml.Shapes.Line();
                line.Stroke = brush;
                line.StrokeThickness = 1.0;
                line.StrokeDashArray = new DoubleCollection { 1.0 };
                this._resizingTracker = line;
                this.TrackersContainer.Children.Add(this._resizingTracker);
            }
            Dt.Cells.Data.UIAdaptor.InvokeSync(delegate
            {
                this._resizingTracker.Visibility = Visibility.Visible;
            });
            switch (savedHitTestInformation.HitTestType)
            {
                case HitTestType.Corner:
                    viewportResizingColumnLayoutFromX = this.GetRowHeaderColumnLayoutModel().FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                    break;

                case HitTestType.ColumnHeader:
                    viewportResizingColumnLayoutFromX = this.GetViewportResizingColumnLayoutFromX(savedHitTestInformation.ColumnViewportIndex, savedHitTestInformation.HitPoint.X);
                    if (viewportResizingColumnLayoutFromX == null)
                    {
                        viewportResizingColumnLayoutFromX = this.GetViewportColumnLayoutModel(savedHitTestInformation.ColumnViewportIndex).FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                        if (viewportResizingColumnLayoutFromX == null)
                        {
                            if (savedHitTestInformation.ColumnViewportIndex == 0)
                            {
                                viewportResizingColumnLayoutFromX = this.GetViewportResizingColumnLayoutFromX(-1, savedHitTestInformation.HitPoint.X);
                            }
                            if ((viewportResizingColumnLayoutFromX == null) && ((savedHitTestInformation.ColumnViewportIndex == 0) || (savedHitTestInformation.ColumnViewportIndex == -1)))
                            {
                                viewportResizingColumnLayoutFromX = this.GetRowHeaderResizingColumnLayoutFromX(savedHitTestInformation.HitPoint.X);
                            }
                        }
                    }
                    break;
            }
            if (viewportResizingColumnLayoutFromX != null)
            {
                this._resizingTracker.X1 = (viewportResizingColumnLayoutFromX.X + viewportResizingColumnLayoutFromX.Width) - 0.5;
                this._resizingTracker.Y1 = sheetLayout.HeaderY;
                this._resizingTracker.X2 = this._resizingTracker.X1;
                this._resizingTracker.Y2 = this._resizingTracker.Y1 + this.AvailableSize.Height;
                if (((this.InputDeviceType != Dt.Cells.UI.InputDeviceType.Touch) && ((this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Both) || (this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Column))) && ((savedHitTestInformation.ColumnViewportIndex > -2) && (this._columnHeaderPresenters[savedHitTestInformation.ColumnViewportIndex + 1].GetViewportCell(savedHitTestInformation.HeaderInfo.Row, savedHitTestInformation.HeaderInfo.Column, true) != null)))
                {
                    this.UpdateResizeToolTip(this.GetHorizontalResizeTip(viewportResizingColumnLayoutFromX.Width), true);
                }
            }
        }

        private void StartColumnSelecting()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if ((savedHitTestInformation.HitTestType == HitTestType.Empty) || (savedHitTestInformation.HeaderInfo == null))
            {
                savedHitTestInformation = this.HitTest(this._touchStartPoint.X, this._touchStartPoint.Y);
            }
            if (savedHitTestInformation.HeaderInfo != null)
            {
                SheetLayout sheetLayout = this.GetSheetLayout();
                int viewportTopRow = this.GetViewportTopRow((sheetLayout.FrozenHeight > 0.0) ? -1 : 0);
                int column = savedHitTestInformation.HeaderInfo.Column;
                Cell canSelectedCellInColumn = this.GetCanSelectedCellInColumn(viewportTopRow, column);
                if (canSelectedCellInColumn != null)
                {
                    viewportTopRow = canSelectedCellInColumn.Row.Index;
                    this.IsWorking = true;
                    if (this.PreviewLeaveCell(viewportTopRow, column))
                    {
                        this.IsWorking = false;
                    }
                    else
                    {
                        if (this.IsTouching)
                        {
                            this.IsTouchSelectingColumns = true;
                        }
                        else
                        {
                            this.IsSelectingColumns = true;
                        }
                        this.SetActiveColumnViewportIndex(savedHitTestInformation.ColumnViewportIndex);
                        this.SetActiveRowViewportIndex((sheetLayout.FrozenHeight > 0.0) ? -1 : 0);
                        if (savedHitTestInformation.HeaderInfo.Column > -1)
                        {
                            CellRange[] oldSelection = Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections);
                            if (this.InputDeviceType != Dt.Cells.UI.InputDeviceType.Touch)
                            {
                                bool flag2;
                                bool flag3;
                                KeyboardHelper.GetMetaKeyState(out flag3, out flag2);
                                this.SavedOldSelections = oldSelection;
                                if (!flag3)
                                {
                                    this.SetActiveCellInternal(viewportTopRow, column, false);
                                }
                                if (flag2)
                                {
                                    this.AddSelection(-1, savedHitTestInformation.HeaderInfo.Column, -1, 1);
                                }
                                else if (flag3)
                                {
                                    this.ExtendSelection(-1, savedHitTestInformation.HeaderInfo.Column);
                                }
                                else
                                {
                                    this.Worksheet.SetSelection(-1, savedHitTestInformation.HeaderInfo.Column, -1, 1);
                                }
                                if (!flag3)
                                {
                                    this.Worksheet.SetActiveCell(viewportTopRow, column, false);
                                }
                            }
                            else
                            {
                                if ((this.Worksheet.SelectionPolicy == SelectionPolicy.MultiRange) && this.CanTouchMultiSelect)
                                {
                                    this.Worksheet.AddSelection(-1, savedHitTestInformation.HeaderInfo.Column, -1, 1);
                                }
                                else
                                {
                                    this.Worksheet.SetSelection(-1, savedHitTestInformation.HeaderInfo.Column, -1, 1);
                                }
                                this.Worksheet.SetActiveCell(viewportTopRow, column, false);
                            }
                            this.RaiseSelectionChanging(oldSelection, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections));
                            if (!this.IsWorking || (!this.IsSelectingColumns && !this.IsTouchSelectingColumns))
                            {
                                this.EndColumnSelecting();
                            }
                            this.StartScrollTimer();
                        }
                    }
                }
            }
        }

        private void StartDragDropping()
        {
            if (!this.IsDragDropping)
            {
                CellRange fromRange = this.GetFromRange();
                if (fromRange != null)
                {
                    this.IsDragDropping = true;
                    this.IsWorking = true;
                    this.UpdateDragIndicatorAndStartTimer(fromRange);
                }
            }
        }

        private void StartDragFill()
        {
            if (!this.IsDraggingFill)
            {
                this.UpdateDragFillStartRange();
                if (this._dragFillStartRange != null)
                {
                    this.IsDraggingFill = true;
                    this.IsWorking = true;
                    this.UpdateDragFillViewportInfoAndStartTimer();
                }
            }
        }

        private void StartFloatingObjectsMoving()
        {
            this._movingResizingFloatingObjects = this.GetAllSelectedFloatingObjects();
            if (((this._movingResizingFloatingObjects != null) && (this._movingResizingFloatingObjects.Length != 0)) && this.InitFloatingObjectsMovingResizing())
            {
                if ((this._touchToolbarPopup != null) && this._touchToolbarPopup.IsOpen)
                {
                    this._touchToolbarPopup.IsOpen = false;
                }
                this.IsWorking = true;
                if (this.IsTouching)
                {
                    this.IsTouchingMovingFloatingObjects = true;
                }
                else
                {
                    this.IsMovingFloatingOjects = true;
                }
                this.StartScrollTimer();
            }
        }

        private void StartFloatingObjectsResizing()
        {
            this._movingResizingFloatingObjects = this.GetAllSelectedFloatingObjects();
            if (((this._movingResizingFloatingObjects != null) && (this._movingResizingFloatingObjects.Length != 0)) && this.InitFloatingObjectsMovingResizing())
            {
                if ((this._touchToolbarPopup != null) && this._touchToolbarPopup.IsOpen)
                {
                    this._touchToolbarPopup.IsOpen = false;
                }
                this.IsWorking = true;
                if (this.IsTouching)
                {
                    this.IsTouchingResizingFloatingObjects = true;
                }
                else
                {
                    this.IsResizingFloatingObjects = true;
                }
                this.StartScrollTimer();
            }
        }

        internal virtual bool StartMouseClick(PointerMouseRoutedEventArgs e)
        {
            if (this.IsMouseInEditor() || this.IsMouseInRangeGroup())
            {
                return false;
            }
            if (!base.CapturePointer(e.Instance.Pointer))
            {
                return false;
            }
            this.IsMouseLeftButtonPressed = true;
            if (!this._formulaSelectionFeature.IsSelectionBegined)
            {
                this.FocusInternal();
            }
            this._lastClickPoint = e.GetPosition(this);
            this._routedEventArgs = e;
            return true;
        }

        private void StartRowResizing()
        {
            Action action = null;
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            SheetLayout sheetLayout = this.GetSheetLayout();
            RowLayout viewportResizingRowLayoutFromY = null;
            this.IsResizingRows = true;
            this.IsWorking = true;
            if (this._resizingTracker == null)
            {
                this._resizingTracker = new Windows.UI.Xaml.Shapes.Line();
                if (action == null)
                {
                    action = delegate
                    {
                        this._resizingTracker.Stroke = new SolidColorBrush(Colors.Black);
                    };
                }
                Dt.Cells.Data.UIAdaptor.InvokeSync(action);
                this._resizingTracker.StrokeThickness = 1.0;
                this._resizingTracker.StrokeDashArray = new DoubleCollection { 1.0 };
                this.TrackersContainer.Children.Add(this._resizingTracker);
            }
            this._resizingTracker.Visibility = Visibility.Visible;
            switch (savedHitTestInformation.HitTestType)
            {
                case HitTestType.Corner:
                    viewportResizingRowLayoutFromY = this.GetColumnHeaderRowLayoutModel().FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                    break;

                case HitTestType.RowHeader:
                    viewportResizingRowLayoutFromY = this.GetViewportResizingRowLayoutFromY(savedHitTestInformation.RowViewportIndex, savedHitTestInformation.HitPoint.Y);
                    if (((viewportResizingRowLayoutFromY == null) && (savedHitTestInformation.HeaderInfo != null)) && (savedHitTestInformation.HeaderInfo.ResizingRow >= 0))
                    {
                        viewportResizingRowLayoutFromY = this.GetViewportRowLayoutModel(savedHitTestInformation.RowViewportIndex).FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                    }
                    if ((viewportResizingRowLayoutFromY == null) && (savedHitTestInformation.RowViewportIndex == 0))
                    {
                        viewportResizingRowLayoutFromY = this.GetViewportResizingRowLayoutFromY(-1, savedHitTestInformation.HitPoint.Y);
                    }
                    if ((viewportResizingRowLayoutFromY == null) && ((savedHitTestInformation.RowViewportIndex == 0) || (savedHitTestInformation.RowViewportIndex == -1)))
                    {
                        viewportResizingRowLayoutFromY = this.GetColumnHeaderResizingRowLayoutFromY(savedHitTestInformation.HitPoint.Y);
                    }
                    break;
            }
            if (viewportResizingRowLayoutFromY != null)
            {
                this._resizingTracker.X1 = sheetLayout.HeaderX;
                this._resizingTracker.X2 = sheetLayout.HeaderX + this.AvailableSize.Width;
                this._resizingTracker.Y1 = (viewportResizingRowLayoutFromY.Y + viewportResizingRowLayoutFromY.Height) - 0.5;
                this._resizingTracker.Y2 = this._resizingTracker.Y1;
                if (((this.InputDeviceType != Dt.Cells.UI.InputDeviceType.Touch) && ((this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Both) || (this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Row))) && ((savedHitTestInformation.RowViewportIndex > -2) && (this._rowHeaderPresenters[savedHitTestInformation.RowViewportIndex + 1].GetViewportCell(savedHitTestInformation.HeaderInfo.Row, savedHitTestInformation.HeaderInfo.Column, true) != null)))
                {
                    this.UpdateResizeToolTip(this.GetVerticalResizeTip(viewportResizingRowLayoutFromY.Height), false);
                }
            }
        }

        private void StartRowsSelecting()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if ((savedHitTestInformation.HitTestType == HitTestType.Empty) || (savedHitTestInformation.HeaderInfo == null))
            {
                savedHitTestInformation = this.HitTest(this._touchStartPoint.X, this._touchStartPoint.Y);
            }
            if (savedHitTestInformation.HeaderInfo != null)
            {
                SheetLayout sheetLayout = this.GetSheetLayout();
                int row = savedHitTestInformation.HeaderInfo.Row;
                int viewportLeftColumn = this.GetViewportLeftColumn((sheetLayout.FrozenWidth > 0.0) ? -1 : 0);
                Cell canSelectedCellInRow = this.GetCanSelectedCellInRow(row, viewportLeftColumn);
                if (canSelectedCellInRow != null)
                {
                    viewportLeftColumn = canSelectedCellInRow.Column.Index;
                    this.IsWorking = true;
                    if (this.PreviewLeaveCell(row, viewportLeftColumn))
                    {
                        this.IsWorking = false;
                    }
                    else
                    {
                        if (!this.IsTouching)
                        {
                            this.IsSelectingRows = true;
                        }
                        else
                        {
                            this.IsTouchSelectingRows = true;
                        }
                        this.SetActiveColumnViewportIndex((sheetLayout.FrozenWidth > 0.0) ? -1 : 0);
                        this.SetActiveRowViewportIndex(savedHitTestInformation.RowViewportIndex);
                        if (savedHitTestInformation.HeaderInfo.Row > -1)
                        {
                            CellRange[] oldSelection = Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections);
                            this.SavedOldSelections = oldSelection;
                            if (this.InputDeviceType != Dt.Cells.UI.InputDeviceType.Touch)
                            {
                                bool flag2;
                                bool flag3;
                                KeyboardHelper.GetMetaKeyState(out flag2, out flag3);
                                if (!flag2)
                                {
                                    this.SetActiveCellInternal(row, viewportLeftColumn, false);
                                }
                                if (flag3)
                                {
                                    this.AddSelection(savedHitTestInformation.HeaderInfo.Row, -1, 1, -1);
                                }
                                else if (flag2)
                                {
                                    this.ExtendSelection(savedHitTestInformation.HeaderInfo.Row, -1);
                                }
                                else
                                {
                                    this.Worksheet.SetSelection(savedHitTestInformation.HeaderInfo.Row, -1, 1, -1);
                                }
                                if (!flag2)
                                {
                                    this.Worksheet.SetActiveCell(row, viewportLeftColumn, false);
                                }
                            }
                            else
                            {
                                if ((this.Worksheet.SelectionPolicy == SelectionPolicy.MultiRange) && this.CanTouchMultiSelect)
                                {
                                    this.Worksheet.AddSelection(savedHitTestInformation.HeaderInfo.Row, -1, 1, -1);
                                }
                                else
                                {
                                    this.Worksheet.SetSelection(savedHitTestInformation.HeaderInfo.Row, -1, 1, -1);
                                }
                                this.Worksheet.SetActiveCell(savedHitTestInformation.HeaderInfo.Row, viewportLeftColumn, false);
                            }
                            this.RaiseSelectionChanging(oldSelection, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections));
                            if (!this.IsWorking || (!this.IsSelectingRows && !this.IsTouchSelectingRows))
                            {
                                this.EndRowSelecting();
                            }
                            this.StartScrollTimer();
                        }
                    }
                }
            }
        }

        private void StartScrollTimer()
        {
            if (this.IsWorking)
            {
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                if (((savedHitTestInformation.HitTestType == HitTestType.Viewport) || (savedHitTestInformation.HitTestType == HitTestType.RowHeader)) || ((savedHitTestInformation.HitTestType == HitTestType.FloatingObject) || (savedHitTestInformation.HitTestType == HitTestType.FormulaSelection)))
                {
                    double viewportHeight = this.GetViewportHeight(savedHitTestInformation.RowViewportIndex);
                    this._verticalSelectionMgr = new ScrollSelectionManager(0.0, viewportHeight, new Action<bool>(this.OnVerticalSelectionTick));
                }
                if (((savedHitTestInformation.HitTestType == HitTestType.Viewport) || (savedHitTestInformation.HitTestType == HitTestType.ColumnHeader)) || ((savedHitTestInformation.HitTestType == HitTestType.FloatingObject) || (savedHitTestInformation.HitTestType == HitTestType.FormulaSelection)))
                {
                    double viewportWidth = this.GetViewportWidth(savedHitTestInformation.ColumnViewportIndex);
                    this._horizontalSelectionMgr = new ScrollSelectionManager(0.0, viewportWidth, new Action<bool>(this.OnHorizontalSelectionTick));
                }
            }
        }

        private void StartSheetSelecting()
        {
            SheetLayout sheetLayout = this.GetSheetLayout();
            int viewportTopRow = this.GetViewportTopRow((sheetLayout.FrozenHeight > 0.0) ? -1 : 0);
            int viewportLeftColumn = this.GetViewportLeftColumn((sheetLayout.FrozenWidth > 0.0) ? -1 : 0);
            Cell cell = this.GetCanSelectedCell(viewportTopRow, viewportLeftColumn, (viewportTopRow < 0) ? -1 : (this.Worksheet.RowCount - viewportTopRow), (viewportLeftColumn < 0) ? -1 : (this.Worksheet.ColumnCount - viewportLeftColumn));
            if (cell != null)
            {
                viewportTopRow = cell.Row.Index;
                viewportLeftColumn = cell.Column.Index;
                if (((this.Worksheet.ColumnCount <= 0) || (this.Worksheet.RowCount <= 0)) || !this.PreviewLeaveCell(viewportTopRow, viewportLeftColumn))
                {
                    this.SetActiveColumnViewportIndex((sheetLayout.FrozenWidth > 0.0) ? -1 : 0);
                    this.SetActiveRowViewportIndex((sheetLayout.FrozenHeight > 0.0) ? -1 : 0);
                    CellRange[] oldSelection = Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections);
                    if ((this.Worksheet.ColumnCount > 0) && (this.Worksheet.RowCount > 0))
                    {
                        this.SetActiveCellInternal(viewportTopRow, viewportLeftColumn, true);
                    }
                    this.Worksheet.ClearSelections();
                    this.Worksheet.AddSelection(-1, -1, -1, -1, false);
                    if (this.RaiseSelectionChanging(oldSelection, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections)))
                    {
                        this.RaiseSelectionChanged();
                    }
                }
            }
        }

        private void StartTapSelectCells()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            int row = savedHitTestInformation.ViewportInfo.Row;
            int column = savedHitTestInformation.ViewportInfo.Column;
            this.CloseTouchToolbar();
            if ((savedHitTestInformation.ViewportInfo.Row > -1) && (savedHitTestInformation.ViewportInfo.Column > -1))
            {
                CellLayout layout = this.GetViewportCellLayoutModel(savedHitTestInformation.RowViewportIndex, savedHitTestInformation.ColumnViewportIndex).FindCell(savedHitTestInformation.ViewportInfo.Row, savedHitTestInformation.ViewportInfo.Column);
                if (layout != null)
                {
                    row = layout.Row;
                    column = layout.Column;
                    int rowCount = layout.RowCount;
                    int columnCount = layout.ColumnCount;
                }
                if (this.Worksheet.GetActualStyleInfo(row, column, SheetArea.Cells).Focusable)
                {
                    this.IsWorking = true;
                    if (this.PreviewLeaveCell(row, column))
                    {
                        this.IsWorking = false;
                    }
                    else
                    {
                        this.IsSelectingCells = false;
                        this.IsTouchSelectingCells = true;
                        this.SetActiveColumnViewportIndex(savedHitTestInformation.ColumnViewportIndex);
                        this.SetActiveRowViewportIndex(savedHitTestInformation.RowViewportIndex);
                        this.SetActiveCellInternal(row, column, false);
                        CellRange[] oldSelection = Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections);
                        this.SavedOldSelections = oldSelection;
                        if ((this.Worksheet.SelectionPolicy == SelectionPolicy.MultiRange) && this.CanTouchMultiSelect)
                        {
                            this.Worksheet.AddSelection(row, column, 1, 1);
                        }
                        else
                        {
                            this.Worksheet.SetSelection(row, column, 1, 1);
                            this.RefreshSelection();
                        }
                        this.RaiseSelectionChanging(oldSelection, Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections));
                        if (!this.IsWorking)
                        {
                            this.EndCellSelecting();
                        }
                    }
                }
            }
        }

        internal void StartTextInput(EditorStatus status = EditorStatus.Edit)
        {
            this.StartTextInputInternal(false, null, status, true);
        }

        private void StartTextInputInternal(bool selectAll = false, string defaultText = null, EditorStatus status = (EditorStatus)2, bool fromTextInputService = false)
        {
            if ((!this.IsEditing || this.StopCellEditing(false)) && (this.Worksheet != null))
            {
                this.EditingViewport = null;
                if (!this.IsEditing && this.IsCellEditable(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex))
                {
                    GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(this.GetActiveRowViewportIndex(), this.GetActiveColumnViewportIndex());
                    if (viewportRowsPresenter != null)
                    {
                        CoreWindow.GetForCurrentThread().ReleasePointerCapture();
                        this.EditingViewport = viewportRowsPresenter;
                        bool flag = false;
                        if (fromTextInputService)
                        {
                            flag = viewportRowsPresenter.StartTextInput(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex, status);
                        }
                        else
                        {
                            flag = viewportRowsPresenter.StartCellEditing(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex, selectAll, defaultText, status);
                        }
                        this.IsEditing = flag;
                        this._host.IsTabStop = !flag;
                        if (!flag)
                        {
                            this.EditingViewport = null;
                        }
                    }
                }
            }
        }

        private void StartTouchColumnResizing()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            SheetLayout sheetLayout = this.GetSheetLayout();
            ColumnLayout viewportResizingColumnLayoutFromXForTouch = null;
            this.IsWorking = true;
            this.IsTouchResizingColumns = true;
            this._DoTouchResizing = false;
            this.CloseTouchToolbar();
            if (this._resizingTracker == null)
            {
                SolidColorBrush brush = null;
                Dt.Cells.Data.UIAdaptor.InvokeSync(delegate
                {
                    brush = new SolidColorBrush(Colors.Black);
                });
                Windows.UI.Xaml.Shapes.Line line = new Windows.UI.Xaml.Shapes.Line();
                line.Stroke = brush;
                line.StrokeThickness = 1.0;
                line.StrokeDashArray = new DoubleCollection { 1.0 };
                this._resizingTracker = line;
                this.TrackersContainer.Children.Add(this._resizingTracker);
            }
            this._resizingTracker.Visibility = Visibility.Visible;
            switch (savedHitTestInformation.HitTestType)
            {
                case HitTestType.Corner:
                    viewportResizingColumnLayoutFromXForTouch = this.GetRowHeaderColumnLayoutModel().FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                    break;

                case HitTestType.ColumnHeader:
                    viewportResizingColumnLayoutFromXForTouch = this.GetViewportResizingColumnLayoutFromXForTouch(savedHitTestInformation.ColumnViewportIndex, savedHitTestInformation.HitPoint.X);
                    if (viewportResizingColumnLayoutFromXForTouch == null)
                    {
                        viewportResizingColumnLayoutFromXForTouch = this.GetViewportColumnLayoutModel(savedHitTestInformation.ColumnViewportIndex).FindColumn(savedHitTestInformation.HeaderInfo.ResizingColumn);
                        if ((viewportResizingColumnLayoutFromXForTouch == null) && (savedHitTestInformation.ColumnViewportIndex == 0))
                        {
                            viewportResizingColumnLayoutFromXForTouch = this.GetViewportResizingColumnLayoutFromXForTouch(-1, savedHitTestInformation.HitPoint.X);
                        }
                        if ((viewportResizingColumnLayoutFromXForTouch == null) && ((savedHitTestInformation.ColumnViewportIndex == 0) || (savedHitTestInformation.ColumnViewportIndex == -1)))
                        {
                            viewportResizingColumnLayoutFromXForTouch = this.GetRowHeaderResizingColumnLayoutFromXForTouch(savedHitTestInformation.HitPoint.X);
                        }
                    }
                    break;
            }
            if (viewportResizingColumnLayoutFromXForTouch != null)
            {
                this._resizingTracker.X1 = (viewportResizingColumnLayoutFromXForTouch.X + viewportResizingColumnLayoutFromXForTouch.Width) - 0.5;
                this._resizingTracker.Y1 = sheetLayout.HeaderY;
                this._resizingTracker.X2 = this._resizingTracker.X1;
                this._resizingTracker.Y2 = this._resizingTracker.Y1 + this.AvailableSize.Height;
                if (((this.InputDeviceType != Dt.Cells.UI.InputDeviceType.Touch) && ((this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Both) || (this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Column))) && ((savedHitTestInformation.ColumnViewportIndex > -2) && (this._columnHeaderPresenters[savedHitTestInformation.ColumnViewportIndex + 1].GetViewportCell(savedHitTestInformation.HeaderInfo.Row, savedHitTestInformation.HeaderInfo.Column, true) != null)))
                {
                    this.UpdateResizeToolTip(this.GetHorizontalResizeTip(viewportResizingColumnLayoutFromXForTouch.Width), true);
                }
            }
        }

        private void StartTouchDragDopping()
        {
            if (!this.IsTouchDrapDropping)
            {
                CellRange fromRange = this.GetFromRange();
                if (fromRange != null)
                {
                    this.IsTouchDrapDropping = true;
                    this.IsWorking = true;
                    this.UpdateDragIndicatorAndStartTimer(fromRange);
                }
            }
        }

        private void StartTouchDragFill()
        {
            if (!this.IsTouchDragFilling)
            {
                this.UpdateDragFillStartRange();
                if (this._dragFillStartRange != null)
                {
                    this.IsTouchDragFilling = true;
                    this.IsWorking = true;
                    this.UpdateDragFillViewportInfoAndStartTimer();
                }
            }
        }

        private void StartTouchingSelecting()
        {
            if (!this.IsEntrieSheetSelection() && this.IsEntrieRowSelection())
            {
                this.IsTouchSelectingRows = true;
            }
            else if (!this.IsEntrieSheetSelection() && this.IsEntrieColumnSelection())
            {
                this.IsTouchSelectingColumns = true;
            }
            else
            {
                this.IsTouchSelectingCells = true;
            }
            this.CloseTouchToolbar();
            CellRange[] rangeArray = Enumerable.ToArray<CellRange>((IEnumerable<CellRange>)this.Worksheet.Selections);
            this.SavedOldSelections = rangeArray;
            this.IsWorking = true;
            this.StartScrollTimer();
        }

        private void StartTouchRowResizing()
        {
            Action action = null;
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            SheetLayout sheetLayout = this.GetSheetLayout();
            RowLayout viewportResizingRowLayoutFromYForTouch = null;
            this._DoTouchResizing = false;
            this.IsTouchResizingRows = true;
            this.IsWorking = true;
            this.CloseTouchToolbar();
            if (this._resizingTracker == null)
            {
                this._resizingTracker = new Windows.UI.Xaml.Shapes.Line();
                if (action == null)
                {
                    action = delegate
                    {
                        this._resizingTracker.Stroke = new SolidColorBrush(Colors.Black);
                    };
                }
                Dt.Cells.Data.UIAdaptor.InvokeSync(action);
                this._resizingTracker.StrokeThickness = 1.0;
                this._resizingTracker.StrokeDashArray = new DoubleCollection { 1.0 };
                this.TrackersContainer.Children.Add(this._resizingTracker);
            }
            this._resizingTracker.Visibility = Visibility.Visible;
            switch (savedHitTestInformation.HitTestType)
            {
                case HitTestType.Corner:
                    viewportResizingRowLayoutFromYForTouch = this.GetColumnHeaderRowLayoutModel().FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                    break;

                case HitTestType.RowHeader:
                    viewportResizingRowLayoutFromYForTouch = this.GetViewportResizingRowLayoutFromYForTouch(savedHitTestInformation.RowViewportIndex, savedHitTestInformation.HitPoint.Y);
                    if (((viewportResizingRowLayoutFromYForTouch == null) && (savedHitTestInformation.HeaderInfo != null)) && (savedHitTestInformation.HeaderInfo.ResizingRow >= 0))
                    {
                        viewportResizingRowLayoutFromYForTouch = this.GetViewportRowLayoutModel(savedHitTestInformation.RowViewportIndex).FindRow(savedHitTestInformation.HeaderInfo.ResizingRow);
                    }
                    if ((viewportResizingRowLayoutFromYForTouch == null) && (savedHitTestInformation.RowViewportIndex == 0))
                    {
                        viewportResizingRowLayoutFromYForTouch = this.GetViewportResizingRowLayoutFromYForTouch(-1, savedHitTestInformation.HitPoint.Y);
                    }
                    if ((viewportResizingRowLayoutFromYForTouch == null) && ((savedHitTestInformation.RowViewportIndex == 0) || (savedHitTestInformation.RowViewportIndex == -1)))
                    {
                        viewportResizingRowLayoutFromYForTouch = this.GetColumnHeaderResizingRowLayoutFromYForTouch(savedHitTestInformation.HitPoint.Y);
                    }
                    break;
            }
            if (viewportResizingRowLayoutFromYForTouch != null)
            {
                this._resizingTracker.X1 = sheetLayout.HeaderX;
                this._resizingTracker.X2 = sheetLayout.HeaderX + this.AvailableSize.Width;
                this._resizingTracker.Y1 = (viewportResizingRowLayoutFromYForTouch.Y + viewportResizingRowLayoutFromYForTouch.Height) - 0.5;
                this._resizingTracker.Y2 = this._resizingTracker.Y1;
                if (((this.InputDeviceType != Dt.Cells.UI.InputDeviceType.Touch) && ((this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Both) || (this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Row))) && ((savedHitTestInformation.RowViewportIndex > -2) && (this._rowHeaderPresenters[savedHitTestInformation.RowViewportIndex + 1].GetViewportCell(savedHitTestInformation.HeaderInfo.Row, savedHitTestInformation.HeaderInfo.Column, true) != null)))
                {
                    this.UpdateResizeToolTip(this.GetVerticalResizeTip(viewportResizingRowLayoutFromYForTouch.Height), false);
                }
            }
        }

        internal virtual bool StartTouchTap(Windows.Foundation.Point point)
        {
            if (this.IsMouseInEditor() || this.IsMouseInRangeGroup())
            {
                return false;
            }
            if (!this.CanSelectFormula)
            {
                this.FocusInternal();
            }
            this._lastClickPoint = point;
            return true;
        }

        /// <summary>
        /// Stops editing the active cell.
        /// </summary>
        /// <param name="cancel">if set to <c>true</c> does not apply the edited text to the cell.</param>
        /// <returns><c>true</c> when able to stop cell editing successfully; otherwise, <c>false</c>.</returns>
        public bool StopCellEditing(bool cancel = false)
        {
            if (this.IsEditing && (this.Worksheet != null))
            {
                GcViewport editingViewport = this.EditingViewport;
                if (editingViewport != null)
                {
                    if (!cancel && (this.ApplyEditingValue(cancel) == DataValidationResult.Retry))
                    {
                        editingViewport.RetryEditing();
                    }
                    else
                    {
                        bool editorDirty = editingViewport.EditorDirty;
                        editingViewport.StopCellEditing(cancel);
                        if (editorDirty && !cancel)
                        {
                            this.RefreshViewportCells(this._viewportPresenters, 0, 0, this.Worksheet.RowCount, this.Worksheet.ColumnCount);
                        }
                    }
                    if (editingViewport.IsEditing())
                    {
                        return false;
                    }
                    this.EditingViewport = null;
                }
            }
            this.IsEditing = false;
            return true;
        }

        private void StopScrollTimer()
        {
            if (this._verticalSelectionMgr != null)
            {
                this._verticalSelectionMgr.Dispose();
                this._verticalSelectionMgr = null;
            }
            if (this._horizontalSelectionMgr != null)
            {
                this._horizontalSelectionMgr.Dispose();
                this._horizontalSelectionMgr = null;
            }
        }

        /// <summary>
        /// Suspends all events.
        /// </summary>
        public void SuspendEvent()
        {
            this._eventSuspended++;
        }

        internal void SuspendFloatingObjectsInvalidate()
        {
            if ((this._viewportPresenters != null) && (this._viewportPresenters != null))
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            viewport.SuspendFloatingObjectsInvalidate();
                        }
                    }
                }
            }
        }

        internal void SuspendInvalidate()
        {
            this._suspendViewInvalidate++;
            this.SuspendFloatingObjectsInvalidate();
        }

        private void SwitchDragDropIndicator()
        {
            bool flag;
            bool flag2;
            KeyboardHelper.GetMetaKeyState(out flag, out flag2);
            if (((this._dragToRowViewport != -2) && (this._dragToColumnViewport != -2)) && ((this._dragToRow != -2) && (this._dragToColumn != -2)))
            {
                bool flag3 = this._isDragInsert;
                if (flag)
                {
                    if (!flag3 && ((this._dragDropFromRange.Row == -1) || (this._dragDropFromRange.Column == -1)))
                    {
                        this.RefreshDragDropInsertIndicator(this._dragToRowViewport, this._dragToColumnViewport, this._dragToRow, this._dragToColumn);
                    }
                }
                else if (flag3)
                {
                    this.RefreshDragDropIndicator(this._dragToRowViewport, this._dragToColumnViewport, this._dragToRow, this._dragToColumn);
                }
            }
            this._isDragInsert = flag;
            this._isDragCopy = flag2;
        }

        private void SynViewportChartShapeThemes()
        {
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if (viewport != null)
                        {
                            viewport.SynChartShapeThemes();
                        }
                    }
                }
            }
        }

        XmlSchema IXmlSerializable.GetSchema()
        {
            return null;
        }

        void IXmlSerializable.ReadXml(XmlReader reader)
        {
            Serializer.InitReader(reader);
            Dt.Cells.Data.UIAdaptor.InvokeSync(delegate
            {
                this.Reset();
            });
            while (reader.Read())
            {
                if (reader.NodeType == ((XmlNodeType)((int)XmlNodeType.Element)))
                {
                    this.ReadXmlInternal(reader);
                }
            }
        }

        void IXmlSerializable.WriteXml(XmlWriter writer)
        {
            Serializer.InitWriter(writer);
            Serializer.WriteStartObj("SpreadUI", writer);
            this.WriteXmlInternal(writer);
            Serializer.WriteEndObj(writer);
        }

        private Windows.Foundation.Point TapInColumnHeaderSelection(Windows.Foundation.Point point, HitTestInformation hi)
        {
            this.UnSelectedAllFloatingObjects();
            this.StartColumnSelecting();
            this.EndColumnSelecting();
            this.RaiseTouchCellClick(hi);
            return point;
        }

        private Windows.Foundation.Point TapInRowHeaderSelection(Windows.Foundation.Point point, HitTestInformation hi)
        {
            this.UnSelectedAllFloatingObjects();
            this.StartRowsSelecting();
            this.EndRowSelecting();
            this.RaiseTouchCellClick(hi);
            return point;
        }

        private bool TapInSelection(Windows.Foundation.Point point)
        {
            if (this._formulaSelectionFeature.IsSelectionBegined)
            {
                return false;
            }
            return this.GetActiveSelectionBounds().Contains(point);
        }

        private bool TapInSelectionColumn(int column)
        {
            ReadOnlyCollection<CellRange> selections = this.Worksheet.Selections;
            if (selections != null)
            {
                foreach (CellRange range in selections)
                {
                    if (((range.Row == -1) && (range.RowCount == -1)) && range.IntersectColumn(column))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private bool TapInSelectionRow(int row)
        {
            ReadOnlyCollection<CellRange> selections = this.Worksheet.Selections;
            if (selections != null)
            {
                foreach (CellRange range in selections)
                {
                    if (((range.Column == -1) && (range.ColumnCount == -1)) && range.IntersectRow(row))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        internal virtual HitTestInformation TouchHitTest(double x, double y)
        {
            Windows.Foundation.Point hitPoint = new Windows.Foundation.Point(x, y);
            HitTestInformation hi = new HitTestInformation
            {
                HitTestType = HitTestType.Empty,
                ColumnViewportIndex = -2,
                RowViewportIndex = -2,
                HitPoint = hitPoint
            };
            ViewportInfo viewportInfo = this.GetViewportInfo();
            int columnViewportCount = viewportInfo.ColumnViewportCount;
            int rowViewportCount = viewportInfo.RowViewportCount;
            if (this.IsCornerRangeGroupHitTest(hitPoint))
            {
                hi.HitTestType = HitTestType.CornerRangeGroup;
                return hi;
            }
            if (this.IsRowRangeGroupHitTest(hitPoint))
            {
                hi.HitTestType = HitTestType.RowRangeGroup;
                return hi;
            }
            if (this.IsColumnRangeGroupHitTest(hitPoint))
            {
                hi.HitTestType = HitTestType.ColumnRangeGroup;
                return hi;
            }
            if (this.GetCornerRectangle().Contains(hitPoint))
            {
                HeaderHitTestInformation information2 = new HeaderHitTestInformation
                {
                    Column = -1,
                    Row = -1,
                    ResizingColumn = -1,
                    ResizingRow = -1
                };
                hi.HitTestType = HitTestType.Corner;
                hi.HeaderInfo = information2;
                ColumnLayout rowHeaderColumnLayoutFromX = this.GetRowHeaderColumnLayoutFromX(hitPoint.X);
                RowLayout columnHeaderRowLayoutFromY = this.GetColumnHeaderRowLayoutFromY(hitPoint.Y);
                ColumnLayout rowHeaderResizingColumnLayoutFromXForTouch = this.GetRowHeaderResizingColumnLayoutFromXForTouch(hitPoint.X);
                RowLayout columnHeaderResizingRowLayoutFromYForTouch = this.GetColumnHeaderResizingRowLayoutFromYForTouch(hitPoint.Y);
                if (rowHeaderColumnLayoutFromX != null)
                {
                    information2.Column = rowHeaderColumnLayoutFromX.Column;
                }
                if (columnHeaderRowLayoutFromY != null)
                {
                    information2.Row = columnHeaderRowLayoutFromY.Row;
                }
                if (rowHeaderResizingColumnLayoutFromXForTouch != null)
                {
                    information2.InColumnResize = true;
                    information2.ResizingColumn = rowHeaderResizingColumnLayoutFromXForTouch.Column;
                }
                if (columnHeaderResizingRowLayoutFromYForTouch != null)
                {
                    information2.InRowResize = true;
                    information2.ResizingRow = columnHeaderResizingRowLayoutFromYForTouch.Row;
                }
                return hi;
            }
            for (int i = -1; i <= rowViewportCount; i++)
            {
                if (this.GetRowHeaderRectangle(i).Expand(2, 6).Contains(hitPoint))
                {
                    HeaderHitTestInformation information4 = new HeaderHitTestInformation
                    {
                        Row = -1,
                        Column = -1,
                        ResizingColumn = -1,
                        ResizingRow = -1
                    };
                    hi.HitTestType = HitTestType.RowHeader;
                    hi.RowViewportIndex = i;
                    hi.HeaderInfo = information4;
                    ColumnLayout layout5 = this.GetRowHeaderColumnLayoutFromX(hitPoint.X);
                    RowLayout viewportRowLayoutFromY = this.GetViewportRowLayoutFromY(i, hitPoint.Y);
                    RowLayout viewportResizingRowLayoutFromYForTouch = this.GetViewportResizingRowLayoutFromYForTouch(i, hitPoint.Y);
                    if ((viewportResizingRowLayoutFromYForTouch == null) && (hi.RowViewportIndex == 0))
                    {
                        viewportResizingRowLayoutFromYForTouch = this.GetViewportResizingRowLayoutFromYForTouch(-1, hi.HitPoint.Y);
                    }
                    if ((viewportResizingRowLayoutFromYForTouch == null) && ((hi.RowViewportIndex == 0) || (hi.RowViewportIndex == -1)))
                    {
                        viewportResizingRowLayoutFromYForTouch = this.GetColumnHeaderResizingRowLayoutFromYForTouch(hi.HitPoint.Y);
                        if (viewportResizingRowLayoutFromYForTouch != null)
                        {
                            hi.HitTestType = HitTestType.Corner;
                        }
                    }
                    if (layout5 != null)
                    {
                        information4.Column = layout5.Column;
                    }
                    if (viewportRowLayoutFromY != null)
                    {
                        information4.Row = viewportRowLayoutFromY.Row;
                    }
                    if ((viewportResizingRowLayoutFromYForTouch != null) && (((viewportResizingRowLayoutFromYForTouch.Height > 0.0) || (viewportResizingRowLayoutFromYForTouch.Row >= this.Worksheet.RowCount)) || !this.Worksheet.RowRangeGroup.IsCollapsed(viewportResizingRowLayoutFromYForTouch.Row)))
                    {
                        information4.InRowResize = true;
                        information4.ResizingRow = viewportResizingRowLayoutFromYForTouch.Row;
                    }
                    return hi;
                }
            }
            for (int j = -1; j <= columnViewportCount; j++)
            {
                if (this.GetColumnHeaderRectangle(j).Expand(3, 1).Contains(hitPoint))
                {
                    HeaderHitTestInformation information6 = new HeaderHitTestInformation
                    {
                        Row = -1,
                        Column = -1,
                        ResizingRow = -1,
                        ResizingColumn = -1
                    };
                    hi.HitTestType = HitTestType.ColumnHeader;
                    hi.HeaderInfo = information6;
                    hi.ColumnViewportIndex = j;
                    ColumnLayout viewportColumnLayoutFromX = this.GetViewportColumnLayoutFromX(j, hitPoint.X);
                    RowLayout layout9 = this.GetColumnHeaderRowLayoutFromY(hitPoint.Y);
                    ColumnLayout viewportResizingColumnLayoutFromXForTouch = this.GetViewportResizingColumnLayoutFromXForTouch(j, hitPoint.X);
                    if (viewportResizingColumnLayoutFromXForTouch == null)
                    {
                        if (hi.ColumnViewportIndex == 0)
                        {
                            viewportResizingColumnLayoutFromXForTouch = this.GetViewportResizingColumnLayoutFromXForTouch(-1, hitPoint.X);
                        }
                        if ((viewportResizingColumnLayoutFromXForTouch == null) && ((hi.ColumnViewportIndex == 0) || (hi.ColumnViewportIndex == -1)))
                        {
                            viewportResizingColumnLayoutFromXForTouch = this.GetRowHeaderResizingColumnLayoutFromXForTouch(hitPoint.X);
                            if (viewportResizingColumnLayoutFromXForTouch != null)
                            {
                                hi.HitTestType = HitTestType.Corner;
                            }
                        }
                    }
                    if (viewportResizingColumnLayoutFromXForTouch == null)
                    {
                        if (hi.ColumnViewportIndex == 0)
                        {
                            viewportResizingColumnLayoutFromXForTouch = this.GetViewportResizingColumnLayoutFromX(-1, hitPoint.X);
                        }
                        if ((viewportResizingColumnLayoutFromXForTouch == null) && ((hi.ColumnViewportIndex == 0) || (hi.ColumnViewportIndex == -1)))
                        {
                            viewportResizingColumnLayoutFromXForTouch = this.GetRowHeaderResizingColumnLayoutFromXForTouch(hitPoint.X);
                            if (viewportResizingColumnLayoutFromXForTouch != null)
                            {
                                hi.HitTestType = HitTestType.Corner;
                            }
                        }
                    }
                    if (viewportColumnLayoutFromX != null)
                    {
                        hi.HeaderInfo.Column = viewportColumnLayoutFromX.Column;
                    }
                    if (layout9 != null)
                    {
                        hi.HeaderInfo.Row = layout9.Row;
                    }
                    if ((viewportResizingColumnLayoutFromXForTouch != null) && (((viewportResizingColumnLayoutFromXForTouch.Width > 0.0) || (viewportResizingColumnLayoutFromXForTouch.Column >= this.Worksheet.ColumnCount)) || !this.Worksheet.ColumnRangeGroup.IsCollapsed(viewportResizingColumnLayoutFromXForTouch.Column)))
                    {
                        hi.HeaderInfo.InColumnResize = true;
                        hi.HeaderInfo.ResizingColumn = viewportResizingColumnLayoutFromXForTouch.Column;
                    }
                    return hi;
                }
            }
            for (int k = -1; k <= rowViewportCount; k++)
            {
                for (int m = -1; m <= columnViewportCount; m++)
                {
                    if (this.GetViewportRectangle(k, m).Contains(hitPoint))
                    {
                        hi.ColumnViewportIndex = m;
                        hi.RowViewportIndex = k;
                        ViewportHitTestInformation information8 = new ViewportHitTestInformation
                        {
                            Column = -1,
                            Row = -1
                        };
                        hi.HitTestType = HitTestType.Viewport;
                        hi.ViewportInfo = information8;
                        ColumnLayout layout11 = this.GetViewportColumnLayoutFromX(m, hitPoint.X);
                        RowLayout layout12 = this.GetViewportRowLayoutFromY(k, hitPoint.Y);
                        if (layout11 != null)
                        {
                            hi.ViewportInfo.Column = layout11.Column;
                        }
                        if (layout12 != null)
                        {
                            hi.ViewportInfo.Row = layout12.Row;
                        }
                        if (!this.HitTestFloatingObject(k, m, hitPoint.X, hitPoint.Y, hi))
                        {
                            GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(k, m);
                            if ((layout11 != null) && (layout12 != null))
                            {
                                if (this.IsMouseInDragFillIndicator(hitPoint.X, hitPoint.Y, k, m, true))
                                {
                                    hi.ViewportInfo.InDragFillIndicator = true;
                                }
                                else if (this.IsMouseInDragDropLocation(hitPoint.X, hitPoint.Y, k, m, true))
                                {
                                    hi.ViewportInfo.InSelectionDrag = true;
                                }
                            }
                            if (((this.IsEditing && !hi.ViewportInfo.InSelectionDrag) && (!hi.ViewportInfo.InDragFillIndicator && (viewportRowsPresenter != null))) && viewportRowsPresenter.EditorBounds.Contains(new Windows.Foundation.Point(x - viewportRowsPresenter.Location.X, y - viewportRowsPresenter.Location.Y)))
                            {
                                hi.ViewportInfo.InEditor = true;
                            }
                            return hi;
                        }
                    }
                }
            }
            return hi;
        }

        internal int TryGetNextScrollableColumn(int startColumn)
        {
            int frozenColumnCount = this.Worksheet.FrozenColumnCount;
            int num2 = (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount) - 1;
            if (startColumn < frozenColumnCount)
            {
                return frozenColumnCount;
            }
            if (startColumn > num2)
            {
                return num2;
            }
            for (int i = startColumn; i <= num2; i++)
            {
                if (this.Worksheet.GetActualColumnWidth(i, SheetArea.Cells) > 0.0)
                {
                    return i;
                }
            }
            return -1;
        }

        internal int TryGetNextScrollableRow(int startRow)
        {
            int frozenRowCount = this.Worksheet.FrozenRowCount;
            int num2 = (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount) - 1;
            if (startRow < frozenRowCount)
            {
                return frozenRowCount;
            }
            if (startRow > num2)
            {
                return num2;
            }
            for (int i = startRow; i <= num2; i++)
            {
                if (this.Worksheet.GetActualRowHeight(i, SheetArea.Cells) > 0.0)
                {
                    return i;
                }
            }
            return -1;
        }

        internal int TryGetPreviousScrollableColumn(int startColumn)
        {
            int frozenColumnCount = this.Worksheet.FrozenColumnCount;
            int num2 = (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount) - 1;
            if (startColumn < frozenColumnCount)
            {
                return frozenColumnCount;
            }
            if (startColumn > num2)
            {
                return num2;
            }
            for (int i = startColumn; i >= frozenColumnCount; i--)
            {
                if (this.Worksheet.GetActualColumnWidth(i, SheetArea.Cells) > 0.0)
                {
                    return i;
                }
            }
            return -1;
        }

        internal int TryGetPreviousScrollableRow(int startRow)
        {
            int frozenRowCount = this.Worksheet.FrozenRowCount;
            int num2 = (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount) - 1;
            if (startRow < frozenRowCount)
            {
                return frozenRowCount;
            }
            if (startRow > num2)
            {
                return num2;
            }
            for (int i = startRow; i >= frozenRowCount; i--)
            {
                if (this.Worksheet.GetActualRowHeight(i, SheetArea.Cells) > 0.0)
                {
                    return i;
                }
            }
            return -1;
        }

        internal void UnSelectedAllFloatingObjects()
        {
            FloatingObject[] allFloatingObjects = this.GetAllFloatingObjects();
            if (allFloatingObjects.Length > 0)
            {
                FloatingObject[] objArray2 = allFloatingObjects;
                for (int i = 0; i < objArray2.Length; i++)
                {
                    IFloatingObject obj2 = objArray2[i];
                    obj2.IsSelected = false;
                }
            }
        }

        private void UnSelectFloatingObject(FloatingObject floatingObject)
        {
            try
            {
                if (!this._isMouseDownFloatingObject)
                {
                    bool flag;
                    bool flag2;
                    KeyboardHelper.GetMetaKeyState(out flag, out flag2);
                    if (((flag2 || flag) && !(floatingObject.Locked && this.Worksheet.Protect)) && floatingObject.IsSelected)
                    {
                        floatingObject.IsSelected = false;
                    }
                }
            }
            finally
            {
                this._isMouseDownFloatingObject = false;
            }
        }

        internal void UpdateColumnHeaderCellsState(int row, int column, int rowCount, int columnCount)
        {
            if (this._columnHeaderPresenters != null)
            {
                rowCount = ((rowCount < 0) || (row < 0)) ? this.Worksheet.ColumnHeader.RowCount : rowCount;
                columnCount = ((columnCount < 0) || (column < 0)) ? this.Worksheet.ColumnCount : columnCount;
                row = (row < 0) ? 0 : row;
                column = (column < 0) ? 0 : column;
                new CellRange(row, column, rowCount, columnCount);
                foreach (GcViewport viewport in this._columnHeaderPresenters)
                {
                    if (viewport != null)
                    {
                        ColumnLayoutModel viewportColumnLayoutModel = this.GetViewportColumnLayoutModel(viewport.ColumnViewportIndex);
                        this.GetColumnHeaderRowLayoutModel();
                        if ((viewportColumnLayoutModel != null) && (viewportColumnLayoutModel.Count > 0))
                        {
                            for (int i = row; i < (row + rowCount); i++)
                            {
                                RowPresenter presenter = viewport.GetRow(i);
                                if (presenter != null)
                                {
                                    for (int j = Math.Max(column, viewportColumnLayoutModel[0].Column); j < (column + columnCount); j++)
                                    {
                                        if (j > viewportColumnLayoutModel[viewportColumnLayoutModel.Count - 1].Column)
                                        {
                                            break;
                                        }
                                        CellPresenterBase cell = presenter.GetCell(j);
                                        if (cell != null)
                                        {
                                            cell.ApplyState();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        internal void UpdateCornerHeaderCellState()
        {
            if (this._cornerPresenter != null)
            {
                this._cornerPresenter.GetRow(0).GetCell(0).ApplyState();
            }
        }

        private void UpdateCurrentFillRange()
        {
            this._currentFillRange = this.GetCurrentFillRange();
        }

        private void UpdateCurrentFillSettings()
        {
            if (!this.IsDragFillWholeRows && !this.IsDragFillWholeColumns)
            {
                if ((this._dragToRow < this.DragFillStartTopRow) || (this._dragToRow > this.DragFillStartBottomRow))
                {
                    if (this._dragToRow >= this.DragFillStartTopRow)
                    {
                        if (this._dragToRow > this.DragFillStartBottomRow)
                        {
                            if ((this._dragToColumn >= this.DragFillStartLeftColumn) && (this._dragToColumn <= this.DragFillStartRightColumn))
                            {
                                this._currentFillDirection = DragFillDirection.Down;
                            }
                            else if (this._dragToColumn < this.DragFillStartLeftColumn)
                            {
                                int num9 = Math.Abs((int)(this._dragToColumn - this.DragFillStartLeftColumn));
                                if (Math.Abs((int)(this._dragToRow - this.DragFillStartBottomRow)) >= num9)
                                {
                                    this._currentFillDirection = DragFillDirection.Down;
                                }
                                else
                                {
                                    this._currentFillDirection = DragFillDirection.Left;
                                }
                            }
                            else if (this._dragToColumn > this.DragFillStartRightColumn)
                            {
                                int num11 = Math.Abs((int)(this._dragToColumn - this.DragFillStartRightColumn));
                                if (Math.Abs((int)(this._dragToRow - this.DragFillStartBottomRow)) >= num11)
                                {
                                    this._currentFillDirection = DragFillDirection.Down;
                                }
                                else
                                {
                                    this._currentFillDirection = DragFillDirection.Right;
                                }
                            }
                        }
                    }
                    else if ((this._dragToColumn >= this.DragFillStartLeftColumn) && (this._dragToColumn <= this.DragFillStartRightColumn))
                    {
                        this._currentFillDirection = DragFillDirection.Up;
                    }
                    else if (this._dragToColumn < this.DragFillStartLeftColumn)
                    {
                        int num5 = Math.Abs((int)(this._dragToColumn - this.DragFillStartLeftColumn));
                        if (Math.Abs((int)(this._dragToRow - this.DragFillStartTopRow)) >= num5)
                        {
                            this._currentFillDirection = DragFillDirection.Up;
                        }
                        else
                        {
                            this._currentFillDirection = DragFillDirection.Left;
                        }
                    }
                    else if (this._dragToColumn > this.DragFillStartRightColumn)
                    {
                        int num7 = Math.Abs((int)(this._dragToColumn - this.DragFillStartRightColumn));
                        if (Math.Abs((int)(this._dragToRow - this.DragFillStartTopRow)) >= num7)
                        {
                            this._currentFillDirection = DragFillDirection.Up;
                        }
                        else
                        {
                            this._currentFillDirection = DragFillDirection.Right;
                        }
                    }
                }
                else if ((this._dragToColumn >= this.DragFillStartLeftColumn) && (this._dragToColumn <= this.DragFillStartRightColumn))
                {
                    int num = Math.Abs((int)(this._dragToColumn - this.DragFillStartRightColumn));
                    int num2 = Math.Abs((int)(this._dragToRow - this.DragFillStartBottomRow));
                    if (num2 > num)
                    {
                        this._currentFillDirection = DragFillDirection.UpClear;
                    }
                    else if (num2 < num)
                    {
                        this._currentFillDirection = DragFillDirection.LeftClear;
                    }
                    else
                    {
                        RowLayout dragFillStartBottomRowLayout = this.DragFillStartBottomRowLayout;
                        if (dragFillStartBottomRowLayout == null)
                        {
                            dragFillStartBottomRowLayout = this.DragFillToViewportBottomRowLayout;
                        }
                        if (this.MousePosition.Y > (dragFillStartBottomRowLayout.Y + dragFillStartBottomRowLayout.Height))
                        {
                            this._currentFillDirection = DragFillDirection.Down;
                        }
                        else
                        {
                            ColumnLayout dragFillStartRightColumnLayout = this.DragFillStartRightColumnLayout;
                            if (dragFillStartRightColumnLayout == null)
                            {
                                dragFillStartRightColumnLayout = this.DragFillToViewportRightColumnLayout;
                            }
                            double num3 = (dragFillStartRightColumnLayout.X + dragFillStartRightColumnLayout.Width) - this.MousePosition.X;
                            double num4 = (dragFillStartBottomRowLayout.Y + dragFillStartBottomRowLayout.Height) - this.MousePosition.Y;
                            if (num3 >= num4)
                            {
                                this._currentFillDirection = DragFillDirection.LeftClear;
                            }
                            else
                            {
                                this._currentFillDirection = DragFillDirection.UpClear;
                            }
                        }
                    }
                }
                else if (this._dragToColumn < this.DragFillStartLeftColumn)
                {
                    this._currentFillDirection = DragFillDirection.Left;
                }
                else if (this._dragToColumn > this.DragFillStartRightColumn)
                {
                    this._currentFillDirection = DragFillDirection.Right;
                }
            }
            else if (this.IsDragFillWholeColumns)
            {
                if ((this._dragToColumn >= this.DragFillStartLeftColumn) && (this._dragToColumn <= this.DragFillStartRightColumn))
                {
                    this._currentFillDirection = DragFillDirection.LeftClear;
                }
                else if (this._dragToColumn < this.DragFillStartLeftColumn)
                {
                    this._currentFillDirection = DragFillDirection.Left;
                }
                else if (this._dragToColumn > this.DragFillStartRightColumn)
                {
                    this._currentFillDirection = DragFillDirection.Right;
                }
            }
            else if (this.IsDragFillWholeRows)
            {
                if ((this._dragToRow >= this.DragFillStartTopRow) && (this._dragToRow <= this.DragFillStartBottomRow))
                {
                    this._currentFillDirection = DragFillDirection.UpClear;
                }
                else if (this._dragToRow < this.DragFillStartTopRow)
                {
                    this._currentFillDirection = DragFillDirection.Up;
                }
                else if (this._dragToRow > this.DragFillStartBottomRow)
                {
                    this._currentFillDirection = DragFillDirection.Down;
                }
            }
        }

        private void UpdateCursorType()
        {
            if ((this._mouseCursor != null) && (this._mouseCursor.Opacity != 0.0))
            {
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                if ((((savedHitTestInformation != null) && (savedHitTestInformation.ViewportInfo != null)) && savedHitTestInformation.ViewportInfo.InDragFillIndicator) || this.IsDraggingFill)
                {
                    bool flag;
                    bool flag2;
                    KeyboardHelper.GetMetaKeyState(out flag, out flag2);
                    CursorType cursorType = flag2 ? CursorType.DragFill_CtrlDragCursor : CursorType.DragFill_DragCursor;
                    this.UpdateMouseCursorType(cursorType);
                }
                else if ((((savedHitTestInformation != null) && (savedHitTestInformation.ViewportInfo != null)) && savedHitTestInformation.ViewportInfo.InSelectionDrag) || this.IsDragDropping)
                {
                    bool flag3;
                    bool flag4;
                    KeyboardHelper.GetMetaKeyState(out flag3, out flag4);
                    CursorType type2 = flag4 ? CursorType.DragCell_CtrlDragCursor : CursorType.DragCell_DragCursor;
                    this.UpdateMouseCursorType(type2);
                }
            }
        }

        internal void UpdateDataValidationUI(int row, int column)
        {
            if (this._viewportPresenters != null)
            {
                GcViewport[,] viewportArray = this._viewportPresenters;
                int upperBound = viewportArray.GetUpperBound(0);
                int num2 = viewportArray.GetUpperBound(1);
                for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
                {
                    for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                    {
                        GcViewport viewport = viewportArray[i, j];
                        if ((viewport != null) && (viewport.SheetArea == SheetArea.Cells))
                        {
                            viewport.UpdateDataValidationUI(row, column);
                        }
                    }
                }
            }
        }

        private void UpdateDragFillStartRange()
        {
            if (this.Worksheet.Selections.Count == 1)
            {
                this._dragFillStartRange = this.Worksheet.Selections[0];
            }
            else if (this.Worksheet.ActiveCell != null)
            {
                this._dragFillStartRange = new CellRange(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex, 1, 1);
            }
        }

        private void UpdateDragFillViewportInfoAndStartTimer()
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            this._dragStartRowViewport = savedHitTestInformation.RowViewportIndex;
            this._dragStartColumnViewport = savedHitTestInformation.ColumnViewportIndex;
            this._dragToRowViewport = savedHitTestInformation.RowViewportIndex;
            this._dragToColumnViewport = savedHitTestInformation.ColumnViewportIndex;
            this.UpdateDragStartRangeViewports();
            this.StartScrollTimer();
        }

        private void UpdateDragIndicatorAndStartTimer(CellRange fromRange)
        {
            SolidColorBrush brush = null;
            Dt.Cells.Data.UIAdaptor.InvokeSync(delegate
            {
                brush = new SolidColorBrush(Colors.Black);
            });
            if (this._dragDropInsertIndicator == null)
            {
                this._dragDropInsertIndicator = new Grid();
                this._dragDropInsertIndicator.Visibility = Visibility.Collapsed;
                Rectangle rectangle = new Rectangle();
                rectangle.Stroke = brush;
                rectangle.StrokeThickness = 1.0;
                rectangle.StrokeDashArray = new DoubleCollection { 1.0, 1.0 };
                rectangle.StrokeDashOffset = 0.5;
                this._dragDropInsertIndicator.Children.Add(rectangle);
                Rectangle rectangle2 = new Rectangle();
                rectangle2.Stroke = brush;
                rectangle2.StrokeThickness = 1.0;
                rectangle2.StrokeDashArray = new DoubleCollection { 1.0, 1.0 };
                rectangle2.StrokeDashOffset = 0.5;
                rectangle2.Margin = new Windows.UI.Xaml.Thickness(1.0);
                this._dragDropInsertIndicator.Children.Add(rectangle2);
                Rectangle rectangle3 = new Rectangle();
                rectangle3.Stroke = brush;
                rectangle3.StrokeThickness = 1.0;
                rectangle3.StrokeDashArray = new DoubleCollection { 1.0, 1.0 };
                rectangle3.StrokeDashOffset = 0.5;
                rectangle3.Margin = new Windows.UI.Xaml.Thickness(2.0);
                this._dragDropInsertIndicator.Children.Add(rectangle3);
                this.TrackersContainer.Children.Add(this._dragDropInsertIndicator);
            }
            if (this._dragDropIndicator == null)
            {
                this._dragDropIndicator = new Grid();
                this._dragDropIndicator.Visibility = Visibility.Collapsed;
                Rectangle rectangle4 = new Rectangle();
                rectangle4.Stroke = brush;
                rectangle4.StrokeThickness = 1.0;
                rectangle4.StrokeDashArray = new DoubleCollection { 1.0, 1.0 };
                rectangle4.StrokeDashOffset = 0.5;
                this._dragDropIndicator.Children.Add(rectangle4);
                Rectangle rectangle5 = new Rectangle();
                rectangle5.Stroke = brush;
                rectangle5.StrokeThickness = 1.0;
                rectangle5.StrokeDashArray = new DoubleCollection { 1.0, 1.0 };
                rectangle5.StrokeDashOffset = 0.5;
                this._dragDropIndicator.Children.Add(rectangle5);
                Rectangle rectangle6 = new Rectangle();
                rectangle6.Stroke = brush;
                rectangle6.StrokeThickness = 1.0;
                rectangle6.StrokeDashArray = new DoubleCollection { 1.0, 1.0 };
                rectangle6.StrokeDashOffset = 0.5;
                this._dragDropIndicator.Children.Add(rectangle6);
                Rectangle rectangle7 = new Rectangle();
                rectangle7.Stroke = brush;
                rectangle7.StrokeThickness = 1.0;
                rectangle7.StrokeDashArray = new DoubleCollection { 1.0, 1.0 };
                rectangle7.StrokeDashOffset = 0.5;
                this._dragDropIndicator.Children.Add(rectangle7);
                Rectangle rectangle8 = new Rectangle();
                rectangle8.Stroke = brush;
                rectangle8.StrokeThickness = 1.0;
                rectangle8.StrokeDashArray = new DoubleCollection { 1.0, 1.0 };
                rectangle8.StrokeDashOffset = 0.5;
                rectangle8.Margin = new Windows.UI.Xaml.Thickness(1.0);
                this._dragDropIndicator.Children.Add(rectangle8);
                Rectangle rectangle9 = new Rectangle();
                rectangle9.Stroke = brush;
                rectangle9.StrokeThickness = 1.0;
                rectangle9.StrokeDashArray = new DoubleCollection { 1.0, 1.0 };
                rectangle9.StrokeDashOffset = 0.5;
                rectangle9.Margin = new Windows.UI.Xaml.Thickness(1.0);
                this._dragDropIndicator.Children.Add(rectangle9);
                Rectangle rectangle10 = new Rectangle();
                rectangle10.Stroke = brush;
                rectangle10.StrokeThickness = 1.0;
                rectangle10.StrokeDashArray = new DoubleCollection { 1.0, 1.0 };
                rectangle10.StrokeDashOffset = 0.5;
                rectangle10.Margin = new Windows.UI.Xaml.Thickness(1.0);
                this._dragDropIndicator.Children.Add(rectangle10);
                Rectangle rectangle11 = new Rectangle();
                rectangle11.Stroke = brush;
                rectangle11.StrokeThickness = 1.0;
                rectangle11.StrokeDashArray = new DoubleCollection { 1.0, 1.0 };
                rectangle11.StrokeDashOffset = 0.5;
                rectangle11.Margin = new Windows.UI.Xaml.Thickness(1.0);
                this._dragDropIndicator.Children.Add(rectangle11);
                this.TrackersContainer.Children.Add(this._dragDropIndicator);
            }
            this._dragDropFromRange = fromRange;
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            if ((savedHitTestInformation != null) && (savedHitTestInformation.ViewportInfo != null))
            {
                int row = savedHitTestInformation.ViewportInfo.Row;
                int column = savedHitTestInformation.ViewportInfo.Column;
                int num3 = (fromRange.Row < 0) ? 0 : fromRange.Row;
                int num4 = (fromRange.Column < 0) ? 0 : fromRange.Column;
                int num5 = (fromRange.Row < 0) ? (this.Worksheet.RowCount - 1) : ((fromRange.Row + fromRange.RowCount) - 1);
                int num6 = (fromRange.Column < 0) ? (this.Worksheet.ColumnCount - 1) : ((fromRange.Column + fromRange.ColumnCount) - 1);
                if (row < num3)
                {
                    row = num3;
                }
                if (row > num5)
                {
                    row = num5;
                }
                if (column < num4)
                {
                    column = num4;
                }
                if (column > num6)
                {
                    column = num6;
                }
                this._dragDropRowOffset = row - num3;
                this._dragDropColumnOffset = column - num4;
                int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
                this._dragStartColumnViewport = savedHitTestInformation.ColumnViewportIndex;
                if ((savedHitTestInformation.ColumnViewportIndex == -1) && (column == this.Worksheet.FrozenColumnCount))
                {
                    this._dragStartColumnViewport = 0;
                }
                else if ((savedHitTestInformation.ColumnViewportIndex == 0) && (column == (this.Worksheet.FrozenColumnCount - 1)))
                {
                    this._dragStartColumnViewport = -1;
                }
                else if ((savedHitTestInformation.ColumnViewportIndex == columnViewportCount) && (column == ((this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount) - 1)))
                {
                    this._dragStartColumnViewport = columnViewportCount - 1;
                }
                else if ((savedHitTestInformation.ColumnViewportIndex == (columnViewportCount - 1)) && (column == (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount)))
                {
                    this._dragStartColumnViewport = columnViewportCount;
                }
                int rowViewportCount = this.GetViewportInfo().RowViewportCount;
                this._dragStartRowViewport = savedHitTestInformation.RowViewportIndex;
                if ((savedHitTestInformation.RowViewportIndex == -1) && (row == this.Worksheet.FrozenRowCount))
                {
                    this._dragStartRowViewport = 0;
                }
                else if ((savedHitTestInformation.RowViewportIndex == 0) && (row == (this.Worksheet.FrozenRowCount - 1)))
                {
                    this._dragStartRowViewport = -1;
                }
                else if ((savedHitTestInformation.RowViewportIndex == rowViewportCount) && (row == ((this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount) - 1)))
                {
                    this._dragStartRowViewport = rowViewportCount - 1;
                }
                else if ((savedHitTestInformation.RowViewportIndex == (rowViewportCount - 1)) && (row == (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount)))
                {
                    this._dragStartRowViewport = rowViewportCount;
                }
                this.StartScrollTimer();
            }
        }

        private void UpdateDragStartRangeViewports()
        {
            ViewportInfo viewportInfo = this.GetViewportInfo();
            int dragFillStartTopRow = this.DragFillStartTopRow;
            if ((dragFillStartTopRow >= 0) && (dragFillStartTopRow < this.Worksheet.FrozenRowCount))
            {
                this._dragFillStartTopRowViewport = -1;
            }
            else if ((dragFillStartTopRow >= this.Worksheet.FrozenRowCount) && (dragFillStartTopRow < (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount)))
            {
                if (this.DragFillStartBottomRow >= (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount))
                {
                    this._dragFillStartTopRowViewport = viewportInfo.RowViewportCount - 1;
                }
                else
                {
                    this._dragFillStartTopRowViewport = this._dragStartRowViewport;
                }
            }
            else if (dragFillStartTopRow >= (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount))
            {
                this._dragFillStartTopRowViewport = viewportInfo.RowViewportCount;
            }
            if (this.IsDragFillWholeColumns)
            {
                if (this.Worksheet.FrozenTrailingColumnCount == 0)
                {
                    this._dragFillStartBottomRowViewport = viewportInfo.RowViewportCount - 1;
                }
                else
                {
                    this._dragFillStartBottomRowViewport = viewportInfo.RowViewportCount;
                }
            }
            else
            {
                this._dragFillStartBottomRowViewport = this._dragStartRowViewport;
            }
            int dragFillStartLeftColumn = this.DragFillStartLeftColumn;
            if ((dragFillStartLeftColumn >= 0) && (dragFillStartLeftColumn < this.Worksheet.FrozenColumnCount))
            {
                this._dragFillStartLeftColumnViewport = -1;
            }
            else if ((dragFillStartLeftColumn >= this.Worksheet.FrozenColumnCount) && (dragFillStartLeftColumn < (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount)))
            {
                if (this.DragFillStartRightColumn >= (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount))
                {
                    this._dragFillStartLeftColumnViewport = viewportInfo.ColumnViewportCount - 1;
                }
                else
                {
                    this._dragFillStartLeftColumnViewport = this._dragStartColumnViewport;
                }
            }
            else if (dragFillStartLeftColumn >= (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount))
            {
                this._dragFillStartLeftColumnViewport = viewportInfo.ColumnViewportCount;
            }
            if (this.IsDragFillWholeRows)
            {
                if (this.Worksheet.FrozenTrailingRowCount == 0)
                {
                    this._dragFillStartRightColumnViewport = viewportInfo.ColumnViewportCount - 1;
                }
                else
                {
                    this._dragFillStartRightColumnViewport = viewportInfo.ColumnViewportCount;
                }
            }
            else
            {
                this._dragFillStartRightColumnViewport = this._dragStartColumnViewport;
            }
        }

        private void UpdateDragToColumn()
        {
            double maxValue;
            ColumnLayout viewportColumnLayoutNearX = this.GetViewportColumnLayoutNearX(this._dragToColumnViewport, this.MousePosition.X);
            if (viewportColumnLayoutNearX != null)
            {
                this._dragToColumn = viewportColumnLayoutNearX.Column;
                maxValue = (viewportColumnLayoutNearX.X + viewportColumnLayoutNearX.Width) - 1.0;
            }
            else
            {
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                if (this.MousePosition.X > savedHitTestInformation.HitPoint.X)
                {
                    this._dragToColumn = this.DragFillStartViewportRightColumn;
                    maxValue = (this.DragFillStartViewportRightColumnLayout.X + this.DragFillStartViewportRightColumnLayout.Width) - 1.0;
                }
                else
                {
                    this._dragToColumn = this.DragFillStartViewportLeftColumn;
                    maxValue = double.MaxValue;
                }
            }
            if (this._dragToColumn == this.DragFillToViewportRightColumn)
            {
                double width = 0.0;
                Windows.Foundation.Rect rowHeaderRectangle = this.GetRowHeaderRectangle(this._dragStartRowViewport);
                if (!rowHeaderRectangle.IsEmpty)
                {
                    width = rowHeaderRectangle.Width;
                }
                for (int i = -1; i <= this._dragToColumnViewport; i++)
                {
                    width += this.GetViewportWidth(i);
                }
                if (maxValue > width)
                {
                    this._dragToColumn = this.DragFillToViewportRightColumn - 1;
                    if (this._dragToColumn < 0)
                    {
                        this._dragToColumn = 0;
                    }
                }
            }
        }

        private void UpdateDragToColumnViewport()
        {
            this._dragToColumnViewport = this._dragStartColumnViewport;
            ColumnLayout viewportColumnLayoutNearX = this.GetViewportColumnLayoutNearX(this._dragToColumnViewport, this.MousePosition.X);
            if ((viewportColumnLayoutNearX == null) || (this.GetViewportColumnLayoutModel(this._dragToColumnViewport).FindColumn(viewportColumnLayoutNearX.Column) == null))
            {
                double x = this.GetSavedHitTestInformation().HitPoint.X;
                int columnViewportCount = this.GetViewportInfo().ColumnViewportCount;
                if (this.MousePosition.X < x)
                {
                    if ((this._dragStartColumnViewport == 0) && (this._dragToColumn <= this.Worksheet.FrozenColumnCount))
                    {
                        this._dragToColumnViewport = -1;
                    }
                    else if ((this._dragStartColumnViewport == columnViewportCount) && (this._dragToColumn <= (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount)))
                    {
                        this._dragToColumnViewport = columnViewportCount - 1;
                    }
                }
                else if ((this._dragStartColumnViewport == -1) && (this._dragToColumn >= this.Worksheet.FrozenColumnCount))
                {
                    this._dragToColumnViewport = 0;
                }
                else if ((this._dragStartColumnViewport == (columnViewportCount - 1)) && (this._dragToColumn >= (this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount)))
                {
                    this._dragToColumnViewport = columnViewportCount;
                }
            }
        }

        private void UpdateDragToCoordicates()
        {
            this.UpdateDragToRow();
            this.UpdateDragToColumn();
        }

        private void UpdateDragToRow()
        {
            double maxValue;
            RowLayout viewportRowLayoutNearY = this.GetViewportRowLayoutNearY(this._dragToRowViewport, this.MousePosition.Y);
            if (viewportRowLayoutNearY != null)
            {
                this._dragToRow = viewportRowLayoutNearY.Row;
                maxValue = (viewportRowLayoutNearY.Y + viewportRowLayoutNearY.Height) - 1.0;
            }
            else
            {
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                if (this.MousePosition.Y > savedHitTestInformation.HitPoint.Y)
                {
                    this._dragToRow = this.DragFillStartViewportBottomRow;
                    maxValue = (this.DragFillStartViewportBottomRowLayout.Y + this.DragFillStartViewportBottomRowLayout.Height) - 1.0;
                }
                else
                {
                    this._dragToRow = this.DragFillStartViewportTopRow;
                    maxValue = double.MaxValue;
                }
            }
            if (this._dragToRow == this.DragFillToViewportBottomRow)
            {
                double height = 0.0;
                Windows.Foundation.Rect columnHeaderRectangle = this.GetColumnHeaderRectangle(this._dragStartColumnViewport);
                if (!columnHeaderRectangle.IsEmpty)
                {
                    height = columnHeaderRectangle.Height;
                }
                for (int i = -1; i <= this._dragToRowViewport; i++)
                {
                    height += this.GetViewportHeight(i);
                }
                if (maxValue > height)
                {
                    this._dragToRow = this.DragFillToViewportBottomRow - 1;
                    if (this._dragToRow < 0)
                    {
                        this._dragToRow = 0;
                    }
                }
            }
        }

        private void UpdateDragToRowViewport()
        {
            this._dragToRowViewport = this._dragStartRowViewport;
            RowLayout viewportRowLayoutNearY = this.GetViewportRowLayoutNearY(this._dragToRowViewport, this.MousePosition.Y);
            if ((viewportRowLayoutNearY == null) || (this.GetViewportRowLayoutModel(this._dragToRowViewport).FindRow(viewportRowLayoutNearY.Row) == null))
            {
                double y = this.GetSavedHitTestInformation().HitPoint.Y;
                int rowViewportCount = this.GetViewportInfo().RowViewportCount;
                if (this.MousePosition.Y < y)
                {
                    if ((this._dragStartRowViewport == 0) && (this._dragToRow <= this.Worksheet.FrozenRowCount))
                    {
                        this._dragToRowViewport = -1;
                    }
                    else if ((this._dragStartRowViewport == rowViewportCount) && (this._dragToRow <= (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount)))
                    {
                        this._dragToRowViewport = rowViewportCount - 1;
                    }
                }
                else if ((this._dragStartRowViewport == -1) && (this._dragToRow >= this.Worksheet.FrozenRowCount))
                {
                    this._dragToRowViewport = 0;
                }
                else if ((this._dragStartRowViewport == (rowViewportCount - 1)) && (this._dragToRow >= (this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount)))
                {
                    this._dragToRowViewport = rowViewportCount;
                }
            }
        }

        private void UpdateDragToViewports()
        {
            this.UpdateDragToRowViewport();
            this.UpdateDragToColumnViewport();
        }

        private void UpdateFloatingObjectsMovingResizingToColumn()
        {
            double maxValue;
            ColumnLayout viewportColumnLayoutNearX = this.GetViewportColumnLayoutNearX(this._dragToColumnViewport, this.MousePosition.X);
            if (viewportColumnLayoutNearX != null)
            {
                this._dragToColumn = viewportColumnLayoutNearX.Column;
                maxValue = (viewportColumnLayoutNearX.X + viewportColumnLayoutNearX.Width) - 1.0;
            }
            else
            {
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                if (this.MousePosition.X > savedHitTestInformation.HitPoint.X)
                {
                    this._dragToColumn = this.GetViewportRightColumn(this._dragStartColumnViewport);
                    ColumnLayout layout2 = this.GetViewportColumnLayoutModel(this._dragStartColumnViewport).FindColumn(this._dragToColumn);
                    maxValue = (layout2.X + layout2.Width) - 1.0;
                }
                else
                {
                    this._dragToColumn = this.GetViewportLeftColumn(this._dragToColumnViewport);
                    maxValue = double.MaxValue;
                }
            }
            int viewportRightColumn = this.GetViewportRightColumn(this._dragToColumnViewport);
            if (this._dragToColumn == viewportRightColumn)
            {
                SheetLayout sheetLayout = this.GetSheetLayout();
                double num3 = sheetLayout.GetViewportX(this._dragToColumnViewport) + sheetLayout.GetViewportWidth(this._dragToColumnViewport);
                if (maxValue > num3)
                {
                    this._dragToColumn = this.GetViewportRightColumn(this._dragToColumnViewport) - 1;
                    if (this._dragToColumn < 0)
                    {
                        this._dragToColumn = 0;
                    }
                }
            }
        }

        private void UpdateFloatingObjectsMovingResizingToCoordicates()
        {
            this.UpdateFloatingObjectsMovingResizingToRow();
            this.UpdateFloatingObjectsMovingResizingToColumn();
        }

        private void UpdateFloatingObjectsMovingResizingToRow()
        {
            double maxValue;
            RowLayout viewportRowLayoutNearY = this.GetViewportRowLayoutNearY(this._dragToRowViewport, this.MousePosition.Y);
            if (viewportRowLayoutNearY != null)
            {
                this._dragToRow = viewportRowLayoutNearY.Row;
                maxValue = (viewportRowLayoutNearY.Y + viewportRowLayoutNearY.Height) - 1.0;
            }
            else
            {
                HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
                if (this.MousePosition.Y > savedHitTestInformation.HitPoint.Y)
                {
                    this._dragToRow = this.GetViewportBottomRow(this._dragStartRowViewport);
                    RowLayout layout2 = this.GetViewportRowLayoutModel(this._dragStartRowViewport).FindRow(this._dragToRow);
                    maxValue = (layout2.Y + layout2.Height) - 1.0;
                }
                else
                {
                    this._dragToRow = this.GetViewportTopRow(this._dragStartRowViewport);
                    maxValue = double.MaxValue;
                }
            }
            int viewportBottomRow = this.GetViewportBottomRow(this._dragToRowViewport);
            if (this._dragToRow == viewportBottomRow)
            {
                SheetLayout sheetLayout = this.GetSheetLayout();
                double num3 = sheetLayout.GetViewportY(this._dragToRowViewport) + sheetLayout.GetViewportHeight(this._dragToRowViewport);
                if (maxValue > num3)
                {
                    this._dragToRow = this.GetViewportBottomRow(this._dragToRowViewport) - 1;
                    if (this._dragToRow < 0)
                    {
                        this._dragToRow = 0;
                    }
                }
            }
        }

        private void UpdateFloatingObjectsMovingResizingToViewports()
        {
            this.UpdateDragToRowViewport();
            this.UpdateDragToColumnViewport();
        }

        private void UpdateFocusIndicator()
        {
            this.UpdateColumnHeaderCellsState(-1, this._currentActiveColumnIndex, -1, 1);
            this.UpdateRowHeaderCellsState(this._currentActiveRowIndex, -1, 1, -1);
            this.RefreshSelection();
            this._currentActiveRowIndex = this.Worksheet.ActiveRowIndex;
            this._currentActiveColumnIndex = this.Worksheet.ActiveColumnIndex;
            this.UpdateColumnHeaderCellsState(-1, this._currentActiveColumnIndex, -1, 1);
            this.UpdateRowHeaderCellsState(this._currentActiveRowIndex, -1, 1, -1);
        }

        internal void UpdateFreezeLines()
        {
            if (!this.IsTouchZooming)
            {
                SheetLayout sheetLayout = this.GetSheetLayout();
                ViewportInfo viewportInfo = this.GetViewportInfo();
                int columnViewportCount = viewportInfo.ColumnViewportCount;
                int rowViewportCount = viewportInfo.RowViewportCount;
                if (this._columnFreezeLine == null)
                {
                    this._columnFreezeLine = this.CreateFreezeLine();
                }
                if ((sheetLayout.FrozenWidth > 0.0) && this.ShowFreezeLine)
                {
                    if (!this.TrackersContainer.Children.Contains(this._columnFreezeLine))
                    {
                        this.TrackersContainer.Children.Add(this._columnFreezeLine);
                    }
                    int frozenColumnCount = this.Worksheet.FrozenColumnCount;
                    if (frozenColumnCount > this.Worksheet.ColumnCount)
                    {
                        frozenColumnCount = this.Worksheet.ColumnCount;
                    }
                    ColumnLayout layout2 = this.GetViewportColumnLayoutModel(-1).FindColumn(frozenColumnCount - 1);
                    if (layout2 != null)
                    {
                        this._columnFreezeLine.X1 = layout2.X + layout2.Width;
                        this._columnFreezeLine.X2 = this._columnFreezeLine.X1;
                        this._columnFreezeLine.Y1 = 0.0;
                        this._columnFreezeLine.Y2 = sheetLayout.FrozenTrailingY + sheetLayout.FrozenTrailingHeight;
                    }
                    else
                    {
                        this.TrackersContainer.Children.Remove(this._columnFreezeLine);
                    }
                }
                else
                {
                    this.TrackersContainer.Children.Remove(this._columnFreezeLine);
                }
                if (this._columnTrailingFreezeLine == null)
                {
                    this._columnTrailingFreezeLine = this.CreateFreezeLine();
                }
                if ((sheetLayout.FrozenTrailingWidth > 0.0) && this.ShowFreezeLine)
                {
                    if (!this.TrackersContainer.Children.Contains(this._columnTrailingFreezeLine))
                    {
                        this.TrackersContainer.Children.Add(this._columnTrailingFreezeLine);
                    }
                    ColumnLayout layout3 = this.GetViewportColumnLayoutModel(columnViewportCount).FindColumn(Math.Max(this.Worksheet.FrozenColumnCount, this.Worksheet.ColumnCount - this.Worksheet.FrozenTrailingColumnCount));
                    if (layout3 != null)
                    {
                        this._columnTrailingFreezeLine.X1 = layout3.X;
                        this._columnTrailingFreezeLine.X2 = this._columnTrailingFreezeLine.X1;
                        this._columnTrailingFreezeLine.Y1 = 0.0;
                        this._columnTrailingFreezeLine.Y2 = sheetLayout.FrozenTrailingY + sheetLayout.FrozenTrailingHeight;
                    }
                    else
                    {
                        this.TrackersContainer.Children.Remove(this._columnTrailingFreezeLine);
                    }
                }
                else
                {
                    this.TrackersContainer.Children.Remove(this._columnTrailingFreezeLine);
                }
                if (this._rowFreezeLine == null)
                {
                    this._rowFreezeLine = this.CreateFreezeLine();
                }
                if ((sheetLayout.FrozenHeight > 0.0) && this.ShowFreezeLine)
                {
                    if (!this.TrackersContainer.Children.Contains(this._rowFreezeLine))
                    {
                        this.TrackersContainer.Children.Add(this._rowFreezeLine);
                    }
                    int frozenRowCount = this.Worksheet.FrozenRowCount;
                    if (this.Worksheet.RowCount < frozenRowCount)
                    {
                        frozenRowCount = this.Worksheet.RowCount;
                    }
                    RowLayout layout4 = this.GetViewportRowLayoutModel(-1).FindRow(frozenRowCount - 1);
                    if (layout4 != null)
                    {
                        this._rowFreezeLine.X1 = 0.0;
                        if (this._translateOffsetX >= 0.0)
                        {
                            this._rowFreezeLine.X2 = sheetLayout.FrozenTrailingX + sheetLayout.FrozenTrailingWidth;
                        }
                        else
                        {
                            this._rowFreezeLine.X2 = (sheetLayout.FrozenTrailingX + this._translateOffsetX) + sheetLayout.FrozenTrailingWidth;
                        }
                        this._rowFreezeLine.Y1 = layout4.Y + layout4.Height;
                        this._rowFreezeLine.Y2 = this._rowFreezeLine.Y1;
                    }
                    else
                    {
                        this.TrackersContainer.Children.Remove(this._rowFreezeLine);
                    }
                }
                else
                {
                    this.TrackersContainer.Children.Remove(this._rowFreezeLine);
                }
                if (this._rowTrailingFreezeLine == null)
                {
                    this._rowTrailingFreezeLine = this.CreateFreezeLine();
                }
                if ((sheetLayout.FrozenTrailingHeight > 0.0) && this.ShowFreezeLine)
                {
                    if (!this.TrackersContainer.Children.Contains(this._rowTrailingFreezeLine))
                    {
                        this.TrackersContainer.Children.Add(this._rowTrailingFreezeLine);
                    }
                    RowLayout layout5 = this.GetViewportRowLayoutModel(rowViewportCount).FindRow(Math.Max(this.Worksheet.FrozenRowCount, this.Worksheet.RowCount - this.Worksheet.FrozenTrailingRowCount));
                    if (layout5 != null)
                    {
                        this._rowTrailingFreezeLine.X1 = 0.0;
                        this._rowTrailingFreezeLine.X2 = sheetLayout.FrozenTrailingX + sheetLayout.FrozenTrailingWidth;
                        this._rowTrailingFreezeLine.Y1 = layout5.Y + ((this._translateOffsetY < 0.0) ? this._translateOffsetY : 0.0);
                        this._rowTrailingFreezeLine.Y2 = this._rowTrailingFreezeLine.Y1;
                    }
                    else
                    {
                        this.TrackersContainer.Children.Remove(this._rowTrailingFreezeLine);
                    }
                }
                else
                {
                    this.TrackersContainer.Children.Remove(this._rowTrailingFreezeLine);
                }
            }
        }

        internal void UpdateHeaderCellsState(int row, int rowCount, int column, int columnCount)
        {
            this.UpdateColumnHeaderCellsState(-1, column, -1, columnCount);
            this.UpdateRowHeaderCellsState(row, -1, rowCount, -1);
            this.UpdateHeaderCellsStateInSpanArea();
            this.UpdateFocusIndicator();
            this.UpdateHeaderCellsStateInSpanArea();
            this.UpdateCornerHeaderCellState();
        }

        private void UpdateHeaderCellsStateInSpanArea()
        {
            Enumerable.ToList<CellLayout>((IEnumerable<CellLayout>)(from cellLayout in this.GetViewportCellLayoutModel(this.GetActiveRowViewportIndex(), this.GetActiveColumnViewportIndex()) select cellLayout)).ForEach<CellLayout>(delegate (CellLayout cellLayout)
            {
                this.UpdateRowHeaderCellsState(cellLayout.Row, -1, cellLayout.RowCount, -1);
                this.UpdateColumnHeaderCellsState(-1, cellLayout.Column, -1, cellLayout.ColumnCount);
            });
        }

        private void UpdateHitFilterCellState()
        {
            if (this._hitFilterInfo != null)
            {
                if (this._hitFilterInfo.SheetArea == SheetArea.ColumnHeader)
                {
                    GcViewport columnHeaderRowsPresenter = this.GetColumnHeaderRowsPresenter(this._hitFilterInfo.ColumnViewportIndex);
                    if (columnHeaderRowsPresenter != null)
                    {
                        RowPresenter row = columnHeaderRowsPresenter.GetRow(this._hitFilterInfo.Row);
                        if (row != null)
                        {
                            CellPresenterBase cell = row.GetCell(this._hitFilterInfo.Column);
                            if (cell != null)
                            {
                                cell.ApplyState();
                            }
                        }
                    }
                }
                else if (this._hitFilterInfo.SheetArea == SheetArea.Cells)
                {
                    GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(this._hitFilterInfo.RowViewportIndex, this._hitFilterInfo.ColumnViewportIndex);
                    if (viewportRowsPresenter != null)
                    {
                        RowPresenter presenter2 = viewportRowsPresenter.GetRow(this._hitFilterInfo.Row);
                        if (presenter2 != null)
                        {
                            CellPresenterBase base3 = presenter2.GetCell(this._hitFilterInfo.Column);
                            if (base3 != null)
                            {
                                base3.ApplyState();
                            }
                        }
                    }
                }
            }
        }

        private void UpdateLastClickLocation(HitTestInformation hi)
        {
            if ((hi.HitTestType == HitTestType.Viewport) && (hi.ViewportInfo != null))
            {
                this._lastClickLocation = new Windows.Foundation.Point((double)hi.ViewportInfo.Row, (double)hi.ViewportInfo.Column);
            }
            else if ((hi.HitTestType == HitTestType.ColumnHeader) && (hi.HeaderInfo != null))
            {
                this._lastClickLocation = new Windows.Foundation.Point((double)hi.HeaderInfo.Row, (double)hi.HeaderInfo.Column);
            }
            else if ((hi.HitTestType == HitTestType.RowHeader) && (hi.HeaderInfo != null))
            {
                this._lastClickLocation = new Windows.Foundation.Point((double)hi.HeaderInfo.Row, (double)hi.HeaderInfo.Column);
            }
            else
            {
                this._lastClickLocation = new Windows.Foundation.Point(-1.0, -1.0);
            }
        }

        internal void UpdateMouseCursorLocation()
        {
            if (this._mouseCursor != null)
            {
                this._mouseCursor.SetValue(Canvas.LeftProperty, (double)(this.MousePosition.X - 32.0));
                this._mouseCursor.SetValue(Canvas.TopProperty, (double)(this.MousePosition.Y - 32.0));
            }
        }

        private void UpdateMouseCursorType(CursorType cursorType)
        {
            this._mouseCursor.Source = CursorGenerator.GetCursor(cursorType);
        }

        private void UpdateResizeToolTip(string text, bool resizeColumn)
        {
            if (resizeColumn && ((this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Column) || (this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Both)))
            {
                double x = this._mouseDownPosition.X;
                double offsetY = this._mouseDownPosition.Y - 40.0;
                this.TooltipHelper.ShowTooltip(text, x, offsetY);
            }
            else if ((this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Row) || (this.ShowResizeTip == Dt.Cells.Data.ShowResizeTip.Both))
            {
                double offsetX = this._mouseDownPosition.X;
                double num4 = this._mouseDownPosition.Y - 38.0;
                this.TooltipHelper.ShowTooltip(text, offsetX, num4);
            }
        }

        internal void UpdateRowHeaderCellsState(int row, int column, int rowCount, int columnCount)
        {
            if (this._rowHeaderPresenters != null)
            {
                rowCount = ((rowCount < 0) || (row < 0)) ? this.Worksheet.RowCount : rowCount;
                columnCount = ((columnCount < 0) || (column < 0)) ? this.Worksheet.RowHeader.ColumnCount : columnCount;
                row = (row < 0) ? 0 : row;
                column = (column < 0) ? 0 : column;
                new CellRange(row, column, rowCount, columnCount);
                foreach (GcViewport viewport in this._rowHeaderPresenters)
                {
                    if (viewport != null)
                    {
                        RowLayoutModel viewportRowLayoutModel = this.GetViewportRowLayoutModel(viewport.RowViewportIndex);
                        if ((viewportRowLayoutModel != null) && (viewportRowLayoutModel.Count > 0))
                        {
                            for (int i = Math.Max(row, viewportRowLayoutModel[0].Row); i < (row + rowCount); i++)
                            {
                                if (i > viewportRowLayoutModel[viewportRowLayoutModel.Count - 1].Row)
                                {
                                    break;
                                }
                                RowPresenter presenter = viewport.GetRow(i);
                                if (presenter != null)
                                {
                                    for (int j = column; j < (column + columnCount); j++)
                                    {
                                        CellPresenterBase cell = presenter.GetCell(j);
                                        if (cell != null)
                                        {
                                            cell.ApplyState();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        internal void UpdateScrollToolTip(bool verticalScroll, int scrollTo = -1)
        {
            if (verticalScroll && ((this.ShowScrollTip == Dt.Cells.Data.ShowScrollTip.Vertical) || (this.ShowScrollTip == Dt.Cells.Data.ShowScrollTip.Both)))
            {
                double offsetX = this._mouseDownPosition.X - 100.0;
                double offsetY = this._mouseDownPosition.Y - 10.0;
                if (scrollTo == -1)
                {
                    scrollTo = this.GetViewportTopRow(this.GetSavedHitTestInformation().RowViewportIndex) + 1;
                }
                this.TooltipHelper.ShowTooltip(this.GetVericalScrollTip(scrollTo), offsetX, offsetY);
            }
            else if ((this.ShowScrollTip == Dt.Cells.Data.ShowScrollTip.Horizontal) || (this.ShowScrollTip == Dt.Cells.Data.ShowScrollTip.Both))
            {
                double num3 = this._mouseDownPosition.X - 20.0;
                double num4 = this._mouseDownPosition.Y - 40.0;
                if (scrollTo == -1)
                {
                    scrollTo = this.GetViewportLeftColumn(this.GetSavedHitTestInformation().ColumnViewportIndex) + 1;
                }
                this.TooltipHelper.ShowTooltip(this.GetHorizentalScrollTip(scrollTo), num3, num4);
            }
        }

        private void UpdateSelectState(ChartChangedBaseEventArgs e)
        {
            GcViewport[,] viewportArray = this._viewportPresenters;
            int upperBound = viewportArray.GetUpperBound(0);
            int num2 = viewportArray.GetUpperBound(1);
            for (int i = viewportArray.GetLowerBound(0); i <= upperBound; i++)
            {
                for (int j = viewportArray.GetLowerBound(1); j <= num2; j++)
                {
                    GcViewport viewport = viewportArray[i, j];
                    if (viewport != null)
                    {
                        if (e.Chart == null)
                        {
                            viewport.RefreshFloatingObjectContainerIsSelected();
                        }
                        else
                        {
                            viewport.RefreshFloatingObjectContainerIsSelected(e.Chart);
                        }
                    }
                }
            }
            ReadOnlyCollection<CellRange> selections = this.Worksheet.Selections;
            if (selections.Count != 0)
            {
                foreach (CellRange range in selections)
                {
                    this.UpdateHeaderCellsState(range.Row, range.RowCount, range.Column, range.ColumnCount);
                }
            }
        }

        internal virtual void UpdateTabStrip()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="point"></param>
        protected void UpdateTouchHitTestInfo(Windows.Foundation.Point point)
        {
            HitTestInformation savedHitTestInformation = this.GetSavedHitTestInformation();
            Windows.Foundation.Point point2 = point;
            if (point2 != savedHitTestInformation.HitPoint)
            {
                this.SaveHitTestInfo(savedHitTestInformation = this.HitTest(point2.X, point2.Y));
            }
            this._lastClickPoint = new Windows.Foundation.Point(point2.X, point2.Y);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="point"></param>
        protected void UpdateTouchHitTestInfoForHold(Windows.Foundation.Point point)
        {
            this.GetSavedHitTestInformation();
            Windows.Foundation.Point point2 = point;
            this.SaveHitTestInfo(this.TouchHitTest(point2.X, point2.Y));
            this._lastClickPoint = new Windows.Foundation.Point(point2.X, point2.Y);
        }

        internal void UpdateTouchSelectionGripper()
        {
            Windows.Foundation.Rect? autoFillIndicatorRec;
            if (((this.InputDeviceType != Dt.Cells.UI.InputDeviceType.Touch) || this.IsTouchPromotedMouseMessage) || this._formulaSelectionFeature.IsSelectionBegined)
            {
                Windows.Foundation.Rect rect16 = new Windows.Foundation.Rect(0.0, 0.0, 0.0, 0.0);
                this.GripperLocations = null;
                this.ResizerGripperRect = null;
                this._topLeftGripper.Arrange(rect16);
                this._bottomRightGripper.Arrange(rect16);
                this._resizerGripperContainer.Arrange(rect16);
                autoFillIndicatorRec = this.AutoFillIndicatorRec;
                if (autoFillIndicatorRec.HasValue)
                {
                    this._autoFillIndicatorContainer.Arrange(rect16);
                    this.AutoFillIndicatorRec = null;
                }
                if ((this._touchToolbarPopup != null) && this._touchToolbarPopup.IsOpen)
                {
                    this._touchToolbarPopup.IsOpen = false;
                }
                return;
            }
            Windows.Foundation.Rect rect = new Windows.Foundation.Rect(0.0, 0.0, 0.0, 0.0);
            GcViewport viewportRowsPresenter = this.GetViewportRowsPresenter(this.GetActiveRowViewportIndex(), this.GetActiveColumnViewportIndex());
            if (viewportRowsPresenter == null)
            {
                return;
            }
            if ((this.IsContinueTouchOperation || this.IsEditing) || (this.Worksheet.SelectionPolicy == SelectionPolicy.Single))
            {
                if (this.GripperLocations != null)
                {
                    this.CachedGripperLocation = this.GripperLocations;
                }
                this.GripperLocations = null;
                this._topLeftGripper.Arrange(rect);
                this._bottomRightGripper.Arrange(rect);
                this._resizerGripperContainer.Arrange(rect);
                return;
            }
            FloatingObject[] allSelectedFloatingObjects = this.GetAllSelectedFloatingObjects();
            if ((allSelectedFloatingObjects != null) && (allSelectedFloatingObjects.Length > 0))
            {
                if (this.GripperLocations != null)
                {
                    this.CachedGripperLocation = this.GripperLocations;
                }
                this.GripperLocations = null;
                this._topLeftGripper.Arrange(rect);
                this._bottomRightGripper.Arrange(rect);
                this._resizerGripperContainer.Arrange(rect);
                return;
            }
            CellRange activeSelection = this.GetActiveSelection();
            if ((activeSelection == null) && (this.Worksheet.Selections.Count > 0))
            {
                activeSelection = this.Worksheet.Selections[0];
            }
            if (activeSelection == null)
            {
                if (this.GripperLocations != null)
                {
                    this.CachedGripperLocation = this.GripperLocations;
                }
                this.GripperLocations = null;
                this._topLeftGripper.Arrange(rect);
                this._bottomRightGripper.Arrange(rect);
                this._resizerGripperContainer.Arrange(rect);
                return;
            }
            autoFillIndicatorRec = this.AutoFillIndicatorRec;
            if (autoFillIndicatorRec.HasValue)
            {
                if (this.GripperLocations != null)
                {
                    this.CachedGripperLocation = this.GripperLocations;
                }
                this.GripperLocations = null;
                this._topLeftGripper.Arrange(rect);
                this._bottomRightGripper.Arrange(rect);
                this._resizerGripperContainer.Arrange(rect);
                Windows.Foundation.Rect autoFillIndicatorRect = this.GetAutoFillIndicatorRect(viewportRowsPresenter, activeSelection);
                this._autoFillIndicatorContainer.Arrange(autoFillIndicatorRect);
                this.AutoFillIndicatorRec = new Windows.Foundation.Rect?(autoFillIndicatorRect);
                return;
            }
            if (viewportRowsPresenter.Sheet.Worksheet.Selections.Count <= 0)
            {
                return;
            }
            SheetLayout sheetLayout = this.GetSheetLayout();
            Windows.Foundation.Rect rangeBounds = viewportRowsPresenter._cachedSelectionFrameLayout;
            if (!viewportRowsPresenter.SelectionContainer.IsAnchorCellInSelection)
            {
                rangeBounds = viewportRowsPresenter._cachedFocusCellLayout;
            }
            if (viewportRowsPresenter.Sheet.Worksheet.Selections.Count > 0)
            {
                rangeBounds = viewportRowsPresenter.GetRangeBounds(activeSelection);
            }
            List<Tuple<Windows.Foundation.Point, double>> list = new List<Tuple<Windows.Foundation.Point, double>>();
            if (this.IsEntrieSheetSelection())
            {
                this.GripperLocations = null;
                this._topLeftGripper.Arrange(rect);
                this._bottomRightGripper.Arrange(rect);
                this._resizerGripperContainer.Arrange(rect);
                autoFillIndicatorRec = null;
                this.ResizerGripperRect = autoFillIndicatorRec;
            }
            else
            {
                double viewportY;
                bool flag2;
                if (!this.IsEntrieColumnSelection())
                {
                    if (!this.IsEntrieRowSelection())
                    {
                        double num27 = sheetLayout.GetViewportX(viewportRowsPresenter.ColumnViewportIndex);
                        double num28 = sheetLayout.GetViewportY(viewportRowsPresenter.RowViewportIndex);
                        int num29 = this.GetActiveRowViewportIndex();
                        int activeColumnViewportIndex = this.GetActiveColumnViewportIndex();
                        int viewportLeftColumn = this.GetViewportLeftColumn(activeColumnViewportIndex);
                        int num32 = this.GetViewportTopRow(num29);
                        int num33 = this.GetViewportBottomRow(num29);
                        int viewportRightColumn = this.GetViewportRightColumn(activeColumnViewportIndex);
                        int num35 = -7;
                        int num36 = -7;
                        if ((activeSelection.Column < viewportLeftColumn) || (activeSelection.Row < num32))
                        {
                            list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(-2147483648.0, -2147483648.0), 0.0));
                        }
                        else
                        {
                            list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point((num27 + rangeBounds.X) + num35, (num28 + rangeBounds.Y) + num36), 16.0));
                        }
                        num35 = (int)(rangeBounds.Width - 9.0);
                        num36 = (int)(rangeBounds.Height - 9.0);
                        int num37 = (activeSelection.Row + activeSelection.RowCount) - 1;
                        int num38 = (activeSelection.Column + activeSelection.ColumnCount) - 1;
                        if (num37 > num33)
                        {
                            num36 = 0x7fffffff;
                        }
                        if (num38 > viewportRightColumn)
                        {
                            num35 = 0x7fffffff;
                        }
                        int num39 = this.GetActiveRowViewportIndex();
                        int num40 = this.GetActiveColumnViewportIndex();
                        this.Worksheet.GetViewportInfo();
                        if ((num35 == 0x7fffffff) || (num36 == 0x7fffffff))
                        {
                            for (int i = num39; i <= this.GetViewportInfo(this.Worksheet).RowViewportCount; i++)
                            {
                                for (int j = num40; j <= this.GetViewportInfo(this.Worksheet).ColumnViewportCount; j++)
                                {
                                    num33 = this.GetViewportBottomRow(i);
                                    viewportRightColumn = this.GetViewportRightColumn(j);
                                    if ((num33 >= num37) && (viewportRightColumn >= num38))
                                    {
                                        GcViewport viewport8 = this._viewportPresenters[i + 1, j + 1];
                                        if (viewport8 != null)
                                        {
                                            Windows.Foundation.Rect rect13 = viewport8._cachedSelectionFrameLayout;
                                            if (!viewport8.SelectionContainer.IsAnchorCellInSelection)
                                            {
                                                rect13 = viewport8._cachedFocusCellLayout;
                                            }
                                            num35 = (int)(((sheetLayout.GetViewportX(j) + rect13.X) + rect13.Width) - 9.0);
                                            num36 = (int)(((sheetLayout.GetViewportY(i) + rect13.Y) + rect13.Height) - 9.0);
                                            if (list.Count == 1)
                                            {
                                                if ((num35 > (sheetLayout.GetViewportX(j) + sheetLayout.GetViewportWidth(j))) || (num36 > (sheetLayout.GetViewportY(i) + sheetLayout.GetViewportHeight(i))))
                                                {
                                                    list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(2147483647.0, 2147483647.0), 0.0));
                                                }
                                                else
                                                {
                                                    list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point((double)num35, (double)num36), 16.0));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (list.Count == 1)
                            {
                                list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(2147483647.0, 2147483647.0), 0.0));
                            }
                        }
                        else
                        {
                            num35 = (int)((num35 + num27) + rangeBounds.X);
                            num36 = (int)((num36 + num28) + rangeBounds.Y);
                            if ((num35 > (sheetLayout.GetViewportX(activeColumnViewportIndex) + sheetLayout.GetViewportWidth(activeColumnViewportIndex))) || (num36 > (sheetLayout.GetViewportY(num29) + sheetLayout.GetViewportHeight(num29))))
                            {
                                list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(2147483647.0, 2147483647.0), 0.0));
                            }
                            else
                            {
                                list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point((double)num35, (double)num36), 16.0));
                            }
                        }
                        goto Label_10BF;
                    }
                    double viewportX = sheetLayout.GetViewportX(viewportRowsPresenter.ColumnViewportIndex);
                    viewportY = sheetLayout.GetViewportY(viewportRowsPresenter.RowViewportIndex);
                    int viewportTopRow = this.GetViewportTopRow(viewportRowsPresenter.RowViewportIndex);
                    int viewportBottomRow = this.GetViewportBottomRow(viewportRowsPresenter.RowViewportIndex);
                    if (this.Worksheet.FrozenColumnCount > 0)
                    {
                        GcViewport viewport5 = this.GetViewportRowsPresenter(this.GetActiveRowViewportIndex(), this.GetActiveColumnViewportIndex() + 1);
                        Windows.Foundation.Rect rect9 = viewport5._cachedSelectionFrameLayout;
                        if (!viewport5.SelectionContainer.IsAnchorCellInSelection)
                        {
                            rect9 = viewportRowsPresenter._cachedFocusCellLayout;
                        }
                        rangeBounds = new Windows.Foundation.Rect(rangeBounds.X, rangeBounds.Y, rangeBounds.Width + rect9.Width, rangeBounds.Height);
                    }
                    if (activeSelection.Row >= viewportTopRow)
                    {
                        list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(((viewportX + rangeBounds.X) + (rangeBounds.Width / 2.0)) - 7.0, (viewportY + rangeBounds.Y) - 16.0), 16.0));
                    }
                    else
                    {
                        list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(((viewportX + rangeBounds.X) + (rangeBounds.Width / 2.0)) - 7.0, -2147483648.0), 0.0));
                    }
                    int num18 = (int)(rangeBounds.Height - 9.0);
                    int num19 = (activeSelection.Row + activeSelection.RowCount) - 1;
                    if (num19 > viewportBottomRow)
                    {
                        num18 = 0x7fffffff;
                    }
                    int activeRowViewportIndex = this.GetActiveRowViewportIndex();
                    this.Worksheet.GetViewportInfo();
                    flag2 = true;
                    int rowViewportIndex = activeRowViewportIndex;
                    if (num18 == 0x7fffffff)
                    {
                        while (rowViewportIndex <= this.GetViewportInfo(this.Worksheet).RowViewportCount)
                        {
                            if (this.GetViewportBottomRow(rowViewportIndex) >= num19)
                            {
                                GcViewport viewport6 = this._viewportPresenters[rowViewportIndex + 1, viewportRowsPresenter.ColumnViewportIndex + 1];
                                if (viewport6 != null)
                                {
                                    Windows.Foundation.Rect rect10 = viewport6._cachedSelectionFrameLayout;
                                    if (!viewport6.SelectionContainer.IsAnchorCellInSelection)
                                    {
                                        rect10 = viewport6._cachedFocusCellLayout;
                                    }
                                    num18 = (int)((sheetLayout.GetViewportY(rowViewportIndex) + rect10.Y) + rect10.Height);
                                    if (list.Count == 1)
                                    {
                                        if (num18 <= (sheetLayout.GetViewportY(rowViewportIndex) + sheetLayout.GetViewportHeight(rowViewportIndex)))
                                        {
                                            list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(((viewportX + rangeBounds.X) + (rangeBounds.Width / 2.0)) - 7.0, (double)num18), 16.0));
                                        }
                                        else
                                        {
                                            list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(((viewportX + rangeBounds.X) + (rangeBounds.Width / 2.0)) - 7.0, 2147483647.0), 0.0));
                                            flag2 = false;
                                        }
                                        break;
                                    }
                                }
                            }
                            rowViewportIndex++;
                        }
                    }
                    else
                    {
                        double viewportHeight = sheetLayout.GetViewportHeight(viewportRowsPresenter.RowViewportIndex);
                        double y = (viewportY + rangeBounds.Y) + rangeBounds.Height;
                        if (y <= (viewportY + viewportHeight))
                        {
                            list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(((viewportX + rangeBounds.X) + (rangeBounds.Width / 2.0)) - 7.0, y), 16.0));
                        }
                        else
                        {
                            list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(viewportX, 2147483647.0), 0.0));
                            flag2 = false;
                        }
                    }
                }
                else
                {
                    double num = sheetLayout.GetViewportX(viewportRowsPresenter.ColumnViewportIndex);
                    double num2 = sheetLayout.GetViewportY(viewportRowsPresenter.RowViewportIndex);
                    int num3 = this.GetViewportLeftColumn(viewportRowsPresenter.ColumnViewportIndex);
                    int num4 = this.GetViewportRightColumn(viewportRowsPresenter.ColumnViewportIndex);
                    if (this.Worksheet.FrozenRowCount > 0)
                    {
                        GcViewport viewport2 = this.GetViewportRowsPresenter(this.GetActiveRowViewportIndex() + 1, this.GetActiveColumnViewportIndex());
                        Windows.Foundation.Rect rect5 = viewport2._cachedSelectionFrameLayout;
                        if (!viewport2.SelectionContainer.IsAnchorCellInSelection)
                        {
                            rect5 = viewport2._cachedFocusCellLayout;
                        }
                        rangeBounds = new Windows.Foundation.Rect(rangeBounds.X, rangeBounds.Y, rangeBounds.Width, rangeBounds.Height + rect5.Height);
                    }
                    if (activeSelection.Column >= num3)
                    {
                        list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point((num + rangeBounds.X) - 16.0, ((num2 + rangeBounds.Y) + (rangeBounds.Height / 2.0)) - 9.0), 16.0));
                    }
                    else
                    {
                        list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(-2147483648.0, ((num2 + rangeBounds.Y) + (rangeBounds.Height / 2.0)) - 9.0), 0.0));
                    }
                    int num5 = (int)(rangeBounds.Width - 9.0);
                    int num6 = (activeSelection.Column + activeSelection.ColumnCount) - 1;
                    if (num6 > num4)
                    {
                        num5 = 0x7fffffff;
                    }
                    int num7 = this.GetActiveColumnViewportIndex();
                    this.Worksheet.GetViewportInfo();
                    bool flag = true;
                    int columnViewportIndex = num7;
                    if (num5 == 0x7fffffff)
                    {
                        while (columnViewportIndex <= this.GetViewportInfo(this.Worksheet).ColumnViewportCount)
                        {
                            if (this.GetViewportRightColumn(columnViewportIndex) >= num6)
                            {
                                GcViewport viewport3 = this._viewportPresenters[viewportRowsPresenter.RowViewportIndex + 1, columnViewportIndex + 1];
                                if (viewport3 != null)
                                {
                                    Windows.Foundation.Rect rect6 = viewport3._cachedSelectionFrameLayout;
                                    if (!viewport3.SelectionContainer.IsAnchorCellInSelection)
                                    {
                                        rect6 = viewport3._cachedFocusCellLayout;
                                    }
                                    num5 = (int)((sheetLayout.GetViewportX(columnViewportIndex) + rect6.X) + rect6.Width);
                                    if (list.Count == 1)
                                    {
                                        if (num5 <= (sheetLayout.GetViewportX(columnViewportIndex) + sheetLayout.GetViewportWidth(columnViewportIndex)))
                                        {
                                            list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point((double)num5, ((num2 + rangeBounds.Y) + (rangeBounds.Height / 2.0)) - 9.0), 16.0));
                                        }
                                        else
                                        {
                                            list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(-2147483648.0, ((num2 + rangeBounds.Y) + (rangeBounds.Height / 2.0)) - 9.0), 0.0));
                                            flag = false;
                                        }
                                        break;
                                    }
                                }
                            }
                            columnViewportIndex++;
                        }
                    }
                    else
                    {
                        double viewportWidth = sheetLayout.GetViewportWidth(viewportRowsPresenter.ColumnViewportIndex);
                        double x = (num + rangeBounds.X) + rangeBounds.Width;
                        if (x <= (num + viewportWidth))
                        {
                            list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(x, ((num2 + rangeBounds.Y) + (rangeBounds.Height / 2.0)) - 9.0), 16.0));
                        }
                        else
                        {
                            list.Add(Tuple.Create<Windows.Foundation.Point, double>(new Windows.Foundation.Point(2147483647.0, ((num2 + rangeBounds.Y) + (rangeBounds.Height / 2.0)) - 9.0), 0.0));
                            flag = false;
                        }
                    }
                    GcViewport viewport4 = this._columnHeaderPresenters[viewportRowsPresenter.ColumnViewportIndex + 1];
                    CellRange range2 = new CellRange(this.Worksheet.ColumnHeader.RowCount - 1, (activeSelection.Column + activeSelection.ColumnCount) - 1, 1, 1);
                    Windows.Foundation.Rect rect7 = viewport4.GetRangeBounds(range2, SheetArea.ColumnHeader);
                    int column = (activeSelection.Column + activeSelection.ColumnCount) - 1;
                    if ((this.Worksheet.GetColumnResizable(column) && !rect7.IsEmpty) && flag)
                    {
                        double num12 = 0.0;
                        for (int k = 0; k < this.Worksheet.ColumnHeader.RowCount; k++)
                        {
                            num12 += this.Worksheet.GetActualRowHeight(k, SheetArea.ColumnHeader) * this.Worksheet.ZoomFactor;
                        }
                        Windows.Foundation.Rect rect8 = new Windows.Foundation.Rect(((num + rect7.X) + rect7.Width) - 8.0, (viewport4.Location.Y + num12) - 16.0, 16.0, 16.0);
                        this._resizerGripperContainer.Child = this._cachedColumnResizerGripperImage;
                        this._resizerGripperContainer.Arrange(rect8);
                        this.ResizerGripperRect = new Windows.Foundation.Rect?(rect8);
                    }
                    else
                    {
                        this._resizerGripperContainer.Arrange(rect);
                        autoFillIndicatorRec = null;
                        this.ResizerGripperRect = autoFillIndicatorRec;
                    }
                    goto Label_10BF;
                }
                GcViewport viewport7 = this._rowHeaderPresenters[viewportRowsPresenter.RowViewportIndex + 1];
                CellRange range = new CellRange((activeSelection.Row + activeSelection.RowCount) - 1, this.Worksheet.RowHeader.ColumnCount - 1, 1, 1);
                Windows.Foundation.Rect rect11 = viewport7.GetRangeBounds(range, SheetArea.CornerHeader | SheetArea.RowHeader);
                int row = (activeSelection.Row + activeSelection.RowCount) - 1;
                if ((this.Worksheet.GetRowResizable(row) && !rect11.IsEmpty) && flag2)
                {
                    double num25 = 0.0;
                    for (int m = 0; m < this.Worksheet.RowHeader.ColumnCount; m++)
                    {
                        num25 += this.Worksheet.GetActualColumnWidth(m, SheetArea.CornerHeader | SheetArea.RowHeader) * this.Worksheet.ZoomFactor;
                    }
                    Windows.Foundation.Rect rect12 = new Windows.Foundation.Rect((viewport7.Location.X + num25) - 16.0, ((viewportY + rect11.Y) + rect11.Height) - 8.0, 16.0, 16.0);
                    this._resizerGripperContainer.Child = this._cachedRowResizerGripperImage;
                    this._resizerGripperContainer.Arrange(rect12);
                    this.ResizerGripperRect = new Windows.Foundation.Rect?(rect12);
                }
                else
                {
                    this._resizerGripperContainer.Arrange(rect);
                    autoFillIndicatorRec = null;
                    this.ResizerGripperRect = autoFillIndicatorRec;
                }
            }
        Label_10BF:
            if (list.Count == 2)
            {
                Windows.Foundation.Point point = list[0].Item1;
                double width = list[0].Item2;
                Windows.Foundation.Rect rect14 = new Windows.Foundation.Rect((double)((int)point.X), (double)((int)point.Y), width, width);
                this._topLeftGripper.Arrange(rect14);
                point = list[1].Item1;
                width = list[1].Item2;
                Windows.Foundation.Rect rect15 = new Windows.Foundation.Rect((double)((int)point.X), (double)((int)point.Y), width, width);
                this._bottomRightGripper.Arrange(rect15);
                GripperLocationsStruct struct2 = new GripperLocationsStruct
                {
                    TopLeft = rect14,
                    BottomRight = rect15
                };
                this.GripperLocations = struct2;
                this.CachedGripperLocation = this.GripperLocations;
                if (this.IsEntrieSheetSelection() || (!this.IsEntrieRowSelection() && !this.IsEntrieColumnSelection()))
                {
                    this._resizerGripperContainer.Arrange(rect);
                    this.ResizerGripperRect = null;
                    return;
                }
            }
            else
            {
                this.GripperLocations = null;
                this._topLeftGripper.Arrange(rect);
                this._bottomRightGripper.Arrange(rect);
                this._resizerGripperContainer.Arrange(rect);
                this.ResizerGripperRect = null;
            }
        }

        private bool ValidateFillRange(CellRange fillRange)
        {
            bool flag = true;
            string message = string.Empty;
            if (this.HasSpans(fillRange.Row, fillRange.Column, fillRange.RowCount, fillRange.ColumnCount))
            {
                flag = false;
                message = ResourceStrings.SheetViewDragFillChangePartOfMergeCell;
            }
            if ((flag && this.Worksheet.Protect) && IsAnyCellInRangeLocked(this.Worksheet, fillRange.Row, fillRange.Column, fillRange.RowCount, fillRange.ColumnCount))
            {
                flag = false;
                message = ResourceStrings.SheetViewDragFillChangeProtectCell;
            }
            if (!flag)
            {
                this.RaiseInvalidOperation(message, null, null);
            }
            return flag;
        }

        internal virtual void WriteXmlInternal(XmlWriter writer)
        {
            if (!this._allowUserFormula)
            {
                Serializer.SerializeObj((bool)this._allowUserFormula, "AllowUserFormula", writer);
            }
            if (!this._allowUndo)
            {
                Serializer.SerializeObj((bool)this._allowUndo, "AllowUndo", writer);
            }
            if (this._freezeLineStyle != null)
            {
                Serializer.SerializeObj(this._freezeLineStyle, "FreezeLineStyle", writer);
            }
            if (this._trailingFreezeLineStyle != null)
            {
                Serializer.SerializeObj(this._trailingFreezeLineStyle, "TrailingFreezeLineStyle", writer);
            }
            if (!this._showFreezeLine)
            {
                Serializer.SerializeObj((bool)this._showFreezeLine, "ShowFreezeLine", writer);
            }
            if (!this._allowUserZoom)
            {
                Serializer.SerializeObj((bool)this._allowUserZoom, "AllowUserZoom", writer);
            }
            if (!this._autoClipboard)
            {
                Serializer.SerializeObj((bool)this._autoClipboard, "AutoClipboard", writer);
            }
            if (this._clipBoardOptions != ClipboardPasteOptions.All)
            {
                Serializer.SerializeObj(this._clipBoardOptions, "ClipBoardOptions", writer);
            }
            if (!this._allowEditOverflow)
            {
                Serializer.SerializeObj((bool)this._allowEditOverflow, "AllowEditOverflow", writer);
            }
            if (this._protect)
            {
                Serializer.SerializeObj((bool)this._protect, "Protect", writer);
            }
            if (!this._allowDragDrop)
            {
                Serializer.SerializeObj((bool)this._allowDragDrop, "AllowDragDrop", writer);
            }
            if (!this._showRowRangeGroup)
            {
                Serializer.SerializeObj((bool)this._showRowRangeGroup, "ShowRowRangeGroup", writer);
            }
            if (!this._showColumnRangeGroup)
            {
                Serializer.SerializeObj((bool)this._showColumnRangeGroup, "ShowColumnRangeGroup", writer);
            }
            if (!this._allowDragFill)
            {
                Serializer.SerializeObj((bool)this._allowDragFill, "AllowDragFill", writer);
            }
            if (this._canTouchMultiSelect)
            {
                Serializer.SerializeObj((bool)this._canTouchMultiSelect, "CanTouchMultiSelect", writer);
            }
            if (this._resizeZeroIndicator != Dt.Cells.UI.ResizeZeroIndicator.Default)
            {
                Serializer.SerializeObj(this._resizeZeroIndicator, "ResizeZeroIndicator", writer);
            }
            if (this.DefaultAutoFillType.HasValue)
            {
                Serializer.SerializeObj(this.DefaultAutoFillType, "DefaultAutoFillType", writer);
            }
            if (this._rangeGroupBackground != null)
            {
                Serializer.SerializeObj(this._rangeGroupBackground, "RangeGroupBackground", writer);
            }
            if (this._rangeGroupBorderBrush != null)
            {
                Serializer.SerializeObj(this._rangeGroupBorderBrush, "RangeGroupBorderBrush", writer);
            }
            if (this._rangeGroupLineStroke != null)
            {
                Serializer.SerializeObj(this._rangeGroupLineStroke, "RangeGroupLineStroke", writer);
            }
        }

        internal CellRange ActiveCell
        {
            get { return this.GetActiveCell(); }
        }

        internal CellRange ActiveSelection
        {
            get { return this.GetActiveSelection(); }
        }

        /// <summary>
        /// Gets or sets whether the component handles the shortcut keys for Clipboard actions. 
        /// </summary>
        [DefaultValue(true)]
        public bool AutoClipboard
        {
            get { return this._autoClipboard; }
            set { this._autoClipboard = value; }
        }

        internal Windows.Foundation.Rect? AutoFillIndicatorRec { get; set; }

        internal Windows.Foundation.Size AvailableSize
        {
            get
            {
                double width = this._availableSize.Width;
                double height = this._availableSize.Height;
                bool flag = false;
                bool designModeEnabled = DesignMode.DesignModeEnabled;
                flag = true;
                if (designModeEnabled || flag)
                {
                    if (double.IsInfinity(width) || double.IsNaN(width))
                    {
                        width = GCSPREAD_DefaultSize.Width;
                    }
                    if (double.IsInfinity(height) || double.IsNaN(height))
                    {
                        height = GCSPREAD_DefaultSize.Height;
                    }
                }
                return new Windows.Foundation.Size(width, height);
            }
            set
            {
                if ((value.Width != this._availableSize.Width) || (value.Height != this._availableSize.Height))
                {
                    this._availableSize = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets whether data can overflow into adjacent empty cells in the component.
        /// </summary>
        /// <value>
        /// <c>true</c> if this instance can overflow; otherwise, <c>false</c>.
        /// </value>
        [DefaultValue(false)]
        public bool CanCellOverflow
        {
            get
            {
                Excel sheet = this._host as Excel;
                return ((sheet != null) && sheet.CanCellOverflow);
            }
            set
            {
                if (this.Worksheet != null)
                {
                    this.Worksheet.Workbook.CanCellOverflow = value;
                }
                Excel sheet = this._host as Excel;
                if (sheet != null)
                {
                    sheet.CanCellOverflow = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets whether data can overflow into adjacent empty cells in the component while the cell is in edit mode. 
        /// </summary>
        [DefaultValue(true)]
        public bool CanEditOverflow
        {
            get { return this._allowEditOverflow; }
            set { this._allowEditOverflow = value; }
        }

        /// <summary>
        /// Gets a value that indicates whether the user is editing a formula.
        /// </summary>
        public bool CanSelectFormula
        {
            get { return (this._formulaSelectionFeature.IsSelectionBegined && this._formulaSelectionFeature.CanSelectFormula); }
        }

        /// <summary>
        /// Indicates whether the user can select multiple ranges by touch.
        /// </summary>
        [DefaultValue(false)]
        public bool CanTouchMultiSelect
        {
            get { return this._canTouchMultiSelect; }
            set { this._canTouchMultiSelect = value; }
        }

        /// <summary>
        /// Gets or sets whether to allow users to drag and drop a range.
        /// </summary>
        [DefaultValue(true)]
        public bool CanUserDragDrop
        {
            get { return this._allowDragDrop; }
            set { this._allowDragDrop = value; }
        }

        /// <summary>
        /// Gets or sets whether to allow users to drag and fill a range.
        /// </summary>
        [DefaultValue(true)]
        public bool CanUserDragFill
        {
            get { return this._allowDragFill; }
            set
            {
                if (this._allowDragFill != value)
                {
                    this._allowDragFill = value;
                    this.InvalidateRange(-1, -1, -1, -1, SheetArea.Cells);
                }
            }
        }

        /// <summary>
        /// Gets or sets whether to allow the user to enter formulas in a cell in the component.
        /// </summary>
        [DefaultValue(true)]
        public bool CanUserEditFormula
        {
            get { return this._allowUserFormula; }
            set { this._allowUserFormula = value; }
        }

        /// <summary>
        /// Gets or sets whether to allow the user to undo edit operations.
        /// </summary>
        [DefaultValue(true)]
        public bool CanUserUndo
        {
            get { return this._allowUndo; }
            set
            {
                this._allowUndo = value;
                if (this._undoManager != null)
                {
                    this._undoManager.AllowUndo = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets whether the user can scale the display of the component using the Ctrl key and the mouse wheel. 
        /// </summary>
        [DefaultValue(true)]
        public bool CanUserZoom
        {
            get { return this._allowUserZoom; }
            set { this._allowUserZoom = value; }
        }

        /// <summary>
        /// Gets the cell editor control on the editing viewport.
        /// </summary>
        public Control CellEditor
        {
            get
            {
                if (((this.EditingViewport != null) && (this.EditingViewport.EditingContainer != null)) && ((this.EditingViewport.EditingContainer.EditingRowIndex == this.Worksheet.ActiveRowIndex) && (this.EditingViewport.EditingContainer.EditingColumnIndex == this.Worksheet.ActiveColumnIndex)))
                {
                    return (this.EditingViewport.EditingContainer.Editor as Control);
                }
                return null;
            }
        }

        /// <summary>
        /// Gets the cell editor status.
        /// </summary>
        public EditorStatus CellEditorStatus
        {
            get
            {
                if ((this.CellEditor != null) && (this.CellEditor is EditingElement))
                {
                    return (this.CellEditor as EditingElement).Status;
                }
                return EditorStatus.Ready;
            }
        }

        /// <summary>
        /// Gets or sets whether the component handles the shortcut keys for Clipboard actions. 
        /// </summary>
        [DefaultValue(0xff)]
        public ClipboardPasteOptions ClipBoardOptions
        {
            get { return this._clipBoardOptions; }
            set { this._clipBoardOptions = value; }
        }

        internal Canvas CursorsContainer
        {
            get
            {
                if (this._cursorsContainer == null)
                {
                    this._cursorsContainer = new Canvas();
                    Canvas.SetZIndex(this._cursorsContainer, 100);
                }
                return this._cursorsContainer;
            }
        }

        private Windows.UI.Xaml.Controls.Primitives.Popup DataValidationListPopUp
        {
            get
            {
                if (this._dataValidationListPopUp == null)
                {
                    this._dataValidationListPopUp = new Windows.UI.Xaml.Controls.Primitives.Popup();
                    _dataValidationListPopUp.Opened += _dataValidationListPopUp_Opened;
                    _dataValidationListPopUp.Closed += _dataValidationListPopUp_Closed;
                }
                return this._dataValidationListPopUp;
            }
        }

        /// <summary>
        /// Gets or sets the default type of the automatic fill.
        /// </summary>
        /// <value>
        /// The default type of the automatic fill.
        /// </value>
        [DefaultValue((string)null)]
        public AutoFillType? DefaultAutoFillType { get; set; }

        private int DragFillStartBottomRow
        {
            get
            {
                if (this._dragFillStartRange == null)
                {
                    return -1;
                }
                if (this._dragFillStartRange.Row == -1)
                {
                    return (this.Worksheet.RowCount - 1);
                }
                return ((this._dragFillStartRange.Row + this._dragFillStartRange.RowCount) - 1);
            }
        }

        private RowLayout DragFillStartBottomRowLayout
        {
            get
            {
                int dragFillStartBottomRow = this.DragFillStartBottomRow;
                if (dragFillStartBottomRow != -1)
                {
                    return this.GetViewportRowLayoutModel(this._dragFillStartBottomRowViewport).FindRow(dragFillStartBottomRow);
                }
                return null;
            }
        }

        private int DragFillStartLeftColumn
        {
            get
            {
                if (this._dragFillStartRange == null)
                {
                    return -1;
                }
                if (this._dragFillStartRange.Column == -1)
                {
                    return 0;
                }
                return this._dragFillStartRange.Column;
            }
        }

        private ColumnLayout DragFillStartLeftColumnLayout
        {
            get
            {
                int dragFillStartLeftColumn = this.DragFillStartLeftColumn;
                if (dragFillStartLeftColumn != -1)
                {
                    return this.GetViewportColumnLayoutModel(this._dragFillStartLeftColumnViewport).FindColumn(dragFillStartLeftColumn);
                }
                return null;
            }
        }

        private int DragFillStartRightColumn
        {
            get
            {
                if (this._dragFillStartRange == null)
                {
                    return -1;
                }
                if (this._dragFillStartRange.Column == -1)
                {
                    return (this.Worksheet.ColumnCount - 1);
                }
                return ((this._dragFillStartRange.Column + this._dragFillStartRange.ColumnCount) - 1);
            }
        }

        private ColumnLayout DragFillStartRightColumnLayout
        {
            get
            {
                int dragFillStartRightColumn = this.DragFillStartRightColumn;
                if (dragFillStartRightColumn != -1)
                {
                    return this.GetViewportColumnLayoutModel(this._dragFillStartRightColumnViewport).FindColumn(dragFillStartRightColumn);
                }
                return null;
            }
        }

        private int DragFillStartTopRow
        {
            get
            {
                if (this._dragFillStartRange == null)
                {
                    return -1;
                }
                if (this._dragFillStartRange.Row == -1)
                {
                    return 0;
                }
                return this._dragFillStartRange.Row;
            }
        }

        private RowLayout DragFillStartTopRowLayout
        {
            get
            {
                int dragFillStartTopRow = this.DragFillStartTopRow;
                if (dragFillStartTopRow != -1)
                {
                    return this.GetViewportRowLayoutModel(this._dragFillStartTopRowViewport).FindRow(dragFillStartTopRow);
                }
                return null;
            }
        }

        private int DragFillStartViewportBottomRow
        {
            get { return this.GetViewportBottomRow(this._dragStartRowViewport); }
        }

        private RowLayout DragFillStartViewportBottomRowLayout
        {
            get { return this.GetViewportRowLayoutModel(this._dragStartRowViewport).FindRow(this.DragFillStartViewportBottomRow); }
        }

        private int DragFillStartViewportLeftColumn
        {
            get { return this.GetViewportLeftColumn(this._dragStartColumnViewport); }
        }

        private ColumnLayout DragFillStartViewportLeftColumnLayout
        {
            get { return this.GetViewportColumnLayoutModel(this._dragStartColumnViewport).FindColumn(this.DragFillStartViewportLeftColumn); }
        }

        private int DragFillStartViewportRightColumn
        {
            get { return this.GetViewportRightColumn(this._dragStartColumnViewport); }
        }

        private ColumnLayout DragFillStartViewportRightColumnLayout
        {
            get { return this.GetViewportColumnLayoutModel(this._dragStartColumnViewport).FindColumn(this.DragFillStartViewportRightColumn); }
        }

        private int DragFillStartViewportTopRow
        {
            get { return this.GetViewportTopRow(this._dragStartRowViewport); }
        }

        private RowLayout DragFillStartViewportTopRowLayout
        {
            get { return this.GetViewportRowLayoutModel(this._dragStartRowViewport).FindRow(this.DragFillStartViewportTopRow); }
        }

        private int DragFillToViewportBottomRow
        {
            get { return this.GetViewportBottomRow(this._dragToRowViewport); }
        }

        private RowLayout DragFillToViewportBottomRowLayout
        {
            get { return this.GetViewportRowLayoutModel(this._dragToRowViewport).FindRow(this.DragFillToViewportBottomRow); }
        }

        private int DragFillToViewportLeftColumn
        {
            get { return this.GetViewportLeftColumn(this._dragToColumnViewport); }
        }

        private ColumnLayout DragFillToViewportLeftColumnLayout
        {
            get { return this.GetViewportColumnLayoutModel(this._dragToColumnViewport).FindColumn(this.DragFillToViewportLeftColumn); }
        }

        private int DragFillToViewportRightColumn
        {
            get { return this.GetViewportRightColumn(this._dragToColumnViewport); }
        }

        private ColumnLayout DragFillToViewportRightColumnLayout
        {
            get { return this.GetViewportColumnLayoutModel(this._dragToColumnViewport).FindColumn(this.DragFillToViewportRightColumn); }
        }

        private int DragFillToViewportTopRow
        {
            get { return this.GetViewportTopRow(this._dragToRowViewport); }
        }

        private RowLayout DragFillToViewportTopRowLayout
        {
            get { return this.GetViewportRowLayoutModel(this._dragToRowViewport).FindRow(this.DragFillToViewportTopRow); }
        }

        internal GcViewport EditingViewport
        {
            get { return this._editinViewport; }
            private set { this._editinViewport = value; }
        }

        internal FormulaEditorConnector EditorConnector
        {
            get { return this._formulaSelectionFeature.FormulaEditorConnector; }
        }

        internal bool EditorDirty
        {
            get { return ((this._editinViewport != null) && this._editinViewport.EditorDirty); }
        }

        /// <summary>
        /// Gets the information of the editor when the sheetview enters the formula selection mode.
        /// </summary>
        public Dt.Cells.UI.EditorInfo EditorInfo
        {
            get
            {
                if (this._editorInfo == null)
                {
                    this._editorInfo = new Dt.Cells.UI.EditorInfo(this);
                }
                return this._editorInfo;
            }
        }

        private Windows.UI.Xaml.Controls.Primitives.Popup FilterPopup
        {
            get
            {
                if (this._filterPopup == null)
                {
                    this._filterPopup = new Windows.UI.Xaml.Controls.Primitives.Popup();
                    _filterPopup.Opened += FilterPopup_Opened;
                    _filterPopup.Closed += FilterPopup_Closed;
                }
                return this._filterPopup;
            }
        }

        private Dictionary<KeyStroke, SpreadAction> FloatingObjectKeyMap
        {
            get
            {
                this.InitFloatingObjectKeyMap();
                return this._floatingObjectsKeyMap;
            }
        }

        internal SpreadXFormulaNavigation FormulaNavigation
        {
            get { return this._formulaSelectionFeature.Navigation; }
        }

        internal SpreadXFormulaSelection FormulaSelection
        {
            get { return this._formulaSelectionFeature.Selection; }
        }

        internal IList<FormulaSelectionItem> FormulaSelections
        {
            get { return this._formulaSelectionFeature.Items; }
        }

        /// <summary>
        /// Gets or sets a value that indicates the freeze line style.
        /// </summary>
        [DefaultValue((string)null)]
        internal Style FreezeLineStyle
        {
            get { return this._freezeLineStyle; }
            set
            {
                this._freezeLineStyle = value;
                this._columnFreezeLine.TypeSafeSetStyle(value);
                this._rowFreezeLine.TypeSafeSetStyle(value);
                this.Invalidate();
            }
        }

        internal FormulaSelectionFeature FSelectionFeature
        {
            get { return this._formulaSelectionFeature; }
        }

        internal GripperLocationsStruct GripperLocations { get; set; }

        internal Windows.UI.Color? HeaderGridLineColor { get; set; }

        internal bool HideSelectionWhenPrinting
        {
            get { return this._hideSelectionWhenPrinting; }
            set { this._hideSelectionWhenPrinting = value; }
        }

        /// <summary>
        /// Gets or sets whether to highlight invalid data.
        /// </summary>
        [DefaultValue(false)]
        public bool HighlightInvalidData
        {
            get { return this._highlightDataValidationInvalidData; }
            set
            {
                if (this._highlightDataValidationInvalidData != value)
                {
                    this._highlightDataValidationInvalidData = value;
                    if (!this.HighlightInvalidData)
                    {
                        this.RefreshDataValidationInvalidCircles();
                    }
                    else
                    {
                        this.Invalidate();
                    }
                }
            }
        }

        internal FilterButtonInfo HitFilterInfo
        {
            get { return this._hitFilterInfo; }
        }

        /// <summary>
        /// Gets or sets a value that indicates whether the horizontal scroll bar is scrollable.
        /// </summary>
        /// <value>
        /// <c>true</c> if the horizontal scroll bar is scrollable; otherwise, <c>false</c>.
        /// </value>
        [DefaultValue(true)]
        public bool HorizontalScrollable
        {
            get { return this._hScrollable; }
            set { this._hScrollable = value; }
        }

        internal Dt.Cells.UI.HoverManager HoverManager
        {
            get { return this._hoverManager; }
        }

        internal FontFamily InheritedControlFontFamily
        {
            get
            {
                if (this._inheritedControlFontFamily == null)
                {
                    if (this._host != null)
                    {
                        this._inheritedControlFontFamily = this._host.FontFamily;
                    }
                    else
                    {
                        TextBlock block = new TextBlock();
                        this._inheritedControlFontFamily = block.FontFamily;
                    }
                }
                return this._inheritedControlFontFamily;
            }
        }

        /// <summary>
        /// Returns the last input device type.
        /// </summary>
        [DefaultValue(0)]
        public Dt.Cells.UI.InputDeviceType InputDeviceType
        {
            get { return this._inputDeviceType; }
            internal set
            {
                this._inputDeviceType = value;
                if (this._inputDeviceType == Dt.Cells.UI.InputDeviceType.Touch)
                {
                    FormulaSelectionFeature.IsTouching = true;
                }
                else if (this._inputDeviceType == Dt.Cells.UI.InputDeviceType.Mouse)
                {
                    FormulaSelectionFeature.IsTouching = false;
                }
            }
        }

        /// <summary>
        /// Gets a value that indicates whether there is a cell in edit mode.
        /// </summary>
        public bool IsCellEditing
        {
            get { return this.IsEditing; }
        }

        private bool IsDecreaseFill
        {
            get
            {
                if (this._currentFillDirection != DragFillDirection.Left)
                {
                    return (this._currentFillDirection == DragFillDirection.Up);
                }
                return true;
            }
        }

        private bool IsDragClear
        {
            get
            {
                if (this._currentFillDirection != DragFillDirection.LeftClear)
                {
                    return (this._currentFillDirection == DragFillDirection.UpClear);
                }
                return true;
            }
        }

        private bool IsDragDropping { get; set; }

        private bool IsDragFill
        {
            get
            {
                if (!this.IsIncreaseFill)
                {
                    return this.IsDecreaseFill;
                }
                return true;
            }
        }

        private bool IsDragFillStartBottomRowInView
        {
            get { return this.IsRowInViewport(this._dragFillStartBottomRowViewport, this.DragFillStartBottomRow); }
        }

        private bool IsDragFillStartLeftColumnInView
        {
            get { return this.IsColumnInViewport(this._dragFillStartLeftColumnViewport, this.DragFillStartLeftColumn); }
        }

        private bool IsDragFillStartRightColumnInView
        {
            get { return this.IsColumnInViewport(this._dragFillStartRightColumnViewport, this.DragFillStartRightColumn); }
        }

        private bool IsDragFillStartTopRowInView
        {
            get { return this.IsRowInViewport(this._dragFillStartTopRowViewport, this.DragFillStartTopRow); }
        }

        private bool IsDragFillWholeColumns
        {
            get { return ((this._dragFillStartRange.Row == -1) && (this._dragFillStartRange.Column != -1)); }
        }

        private bool IsDragFillWholeRows
        {
            get { return ((this._dragFillStartRange.Column == -1) && (this._dragFillStartRange.Row != -1)); }
        }

        internal bool IsDraggingFill { get; set; }

        private bool IsDragToColumnInView
        {
            get { return this.IsColumnInViewport(this._dragToColumnViewport, this._dragToColumn); }
        }

        private bool IsDragToRowInView
        {
            get { return this.IsRowInViewport(this._dragToRowViewport, this._dragToRow); }
        }

        internal virtual bool IsEditing
        {
            get { return this._isEditing; }
            set { this._isEditing = value; }
        }

        internal bool IsFilterDropDownOpen
        {
            get { return ((this._filterPopup != null) && this._filterPopup.IsOpen); }
        }

        private bool IsIncreaseFill
        {
            get
            {
                if (this._currentFillDirection != DragFillDirection.Down)
                {
                    return (this._currentFillDirection == DragFillDirection.Right);
                }
                return true;
            }
        }

        internal bool IsMouseLeftButtonPressed { get; set; }

        internal bool IsMouseRightButtonPressed { get; set; }

        private bool IsMovingFloatingOjects { get; set; }

        private bool IsResizingColumns { get; set; }

        private bool IsResizingFloatingObjects { get; set; }

        private bool IsResizingRows { get; set; }

        private bool IsSelectingCells { get; set; }

        private bool IsSelectingColumns { get; set; }

        private bool IsSelectingRows { get; set; }

        internal bool IsSelectionBegined
        {
            get { return this._formulaSelectionFeature.IsSelectionBegined; }
        }

        internal bool IsTouchingMovingFloatingObjects { get; set; }

        internal bool IsTouchingResizingFloatingObjects { get; set; }

        private bool IsVerticalDragFill
        {
            get
            {
                if ((this._currentFillDirection != DragFillDirection.Up) && (this._currentFillDirection != DragFillDirection.Down))
                {
                    return (this._currentFillDirection == DragFillDirection.UpClear);
                }
                return true;
            }
        }

        internal bool IsWorking { get; set; }

        /// <summary>
        /// Gets the key map collection that contains associated keys and actions.
        /// </summary>
        public Dictionary<KeyStroke, SpreadAction> KeyMap
        {
            get
            {
                this.InitDefaultKeyMap();
                return this._keyMap;
            }
        }

        internal int MaxCellOverflowDistance
        {
            get { return 100; }
            set
            {
            }
        }

        internal int MouseOverColumnIndex { get; set; }

        internal int MouseOverRowIndex { get; set; }

        internal Windows.Foundation.Point MousePosition { get; set; }

        internal SpreadXNavigation Navigation
        {
            get
            {
                if (this._navigation == null)
                {
                    this._navigation = new SpreadXNavigation(this);
                    if (this.Worksheet != null)
                    {
                        this._navigation.UpdateStartPosition(this.Worksheet.ActiveRowIndex, this.Worksheet.ActiveColumnIndex);
                    }
                }
                return this._navigation;
            }
        }

        /// <summary>
        /// Gets or sets the backgroud of the range group
        /// </summary>
        public Brush RangeGroupBackground
        {
            get { return this._rangeGroupBackground; }
            set
            {
                this._rangeGroupBackground = value;
                this.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the brush of the border of the range group
        /// </summary>
        public Brush RangeGroupBorderBrush
        {
            get { return this._rangeGroupBorderBrush; }
            set
            {
                this._rangeGroupBorderBrush = value;
                this.Invalidate();
            }
        }

        /// <summary>
        /// Gets or sets the stroke of the group line
        /// </summary>
        public Brush RangeGroupLineStroke
        {
            get { return this._rangeGroupLineStroke; }
            set
            {
                this._rangeGroupLineStroke = value;
                this.Invalidate();
            }
        }

        internal Windows.Foundation.Rect? ResizerGripperRect { get; set; }

        /// <summary>
        /// Specifies the drawing policy when the row or column is resized to zero.
        /// </summary>
        [DefaultValue(0)]
        public Dt.Cells.UI.ResizeZeroIndicator ResizeZeroIndicator
        {
            get { return this._resizeZeroIndicator; }
            set { this._resizeZeroIndicator = value; }
        }

        private CellRange[] SavedOldSelections { get; set; }

        internal SpreadXSelection Selection
        {
            get
            {
                if (this._selection == null)
                {
                    this._selection = new SpreadXSelection(this);
                }
                return this._selection;
            }
        }

        internal Canvas ShapeDrawingContainer
        {
            get
            {
                if (this._shapeDrawingContainer == null)
                {
                    this._shapeDrawingContainer = new Canvas();
                }
                return this._shapeDrawingContainer;
            }
        }

        /// <summary>
        /// Gets or sets whether the column range group is visible.
        /// </summary>
        [DefaultValue(true)]
        public bool ShowColumnRangeGroup
        {
            get { return this._showColumnRangeGroup; }
            set
            {
                if (value != this._showColumnRangeGroup)
                {
                    this._showColumnRangeGroup = value;
                    this.InvalidateLayout();
                    base.InvalidateMeasure();
                }
            }
        }

        /// <summary>
        /// Gets or sets a value that indicates whether to show the drag drop tip.
        /// </summary>
        /// <value>
        /// <c>true</c> if show drag drop tip; otherwise, <c>false</c>.
        /// </value>
        public bool ShowDragDropTip
        {
            get
            {
                Excel sheet = this._host as Excel;
                if (sheet != null)
                {
                    return sheet.ShowDragDropTip;
                }
                return true;
            }
            set
            {
                if (this.Worksheet != null)
                {
                    this.Worksheet.Workbook.ShowDragDropTip = value;
                }
                Excel sheet = this._host as Excel;
                if (sheet != null)
                {
                    sheet.ShowDragDropTip = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets a value that indicates whether to show a drag fill tip.
        /// </summary>
        /// <value>
        /// <c>true</c> if show drag fill tip; otherwise, <c>false</c>.
        /// </value>
        public bool ShowDragFillTip
        {
            get
            {
                Excel sheet = this._host as Excel;
                if (sheet != null)
                {
                    return sheet.ShowDragFillTip;
                }
                return true;
            }
            set
            {
                if (this.Worksheet != null)
                {
                    this.Worksheet.Workbook.ShowDragFillTip = value;
                }
                Excel sheet = this._host as Excel;
                if (sheet != null)
                {
                    sheet.ShowDragFillTip = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets a value that indicates whether to show the freeze line.
        /// </summary>
        [DefaultValue(true)]
        public bool ShowFreezeLine
        {
            get { return this._showFreezeLine; }
            set
            {
                this._showFreezeLine = value;
                this.UpdateFreezeLines();
            }
        }

        /// <summary>
        /// Gets or sets how to display the resize tip.
        /// </summary>
        [DefaultValue(0)]
        public Dt.Cells.Data.ShowResizeTip ShowResizeTip
        {
            get
            {
                Excel sheet = this._host as Excel;
                if (sheet != null)
                {
                    return sheet.ShowResizeTip;
                }
                return Dt.Cells.Data.ShowResizeTip.None;
            }
            set
            {
                if (this.Worksheet != null)
                {
                    this.Worksheet.Workbook.ShowResizeTip = value;
                }
                Excel sheet = this._host as Excel;
                if (sheet != null)
                {
                    sheet.ShowResizeTip = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets whether the row range group is visible.
        /// </summary>
        [DefaultValue(true)]
        public bool ShowRowRangeGroup
        {
            get { return this._showRowRangeGroup; }
            set
            {
                if (value != this._showRowRangeGroup)
                {
                    this._showRowRangeGroup = value;
                    this.InvalidateLayout();
                    base.InvalidateMeasure();
                }
            }
        }

        /// <summary>
        /// Gets or sets how to display the scroll tip.
        /// </summary>
        [DefaultValue(0)]
        public Dt.Cells.Data.ShowScrollTip ShowScrollTip
        {
            get
            {
                Excel sheet = this._host as Excel;
                if (sheet != null)
                {
                    return sheet.ShowScrollTip;
                }
                return Dt.Cells.Data.ShowScrollTip.None;
            }
            set
            {
                if (this.Worksheet != null)
                {
                    this.Worksheet.Workbook.ShowScrollTip = value;
                }
                Excel sheet = this._host as Excel;
                if (sheet != null)
                {
                    sheet.ShowScrollTip = value;
                }
            }
        }

        private TooltipPopupHelper TooltipHelper
        {
            get
            {
                if (this._tooltipHelper == null)
                {
                    this._tooltipHelper = new TooltipPopupHelper(this, -1.0);
                }
                return this._tooltipHelper;
            }
            set { this._tooltipHelper = value; }
        }

        internal Windows.UI.Xaml.Controls.Primitives.Popup ToolTipPopup
        {
            get
            {
                if (this._tooltipPopup == null)
                {
                    this._tooltipPopup = new Windows.UI.Xaml.Controls.Primitives.Popup();
                    this._tooltipPopup.IsHitTestVisible = false;
                    base.Children.Add(this._tooltipPopup);
                }
                return this._tooltipPopup;
            }
        }

        internal Canvas TrackersContainer
        {
            get
            {
                if (this._trackersContainer == null)
                {
                    this._trackersContainer = new Canvas();
                    Canvas.SetZIndex(this._trackersContainer, 2);
                }
                return this._trackersContainer;
            }
        }

        /// <summary>
        /// Gets or sets a value that indicates the trailing freeze line style.
        /// </summary>
        [DefaultValue((string)null)]
        internal Style TrailingFreezeLineStyle
        {
            get { return this._trailingFreezeLineStyle; }
            set
            {
                this._trailingFreezeLineStyle = value;
                this._columnTrailingFreezeLine.TypeSafeSetStyle(value);
                this._rowTrailingFreezeLine.TypeSafeSetStyle(value);
                this.Invalidate();
            }
        }

        /// <summary>
        /// Gets the undo manager for the control.
        /// </summary>
        public Dt.Cells.UI.UndoManager UndoManager
        {
            get
            {
                if (this._undoManager == null)
                {
                    this._undoManager = new Dt.Cells.UI.UndoManager(this, -1, this.CanUserUndo);
                }
                return this._undoManager;
            }
        }

        /// <summary>
        /// Gets or sets a value that indicates whether the vertical scroll bar is scrollable.
        /// </summary>
        /// <value>
        /// <c>true</c> if the vertical scroll bar is scrollable; otherwise, <c>false</c>.
        /// </value>
        [DefaultValue(true)]
        public bool VerticalScrollable
        {
            get { return this._vScrollable; }
            set { this._vScrollable = value; }
        }

        /// <summary>
        /// Gets the worksheet associated with the view.
        /// </summary>
        public virtual Dt.Cells.Data.Worksheet Worksheet
        {
            get
            {
                if (this._sheet == null)
                {
                    this._sheet = new Dt.Cells.Data.Worksheet();
                    this._sheet.SelectionChanged += new EventHandler<SheetSelectionChangedEventArgs>(this.HandleSheetSelectionChanged);
                }
                return this._sheet;
            }
        }

        /// <summary>
        /// Gets or sets the scaling factor for displaying this sheet.
        /// </summary>
        /// <value>The scaling factor for displaying this sheet.</value>
        /// <exception cref="T:System.ArgumentOutOfRangeException">
        /// Specified scaling amount is out of range; must be between 0.5 (50%) and 4.0 (400%).
        /// </exception>
        [DefaultValue((float)1f)]
        public float ZoomFactor
        {
            get
            {
                if (this.Worksheet != null)
                {
                    return this.Worksheet.ZoomFactor;
                }
                return 1f;
            }
            set
            {
                if (this.Worksheet != null)
                {
                    this.Worksheet.ZoomFactor = value;
                    this.InvalidateRange(-1, -1, -1, -1, SheetArea.Cells);
                    this.InvalidateRange(-1, -1, -1, -1, SheetArea.ColumnHeader);
                    this.InvalidateRange(-1, -1, -1, -1, SheetArea.CornerHeader | SheetArea.RowHeader);
                    base.InvalidateMeasure();
                }
            }
        }

        private class ActiveCellChangingEventArgs : CancelEventArgs
        {
            public ActiveCellChangingEventArgs(int row, int column)
            {
                this.Row = row;
                this.Column = column;
            }

            public int Column { get; private set; }

            public int Row { get; private set; }
        }

        internal class ColoredText
        {
            public ColoredText(string text, Windows.UI.Color color)
            {
                this.Text = text;
                this.Color = color;
            }

            public Windows.UI.Color Color { get; set; }

            public string Text { get; set; }
        }

        internal enum DragFillDirection
        {
            Left,
            Right,
            Up,
            Down,
            LeftClear,
            UpClear
        }

        internal class EditorManager : IFormulaEditor
        {
            private TextBox _editorTextBox;
            private string _footer;
            private Dt.Cells.UI.SheetView.FormulaSelectionFeature _formulaSelectionFeature;
            private string _header;
            private bool _isMouseLeftButtonDown;
            private string _oldText;
            private bool _selectionChanged;
            private bool _textChanged;
            private DispatcherTimer _timer;

            public EditorManager(Dt.Cells.UI.SheetView.FormulaSelectionFeature formulaSelectionFeature)
            {
                this._formulaSelectionFeature = formulaSelectionFeature;
                this._formulaSelectionFeature.SheetView.EditStarting += new EventHandler<EditCellStartingEventArgs>(this.OnSheetViewEditStarting);
                this._formulaSelectionFeature.SheetView.EditEnd += new EventHandler<EditCellEventArgs>(this.OnSheetViewEditEnd);
                this._formulaSelectionFeature.FormulaEditorConnector.FormulaChangedByUI += new EventHandler(this.OnEditorConnectorFormulaChangedByUI);
            }

            private void OnEditorConnectorFormulaChangedByUI(object sender, EventArgs e)
            {
                if ((this._editorTextBox != null) && (this._formulaSelectionFeature.FormulaEditorConnector.Editor == this))
                {
                    this._isMouseLeftButtonDown = false;
                    this.UpdateBlocks();
                }
            }

            private void OnEditorTextBoxGotFocus(object sender, RoutedEventArgs e)
            {
                this._formulaSelectionFeature.FormulaEditorConnector.Editor = this;
                this._textChanged = true;
                this._selectionChanged = true;
                this.OnTimerTick(this, EventArgs.Empty);
            }

            private void OnEditorTextBoxKeyDown(object sender, KeyRoutedEventArgs e)
            {
                if (((e.Key == VirtualKey.F4) && (this.SheetView != null)) && (this.SheetView.EditorConnector.Editor == this))
                {
                    this.SheetView.EditorConnector.ChangeRelative();
                }
            }

            private void OnEditorTextBoxSelectionChanged(object sender, RoutedEventArgs e)
            {
                if ((this._editorTextBox != null) && this._isMouseLeftButtonDown)
                {
                    this._formulaSelectionFeature.FormulaEditorConnector.Editor = this;
                    this._selectionChanged = true;
                    this.StartTimer();
                }
            }

            private void OnEditorTextBoxTextChanged(object sender, TextChangedEventArgs e)
            {
                if ((this._editorTextBox != null) && (this._editorTextBox.Text != this._oldText))
                {
                    this._oldText = this._editorTextBox.Text;
                    this._textChanged = true;
                    this._selectionChanged = true;
                    this.StartTimer();
                }
            }

            private void OnPointerPressed(object sender, PointerRoutedEventArgs e)
            {
                bool isLeftButtonPressed = true;
                if (e.Pointer.PointerDeviceType != PointerDeviceType.Touch)
                {
                    isLeftButtonPressed = e.GetCurrentPoint(this._editorTextBox).Properties.IsLeftButtonPressed;
                }
                if (isLeftButtonPressed)
                {
                    this.ProcessEditorLeftMouseDown();
                }
            }

            private void OnSheetViewEditEnd(object sender, EditCellEventArgs e)
            {
                if (this._editorTextBox != null)
                {
                    _editorTextBox.KeyDown -= OnEditorTextBoxKeyDown;
                    _editorTextBox.RemoveHandler(UIElement.PointerPressedEvent, new PointerEventHandler(this.OnPointerPressed));
                    _editorTextBox.LostFocus -= OnEditorTextBoxGotFocus;
                    this.UnWireEvents();
                    this._editorTextBox = null;
                    if (this._timer != null)
                    {
                        this._timer.Stop();
                        this._timer = null;
                    }
                    if (!this._formulaSelectionFeature.FormulaEditorConnector.IsInOtherSheet)
                    {
                        this._formulaSelectionFeature.EndFormulaSelection();
                    }
                    this._formulaSelectionFeature.Items.Clear();
                }
            }

            private void OnSheetViewEditStarting(object sender, EditCellStartingEventArgs e)
            {
                if (this.SheetView.CanUserEditFormula)
                {
                    this._editorTextBox = this._formulaSelectionFeature.SheetView.CellEditor as TextBox;
                    if (this._editorTextBox != null)
                    {
                        _editorTextBox.KeyDown += OnEditorTextBoxKeyDown;
                        _editorTextBox.AddHandler(UIElement.PointerPressedEvent, new PointerEventHandler(this.OnPointerPressed), true);
                        _editorTextBox.LostFocus += OnEditorTextBoxGotFocus;
                        this._formulaSelectionFeature.FormulaEditorConnector.Editor = this;
                        this.WireEvents();
                        if (this._formulaSelectionFeature.FormulaEditorConnector.IsInOtherSheet)
                        {
                            this.OnEditorConnectorFormulaChangedByUI(this, EventArgs.Empty);
                            this._formulaSelectionFeature.FormulaEditorConnector.IsInOtherSheet = false;
                        }
                        else
                        {
                            this._isMouseLeftButtonDown = true;
                        }
                        this._textChanged = true;
                        this._selectionChanged = true;
                        this.OnTimerTick(this, EventArgs.Empty);
                    }
                }
            }

            private void OnTimerTick(object sender, object e)
            {
                if (((this.SheetView != null) && (this.SheetView.EditorConnector != null)) && ((this.SheetView.EditorConnector.Editor == this) && (this._editorTextBox != null)))
                {
                    string text = this._editorTextBox.Text;
                    Match match = new Regex(@"(^\s*=\s*)(.*?)(\s*$)").Match(text);
                    if (!match.Success)
                    {
                        this._textChanged = false;
                        this._selectionChanged = false;
                        if (this._timer != null)
                        {
                            this._timer.Stop();
                        }
                        this.SheetView.EndFormulaSelection();
                        return;
                    }
                    if (this._textChanged)
                    {
                        this.SheetView.BeginFormulaSelection(null);
                        this._header = match.Groups[1].Value;
                        this._footer = match.Groups[3].Value;
                        this.SheetView.EditorConnector.OnFormulaTextChanged(match.Groups[2].Value);
                    }
                    if (this._selectionChanged)
                    {
                        this._selectionChanged = false;
                        int selectionStart = this._editorTextBox.SelectionStart;
                        int end = selectionStart + this._editorTextBox.SelectionLength;
                        if (this._header != null)
                        {
                            selectionStart -= this._header.Length;
                            end -= this._header.Length;
                        }
                        this.SheetView.EditorConnector.OnCursorPositionChanged(selectionStart, end);
                    }
                    if (this._textChanged)
                    {
                        this._textChanged = false;
                        this.UpdateBlocks();
                    }
                }
                if (this._timer != null)
                {
                    this._timer.Stop();
                }
            }

            private void ProcessEditorLeftMouseDown()
            {
                this._isMouseLeftButtonDown = true;
                this._selectionChanged = true;
                this._formulaSelectionFeature.FormulaEditorConnector.Editor = this;
                this.StartTimer();
            }

            private void StartTimer()
            {
                if (this._timer == null)
                {
                    this._timer = new DispatcherTimer();
                    this._timer.Interval = new TimeSpan(0, 0, 0, 0, 200);
                    _timer.Tick += OnTimerTick;
                }
                this._timer.Stop();
                this._timer.Start();
            }

            private void UnWireEvents()
            {
                if (this._editorTextBox != null)
                {
                    _editorTextBox.TextChanged -= OnEditorTextBoxTextChanged;
                    _editorTextBox.SelectionChanged -= OnEditorTextBoxSelectionChanged;
                }
            }

            private void UpdateBlocks()
            {
                this.UnWireEvents();
                try
                {
                    IList<Dt.Cells.UI.SheetView.ColoredText> coloredText = this.SheetView.EditorConnector.GetColoredText(false);
                    StringBuilder builder = new StringBuilder();
                    if (string.IsNullOrEmpty(this._header) && (coloredText.Count > 0))
                    {
                        this._header = "=";
                    }
                    if (!string.IsNullOrEmpty(this._header))
                    {
                        builder.Append(this._header);
                    }
                    foreach (Dt.Cells.UI.SheetView.ColoredText text in coloredText)
                    {
                        builder.Append(text.Text);
                    }
                    if (!string.IsNullOrEmpty(this._footer))
                    {
                        builder.Append(this._footer);
                    }
                    this._editorTextBox.Text = builder.ToString();
                    this._oldText = this._editorTextBox.Text;
                    int cursorPositionStart = this.SheetView.EditorConnector.GetCursorPositionStart();
                    if (this._header != null)
                    {
                        cursorPositionStart += this._header.Length;
                    }
                    this._editorTextBox.Select(cursorPositionStart, 0);
                }
                finally
                {
                    this.WireEvents();
                }
            }

            private void WireEvents()
            {
                if (this._editorTextBox != null)
                {
                    _editorTextBox.TextChanged -= OnEditorTextBoxTextChanged;
                    _editorTextBox.SelectionChanged -= OnEditorTextBoxSelectionChanged;
                    _editorTextBox.TextChanged += OnEditorTextBoxTextChanged;
                    _editorTextBox.SelectionChanged += OnEditorTextBoxSelectionChanged;
                }
            }

            public bool IsAbsolute { get; set; }

            private Dt.Cells.UI.SheetView SheetView
            {
                get { return this._formulaSelectionFeature.SheetView; }
            }
        }

        internal class FormulaEditorConnector
        {
            private bool _activateEditor = true;
            private int _colorIndex = -1;
            private Windows.UI.Color[] _colors = new Windows.UI.Color[] { Windows.UI.Color.FromArgb(0xff, 0, 0, 0xff), Windows.UI.Color.FromArgb(0xff, 0, 0x80, 0), Windows.UI.Color.FromArgb(0xff, 0x99, 0, 0xcc), Windows.UI.Color.FromArgb(0xff, 0x80, 0, 0), Windows.UI.Color.FromArgb(0xff, 0, 0xcc, 0x33), Windows.UI.Color.FromArgb(0xff, 0xff, 0x66, 0), Windows.UI.Color.FromArgb(0xff, 0xcc, 0, 0x99) };
            private int _columnIndex;
            private int _cursorPositionEnd;
            private int _cursorPositionStart;
            private IFormulaEditor _editor;
            private IList<SheetView.FormulaExpression> _footer;
            private IList<SheetView.FormulaExpression> _formulaExpressions;
            private SheetView.FormulaSelectionFeature _formulaSelectionFeature;
            private IList<SheetView.FormulaExpression> _header;
            private IList<SheetView.FormulaExpression> _middle;
            private int _rowIndex;
            private int _sheetIndex;
            private bool _splited;

            public event EventHandler FormulaChangedByUI;

            public FormulaEditorConnector(SheetView.FormulaSelectionFeature formulaSelectionFeature)
            {
                this._formulaSelectionFeature = formulaSelectionFeature;
                this._formulaSelectionFeature.ItemAdded += new EventHandler<FormulaSelectionItemEventArgs>(this.OnFormulaSelectionFeatureItemAdded);
                this._formulaSelectionFeature.ItemRemoved += new EventHandler<FormulaSelectionItemEventArgs>(this.OnFormulaSelectionFeatureItemRemoved);
            }

            private bool CanSelectFormulaByUI(IList<SheetView.FormulaExpression> expressionList, int cursorStart, int cursorEnd)
            {
                if (((cursorStart < 0) || (cursorEnd < 0)) || (expressionList == null))
                {
                    return false;
                }
                int num = 0;
                for (int i = 0; i < expressionList.Count; i++)
                {
                    SheetView.FormulaExpression expression = expressionList[i];
                    int num3 = num + expression.Text.Length;
                    if (((cursorStart > num) && (cursorStart <= num3)) && ((expression.Range != null) || (expression.Text.EndsWith(")") && (cursorStart >= num3))))
                    {
                        return false;
                    }
                    num = num3;
                }
                return true;
            }

            public void ChangeRelative()
            {
                if (this._splited)
                {
                    if ((this._middle != null) && (this._middle.Count > 0))
                    {
                        if (this._middle[0].StartColumnRelative && this._middle[0].StartRowRelative)
                        {
                            foreach (SheetView.FormulaExpression expression in this._middle)
                            {
                                expression.StartColumnRelative = expression.EndColumnRelative = false;
                                expression.StartRowRelative = expression.EndRowRelative = false;
                                expression.UpdateText();
                            }
                        }
                        else if (!this._middle[0].StartColumnRelative && !this._middle[0].StartRowRelative)
                        {
                            foreach (SheetView.FormulaExpression expression2 in this._middle)
                            {
                                expression2.StartColumnRelative = expression2.EndColumnRelative = true;
                                expression2.StartRowRelative = expression2.EndRowRelative = false;
                                expression2.UpdateText();
                            }
                        }
                        else if (this._middle[0].StartColumnRelative && !this._middle[0].StartRowRelative)
                        {
                            foreach (SheetView.FormulaExpression expression3 in this._middle)
                            {
                                expression3.StartColumnRelative = expression3.EndColumnRelative = false;
                                expression3.StartRowRelative = expression3.EndRowRelative = true;
                                expression3.UpdateText();
                            }
                        }
                        else if (!this._middle[0].StartColumnRelative && this._middle[0].StartRowRelative)
                        {
                            foreach (SheetView.FormulaExpression expression4 in this._middle)
                            {
                                expression4.StartColumnRelative = expression4.EndColumnRelative = true;
                                expression4.StartRowRelative = expression4.EndRowRelative = true;
                                expression4.UpdateText();
                            }
                        }
                        this.OnFormulaChangedByUI();
                    }
                }
                else if ((this._formulaExpressions != null) && (this._formulaExpressions.Count > 0))
                {
                    List<SheetView.FormulaExpression> list = new List<SheetView.FormulaExpression>();
                    int num = this._cursorPositionStart;
                    int num2 = this._cursorPositionEnd;
                    int num3 = 0;
                    foreach (SheetView.FormulaExpression expression5 in this._formulaExpressions)
                    {
                        int num4 = num3;
                        num3 += expression5.Text.Length;
                        if ((num4 <= this._cursorPositionEnd) && (((num3 >= this._cursorPositionStart) && (this._cursorPositionStart == this._cursorPositionEnd)) || ((num3 > this._cursorPositionStart) && (this._cursorPositionStart != this._cursorPositionEnd))))
                        {
                            if (list.Count == 0)
                            {
                                num = num4;
                            }
                            num2 = num3;
                            list.Add(expression5);
                        }
                    }
                    if (list.Count > 0)
                    {
                        if (list[0].StartColumnRelative && list[0].StartRowRelative)
                        {
                            foreach (SheetView.FormulaExpression expression6 in list)
                            {
                                expression6.StartColumnRelative = expression6.EndColumnRelative = false;
                                expression6.StartRowRelative = expression6.EndRowRelative = false;
                                expression6.UpdateText();
                            }
                        }
                        else if (!list[0].StartColumnRelative && !list[0].StartRowRelative)
                        {
                            foreach (SheetView.FormulaExpression expression7 in list)
                            {
                                expression7.StartColumnRelative = expression7.EndColumnRelative = true;
                                expression7.StartRowRelative = expression7.EndRowRelative = false;
                                expression7.UpdateText();
                            }
                        }
                        else if (list[0].StartColumnRelative && !list[0].StartRowRelative)
                        {
                            foreach (SheetView.FormulaExpression expression8 in list)
                            {
                                expression8.StartColumnRelative = expression8.EndColumnRelative = false;
                                expression8.StartRowRelative = expression8.EndRowRelative = true;
                                expression8.UpdateText();
                            }
                        }
                        else if (!list[0].StartColumnRelative && list[0].StartRowRelative)
                        {
                            foreach (SheetView.FormulaExpression expression9 in list)
                            {
                                expression9.StartColumnRelative = expression9.EndColumnRelative = true;
                                expression9.StartRowRelative = expression9.EndRowRelative = true;
                                expression9.UpdateText();
                            }
                        }
                        num2 = num;
                        foreach (SheetView.FormulaExpression expression10 in list)
                        {
                            num2 += expression10.Text.Length;
                        }
                        num2--;
                        this._cursorPositionStart = num;
                        this._cursorPositionEnd = num2;
                        this.OnFormulaChangedByUI();
                    }
                }
            }

            public void ClearFlickingItems()
            {
                this._formulaSelectionFeature.ClearFlickingSelection();
            }

            private SheetView.FormulaExpression CreateFormulaExpression(CalcExpression expression, string expressionText, int baseRow, int baseColumn)
            {
                CalcRangeExpression expression2 = expression as CalcRangeExpression;
                CalcCellExpression expression3 = expression as CalcCellExpression;
                CalcExternalCellExpression expression4 = expression as CalcExternalCellExpression;
                CalcExternalRangeExpression expression5 = expression as CalcExternalRangeExpression;
                CalcNameExpression expression6 = expression as CalcNameExpression;
                CalcExternalNameExpression expression7 = expression as CalcExternalNameExpression;
                if (expression2 != null)
                {
                    CalcRangeIdentity id = expression2.GetId(baseRow, baseColumn) as CalcRangeIdentity;
                    return new SheetView.FormulaExpression(this, new CellRange(id.RowIndex, id.ColumnIndex, id.RowCount, id.ColumnCount), expressionText, false, null) { StartRowRelative = expression2.StartRowRelative, StartColumnRelative = expression2.StartColumnRelative, EndRowRelative = expression2.EndRowRelative, EndColumnRelative = expression2.EndColumnRelative };
                }
                if (expression3 != null)
                {
                    CalcCellIdentity identity2 = expression3.GetId(baseRow, baseColumn) as CalcCellIdentity;
                    int rowCount = 1;
                    int columnCount = 1;
                    CellRange range2 = this._formulaSelectionFeature.SheetView.Worksheet.SpanModel.Find(identity2.RowIndex, identity2.ColumnIndex);
                    if (((range2 != null) && (range2.Row == identity2.RowIndex)) && (range2.Column == identity2.ColumnIndex))
                    {
                        rowCount = range2.RowCount;
                        columnCount = range2.ColumnCount;
                    }
                    return new SheetView.FormulaExpression(this, new CellRange(identity2.RowIndex, identity2.ColumnIndex, rowCount, columnCount), expressionText, false, null) { StartRowRelative = expression3.RowRelative, StartColumnRelative = expression3.ColumnRelative, EndRowRelative = expression3.RowRelative, EndColumnRelative = expression3.ColumnRelative };
                }
                if (expression5 != null)
                {
                    CalcExternalRangeIdentity identity3 = expression5.GetId(baseRow, baseColumn) as CalcExternalRangeIdentity;
                    return new SheetView.FormulaExpression(this, new CellRange(identity3.RowIndex, identity3.ColumnIndex, identity3.RowCount, identity3.ColumnCount), expressionText, false, expression5.Source as Worksheet) { StartRowRelative = expression5.StartRowRelative, StartColumnRelative = expression5.StartColumnRelative, EndRowRelative = expression5.EndRowRelative, EndColumnRelative = expression5.EndColumnRelative };
                }
                if (expression4 != null)
                {
                    CalcExternalCellIdentity identity4 = expression4.GetId(baseRow, baseColumn) as CalcExternalCellIdentity;
                    int num3 = 1;
                    int num4 = 1;
                    Worksheet source = expression4.Source as Worksheet;
                    CellRange range5 = source.SpanModel.Find(identity4.RowIndex, identity4.ColumnIndex);
                    if (((range5 != null) && (range5.Row == identity4.RowIndex)) && (range5.Column == identity4.ColumnIndex))
                    {
                        num3 = range5.RowCount;
                        num4 = range5.ColumnCount;
                    }
                    return new SheetView.FormulaExpression(this, new CellRange(identity4.RowIndex, identity4.ColumnIndex, num3, num4), expressionText, false, source) { StartRowRelative = expression4.RowRelative, StartColumnRelative = expression4.ColumnRelative, EndRowRelative = expression4.RowRelative, EndColumnRelative = expression4.ColumnRelative };
                }
                if (expression6 != null)
                {
                    NameInfo customName = this._formulaSelectionFeature.SheetView.Worksheet.GetCustomName(expression6.Name);
                    if (customName == null)
                    {
                        customName = this._formulaSelectionFeature.SheetView.Worksheet.Workbook.GetCustomName(expression6.Name);
                    }
                    if (customName != null)
                    {
                        CalcReferenceExpression reference = customName.Expression as CalcReferenceExpression;
                        if (reference != null)
                        {
                            CellRange rangeFromExpression = Dt.Cells.Data.CellRangUtility.GetRangeFromExpression(reference);
                            Worksheet sheet = null;
                            if (reference is CalcExternalExpression)
                            {
                                sheet = (reference as CalcExternalExpression).Source as Worksheet;
                            }
                            return new SheetView.FormulaExpression(this, rangeFromExpression, expressionText, true, sheet);
                        }
                    }
                    return new SheetView.FormulaExpression(this, expressionText);
                }
                if (expression7 != null)
                {
                    Worksheet worksheet3 = expression7.Source as Worksheet;
                    if (worksheet3 != null)
                    {
                        NameInfo info2 = worksheet3.GetCustomName(expression7.Name);
                        if (info2 != null)
                        {
                            CalcReferenceExpression expression14 = info2.Expression as CalcReferenceExpression;
                            if (expression14 != null)
                            {
                                CellRange range = Dt.Cells.Data.CellRangUtility.GetRangeFromExpression(expression14);
                                Worksheet worksheet4 = null;
                                if (expression14 is CalcExternalExpression)
                                {
                                    worksheet4 = (expression14 as CalcExternalExpression).Source as Worksheet;
                                }
                                return new SheetView.FormulaExpression(this, range, expressionText, true, worksheet4);
                            }
                        }
                    }
                }
                return new SheetView.FormulaExpression(this, expressionText);
            }

            private static CalcRangeExpression CreateRangeExpressionByCount(int row, int column, int rowCount, int columnCount, bool startRowRelative = false, bool startColumnRelative = false, bool endRowRelative = false, bool endColumnRelative = false)
            {
                if ((rowCount == -1) && (columnCount == -1))
                {
                    return new CalcRangeExpression();
                }
                if (columnCount == -1)
                {
                    return new CalcRangeExpression(row, (row + rowCount) - 1, startRowRelative, endRowRelative, true);
                }
                if (rowCount == -1)
                {
                    return new CalcRangeExpression(column, (column + columnCount) - 1, startColumnRelative, endColumnRelative, false);
                }
                return new CalcRangeExpression(row, column, (row + rowCount) - 1, (column + columnCount) - 1, startRowRelative, startColumnRelative, endRowRelative, endColumnRelative);
            }

            internal string FindNameRange(CellRange range)
            {
                foreach (string str in this._formulaSelectionFeature.SheetView.Worksheet.CustomNames)
                {
                    CalcReferenceExpression reference = this._formulaSelectionFeature.SheetView.Worksheet.GetCustomName(str).Expression as CalcReferenceExpression;
                    if (reference != null)
                    {
                        CellRange rangeFromExpression = Dt.Cells.Data.CellRangUtility.GetRangeFromExpression(reference);
                        if ((rangeFromExpression != null) && rangeFromExpression.Equals(range))
                        {
                            return str;
                        }
                    }
                }
                foreach (string str2 in this._formulaSelectionFeature.SheetView.Worksheet.Workbook.CustomNames)
                {
                    CalcReferenceExpression expression = this._formulaSelectionFeature.SheetView.Worksheet.Workbook.GetCustomName(str2).Expression as CalcReferenceExpression;
                    if (expression != null)
                    {
                        CalcExternalExpression expression3 = expression as CalcExternalExpression;
                        if ((expression3 == null) || (expression3.Source == this._formulaSelectionFeature.SheetView.Worksheet))
                        {
                            CellRange range3 = Dt.Cells.Data.CellRangUtility.GetRangeFromExpression(expression);
                            if ((range3 != null) && range3.Equals(range))
                            {
                                return str2;
                            }
                        }
                    }
                }
                return null;
            }

            public IList<SheetView.ColoredText> GetColoredText(bool includeSheetName = false)
            {
                List<SheetView.ColoredText> list = new List<SheetView.ColoredText>();
                foreach (SheetView.FormulaExpression expression in this.GetMergedExpressionList())
                {
                    if (includeSheetName && (expression.Sheet == null))
                    {
                        if (this._formulaSelectionFeature.IsInOtherSheet)
                        {
                            expression.Sheet = this._formulaSelectionFeature.SheetView.EditorInfo.Sheet;
                        }
                        else
                        {
                            expression.Sheet = this._formulaSelectionFeature.SheetView.Worksheet;
                        }
                    }
                    list.Add(new SheetView.ColoredText(expression.Text, expression.Color));
                }
                return (IList<SheetView.ColoredText>)list;
            }

            public int GetCursorPositionEnd()
            {
                if (!this._splited)
                {
                    return this._cursorPositionEnd;
                }
                int num = 0;
                if (this._header != null)
                {
                    foreach (SheetView.FormulaExpression expression in this._header)
                    {
                        num += expression.Text.Length;
                    }
                }
                if (this._middle != null)
                {
                    foreach (SheetView.FormulaExpression expression2 in this._middle)
                    {
                        num += expression2.Text.Length;
                    }
                }
                return num;
            }

            public int GetCursorPositionStart()
            {
                if (!this._splited)
                {
                    return this._cursorPositionStart;
                }
                int num = 0;
                if (this._header != null)
                {
                    foreach (SheetView.FormulaExpression expression in this._header)
                    {
                        num += expression.Text.Length;
                    }
                }
                if (this._middle != null)
                {
                    foreach (SheetView.FormulaExpression expression2 in this._middle)
                    {
                        num += expression2.Text.Length;
                    }
                }
                return num;
            }

            private IList<SheetView.FormulaExpression> GetMergedExpressionList()
            {
                List<SheetView.FormulaExpression> list = new List<SheetView.FormulaExpression>();
                if (!this._splited)
                {
                    if (this._formulaExpressions != null)
                    {
                        list.AddRange((IEnumerable<SheetView.FormulaExpression>)this._formulaExpressions);
                    }
                }
                else
                {
                    if (this._header != null)
                    {
                        list.AddRange((IEnumerable<SheetView.FormulaExpression>)this._header);
                    }
                    if ((((this._header != null) && (this._header.Count > 0)) && ((this._middle != null) && (this._middle.Count > 0))) && ((this._header[this._header.Count - 1].Range != null) && (this._middle[0].Range != null)))
                    {
                        char ch = CultureInfo.CurrentCulture.TextInfo.ListSeparator[0];
                        list.Add(new SheetView.FormulaExpression(this, ((char)ch).ToString()));
                    }
                    if (this._middle != null)
                    {
                        list.AddRange((IEnumerable<SheetView.FormulaExpression>)this._middle);
                    }
                    if ((((this._middle != null) && (this._middle.Count > 0)) && ((this._footer != null) && (this._footer.Count > 0))) && ((this._middle[this._middle.Count - 1].Range != null) && (this._footer[0].Range != null)))
                    {
                        char ch2 = CultureInfo.CurrentCulture.TextInfo.ListSeparator[0];
                        list.Add(new SheetView.FormulaExpression(this, ((char)ch2).ToString()));
                    }
                    if (this._footer != null)
                    {
                        list.AddRange((IEnumerable<SheetView.FormulaExpression>)this._footer);
                    }
                }
                return (IList<SheetView.FormulaExpression>)list;
            }

            public string GetText()
            {
                StringBuilder builder = new StringBuilder();
                foreach (SheetView.ColoredText text in this.GetColoredText(false))
                {
                    builder.Append(text.Text);
                }
                return builder.ToString();
            }

            private Windows.UI.Color NewColor()
            {
                this._colorIndex = (this._colorIndex + 1) % 7;
                return this._colors[this._colorIndex];
            }

            public void OnCursorPositionChanged(int start, int end)
            {
                this._cursorPositionStart = start;
                this._cursorPositionEnd = end;
                if (this._splited)
                {
                    this._formulaExpressions = this.GetMergedExpressionList();
                    this._splited = false;
                    using (IEnumerator<FormulaSelectionItem> enumerator = this._formulaSelectionFeature.Items.GetEnumerator())
                    {
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.IsFlickering = false;
                        }
                    }
                }
                if (this.CanSelectFormulaByUI(this._formulaExpressions, start, end))
                {
                    this._formulaSelectionFeature.CanSelectFormula = true;
                }
                else
                {
                    this._formulaSelectionFeature.CanSelectFormula = false;
                }
            }

            internal void OnFormulaChangedByUI()
            {
                EventHandler formulaChangedByUI = this.FormulaChangedByUI;
                if (formulaChangedByUI != null)
                {
                    formulaChangedByUI(this, EventArgs.Empty);
                }
            }

            private void OnFormulaSelectionFeatureItemAdded(object sender, FormulaSelectionItemEventArgs e)
            {
                if (!this._splited)
                {
                    this._splited = true;
                    this._header = (IList<SheetView.FormulaExpression>)new List<SheetView.FormulaExpression>();
                    this._middle = (IList<SheetView.FormulaExpression>)new List<SheetView.FormulaExpression>();
                    this._footer = (IList<SheetView.FormulaExpression>)new List<SheetView.FormulaExpression>();
                    if (this._formulaExpressions != null)
                    {
                        int num = 0;
                        foreach (SheetView.FormulaExpression expression in this._formulaExpressions)
                        {
                            if ((num + expression.Text.Length) <= this._cursorPositionStart)
                            {
                                this._header.Add(expression);
                            }
                            else if (num >= this._cursorPositionEnd)
                            {
                                this._footer.Add(expression);
                            }
                            else if (this._cursorPositionStart == this._cursorPositionEnd)
                            {
                                this._middle.Add(expression);
                            }
                            else
                            {
                                this._formulaSelectionFeature.Items.Remove(expression.SelectionItem);
                            }
                            num += expression.Text.Length;
                        }
                    }
                }
                SheetView.FormulaExpression expression2 = new SheetView.FormulaExpression(this, e.Item.Range, string.Empty, false, null)
                {
                    SelectionItem = e.Item
                };
                if (this._formulaSelectionFeature.SheetView.Worksheet != this._formulaSelectionFeature.SheetView.EditorInfo.Sheet)
                {
                    expression2.Sheet = this._formulaSelectionFeature.SheetView.Worksheet;
                }
                if (this._middle.Count > 0)
                {
                    char ch = CultureInfo.CurrentCulture.TextInfo.ListSeparator[0];
                    if (this._middle[this._middle.Count - 1].Text != ((char)ch).ToString())
                    {
                        char ch2 = CultureInfo.CurrentCulture.TextInfo.ListSeparator[0];
                        this._middle.Add(new SheetView.FormulaExpression(this, ((char)ch2).ToString()));
                    }
                    expression2.StartRowRelative = this._middle[0].StartRowRelative;
                    expression2.StartColumnRelative = this._middle[0].StartColumnRelative;
                    expression2.EndRowRelative = this._middle[0].EndRowRelative;
                    expression2.EndColumnRelative = this._middle[0].EndColumnRelative;
                }
                else if ((this.Editor != null) && this.Editor.IsAbsolute)
                {
                    expression2.StartRowRelative = false;
                    expression2.StartColumnRelative = false;
                    expression2.EndRowRelative = false;
                    expression2.EndColumnRelative = false;
                }
                expression2.UpdateText();
                this._middle.Add(expression2);
                this.UpdateColors();
                this.OnFormulaChangedByUI();
            }

            private void OnFormulaSelectionFeatureItemRemoved(object sender, FormulaSelectionItemEventArgs e)
            {
                List<SheetView.FormulaExpression> list = new List<SheetView.FormulaExpression>();
                for (int i = 0; i < this._middle.Count; i++)
                {
                    SheetView.FormulaExpression expression = this._middle[i];
                    if (expression.SelectionItem == e.Item)
                    {
                        list.Add(expression);
                        if (this._middle.Count > (i + 1))
                        {
                            char ch = CultureInfo.CurrentCulture.TextInfo.ListSeparator[0];
                            if (this._middle[i + 1].Text == ((char)ch).ToString())
                            {
                                list.Add(this._middle[i + 1]);
                            }
                        }
                        break;
                    }
                }
                foreach (SheetView.FormulaExpression expression2 in list)
                {
                    this._middle.Remove(expression2);
                }
                this.UpdateColors();
                this.OnFormulaChangedByUI();
            }

            public void OnFormulaTextChanged(string formulaText)
            {
                if (formulaText == null)
                {
                    formulaText = string.Empty;
                }
                this._formulaExpressions = this.Parse(formulaText);
                this._cursorPositionStart = this._cursorPositionEnd = formulaText.Length;
                this._splited = false;
                this.UpdateSelectionItemsForCurrentSheet();
                this.UpdateColors();
            }

            private IList<SheetView.FormulaExpression> Parse(string text)
            {
                List<SheetView.FormulaExpression> list = new List<SheetView.FormulaExpression>();
                if (!string.IsNullOrEmpty(text))
                {
                    bool flag = this._formulaSelectionFeature.SheetView.EditorInfo.Sheet.ReferenceStyle == ReferenceStyle.R1C1;
                    int activeRowIndex = this._formulaSelectionFeature.SheetView.Worksheet.ActiveRowIndex;
                    int activeColumnIndex = this._formulaSelectionFeature.SheetView.Worksheet.ActiveColumnIndex;
                    WorkbookParserContext context = new WorkbookParserContext(this._formulaSelectionFeature.SheetView.Worksheet.Workbook, flag, activeRowIndex, activeColumnIndex, CultureInfo.CurrentCulture);
                    CalcParser parser = new CalcParser();
                    List<ExpressionInfo> list2 = new List<ExpressionInfo>();
                    try
                    {
                        list2 = parser.ParseReferenceExpressionInfos(text, context);
                    }
                    catch
                    {
                    }
                    if (list2.Count == 0)
                    {
                        Match match = new Regex(@"^(.*?\()(.*)(\))(\s*)$").Match(text);
                        if (match.Success)
                        {
                            for (int i = 1; i < 5; i++)
                            {
                                if (!string.IsNullOrEmpty(match.Groups[i].Value))
                                {
                                    list.Add(new SheetView.FormulaExpression(this, match.Groups[i].Value));
                                }
                            }
                        }
                        else
                        {
                            list.Add(new SheetView.FormulaExpression(this, text));
                        }
                    }
                    else
                    {
                        int startIndex = 0;
                        foreach (ExpressionInfo info in list2)
                        {
                            if (info.StartIndex > startIndex)
                            {
                                string str = text.Substring(startIndex, info.StartIndex - startIndex);
                                foreach (string str2 in this.Split(str))
                                {
                                    list.Add(new SheetView.FormulaExpression(this, str2));
                                }
                            }
                            startIndex = info.EndIndex + 1;
                            string expression = text.Substring(info.StartIndex, (info.EndIndex - info.StartIndex) + 1);
                            foreach (string str4 in this.Split(expression))
                            {
                                if (string.IsNullOrEmpty(str4))
                                {
                                    char ch = CultureInfo.CurrentCulture.TextInfo.ListSeparator[0];
                                    if (str4 != ((char)ch).ToString())
                                    {
                                        list.Add(new SheetView.FormulaExpression(this, str4));
                                        continue;
                                    }
                                }
                                list.Add(this.CreateFormulaExpression(info.Expression, str4, activeRowIndex, activeColumnIndex));
                            }
                        }
                        if (startIndex < text.Length)
                        {
                            string str5 = text.Substring(startIndex, text.Length - startIndex);
                            foreach (string str6 in this.Split(str5))
                            {
                                list.Add(new SheetView.FormulaExpression(this, str6));
                            }
                        }
                    }
                }
                return (IList<SheetView.FormulaExpression>)list;
            }

            internal string RangeToFormula(Worksheet worksheet, CellRange range, bool startRowRelative = true, bool startColumnRelative = true, bool endRowRelative = true, bool endColumnRelative = true)
            {
                if (worksheet == null)
                {
                    worksheet = this._formulaSelectionFeature.SheetView.EditorInfo.Sheet;
                }
                bool flag = false;
                if ((range.RowCount == 1) && (range.ColumnCount == 1))
                {
                    flag = true;
                }
                else
                {
                    foreach (object obj2 in worksheet.SpanModel)
                    {
                        if (range.Equals(obj2))
                        {
                            flag = true;
                            break;
                        }
                    }
                }
                int baseRow = 0;
                int baseColumn = 0;
                if (startRowRelative || endRowRelative)
                {
                    baseRow = worksheet.ActiveRowIndex;
                }
                if (startColumnRelative || endColumnRelative)
                {
                    baseColumn = worksheet.ActiveColumnIndex;
                }
                if (flag)
                {
                    CalcCellExpression expression = new CalcCellExpression(range.Row - baseRow, range.Column - baseColumn, startRowRelative, startColumnRelative);
                    return ((ICalcEvaluator)this._formulaSelectionFeature.SheetView.EditorInfo.Sheet).Expression2Formula(expression, baseRow, baseColumn);
                }
                CalcRangeExpression expression2 = CreateRangeExpressionByCount(range.Row - baseRow, range.Column - baseColumn, range.RowCount, range.ColumnCount, startRowRelative, startColumnRelative, endRowRelative, endColumnRelative);
                return ((ICalcEvaluator)this._formulaSelectionFeature.SheetView.EditorInfo.Sheet).Expression2Formula(expression2, baseRow, baseColumn);
            }

            private void ResetColor()
            {
                this._colorIndex = -1;
            }

            private IList<string> Split(string expression)
            {
                if (string.IsNullOrEmpty(expression))
                {
                    return (IList<string>)new List<string>();
                }
                List<string> list = new List<string>();
                int length = -1;
                int num2 = -1;
                for (int i = 0; i < expression.Length; i++)
                {
                    if (expression[i] != ' ')
                    {
                        length = i;
                        break;
                    }
                }
                for (int j = expression.Length - 1; j >= 0; j--)
                {
                    if (expression[j] != ' ')
                    {
                        num2 = j;
                        break;
                    }
                }
                if (length == -1)
                {
                    list.Add(expression);
                    return (IList<string>)list;
                }
                if (length != 0)
                {
                    list.Add(expression.Substring(0, length));
                }
                char ch = CultureInfo.CurrentCulture.TextInfo.ListSeparator[0];
                if (expression.Substring(0, 1) == ((char)ch).ToString())
                {
                    list.Add(expression.Substring(0, 1));
                    length++;
                }
                if (num2 >= length)
                {
                    list.Add(expression.Substring(length, (num2 - length) + 1));
                }
                if (num2 != (expression.Length - 1))
                {
                    list.Add(expression.Substring(num2 + 1, (expression.Length - num2) - 1));
                }
                return (IList<string>)list;
            }

            internal void UpdateColors()
            {
                this.ResetColor();
                Dictionary<CellRange, Windows.UI.Color> dictionary = new Dictionary<CellRange, Windows.UI.Color>();
                foreach (SheetView.FormulaExpression expression in this.GetMergedExpressionList())
                {
                    if (expression.Range != null)
                    {
                        Windows.UI.Color color;
                        if (!dictionary.TryGetValue(expression.Range, out color))
                        {
                            color = this.NewColor();
                            dictionary.Add(expression.Range, color);
                        }
                        expression.Color = color;
                    }
                }
            }

            internal void UpdateCursorPosition(SheetView.FormulaExpression expression)
            {
                int num = 0;
                foreach (SheetView.FormulaExpression expression2 in this.GetMergedExpressionList())
                {
                    num += expression2.Text.Length;
                    if (expression2 == expression)
                    {
                        this._cursorPositionStart = this._cursorPositionEnd = num;
                        break;
                    }
                }
            }

            internal void UpdateSelectionItemsForCurrentSheet()
            {
                this._formulaSelectionFeature.Items.Clear();
                foreach (SheetView.FormulaExpression expression in this.GetMergedExpressionList())
                {
                    if ((expression.Range != null) && (((expression.Sheet == null) && !this.IsInOtherSheet) || (expression.Sheet == this._formulaSelectionFeature.SheetView.Worksheet.Workbook.ActiveSheet)))
                    {
                        if (expression.SelectionItem == null)
                        {
                            expression.SelectionItem = new FormulaSelectionItem(expression.Range, false);
                        }
                        this._formulaSelectionFeature.Items.Add(expression.SelectionItem);
                    }
                }
            }

            internal bool ActivateEditor
            {
                get { return this._activateEditor; }
                set { this._activateEditor = value; }
            }

            internal int ColumnIndex
            {
                get { return this._columnIndex; }
                set { this._columnIndex = value; }
            }

            internal IFormulaEditor Editor
            {
                get { return this._editor; }
                set { this._editor = value; }
            }

            public bool IsFormulaSelectionBegined
            {
                get { return this._formulaSelectionFeature.IsSelectionBegined; }
            }

            internal bool IsInOtherSheet
            {
                get { return this._formulaSelectionFeature.IsInOtherSheet; }
                set { this._formulaSelectionFeature.IsInOtherSheet = value; }
            }

            public bool IsRelative { get; set; }

            internal int RowIndex
            {
                get { return this._rowIndex; }
                set { this._rowIndex = value; }
            }

            internal int SheetIndex
            {
                get { return this._sheetIndex; }
                set { this._sheetIndex = value; }
            }

            private class WorkbookParserContext : CalcParserContext
            {
                private Workbook _context;

                public WorkbookParserContext(Workbook context, bool useR1C1 = false, int baseRowIndex = 0, int baseColumnIndex = 0, CultureInfo culture = null)
                    : base(useR1C1, baseRowIndex, baseColumnIndex, culture)
                {
                    this._context = context;
                }

                public override ICalcSource GetExternalSource(string workbookName, string worksheetName)
                {
                    if (this._context != null)
                    {
                        return this._context.Sheets[worksheetName];
                    }
                    return base.GetExternalSource(workbookName, worksheetName);
                }

                public override string GetExternalSourceToken(ICalcSource source)
                {
                    Worksheet worksheet = source as Worksheet;
                    if (worksheet != null)
                    {
                        return worksheet.Name;
                    }
                    return base.GetExternalSourceToken(source);
                }
            }
        }

        internal class FormulaExpression
        {
            private Windows.UI.Color _color;
            private bool _endColumnRelative;
            private bool _endRowRelative;
            private SheetView.FormulaEditorConnector _formulaEditorConnector;
            private FormulaSelectionItem _formulaSelectionItem;
            private bool _isNameExpression;
            private CellRange _range;
            private Worksheet _sheet;
            private bool _startColumnRelative;
            private bool _startRowRelative;
            private string _text;

            public FormulaExpression(SheetView.FormulaEditorConnector connector, string text)
            {
                this._color = Colors.Black;
                this._startRowRelative = true;
                this._startColumnRelative = true;
                this._endRowRelative = true;
                this._endColumnRelative = true;
                this._formulaEditorConnector = connector;
                this._text = text;
            }

            public FormulaExpression(SheetView.FormulaEditorConnector connector, CellRange range, string oldText, bool isNameExpression = false, Worksheet sheet = null)
            {
                this._color = Colors.Black;
                this._startRowRelative = true;
                this._startColumnRelative = true;
                this._endRowRelative = true;
                this._endColumnRelative = true;
                this._formulaEditorConnector = connector;
                this._range = range;
                this._text = oldText;
                this._isNameExpression = isNameExpression;
                this._sheet = sheet;
            }

            private void OnFormulaSelectionItemPropertyChanged(object sender, PropertyChangedEventArgs e)
            {
                if (e.PropertyName == "Range")
                {
                    this._range = this._formulaSelectionItem.Range;
                    this._text = this._formulaEditorConnector.FindNameRange(this._range);
                    this.IsNameExpression = !string.IsNullOrEmpty(this._text);
                    this.UpdateText();
                    this._formulaEditorConnector.UpdateColors();
                    this._formulaEditorConnector.OnFormulaChangedByUI();
                    this._formulaEditorConnector.UpdateCursorPosition(this);
                }
            }

            public void UpdateText()
            {
                if ((this._range != null) && !this._isNameExpression)
                {
                    this._text = this._formulaEditorConnector.RangeToFormula(this._sheet, this._range, this.StartRowRelative, this.StartColumnRelative, this.EndRowRelative, this.EndColumnRelative);
                    if ((this._sheet != null) && !string.IsNullOrEmpty(this._sheet.Name))
                    {
                        bool flag = false;
                        for (int i = 0; i < this._sheet.Name.Length; i++)
                        {
                            if (string.IsNullOrWhiteSpace(this._sheet.Name.Substring(i, 1)))
                            {
                                flag = true;
                                break;
                            }
                        }
                        if (flag)
                        {
                            this._text = "'" + this._sheet.Name + "'!" + this._text;
                        }
                        else
                        {
                            this._text = this._sheet.Name + "!" + this._text;
                        }
                    }
                }
            }

            public Windows.UI.Color Color
            {
                get { return this._color; }
                set
                {
                    if (this._color != value)
                    {
                        this._color = value;
                        if (this._formulaSelectionItem != null)
                        {
                            this._formulaSelectionItem.Color = this._color;
                        }
                    }
                }
            }

            public bool EndColumnRelative
            {
                get { return this._endColumnRelative; }
                set { this._endColumnRelative = value; }
            }

            public bool EndRowRelative
            {
                get { return this._endRowRelative; }
                set { this._endRowRelative = value; }
            }

            public bool IsNameExpression
            {
                get { return this._isNameExpression; }
                set
                {
                    if (this._isNameExpression != value)
                    {
                        this._isNameExpression = value;
                        this.SelectionItem.CanChangeBoundsByUI = !value;
                    }
                }
            }

            public CellRange Range
            {
                get { return this._range; }
            }

            public FormulaSelectionItem SelectionItem
            {
                get { return this._formulaSelectionItem; }
                set
                {
                    if (this._formulaSelectionItem != value)
                    {
                        if (this._formulaSelectionItem != null)
                        {
                            this._formulaSelectionItem.Expression = null;
                            this._formulaSelectionItem.PropertyChanged -= new PropertyChangedEventHandler(this.OnFormulaSelectionItemPropertyChanged);
                        }
                        this._formulaSelectionItem = value;
                        if (this._formulaSelectionItem != null)
                        {
                            this._formulaSelectionItem.CanChangeBoundsByUI = !this._isNameExpression;
                            this._formulaSelectionItem.Range = this.Range;
                            this._formulaSelectionItem.Color = this.Color;
                            this._formulaSelectionItem.Expression = this;
                            this._formulaSelectionItem.PropertyChanged += new PropertyChangedEventHandler(this.OnFormulaSelectionItemPropertyChanged);
                        }
                    }
                }
            }

            public Worksheet Sheet
            {
                get { return this._sheet; }
                set
                {
                    if (this._sheet != value)
                    {
                        this._sheet = value;
                        this.UpdateText();
                    }
                }
            }

            public bool StartColumnRelative
            {
                get { return this._startColumnRelative; }
                set { this._startColumnRelative = value; }
            }

            public bool StartRowRelative
            {
                get { return this._startRowRelative; }
                set { this._startRowRelative = value; }
            }

            public string Text
            {
                get { return this._text; }
            }
        }

        internal class FormulaSelectionFeature
        {
            private int _activeColumnViewportIndex;
            private int _activeRowViewportIndex;
            private int _anchorColumn = -1;
            private int _anchorRow = -1;
            private bool _canSelectFormula;
            private Dt.Cells.UI.SheetView.EditorManager _editorManager;
            private bool _forceSelection;
            private Dt.Cells.UI.SheetView.FormulaEditorConnector _formulaEditorConnector;
            private bool _isDragDropping;
            private bool _isDragResizing;
            private bool _isInOtherSheet;
            private bool _isSelectingCells;
            private bool _isSelectingColumns;
            private bool _isSelectingRows;
            private bool _isSelectionBegined;
            private ObservableCollection<FormulaSelectionItem> _items;
            private FormulaSelectionItem _lastHitItem;
            private Dt.Cells.UI.SheetView.SpreadXFormulaNavigation _navigation;
            private int _resizingAnchorColumn;
            private int _resizingAnchorRow;
            private Dt.Cells.UI.SheetView.SpreadXFormulaSelection _selection;
            private Dt.Cells.UI.SheetView _sheetView;

            public event EventHandler<FormulaSelectionItemEventArgs> ItemAdded;

            public event EventHandler<FormulaSelectionItemEventArgs> ItemRemoved;

            public FormulaSelectionFeature(Dt.Cells.UI.SheetView sheetView)
            {
                this._sheetView = sheetView;
                this._items = new ObservableCollection<FormulaSelectionItem>();
                this._items.CollectionChanged += OnItemsCollectionChanged;
                this._editorManager = new Dt.Cells.UI.SheetView.EditorManager(this);
            }

            public void AddSelection(int row, int column, int rowCount, int columnCount, bool clearFlickingItems = false)
            {
                if (clearFlickingItems)
                {
                    this.ClearFlickingSelection();
                }
                CellRange cellRange = new CellRange(row, column, rowCount, columnCount);
                cellRange = this.InflateRange(cellRange);
                this._anchorColumn = cellRange.Column;
                if (this._anchorColumn < 0)
                {
                    this._anchorColumn = 0;
                }
                this._anchorRow = cellRange.Row;
                if (this._anchorRow < 0)
                {
                    this._anchorRow = 0;
                }
                FormulaSelectionItem item = new FormulaSelectionItem(cellRange.Row, cellRange.Column, cellRange.RowCount, cellRange.ColumnCount, true);
                this.Items.Add(item);
                EventHandler<FormulaSelectionItemEventArgs> itemAdded = this.ItemAdded;
                if (itemAdded != null)
                {
                    itemAdded(this, new FormulaSelectionItemEventArgs(item));
                }
            }

            internal void BeginFormulaSelection(object editor)
            {
                this.IsSelectionBegined = true;
                IFormulaEditor editor2 = editor as IFormulaEditor;
                if (editor2 != null)
                {
                    this.FormulaEditorConnector.Editor = editor2;
                }
            }

            public void ChangeLastSelection(CellRange cellRange, bool changeAnchor = true)
            {
                if (this.Items.Count == 0)
                {
                    this.AddSelection(cellRange.Row, cellRange.Column, cellRange.RowCount, cellRange.ColumnCount, false);
                }
                else
                {
                    FormulaSelectionItem item = Enumerable.LastOrDefault<FormulaSelectionItem>((IEnumerable<FormulaSelectionItem>)this.Items);
                    if (item != null)
                    {
                        item.Range = cellRange;
                        if (changeAnchor)
                        {
                            this._anchorColumn = cellRange.Column;
                            if (this._anchorColumn < 0)
                            {
                                this._anchorColumn = 0;
                            }
                            this._anchorRow = cellRange.Row;
                            if (this._anchorRow < 0)
                            {
                                this._anchorRow = 0;
                            }
                        }
                    }
                }
            }

            public void ClearFlickingSelection()
            {
                List<FormulaSelectionItem> list = new List<FormulaSelectionItem>();
                foreach (FormulaSelectionItem item in this.Items)
                {
                    if (item.IsFlickering)
                    {
                        list.Add(item);
                    }
                }
                foreach (FormulaSelectionItem item2 in list)
                {
                    this.Items.Remove(item2);
                    EventHandler<FormulaSelectionItemEventArgs> itemRemoved = this.ItemRemoved;
                    if (itemRemoved != null)
                    {
                        itemRemoved(this, new FormulaSelectionItemEventArgs(item2));
                    }
                }
            }

            private void ContinueCellSelecting()
            {
                int activeColumnViewportIndex = this._sheetView.GetActiveColumnViewportIndex();
                int activeRowViewportIndex = this._sheetView.GetActiveRowViewportIndex();
                ColumnLayout viewportColumnLayoutNearX = this._sheetView.GetViewportColumnLayoutNearX(activeColumnViewportIndex, this._sheetView.MousePosition.X);
                RowLayout viewportRowLayoutNearY = this._sheetView.GetViewportRowLayoutNearY(activeRowViewportIndex, this._sheetView.MousePosition.Y);
                CellLayout layout3 = this._sheetView.GetViewportCellLayoutModel(activeRowViewportIndex, activeColumnViewportIndex).FindPoint(this._sheetView.MousePosition.X, this._sheetView.MousePosition.Y);
                if (layout3 != null)
                {
                    this.ExtendSelection(layout3.Row, layout3.Column);
                }
                else if ((viewportColumnLayoutNearX != null) && (viewportRowLayoutNearY != null))
                {
                    this.ExtendSelection(viewportRowLayoutNearY.Row, viewportColumnLayoutNearX.Column);
                }
                this._sheetView.ProcessScrollTimer();
            }

            private void ContinueColumnSelecting()
            {
                int activeColumnViewportIndex = this._sheetView.GetActiveColumnViewportIndex();
                ColumnLayout viewportColumnLayoutNearX = this._sheetView.GetViewportColumnLayoutNearX(activeColumnViewportIndex, this._sheetView.MousePosition.X);
                if (viewportColumnLayoutNearX != null)
                {
                    this.ExtendSelection(-1, viewportColumnLayoutNearX.Column);
                    this._sheetView.ProcessScrollTimer();
                }
            }

            private void ContinueDragDropping()
            {
                this._sheetView.UpdateDragToViewports();
                this._sheetView.UpdateDragToCoordicates();
                if ((this._sheetView._dragToRow >= 0) || (this._sheetView._dragToColumn >= 0))
                {
                    this._sheetView.UpdateMouseCursorLocation();
                    this.UpdateSelection();
                    this._sheetView.ProcessScrollTimer();
                }
            }

            internal void ContinueDragging()
            {
                if (this.IsSelecting)
                {
                    this.ContinueSelecting();
                }
                else if (this._isDragDropping)
                {
                    this.ContinueDragDropping();
                }
                else if (this._isDragResizing)
                {
                    this.ContinueDragResizing();
                }
            }

            private void ContinueDragResizing()
            {
                this._sheetView.UpdateDragToViewports();
                this._sheetView.UpdateDragToCoordicates();
                if ((this._sheetView._dragToRow >= 0) || (this._sheetView._dragToColumn >= 0))
                {
                    this._sheetView.UpdateMouseCursorLocation();
                    this.UpdateSelectionForResize();
                    this._sheetView.ProcessScrollTimer();
                }
            }

            private void ContinueRowSelecting()
            {
                int activeRowViewportIndex = this._sheetView.GetActiveRowViewportIndex();
                RowLayout viewportRowLayoutNearY = this._sheetView.GetViewportRowLayoutNearY(activeRowViewportIndex, this._sheetView.MousePosition.Y);
                if (viewportRowLayoutNearY != null)
                {
                    this.ExtendSelection(viewportRowLayoutNearY.Row, -1);
                    this._sheetView.ProcessScrollTimer();
                }
            }

            private void ContinueSelecting()
            {
                if ((this._sheetView.IsWorking && this.IsSelecting) && (this._sheetView.MousePosition != this._sheetView._lastClickPoint))
                {
                    if (this._isSelectingCells)
                    {
                        this.ContinueCellSelecting();
                    }
                    else if (this._isSelectingRows)
                    {
                        this.ContinueRowSelecting();
                    }
                    else if (this._isSelectingColumns)
                    {
                        this.ContinueColumnSelecting();
                    }
                }
            }

            private void EndDragDropping()
            {
                this._sheetView.HideMouseCursor();
                this._isDragDropping = false;
                this._sheetView.StopScrollTimer();
            }

            internal void EndDragging()
            {
                if (this.IsSelecting)
                {
                    this.EndSelecting();
                }
                else if (this._isDragDropping)
                {
                    this.EndDragDropping();
                }
                else if (this._isDragResizing)
                {
                    this.EndDragResizing();
                }
            }

            private void EndDragResizing()
            {
                this._sheetView.HideMouseCursor();
                this._isDragResizing = false;
                this._sheetView.StopScrollTimer();
                using (IEnumerator<FormulaSelectionItem> enumerator = this.Items.GetEnumerator())
                {
                    while (enumerator.MoveNext())
                    {
                        enumerator.Current.IsResizing = false;
                    }
                }
            }

            internal void EndFormulaSelection()
            {
                if (!this.IsInOtherSheet)
                {
                    this._anchorRow = -1;
                    this._anchorColumn = -1;
                    this.IsSelectionBegined = false;
                    this._canSelectFormula = false;
                    this._items.Clear();
                }
            }

            private void EndSelecting()
            {
                this._sheetView.IsWorking = false;
                this._isSelectingCells = this._isSelectingRows = this._isSelectingColumns = false;
                this._sheetView.StopScrollTimer();
            }

            private void ExtendSelection(int row, int column)
            {
                FormulaSelectionItem item = Enumerable.LastOrDefault<FormulaSelectionItem>((IEnumerable<FormulaSelectionItem>)this.Items);
                if (item != null)
                {
                    int num = Math.Min(this._anchorRow, row);
                    int num2 = Math.Min(this._anchorColumn, column);
                    int num3 = Math.Max(this._anchorRow, row);
                    int num4 = Math.Max(this._anchorColumn, column);
                    CellRange cellRange = new CellRange(num, num2, (num3 - num) + 1, (num4 - num2) + 1);
                    cellRange = this.InflateRange(cellRange);
                    item.Range = cellRange;
                }
            }

            internal bool HitTest(int rowViewportIndex, int columnViewportIndex, double mouseX, double mouseY, HitTestInformation hi)
            {
                Worksheet worksheet = this._sheetView.Worksheet;
                if (worksheet == null)
                {
                    return false;
                }
                if (this.Items.Count == 0)
                {
                    return false;
                }
                FormulaSelectionItem item = null;
                for (int i = 0; i < this.Items.Count; i++)
                {
                    FormulaSelectionItem item2 = this.Items[i];
                    if (!item2.CanChangeBoundsByUI)
                    {
                        continue;
                    }
                    int row = item2.Range.Row;
                    int column = item2.Range.Column;
                    int rowCount = item2.Range.RowCount;
                    int columnCount = item2.Range.ColumnCount;
                    if ((row == -1) && (column == -1))
                    {
                        continue;
                    }
                    if (row == -1)
                    {
                        row = 0;
                        rowCount = worksheet.RowCount;
                    }
                    if (column == -1)
                    {
                        column = 0;
                        columnCount = worksheet.ColumnCount;
                    }
                    SheetLayout sheetLayout = this._sheetView.GetSheetLayout();
                    RowLayout layout2 = this._sheetView.GetViewportRowLayoutModel(rowViewportIndex).Find(row);
                    RowLayout layout3 = this._sheetView.GetViewportRowLayoutModel(rowViewportIndex).Find((row + rowCount) - 1);
                    ColumnLayout layout4 = this._sheetView.GetViewportColumnLayoutModel(columnViewportIndex).Find(column);
                    ColumnLayout layout5 = this._sheetView.GetViewportColumnLayoutModel(columnViewportIndex).Find((column + columnCount) - 1);
                    if ((((rowCount < worksheet.RowCount) && (layout2 == null)) && (layout3 == null)) || (((columnCount < worksheet.ColumnCount) && (layout4 == null)) && (layout5 == null)))
                    {
                        continue;
                    }
                    double num6 = Math.Ceiling((layout4 == null) ? sheetLayout.GetViewportX(columnViewportIndex) : layout4.X);
                    double num7 = Math.Ceiling((layout5 == null) ? ((double)((sheetLayout.GetViewportX(columnViewportIndex) + sheetLayout.GetViewportWidth(columnViewportIndex)) - 1.0)) : ((double)((layout5.X + layout5.Width) - 1.0)));
                    double num8 = Math.Ceiling((layout2 == null) ? sheetLayout.GetViewportY(rowViewportIndex) : layout2.Y);
                    double num9 = Math.Ceiling((layout3 == null) ? ((double)((sheetLayout.GetViewportY(rowViewportIndex) + sheetLayout.GetViewportHeight(rowViewportIndex)) - 1.0)) : ((double)((layout3.Y + layout3.Height) - 1.0)));
                    double num10 = 3.0;
                    double num11 = 3.0;
                    if ((mouseY >= (num8 - 3.0)) && (mouseY <= (num8 + 3.0)))
                    {
                        if ((mouseX >= (num6 - 3.0)) && (mouseX <= (num6 + 3.0)))
                        {
                            ViewportFormulaSelectionHitTestInformation information = new ViewportFormulaSelectionHitTestInformation
                            {
                                SelectionIndex = i,
                                Position = PositionInFormulaSelection.LeftTop
                            };
                            hi.FormulaSelectionInfo = information;
                            hi.HitTestType = HitTestType.FormulaSelection;
                            item = item2;
                        }
                        else
                        {
                            if ((mouseX < (num7 - 3.0)) || (mouseX > (num7 + 3.0)))
                            {
                                goto Label_0391;
                            }
                            ViewportFormulaSelectionHitTestInformation information2 = new ViewportFormulaSelectionHitTestInformation
                            {
                                SelectionIndex = i,
                                Position = PositionInFormulaSelection.RightTop
                            };
                            hi.FormulaSelectionInfo = information2;
                            hi.HitTestType = HitTestType.FormulaSelection;
                            item = item2;
                        }
                        break;
                    }
                    if ((mouseY >= (num9 - 3.0)) && (mouseY <= (num9 + 3.0)))
                    {
                        if ((mouseX >= (num6 - 3.0)) && (mouseX <= (num6 + 3.0)))
                        {
                            ViewportFormulaSelectionHitTestInformation information3 = new ViewportFormulaSelectionHitTestInformation
                            {
                                SelectionIndex = i,
                                Position = PositionInFormulaSelection.LeftBottom
                            };
                            hi.FormulaSelectionInfo = information3;
                            hi.HitTestType = HitTestType.FormulaSelection;
                            item = item2;
                            break;
                        }
                        if ((mouseX >= (num7 - 3.0)) && (mouseX <= (num7 + 3.0)))
                        {
                            ViewportFormulaSelectionHitTestInformation information4 = new ViewportFormulaSelectionHitTestInformation
                            {
                                SelectionIndex = i,
                                Position = PositionInFormulaSelection.RightBottom
                            };
                            hi.FormulaSelectionInfo = information4;
                            hi.HitTestType = HitTestType.FormulaSelection;
                            item = item2;
                            break;
                        }
                    }
                Label_0391:
                    if ((mouseY >= (num8 - num10)) && (mouseY <= (num9 + num11)))
                    {
                        if (((layout4 != null) && (mouseX >= (num6 - num10))) && (mouseX <= (num6 + num11)))
                        {
                            ViewportFormulaSelectionHitTestInformation information5 = new ViewportFormulaSelectionHitTestInformation
                            {
                                SelectionIndex = i,
                                Position = PositionInFormulaSelection.Left
                            };
                            hi.FormulaSelectionInfo = information5;
                            hi.HitTestType = HitTestType.FormulaSelection;
                            item = item2;
                            break;
                        }
                        if (((layout5 != null) && (mouseX >= (num7 - num10))) && (mouseX <= (num7 + num11)))
                        {
                            ViewportFormulaSelectionHitTestInformation information6 = new ViewportFormulaSelectionHitTestInformation
                            {
                                SelectionIndex = i,
                                Position = PositionInFormulaSelection.Right
                            };
                            hi.FormulaSelectionInfo = information6;
                            hi.HitTestType = HitTestType.FormulaSelection;
                            item = item2;
                            break;
                        }
                    }
                    if ((mouseX >= (num6 - num10)) && (mouseX <= (num7 + num11)))
                    {
                        if (((layout2 != null) && (mouseY >= (num8 - num10))) && (mouseY <= (num8 + num11)))
                        {
                            ViewportFormulaSelectionHitTestInformation information7 = new ViewportFormulaSelectionHitTestInformation
                            {
                                SelectionIndex = i,
                                Position = PositionInFormulaSelection.Top
                            };
                            hi.FormulaSelectionInfo = information7;
                            hi.HitTestType = HitTestType.FormulaSelection;
                            item = item2;
                            break;
                        }
                        if (((layout3 != null) && (mouseY >= (num9 - num10))) && (mouseY <= (num9 + num11)))
                        {
                            ViewportFormulaSelectionHitTestInformation information8 = new ViewportFormulaSelectionHitTestInformation
                            {
                                SelectionIndex = i,
                                Position = PositionInFormulaSelection.Bottom
                            };
                            hi.FormulaSelectionInfo = information8;
                            hi.HitTestType = HitTestType.FormulaSelection;
                            item = item2;
                            break;
                        }
                    }
                }
                if (this._lastHitItem != item)
                {
                    if (this._lastHitItem != null)
                    {
                        this._lastHitItem.IsMouseOver = false;
                    }
                    this._lastHitItem = item;
                    if ((this._lastHitItem != null) && !this._sheetView.IsWorking)
                    {
                        this._lastHitItem.IsMouseOver = true;
                    }
                }
                return (this._lastHitItem != null);
            }

            private CellRange InflateRange(CellRange cellRange)
            {
                List<CellRange> list = new List<CellRange>();
                foreach (CellRange range in this._sheetView.Worksheet.SpanModel)
                {
                    list.Add(range);
                }
                if (list.Count != 0)
                {
                    bool flag = false;
                    while (!flag)
                    {
                        flag = true;
                        for (int i = 0; i < list.Count; i++)
                        {
                            CellRange range2 = list[i];
                            if (cellRange.Intersects(range2.Row, range2.Column, range2.RowCount, range2.ColumnCount))
                            {
                                list.RemoveAt(i--);
                                cellRange = UnionCellRange(cellRange, range2);
                                flag = false;
                                continue;
                            }
                        }
                    }
                }
                return cellRange;
            }

            private void OnItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
            {
                bool isDirty = true;
                Dt.Cells.Data.UIAdaptor.InvokeAsync(delegate
                {
                    if (isDirty)
                    {
                        isDirty = false;
                        if (this._sheetView._viewportPresenters != null)
                        {
                            GcViewport[,] viewportArray = this._sheetView._viewportPresenters;
                            int upperBound = viewportArray.GetUpperBound(0);
                            int num2 = viewportArray.GetUpperBound(1);
                            for (int k = viewportArray.GetLowerBound(0); k <= upperBound; k++)
                            {
                                for (int i = viewportArray.GetLowerBound(1); i <= num2; i++)
                                {
                                    GcViewport viewport = viewportArray[k, i];
                                    if (viewport != null)
                                    {
                                        viewport.RefreshFormulaSelection();
                                    }
                                }
                            }
                            this._sheetView.RefreshFormulaSelectionGrippers();
                        }
                    }
                });
            }

            internal void SetCursor(ViewportFormulaSelectionHitTestInformation info)
            {
                if ((info.Position == PositionInFormulaSelection.LeftTop) || (info.Position == PositionInFormulaSelection.RightBottom))
                {
                    this._sheetView.SetBuiltInCursor(CoreCursorType.SizeNorthwestSoutheast);
                }
                else if ((info.Position == PositionInFormulaSelection.LeftBottom) || (info.Position == PositionInFormulaSelection.RightTop))
                {
                    this._sheetView.SetBuiltInCursor(CoreCursorType.SizeNortheastSouthwest);
                }
                else
                {
                    this._sheetView.SetMouseCursor(CursorType.DragCell_DragCursor);
                }
            }

            private void StartCellSelecting()
            {
                HitTestInformation savedHitTestInformation = this._sheetView.GetSavedHitTestInformation();
                int row = savedHitTestInformation.ViewportInfo.Row;
                int column = savedHitTestInformation.ViewportInfo.Column;
                int rowCount = 1;
                int columnCount = 1;
                if ((savedHitTestInformation.ViewportInfo.Row > -1) && (savedHitTestInformation.ViewportInfo.Column > -1))
                {
                    bool flag;
                    bool flag2;
                    CellLayout layout = this._sheetView.GetViewportCellLayoutModel(savedHitTestInformation.RowViewportIndex, savedHitTestInformation.ColumnViewportIndex).FindCell(savedHitTestInformation.ViewportInfo.Row, savedHitTestInformation.ViewportInfo.Column);
                    KeyboardHelper.GetMetaKeyState(out flag2, out flag);
                    if (layout != null)
                    {
                        row = layout.Row;
                        column = layout.Column;
                        rowCount = layout.RowCount;
                        columnCount = layout.ColumnCount;
                    }
                    this._sheetView.IsWorking = true;
                    this._isSelectingCells = true;
                    this._sheetView.SetActiveColumnViewportIndex(savedHitTestInformation.ColumnViewportIndex);
                    this._sheetView.SetActiveRowViewportIndex(savedHitTestInformation.RowViewportIndex);
                    if (flag)
                    {
                        this.AddSelection(row, column, rowCount, columnCount, false);
                    }
                    else if (flag2)
                    {
                        this.ExtendSelection(row, column);
                    }
                    else
                    {
                        this.AddSelection(row, column, rowCount, columnCount, true);
                    }
                    if (!this._sheetView.IsWorking)
                    {
                        this.EndSelecting();
                    }
                    this._sheetView.StartScrollTimer();
                }
            }

            private void StartColumnSelecting()
            {
                HitTestInformation savedHitTestInformation = this._sheetView.GetSavedHitTestInformation();
                if ((savedHitTestInformation.HitTestType == HitTestType.Empty) || (savedHitTestInformation.HeaderInfo == null))
                {
                    savedHitTestInformation = this._sheetView.HitTest(this._sheetView._touchStartPoint.X, this._sheetView._touchStartPoint.Y);
                }
                if (savedHitTestInformation.HeaderInfo != null)
                {
                    SheetLayout sheetLayout = this._sheetView.GetSheetLayout();
                    this._sheetView.GetViewportTopRow((sheetLayout.FrozenHeight > 0.0) ? -1 : 0);
                    int column = savedHitTestInformation.HeaderInfo.Column;
                    this._sheetView.IsWorking = true;
                    this._isSelectingColumns = true;
                    this._sheetView.SetActiveColumnViewportIndex(savedHitTestInformation.ColumnViewportIndex);
                    this._sheetView.SetActiveRowViewportIndex((sheetLayout.FrozenHeight > 0.0) ? -1 : 0);
                    if (savedHitTestInformation.HeaderInfo.Column > -1)
                    {
                        bool flag;
                        bool flag2;
                        KeyboardHelper.GetMetaKeyState(out flag2, out flag);
                        if (flag)
                        {
                            this.AddSelection(-1, savedHitTestInformation.HeaderInfo.Column, -1, 1, false);
                        }
                        else if (flag2)
                        {
                            this.ExtendSelection(-1, savedHitTestInformation.HeaderInfo.Column);
                        }
                        else
                        {
                            this.AddSelection(-1, savedHitTestInformation.HeaderInfo.Column, -1, 1, true);
                        }
                        if (!this._sheetView.IsWorking)
                        {
                            this.EndSelecting();
                        }
                        this._sheetView.StartScrollTimer();
                    }
                }
            }

            internal void StartDragDropping()
            {
                if (!this._isDragDropping && (this.Items.Count != 0))
                {
                    this._sheetView.IsWorking = true;
                    this._isDragDropping = true;
                    HitTestInformation savedHitTestInformation = this._sheetView.GetSavedHitTestInformation();
                    FormulaSelectionItem item = this.Items[savedHitTestInformation.FormulaSelectionInfo.SelectionIndex];
                    this._sheetView._rowOffset = Math.Max(0, Math.Min((int)(savedHitTestInformation.ViewportInfo.Row - item.Range.Row), (int)(item.Range.RowCount - 1)));
                    this._sheetView._columnOffset = Math.Max(0, Math.Min((int)(savedHitTestInformation.ViewportInfo.Column - item.Range.Column), (int)(item.Range.ColumnCount - 1)));
                    this._sheetView._dragStartRowViewport = savedHitTestInformation.RowViewportIndex;
                    this._sheetView._dragStartColumnViewport = savedHitTestInformation.ColumnViewportIndex;
                    this._sheetView._dragToRowViewport = savedHitTestInformation.RowViewportIndex;
                    this._sheetView._dragToColumnViewport = savedHitTestInformation.ColumnViewportIndex;
                    using (IEnumerator<FormulaSelectionItem> enumerator = this.Items.GetEnumerator())
                    {
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.IsFlickering = false;
                        }
                    }
                    this.CanSelectFormula = false;
                    this._sheetView.StartScrollTimer();
                }
            }

            internal void StartDragResizing()
            {
                if (!this._isDragResizing && (this.Items.Count != 0))
                {
                    this._sheetView.IsWorking = true;
                    this._isDragResizing = true;
                    HitTestInformation savedHitTestInformation = this._sheetView.GetSavedHitTestInformation();
                    this._sheetView._dragStartRowViewport = savedHitTestInformation.RowViewportIndex;
                    this._sheetView._dragStartColumnViewport = savedHitTestInformation.ColumnViewportIndex;
                    this._sheetView._dragToRowViewport = savedHitTestInformation.RowViewportIndex;
                    this._sheetView._dragToColumnViewport = savedHitTestInformation.ColumnViewportIndex;
                    FormulaSelectionItem item = this.Items[savedHitTestInformation.FormulaSelectionInfo.SelectionIndex];
                    item.IsResizing = true;
                    CellRange range = item.Range;
                    if (range.Row < 0)
                    {
                        range = new CellRange(0, range.Column, this._sheetView.Worksheet.RowCount, range.ColumnCount);
                    }
                    if (range.Column < 0)
                    {
                        range = new CellRange(range.Row, 0, range.RowCount, this._sheetView.Worksheet.ColumnCount);
                    }
                    switch (savedHitTestInformation.FormulaSelectionInfo.Position)
                    {
                        case PositionInFormulaSelection.LeftTop:
                            this._resizingAnchorColumn = (range.Column + range.ColumnCount) - 1;
                            this._resizingAnchorRow = (range.Row + range.RowCount) - 1;
                            break;

                        case PositionInFormulaSelection.RightTop:
                            this._resizingAnchorColumn = range.Column;
                            this._resizingAnchorRow = (range.Row + range.RowCount) - 1;
                            break;

                        case PositionInFormulaSelection.LeftBottom:
                            this._resizingAnchorColumn = (range.Column + range.ColumnCount) - 1;
                            this._resizingAnchorRow = range.Row;
                            break;

                        case PositionInFormulaSelection.RightBottom:
                            this._resizingAnchorColumn = range.Column;
                            this._resizingAnchorRow = range.Row;
                            break;
                    }
                    using (IEnumerator<FormulaSelectionItem> enumerator = this.Items.GetEnumerator())
                    {
                        while (enumerator.MoveNext())
                        {
                            enumerator.Current.IsFlickering = false;
                        }
                    }
                    this.CanSelectFormula = false;
                    this._sheetView.StartScrollTimer();
                }
            }

            private void StartRowSelecting()
            {
                HitTestInformation savedHitTestInformation = this._sheetView.GetSavedHitTestInformation();
                SheetLayout sheetLayout = this._sheetView.GetSheetLayout();
                int row = savedHitTestInformation.HeaderInfo.Row;
                this._sheetView.GetViewportLeftColumn((sheetLayout.FrozenWidth > 0.0) ? -1 : 0);
                this._sheetView.IsWorking = true;
                this._isSelectingRows = true;
                this._sheetView.SetActiveColumnViewportIndex((sheetLayout.FrozenWidth > 0.0) ? -1 : 0);
                this._sheetView.SetActiveRowViewportIndex(savedHitTestInformation.RowViewportIndex);
                if (savedHitTestInformation.HeaderInfo.Row > -1)
                {
                    bool flag;
                    bool flag2;
                    KeyboardHelper.GetMetaKeyState(out flag, out flag2);
                    if (flag2)
                    {
                        this.AddSelection(savedHitTestInformation.HeaderInfo.Row, -1, 1, -1, false);
                    }
                    else if (flag)
                    {
                        this.ExtendSelection(savedHitTestInformation.HeaderInfo.Row, -1);
                    }
                    else
                    {
                        this.AddSelection(savedHitTestInformation.HeaderInfo.Row, -1, 1, -1, true);
                    }
                    if (!this._sheetView.IsWorking)
                    {
                        this.EndSelecting();
                    }
                    this._sheetView.StartScrollTimer();
                }
            }

            internal bool StartSelecting(SheetArea area)
            {
                if (this.CanSelectFormula)
                {
                    if (area == SheetArea.Cells)
                    {
                        this.StartCellSelecting();
                        return true;
                    }
                    if (area == (SheetArea.CornerHeader | SheetArea.RowHeader))
                    {
                        this.StartRowSelecting();
                        return true;
                    }
                    if (area == SheetArea.ColumnHeader)
                    {
                        this.StartColumnSelecting();
                        return true;
                    }
                    if (area == SheetArea.CornerHeader)
                    {
                        this.StartSheetSelecting();
                        return true;
                    }
                }
                else
                {
                    this.EndFormulaSelection();
                }
                return false;
            }

            private void StartSheetSelecting()
            {
                bool flag;
                bool flag2;
                SheetLayout sheetLayout = this._sheetView.GetSheetLayout();
                this._sheetView.SetActiveColumnViewportIndex((sheetLayout.FrozenWidth > 0.0) ? -1 : 0);
                this._sheetView.SetActiveRowViewportIndex((sheetLayout.FrozenHeight > 0.0) ? -1 : 0);
                KeyboardHelper.GetMetaKeyState(out flag, out flag2);
                this.AddSelection(0, -1, this._sheetView.Worksheet.RowCount, -1, !flag2);
            }

            internal bool TouchHitTest(double mouseX, double mouseY, HitTestInformation hi)
            {
                Worksheet worksheet = this._sheetView.Worksheet;
                if (worksheet != null)
                {
                    if (this.Items.Count == 0)
                    {
                        return false;
                    }
                    for (int i = 0; i < this.Items.Count; i++)
                    {
                        FormulaSelectionItem item = this.Items[i];
                        if (item.CanChangeBoundsByUI)
                        {
                            int row = item.Range.Row;
                            int column = item.Range.Column;
                            int rowCount = item.Range.RowCount;
                            int columnCount = item.Range.ColumnCount;
                            if ((row != -1) || (column != -1))
                            {
                                if (row == -1)
                                {
                                    row = 0;
                                    rowCount = worksheet.RowCount;
                                }
                                if (column == -1)
                                {
                                    column = 0;
                                    columnCount = worksheet.ColumnCount;
                                }
                                SheetLayout sheetLayout = this._sheetView.GetSheetLayout();
                                int activeRowViewportIndex = this._sheetView.GetActiveRowViewportIndex();
                                int activeColumnViewportIndex = this._sheetView.GetActiveColumnViewportIndex();
                                RowLayout layout2 = this._sheetView.GetViewportRowLayoutModel(activeRowViewportIndex).Find(row);
                                RowLayout layout3 = this._sheetView.GetViewportRowLayoutModel(activeRowViewportIndex).Find((row + rowCount) - 1);
                                ColumnLayout layout4 = this._sheetView.GetViewportColumnLayoutModel(activeColumnViewportIndex).Find(column);
                                ColumnLayout layout5 = this._sheetView.GetViewportColumnLayoutModel(activeColumnViewportIndex).Find((column + columnCount) - 1);
                                if ((((rowCount >= worksheet.RowCount) || (layout2 != null)) || (layout3 != null)) && (((columnCount >= worksheet.ColumnCount) || (layout4 != null)) || (layout5 != null)))
                                {
                                    double num8 = Math.Ceiling((layout4 == null) ? sheetLayout.GetViewportX(activeColumnViewportIndex) : layout4.X);
                                    double num9 = Math.Ceiling((layout5 == null) ? ((double)((sheetLayout.GetViewportX(activeColumnViewportIndex) + sheetLayout.GetViewportWidth(activeColumnViewportIndex)) - 1.0)) : ((double)((layout5.X + layout5.Width) - 1.0)));
                                    double num10 = Math.Ceiling((layout2 == null) ? sheetLayout.GetViewportY(activeRowViewportIndex) : layout2.Y);
                                    double num11 = Math.Ceiling((layout3 == null) ? ((double)((sheetLayout.GetViewportY(activeRowViewportIndex) + sheetLayout.GetViewportHeight(activeRowViewportIndex)) - 1.0)) : ((double)((layout3.Y + layout3.Height) - 1.0)));
                                    if (((mouseX >= (num8 - 20.0)) && (mouseX <= (num8 + 20.0))) && ((mouseY >= (num10 - 20.0)) && (mouseY <= (num10 + 20.0))))
                                    {
                                        ViewportFormulaSelectionHitTestInformation information = new ViewportFormulaSelectionHitTestInformation
                                        {
                                            SelectionIndex = i,
                                            Position = PositionInFormulaSelection.LeftTop
                                        };
                                        hi.FormulaSelectionInfo = information;
                                        hi.HitTestType = HitTestType.FormulaSelection;
                                        hi.RowViewportIndex = activeRowViewportIndex;
                                        hi.ColumnViewportIndex = activeColumnViewportIndex;
                                        return true;
                                    }
                                    if (((mouseX >= (num9 - 20.0)) && (mouseX <= (num9 + 20.0))) && ((mouseY >= (num11 - 20.0)) && (mouseY <= (num11 + 20.0))))
                                    {
                                        ViewportFormulaSelectionHitTestInformation information2 = new ViewportFormulaSelectionHitTestInformation
                                        {
                                            SelectionIndex = i,
                                            Position = PositionInFormulaSelection.RightBottom
                                        };
                                        hi.FormulaSelectionInfo = information2;
                                        hi.HitTestType = HitTestType.FormulaSelection;
                                        hi.RowViewportIndex = activeRowViewportIndex;
                                        hi.ColumnViewportIndex = activeColumnViewportIndex;
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                return false;
            }

            internal bool TouchSelect(SheetArea area)
            {
                bool flag = false;
                if (this.CanSelectFormula)
                {
                    if (area == SheetArea.Cells)
                    {
                        this.TouchSelectCell();
                        flag = true;
                    }
                    else if (area == (SheetArea.CornerHeader | SheetArea.RowHeader))
                    {
                        this.TouchSelectRow();
                        flag = true;
                    }
                    else if (area == SheetArea.ColumnHeader)
                    {
                        this.TouchSelectColumn();
                        flag = true;
                    }
                    else if (area == SheetArea.CornerHeader)
                    {
                        this.TouchSelectSheet();
                        flag = true;
                    }
                }
                else
                {
                    this.EndFormulaSelection();
                }
                IsTouching = true;
                if (flag)
                {
                    this.SheetView.ShowFormulaSelectionTouchGrippers();
                }
                return flag;
            }

            private void TouchSelectCell()
            {
                HitTestInformation savedHitTestInformation = this._sheetView.GetSavedHitTestInformation();
                int row = savedHitTestInformation.ViewportInfo.Row;
                int column = savedHitTestInformation.ViewportInfo.Column;
                int rowCount = 1;
                int columnCount = 1;
                if ((savedHitTestInformation.ViewportInfo.Row > -1) && (savedHitTestInformation.ViewportInfo.Column > -1))
                {
                    bool flag;
                    bool flag2;
                    CellLayout layout = this._sheetView.GetViewportCellLayoutModel(savedHitTestInformation.RowViewportIndex, savedHitTestInformation.ColumnViewportIndex).FindCell(savedHitTestInformation.ViewportInfo.Row, savedHitTestInformation.ViewportInfo.Column);
                    KeyboardHelper.GetMetaKeyState(out flag2, out flag);
                    if (layout != null)
                    {
                        row = layout.Row;
                        column = layout.Column;
                        rowCount = layout.RowCount;
                        columnCount = layout.ColumnCount;
                    }
                    this._sheetView.SetActiveColumnViewportIndex(savedHitTestInformation.ColumnViewportIndex);
                    this._sheetView.SetActiveRowViewportIndex(savedHitTestInformation.RowViewportIndex);
                    this.AddSelection(row, column, rowCount, columnCount, true);
                }
            }

            private void TouchSelectColumn()
            {
                HitTestInformation savedHitTestInformation = this._sheetView.GetSavedHitTestInformation();
                if ((savedHitTestInformation.HitTestType == HitTestType.Empty) || (savedHitTestInformation.HeaderInfo == null))
                {
                    savedHitTestInformation = this._sheetView.HitTest(this._sheetView._touchStartPoint.X, this._sheetView._touchStartPoint.Y);
                }
                if (savedHitTestInformation.HeaderInfo != null)
                {
                    SheetLayout sheetLayout = this._sheetView.GetSheetLayout();
                    this._sheetView.GetViewportTopRow((sheetLayout.FrozenHeight > 0.0) ? -1 : 0);
                    int column = savedHitTestInformation.HeaderInfo.Column;
                    this._sheetView.SetActiveColumnViewportIndex(savedHitTestInformation.ColumnViewportIndex);
                    this._sheetView.SetActiveRowViewportIndex((sheetLayout.FrozenHeight > 0.0) ? -1 : 0);
                    if (savedHitTestInformation.HeaderInfo.Column > -1)
                    {
                        this.AddSelection(-1, savedHitTestInformation.HeaderInfo.Column, -1, 1, true);
                    }
                }
            }

            private void TouchSelectRow()
            {
                HitTestInformation savedHitTestInformation = this._sheetView.GetSavedHitTestInformation();
                SheetLayout sheetLayout = this._sheetView.GetSheetLayout();
                int row = savedHitTestInformation.HeaderInfo.Row;
                this._sheetView.GetViewportLeftColumn((sheetLayout.FrozenWidth > 0.0) ? -1 : 0);
                this._sheetView.SetActiveColumnViewportIndex((sheetLayout.FrozenWidth > 0.0) ? -1 : 0);
                this._sheetView.SetActiveRowViewportIndex(savedHitTestInformation.RowViewportIndex);
                if (savedHitTestInformation.HeaderInfo.Row > -1)
                {
                    this.AddSelection(savedHitTestInformation.HeaderInfo.Row, -1, 1, -1, true);
                }
            }

            private void TouchSelectSheet()
            {
                SheetLayout sheetLayout = this._sheetView.GetSheetLayout();
                this._sheetView.SetActiveColumnViewportIndex((sheetLayout.FrozenWidth > 0.0) ? -1 : 0);
                this._sheetView.SetActiveRowViewportIndex((sheetLayout.FrozenHeight > 0.0) ? -1 : 0);
                this.AddSelection(0, -1, this._sheetView.Worksheet.RowCount, -1, true);
            }

            private static CellRange UnionCellRange(CellRange range1, CellRange range2)
            {
                int row = Math.Min(range1.Row, range2.Row);
                int column = Math.Min(range1.Column, range2.Column);
                int num3 = Math.Max((int)((range1.Row + range1.RowCount) - 1), (int)((range2.Row + range2.RowCount) - 1));
                int num4 = Math.Max((int)((range1.Column + range1.ColumnCount) - 1), (int)((range2.Column + range2.ColumnCount) - 1));
                if ((row >= 0) && (column >= 0))
                {
                    return new CellRange(row, column, (num3 - row) + 1, (num4 - column) + 1);
                }
                if (row >= 0)
                {
                    return new CellRange(row, -1, (num3 - row) + 1, -1);
                }
                if (column >= 0)
                {
                    return new CellRange(-1, column, -1, (num4 - column) + 1);
                }
                return new CellRange(-1, -1, -1, -1);
            }

            private void UpdateSelection()
            {
                HitTestInformation savedHitTestInformation = this._sheetView.GetSavedHitTestInformation();
                FormulaSelectionItem item = this.Items[savedHitTestInformation.FormulaSelectionInfo.SelectionIndex];
                CellRange range = item.Range;
                int row = this._sheetView._dragToRow - this._sheetView._rowOffset;
                if ((range.Row == -1) && (range.RowCount == -1))
                {
                    row = -1;
                }
                else if (row < 0)
                {
                    row = 0;
                }
                else if ((row + range.RowCount) > this._sheetView.Worksheet.RowCount)
                {
                    row = this._sheetView.Worksheet.RowCount - range.RowCount;
                }
                int column = this._sheetView._dragToColumn - this._sheetView._columnOffset;
                if ((range.Column == -1) && (range.ColumnCount == -1))
                {
                    column = -1;
                }
                else if (column < 0)
                {
                    column = 0;
                }
                else if ((column + range.ColumnCount) > this._sheetView.Worksheet.ColumnCount)
                {
                    column = this._sheetView.Worksheet.ColumnCount - range.ColumnCount;
                }
                range = new CellRange(row, column, range.RowCount, range.ColumnCount);
                item.Range = range;
            }

            private void UpdateSelectionForResize()
            {
                HitTestInformation savedHitTestInformation = this._sheetView.GetSavedHitTestInformation();
                FormulaSelectionItem item = this.Items[savedHitTestInformation.FormulaSelectionInfo.SelectionIndex];
                int column = Math.Min(this._sheetView._dragToColumn, this._resizingAnchorColumn);
                int row = Math.Min(this._sheetView._dragToRow, this._resizingAnchorRow);
                int num3 = Math.Max(this._sheetView._dragToColumn, this._resizingAnchorColumn);
                int num4 = Math.Max(this._sheetView._dragToRow, this._resizingAnchorRow);
                CellRange range = new CellRange(row, column, (num4 - row) + 1, (num3 - column) + 1);
                if ((range.Column == 0) && (range.ColumnCount == this._sheetView.Worksheet.ColumnCount))
                {
                    range = new CellRange(range.Row, -1, range.RowCount, -1);
                }
                else if ((range.Row == 0) && (range.RowCount == this._sheetView.Worksheet.RowCount))
                {
                    range = new CellRange(-1, range.Column, -1, range.ColumnCount);
                }
                item.Range = range;
            }

            public int ActiveColumnViewportIndex
            {
                get { return this._activeColumnViewportIndex; }
                set
                {
                    if (this._activeColumnViewportIndex != value)
                    {
                        this._activeColumnViewportIndex = value;
                    }
                }
            }

            public int ActiveRowViewportIndex
            {
                get { return this._activeRowViewportIndex; }
                set
                {
                    if (this._activeRowViewportIndex != value)
                    {
                        this._activeRowViewportIndex = value;
                    }
                }
            }

            public int AnchorColumn
            {
                get
                {
                    if (((this._anchorColumn == -1) && (this._sheetView != null)) && (this._sheetView.Worksheet != null))
                    {
                        return this._sheetView.Worksheet.ActiveColumnIndex;
                    }
                    return this._anchorColumn;
                }
            }

            public int AnchorRow
            {
                get
                {
                    if (((this._anchorRow == -1) && (this._sheetView != null)) && (this._sheetView.Worksheet != null))
                    {
                        return this._sheetView.Worksheet.ActiveRowIndex;
                    }
                    return this._anchorRow;
                }
            }

            internal bool CanSelectFormula
            {
                get
                {
                    if (!this._canSelectFormula)
                    {
                        return this.ForceSelection;
                    }
                    return true;
                }
                set
                {
                    if ((!this.IsInOtherSheet && this.IsSelectionBegined) && (this._canSelectFormula != value))
                    {
                        this._canSelectFormula = value;
                        if (!this._canSelectFormula)
                        {
                            using (IEnumerator<FormulaSelectionItem> enumerator = this.Items.GetEnumerator())
                            {
                                while (enumerator.MoveNext())
                                {
                                    enumerator.Current.IsFlickering = false;
                                }
                            }
                        }
                    }
                }
            }

            public bool ForceSelection
            {
                get { return this._forceSelection; }
                set { this._forceSelection = value; }
            }

            public Dt.Cells.UI.SheetView.FormulaEditorConnector FormulaEditorConnector
            {
                get
                {
                    if (this._formulaEditorConnector == null)
                    {
                        this._formulaEditorConnector = new Dt.Cells.UI.SheetView.FormulaEditorConnector(this);
                    }
                    return this._formulaEditorConnector;
                }
            }

            public bool IsDragging
            {
                get
                {
                    if (!this.IsSelecting && !this._isDragDropping)
                    {
                        return this._isDragResizing;
                    }
                    return true;
                }
            }

            public bool IsFlicking
            {
                get
                {
                    using (IEnumerator<FormulaSelectionItem> enumerator = this._items.GetEnumerator())
                    {
                        while (enumerator.MoveNext())
                        {
                            if (enumerator.Current.IsFlickering)
                            {
                                return true;
                            }
                        }
                    }
                    return false;
                }
            }

            public bool IsInOtherSheet
            {
                get { return this._isInOtherSheet; }
                set
                {
                    if (this._isInOtherSheet != value)
                    {
                        this._isInOtherSheet = value;
                    }
                }
            }

            private bool IsSelecting
            {
                get
                {
                    if (!this._isSelectingCells && !this._isSelectingRows)
                    {
                        return this._isSelectingColumns;
                    }
                    return true;
                }
            }

            public bool IsSelectionBegined
            {
                get
                {
                    if (!this._isSelectionBegined)
                    {
                        return this.ForceSelection;
                    }
                    return true;
                }
                set { this._isSelectionBegined = value; }
            }

            public static bool IsTouching { get; set; }

            public IList<FormulaSelectionItem> Items
            {
                get { return (IList<FormulaSelectionItem>)this._items; }
            }

            public Dt.Cells.UI.SheetView.SpreadXFormulaNavigation Navigation
            {
                get
                {
                    if (this._navigation == null)
                    {
                        this._navigation = new Dt.Cells.UI.SheetView.SpreadXFormulaNavigation(this);
                    }
                    return this._navigation;
                }
            }

            public Dt.Cells.UI.SheetView.SpreadXFormulaSelection Selection
            {
                get
                {
                    if (this._selection == null)
                    {
                        this._selection = new Dt.Cells.UI.SheetView.SpreadXFormulaSelection(this);
                    }
                    return this._selection;
                }
            }

            public Dt.Cells.UI.SheetView SheetView
            {
                get { return this._sheetView; }
            }
        }

        internal class GripperLocationsStruct
        {
            public Windows.Foundation.Rect BottomRight { get; set; }

            public Windows.Foundation.Rect TopLeft { get; set; }
        }

        internal class SpreadXFormulaNavigation
        {
            private SheetView.FormulaSelectionFeature _formulaSelectionFeature;
            private SheetView _sheetView;
            private SheetView.SpreadXFormulaTabularNavigator _tabularNavigator;

            public SpreadXFormulaNavigation(SheetView.FormulaSelectionFeature formulaSelectionFeature)
            {
                this._formulaSelectionFeature = formulaSelectionFeature;
                this._sheetView = formulaSelectionFeature.SheetView;
                this._tabularNavigator = new SheetView.SpreadXFormulaTabularNavigator(this._sheetView);
            }

            private bool MoveActiveCell(NavigationDirection direction)
            {
                if (this._sheetView.Worksheet == null)
                {
                    return false;
                }
                int activeRowViewportIndex = this._sheetView.GetActiveRowViewportIndex();
                int activeColumnViewportIndex = this._sheetView.GetActiveColumnViewportIndex();
                this._sheetView.GetViewportTopRow(activeRowViewportIndex);
                this._sheetView.GetViewportLeftColumn(activeColumnViewportIndex);
                int activeRowIndex = this._sheetView.Worksheet.ActiveRowIndex;
                int activeColumnIndex = this._sheetView.Worksheet.ActiveColumnIndex;
                this._tabularNavigator.GetNavigationStartPosition();
                TabularPosition position = this.MoveCurrent(direction);
                if (position.IsEmpty)
                {
                    NavigatorHelper.BringCellToVisible(this._sheetView, this._formulaSelectionFeature.AnchorRow, this._formulaSelectionFeature.AnchorColumn);
                    return false;
                }
                int row = position.Row;
                int column = position.Column;
                this._formulaSelectionFeature.AddSelection(row, column, 1, 1, true);
                int num5 = this._sheetView.GetActiveRowViewportIndex();
                int num6 = this._sheetView.GetActiveColumnViewportIndex();
                if ((activeRowViewportIndex != num5) || (activeColumnViewportIndex != num6))
                {
                    NavigatorHelper.BringCellToVisible(this._sheetView, row, column);
                }
                return true;
            }

            private TabularPosition MoveCurrent(NavigationDirection direction)
            {
                int anchorRow = this._formulaSelectionFeature.AnchorRow;
                int anchorColumn = this._formulaSelectionFeature.AnchorColumn;
                if ((anchorRow != -1) && (anchorColumn != -1))
                {
                    this._tabularNavigator.CurrentCell = new TabularPosition(SheetArea.Cells, anchorRow, anchorColumn);
                    if (this._tabularNavigator.MoveCurrent(direction))
                    {
                        TabularPosition currentCell = this._tabularNavigator.CurrentCell;
                        return new TabularPosition(SheetArea.Cells, currentCell.Row, currentCell.Column);
                    }
                }
                return TabularPosition.Empty;
            }

            public void ProcessNavigation(NavigationDirection? direction)
            {
                if (((this._formulaSelectionFeature.Items.Count == 0) || this._formulaSelectionFeature.IsFlicking) && direction.HasValue)
                {
                    this.MoveActiveCell(direction.Value);
                }
            }

            private bool SetActiveCell(int row, int column, bool clearSelection)
            {
                Worksheet worksheet = this._sheetView.Worksheet;
                if (!this._sheetView.RaiseLeaveCell(worksheet.ActiveRowIndex, worksheet.ActiveColumnIndex, row, column))
                {
                    worksheet.SetActiveCell(row, column, clearSelection);
                    this._sheetView.RaiseEnterCell(row, column);
                    return true;
                }
                return false;
            }
        }

        internal class SpreadXFormulaSelection
        {
            private SheetView.FormulaSelectionFeature _formulaSelectionFeature;
            private KeyboardSelectNavigator _keyboardNavigator;
            private SheetView _sheetView;

            internal SpreadXFormulaSelection(SheetView.FormulaSelectionFeature formulaSelectionFeature)
            {
                this._formulaSelectionFeature = formulaSelectionFeature;
                this._sheetView = formulaSelectionFeature.SheetView;
                this._keyboardNavigator = new KeyboardSelectNavigator(this._sheetView);
            }

            private static CellRange CellRangeUnion(CellRange range1, CellRange range2)
            {
                int row = Math.Min(range1.Row, range2.Row);
                int column = Math.Min(range1.Column, range2.Column);
                int num3 = Math.Max((int)((range1.Row + range1.RowCount) - 1), (int)((range2.Row + range2.RowCount) - 1));
                int num4 = Math.Max((int)((range1.Column + range1.ColumnCount) - 1), (int)((range2.Column + range2.ColumnCount) - 1));
                return new CellRange(row, column, (num3 - row) + 1, (num4 - column) + 1);
            }

            private CellRange ExpandRange(List<CellRange> spans, CellRange range)
            {
                if ((spans != null) && (spans.Count > 0))
                {
                    for (int i = 0; i < spans.Count; i++)
                    {
                        CellRange range2 = spans[i];
                        if (range.Intersects(range2.Row, range2.Column, range2.RowCount, range2.ColumnCount))
                        {
                            spans.RemoveAt(i--);
                            return this.ExpandRange(spans, CellRangeUnion(range, range2));
                        }
                    }
                }
                return range;
            }

            private CellRange GetActiveCell()
            {
                int anchorRow = this._formulaSelectionFeature.AnchorRow;
                int anchorColumn = this._formulaSelectionFeature.AnchorColumn;
                CellRange range = new CellRange(anchorRow, anchorColumn, 1, 1);
                CellRange range2 = this._sheetView.Worksheet.SpanModel.Find(anchorRow, anchorColumn);
                if (range2 != null)
                {
                    range = range2;
                }
                return range;
            }

            private static void GetAdjustedEdge(int row, int column, int rowCount, int columnCount, NavigationDirection navigationDirection, bool shrink, out TabularPosition startPosition, out TabularPosition endPosition)
            {
                startPosition = TabularPosition.Empty;
                endPosition = TabularPosition.Empty;
                KeyboardSelectDirection none = KeyboardSelectDirection.None;
                switch (navigationDirection)
                {
                    case NavigationDirection.Left:
                    case NavigationDirection.PageLeft:
                    case NavigationDirection.Home:
                        none = KeyboardSelectDirection.Left;
                        break;

                    case NavigationDirection.Right:
                    case NavigationDirection.PageRight:
                    case NavigationDirection.End:
                        none = KeyboardSelectDirection.Right;
                        break;

                    case NavigationDirection.Up:
                    case NavigationDirection.PageUp:
                    case NavigationDirection.Top:
                    case NavigationDirection.First:
                        none = KeyboardSelectDirection.Top;
                        break;

                    case NavigationDirection.Down:
                    case NavigationDirection.PageDown:
                    case NavigationDirection.Bottom:
                    case NavigationDirection.Last:
                        none = KeyboardSelectDirection.Bottom;
                        break;
                }
                if (shrink)
                {
                    switch (navigationDirection)
                    {
                        case NavigationDirection.Left:
                            none = KeyboardSelectDirection.Right;
                            break;

                        case NavigationDirection.Right:
                            none = KeyboardSelectDirection.Left;
                            break;

                        case NavigationDirection.Up:
                            none = KeyboardSelectDirection.Bottom;
                            break;

                        case NavigationDirection.Down:
                            none = KeyboardSelectDirection.Top;
                            break;
                    }
                }
                switch (none)
                {
                    case KeyboardSelectDirection.Left:
                        startPosition = new TabularPosition(SheetArea.Cells, row, (column + columnCount) - 1);
                        endPosition = new TabularPosition(SheetArea.Cells, (row + rowCount) - 1, column);
                        return;

                    case KeyboardSelectDirection.Top:
                        startPosition = new TabularPosition(SheetArea.Cells, (row + rowCount) - 1, column);
                        endPosition = new TabularPosition(SheetArea.Cells, row, (column + columnCount) - 1);
                        return;

                    case KeyboardSelectDirection.Right:
                        startPosition = new TabularPosition(SheetArea.Cells, row, column);
                        endPosition = new TabularPosition(SheetArea.Cells, (row + rowCount) - 1, (column + columnCount) - 1);
                        return;

                    case KeyboardSelectDirection.Bottom:
                        startPosition = new TabularPosition(SheetArea.Cells, row, column);
                        endPosition = new TabularPosition(SheetArea.Cells, (row + rowCount) - 1, (column + columnCount) - 1);
                        return;
                }
            }

            private CellRange GetExpandIntersectedRange(CellRange range)
            {
                if (this._sheetView.Worksheet.SpanModel.IsEmpty())
                {
                    return range;
                }
                List<CellRange> spans = new List<CellRange>();
                foreach (object obj2 in this._sheetView.Worksheet.SpanModel)
                {
                    spans.Add((CellRange)obj2);
                }
                return this.ExpandRange(spans, range);
            }

            private static KeyboardSelectKind GetKeyboardSelectionKind(NavigationDirection navigationDirection)
            {
                switch (navigationDirection)
                {
                    case NavigationDirection.Left:
                    case NavigationDirection.Right:
                    case NavigationDirection.Up:
                    case NavigationDirection.Down:
                        return KeyboardSelectKind.Line;

                    case NavigationDirection.PageUp:
                    case NavigationDirection.PageDown:
                    case NavigationDirection.PageLeft:
                    case NavigationDirection.PageRight:
                        return KeyboardSelectKind.Page;

                    case NavigationDirection.Home:
                    case NavigationDirection.End:
                    case NavigationDirection.Top:
                    case NavigationDirection.Bottom:
                    case NavigationDirection.First:
                    case NavigationDirection.Last:
                        return KeyboardSelectKind.Through;
                }
                return KeyboardSelectKind.None;
            }

            private CellRange GetSelectionRange()
            {
                if (this._formulaSelectionFeature.Items.Count > 0)
                {
                    return this._formulaSelectionFeature.Items[this._formulaSelectionFeature.Items.Count - 1].Range;
                }
                return null;
            }

            private CellRange KeyboardLineSelect(CellRange currentRange, NavigationDirection navigationDirection, bool shrink)
            {
                TabularPosition position;
                TabularPosition position2;
                TabularPosition currentCell;
                CellRange expandIntersectedRange;
                int row = (currentRange.Row < 0) ? 0 : currentRange.Row;
                int column = (currentRange.Column < 0) ? 0 : currentRange.Column;
                int rowCount = (currentRange.Row < 0) ? this._sheetView.Worksheet.RowCount : currentRange.RowCount;
                int columnCount = (currentRange.Column < 0) ? this._sheetView.Worksheet.ColumnCount : currentRange.ColumnCount;
                GetAdjustedEdge(row, column, rowCount, columnCount, navigationDirection, shrink, out position, out position2);
                if ((position == TabularPosition.Empty) || (position2 == TabularPosition.Empty))
                {
                    return null;
                }
                this._keyboardNavigator.CurrentCell = position2;
                CellRange activeCell = this.GetActiveCell();
                do
                {
                    if (!this._keyboardNavigator.MoveCurrent(navigationDirection))
                    {
                        return null;
                    }
                    currentCell = this._keyboardNavigator.CurrentCell;
                    expandIntersectedRange = this.GetExpandIntersectedRange(TabularPositionUnion(position, currentCell));
                    if (!expandIntersectedRange.Contains(activeCell))
                    {
                        return null;
                    }
                }
                while (expandIntersectedRange.Equals(row, column, rowCount, columnCount));
                bool flag = true;
                int viewCellRow = currentCell.Row;
                int viewCellColumn = currentCell.Column;
                int activeRowViewportIndex = this._sheetView.GetActiveRowViewportIndex();
                int activeColumnViewportIndex = this._sheetView.GetActiveColumnViewportIndex();
                int viewportTopRow = this._sheetView.GetViewportTopRow(activeRowViewportIndex);
                int viewportBottomRow = this._sheetView.GetViewportBottomRow(activeRowViewportIndex);
                int viewportLeftColumn = this._sheetView.GetViewportLeftColumn(activeColumnViewportIndex);
                int viewportRightColumn = this._sheetView.GetViewportRightColumn(activeColumnViewportIndex);
                if ((navigationDirection == NavigationDirection.Up) || (navigationDirection == NavigationDirection.Down))
                {
                    if ((expandIntersectedRange.Column == 0) && (expandIntersectedRange.ColumnCount == this._sheetView.Worksheet.ColumnCount))
                    {
                        if ((currentCell.Row >= viewportTopRow) && (currentCell.Row < viewportBottomRow))
                        {
                            flag = false;
                        }
                        else
                        {
                            viewCellColumn = viewportLeftColumn;
                        }
                    }
                }
                else if (((navigationDirection == NavigationDirection.Left) || (navigationDirection == NavigationDirection.Right)) && ((expandIntersectedRange.Row == 0) && (expandIntersectedRange.RowCount == this._sheetView.Worksheet.RowCount)))
                {
                    if ((currentCell.Column >= viewportLeftColumn) && (currentCell.Column < viewportRightColumn))
                    {
                        flag = false;
                    }
                    else
                    {
                        viewCellRow = viewportTopRow;
                    }
                }
                if (flag)
                {
                    NavigatorHelper.BringCellToVisible(this._sheetView, viewCellRow, viewCellColumn);
                }
                return expandIntersectedRange;
            }

            private CellRange KeyboardPageSelect(CellRange currentRange, NavigationDirection direction)
            {
                int row = (currentRange.Row < 0) ? 0 : currentRange.Row;
                int rowCount = (currentRange.Row < 0) ? this._sheetView.Worksheet.RowCount : currentRange.RowCount;
                int column = (currentRange.Column < 0) ? 0 : currentRange.Column;
                int columnCount = (currentRange.Column < 0) ? this._sheetView.Worksheet.ColumnCount : currentRange.ColumnCount;
                int num5 = (row + rowCount) - 1;
                int num6 = (column + columnCount) - 1;
                int activeRowViewportIndex = this._sheetView.GetActiveRowViewportIndex();
                int activeColumnViewportIndex = this._sheetView.GetActiveColumnViewportIndex();
                int num9 = this._sheetView.Worksheet.RowCount;
                int num10 = this._sheetView.Worksheet.ColumnCount;
                int viewportTopRow = this._sheetView.GetViewportTopRow(activeRowViewportIndex);
                this._sheetView.GetViewportBottomRow(activeRowViewportIndex);
                int viewportLeftColumn = this._sheetView.GetViewportLeftColumn(activeColumnViewportIndex);
                this._sheetView.GetViewportRightColumn(activeColumnViewportIndex);
                int num13 = this.GetActiveCell().Row;
                int num14 = this.GetActiveCell().Column;
                CellRange range = null;
                if (direction == NavigationDirection.PageDown)
                {
                    NavigatorHelper.ScrollToNextPageOfRows(this._sheetView);
                    int num15 = this._sheetView.GetViewportTopRow(activeRowViewportIndex);
                    int viewportBottomRow = this._sheetView.GetViewportBottomRow(activeRowViewportIndex);
                    int num17 = num15 - viewportTopRow;
                    if (num17 > 0)
                    {
                        int num18 = num13;
                        int num19 = num5 + num17;
                        if (row != num13)
                        {
                            num18 = row + num17;
                            num19 = num5;
                            if (num18 >= num13)
                            {
                                num18 = num13;
                                num19 = num5 + (num17 - (num13 - row));
                            }
                        }
                        if (num19 < num15)
                        {
                            num19 = num15;
                        }
                        else if (num18 > viewportBottomRow)
                        {
                            num18 = viewportBottomRow;
                            num19 = num13;
                        }
                        else if ((num19 > viewportBottomRow) && (num13 <= viewportBottomRow))
                        {
                            num19 = viewportBottomRow;
                        }
                        return new CellRange(num18, column, (num19 - num18) + 1, columnCount);
                    }
                    int num20 = (num9 - row) - rowCount;
                    if ((num20 > 0) && (this._sheetView.Worksheet.FrozenTrailingRowCount == 0))
                    {
                        int num21 = num13;
                        int num22 = num9 - 1;
                        range = new CellRange(num21, column, (num22 - num21) + 1, columnCount);
                    }
                    return range;
                }
                if (direction == NavigationDirection.PageUp)
                {
                    NavigatorHelper.ScrollToPreviousPageOfRows(this._sheetView);
                    int num23 = this._sheetView.GetViewportTopRow(activeRowViewportIndex);
                    int num24 = this._sheetView.GetViewportBottomRow(activeRowViewportIndex);
                    int num25 = viewportTopRow - num23;
                    if (num25 > 0)
                    {
                        int num26 = row - num25;
                        int num27 = num5;
                        if (num5 != num13)
                        {
                            num26 = row;
                            num27 = num5 - num25;
                            if (num27 <= num13)
                            {
                                num26 = row - (num25 - (num5 - num13));
                                num27 = num13;
                            }
                        }
                        if (num27 < num23)
                        {
                            num26 = num13;
                            num27 = num23;
                        }
                        else if (num26 > num24)
                        {
                            num26 = num24;
                        }
                        else if ((num26 < num23) && (num13 >= num23))
                        {
                            num26 = num23;
                        }
                        return new CellRange(num26, column, (num27 - num26) + 1, columnCount);
                    }
                    if ((row > 0) && (this._sheetView.Worksheet.FrozenRowCount == 0))
                    {
                        int num28 = 0;
                        int num29 = num13;
                        range = new CellRange(num28, column, (num29 - num28) + 1, columnCount);
                    }
                    return range;
                }
                if (direction == NavigationDirection.PageRight)
                {
                    NavigatorHelper.ScrollToNextPageOfColumns(this._sheetView);
                    int num30 = this._sheetView.GetViewportLeftColumn(activeColumnViewportIndex);
                    int viewportRightColumn = this._sheetView.GetViewportRightColumn(activeColumnViewportIndex);
                    int num32 = num30 - viewportLeftColumn;
                    if (num32 > 0)
                    {
                        int num33 = num14;
                        int num34 = num6 + num32;
                        if (column != num14)
                        {
                            num33 = column + num32;
                            num34 = num6;
                            if (num33 >= num14)
                            {
                                num33 = num14;
                                num34 = num6 + (num32 - (num14 - column));
                            }
                        }
                        if (num34 < num30)
                        {
                            num34 = num30;
                        }
                        else if (num33 > viewportRightColumn)
                        {
                            num33 = viewportRightColumn;
                            num34 = num14;
                        }
                        else if ((num34 > viewportRightColumn) && (num14 <= viewportRightColumn))
                        {
                            num34 = viewportRightColumn;
                        }
                        return new CellRange(row, num33, rowCount, (num34 - num33) + 1);
                    }
                    int num35 = (num10 - column) - columnCount;
                    if ((num35 > 0) && (this._sheetView.Worksheet.FrozenTrailingColumnCount == 0))
                    {
                        int num36 = num14;
                        int num37 = num10 - 1;
                        range = new CellRange(row, num36, rowCount, (num37 - num36) + 1);
                    }
                    return range;
                }
                if (direction == NavigationDirection.PageLeft)
                {
                    NavigatorHelper.ScrollToPreviousPageOfColumns(this._sheetView);
                    int num38 = this._sheetView.GetViewportLeftColumn(activeColumnViewportIndex);
                    int num39 = this._sheetView.GetViewportRightColumn(activeColumnViewportIndex);
                    int num40 = viewportLeftColumn - num38;
                    if (num40 > 0)
                    {
                        int num41 = column - num40;
                        int num42 = num6;
                        if (num6 != num14)
                        {
                            num41 = column;
                            num42 = num6 - num40;
                            if (num42 <= num14)
                            {
                                num41 = column - (num40 - (num6 - num14));
                                num42 = num14;
                            }
                        }
                        if (num42 < num38)
                        {
                            num41 = num14;
                            num42 = num38;
                        }
                        else if (num41 > num39)
                        {
                            num41 = num39;
                        }
                        else if ((num41 < num38) && (num14 >= num38))
                        {
                            num41 = num38;
                        }
                        return new CellRange(row, num41, rowCount, (num42 - num41) + 1);
                    }
                    if ((column > 0) && (this._sheetView.Worksheet.FrozenColumnCount == 0))
                    {
                        int num43 = 0;
                        int num44 = num14;
                        range = new CellRange(row, num43, rowCount, (num44 - num43) + 1);
                    }
                }
                return range;
            }

            public void KeyboardSelect(NavigationDirection direction)
            {
                if ((this._formulaSelectionFeature.Items.Count == 0) || this._formulaSelectionFeature.IsFlicking)
                {
                    CellRange selectionRange = this.GetSelectionRange();
                    if (((selectionRange == null) && (this._sheetView != null)) && (this._sheetView.Worksheet != null))
                    {
                        selectionRange = this.GetActiveCell();
                    }
                    if (selectionRange != null)
                    {
                        KeyboardSelectKind keyboardSelectionKind = GetKeyboardSelectionKind(direction);
                        CellRange range = null;
                        switch (keyboardSelectionKind)
                        {
                            case KeyboardSelectKind.Line:
                                range = this.KeyboardLineSelect(selectionRange, direction, true);
                                if (range == null)
                                {
                                    range = this.KeyboardLineSelect(selectionRange, direction, false);
                                }
                                break;

                            case KeyboardSelectKind.Page:
                                range = this.KeyboardPageSelect(selectionRange, direction);
                                break;

                            case KeyboardSelectKind.Through:
                                range = this.KeyboardThroughSelect(selectionRange, direction);
                                break;
                        }
                        if ((range != null) && !range.Equals(selectionRange))
                        {
                            range = this.GetExpandIntersectedRange(range);
                            if (selectionRange.Row < 0)
                            {
                                range = new CellRange(-1, range.Column, -1, range.ColumnCount);
                            }
                            if (selectionRange.Column < 0)
                            {
                                range = new CellRange(range.Row, -1, range.RowCount, -1);
                            }
                            this._formulaSelectionFeature.ChangeLastSelection(range, false);
                        }
                    }
                }
            }

            private CellRange KeyboardThroughSelect(CellRange currentRange, NavigationDirection direction)
            {
                int row = (currentRange.Row < 0) ? 0 : currentRange.Row;
                int column = (currentRange.Column < 0) ? 0 : currentRange.Column;
                int rowCount = (currentRange.Row < 0) ? this._sheetView.Worksheet.RowCount : currentRange.RowCount;
                int columnCount = (currentRange.Column < 0) ? this._sheetView.Worksheet.ColumnCount : currentRange.ColumnCount;
                CellRange activeCell = this.GetActiveCell();
                CellRange range2 = null;
                if (direction == NavigationDirection.Home)
                {
                    range2 = new CellRange(row, 0, rowCount, activeCell.Column + activeCell.ColumnCount);
                }
                else if (direction == NavigationDirection.End)
                {
                    range2 = new CellRange(row, activeCell.Column, rowCount, this._sheetView.Worksheet.ColumnCount - activeCell.Column);
                }
                else if (direction == NavigationDirection.Top)
                {
                    range2 = new CellRange(0, column, activeCell.Row + activeCell.RowCount, columnCount);
                }
                else if (direction == NavigationDirection.Bottom)
                {
                    range2 = new CellRange(activeCell.Row, column, this._sheetView.Worksheet.RowCount - activeCell.Row, columnCount);
                }
                else if (direction == NavigationDirection.First)
                {
                    range2 = new CellRange(this._sheetView.Worksheet.FrozenRowCount, this._sheetView.Worksheet.FrozenColumnCount, (activeCell.Row + activeCell.RowCount) - this._sheetView.Worksheet.FrozenRowCount, (activeCell.Column + activeCell.ColumnCount) - this._sheetView.Worksheet.FrozenColumnCount);
                }
                else if (direction == NavigationDirection.Last)
                {
                    range2 = new CellRange(activeCell.Row, activeCell.Column, (this._sheetView.Worksheet.RowCount - this._sheetView.Worksheet.FrozenTrailingRowCount) - activeCell.Row, (this._sheetView.Worksheet.ColumnCount - this._sheetView.Worksheet.FrozenTrailingColumnCount) - activeCell.Column);
                }
                if (range2 != null)
                {
                    int viewCellRow = range2.Row;
                    int num6 = (range2.Row + range2.RowCount) - 1;
                    int viewCellColumn = range2.Column;
                    int num8 = (range2.Column + range2.ColumnCount) - 1;
                    if ((direction == NavigationDirection.Top) || (direction == NavigationDirection.First))
                    {
                        NavigatorHelper.BringCellToVisible(this._sheetView, viewCellRow, viewCellColumn);
                        return range2;
                    }
                    if ((direction == NavigationDirection.Home) || (direction == NavigationDirection.End))
                    {
                        int activeRowViewportIndex = this._sheetView.GetActiveRowViewportIndex();
                        int viewportTopRow = this._sheetView.GetViewportTopRow(activeRowViewportIndex);
                        int viewportBottomRow = this._sheetView.GetViewportBottomRow(activeRowViewportIndex);
                        if (direction == NavigationDirection.Home)
                        {
                            if (num6 < viewportTopRow)
                            {
                                NavigatorHelper.BringCellToVisible(this._sheetView, row, viewCellColumn);
                                return range2;
                            }
                            if (viewCellRow > viewportBottomRow)
                            {
                                NavigatorHelper.BringCellToVisible(this._sheetView, num6, viewCellColumn);
                                return range2;
                            }
                            NavigatorHelper.BringCellToVisible(this._sheetView, viewportTopRow, viewCellColumn);
                            return range2;
                        }
                        if (num6 < viewportTopRow)
                        {
                            NavigatorHelper.BringCellToVisible(this._sheetView, row, num8);
                            return range2;
                        }
                        if (viewCellRow > viewportBottomRow)
                        {
                            NavigatorHelper.BringCellToVisible(this._sheetView, num6, num8);
                            return range2;
                        }
                        NavigatorHelper.BringCellToVisible(this._sheetView, viewportTopRow, num8);
                        return range2;
                    }
                    if ((direction == NavigationDirection.Bottom) || (direction == NavigationDirection.Last))
                    {
                        NavigatorHelper.BringCellToVisible(this._sheetView, num6, num8);
                    }
                }
                return range2;
            }

            private static CellRange TabularPositionUnion(TabularPosition startPosition, TabularPosition endPosition)
            {
                int row = Math.Min(startPosition.Row, endPosition.Row);
                int column = Math.Min(startPosition.Column, endPosition.Column);
                int rowCount = Math.Abs((int)(startPosition.Row - endPosition.Row)) + 1;
                return new CellRange(row, column, rowCount, Math.Abs((int)(startPosition.Column - endPosition.Column)) + 1);
            }

            private enum KeyboardSelectDirection
            {
                None,
                Left,
                Top,
                Right,
                Bottom
            }

            private enum KeyboardSelectKind
            {
                None,
                Line,
                Page,
                Through
            }

            private class KeyboardSelectNavigator : SpreadXTabularNavigator
            {
                public KeyboardSelectNavigator(SheetView sheetView)
                    : base(sheetView)
                {
                }

                public override void BringCellToVisible(TabularPosition position)
                {
                }

                public override bool CanMoveCurrentTo(TabularPosition cellPosition)
                {
                    return (((((base._sheetView.Worksheet != null) && (cellPosition.Row >= 0)) && ((cellPosition.Row < base._sheetView.Worksheet.RowCount) && (cellPosition.Column >= 0))) && ((cellPosition.Column < base._sheetView.Worksheet.ColumnCount) && this.GetRowIsVisible(cellPosition.Row))) && this.GetColumnIsVisible(cellPosition.Column));
                }
            }
        }

        internal class SpreadXFormulaTabularNavigator : TabularNavigator
        {
            internal SheetView _sheetView;

            public SpreadXFormulaTabularNavigator(SheetView sheetView)
            {
                this._sheetView = sheetView;
            }

            public override void BringCellToVisible(TabularPosition position)
            {
                if ((!position.IsEmpty && (position.Area == SheetArea.Cells)) && (this._sheetView.Worksheet != null))
                {
                    NavigatorHelper.BringCellToVisible(this._sheetView, position.Row, position.Column);
                }
            }

            public override bool CanHorizontalScroll(bool isBackward)
            {
                if (this._sheetView == null)
                {
                    return base.CanHorizontalScroll(isBackward);
                }
                if (!this._sheetView.HorizontalScrollable)
                {
                    return false;
                }
                int activeColumnViewportIndex = this._sheetView.GetActiveColumnViewportIndex();
                if (isBackward)
                {
                    return (this._sheetView.GetNextPageColumnCount(activeColumnViewportIndex) > 0);
                }
                return (this._sheetView.GetPrePageColumnCount(activeColumnViewportIndex) > 0);
            }

            public override bool CanMoveCurrentTo(TabularPosition cellPosition)
            {
                return (((((this._sheetView.Worksheet != null) && (cellPosition.Row >= 0)) && ((cellPosition.Row < this._sheetView.Worksheet.RowCount) && (cellPosition.Column >= 0))) && (((cellPosition.Column < this._sheetView.Worksheet.ColumnCount) && this._sheetView.Worksheet.Cells[cellPosition.Row, cellPosition.Column].ActualFocusable) && this.GetRowIsVisible(cellPosition.Row))) && this.GetColumnIsVisible(cellPosition.Column));
            }

            public override bool CanVerticalScroll(bool isBackward)
            {
                if (this._sheetView == null)
                {
                    return base.CanVerticalScroll(isBackward);
                }
                if (!this._sheetView.VerticalScrollable)
                {
                    return false;
                }
                int activeRowViewportIndex = this._sheetView.GetActiveRowViewportIndex();
                if (isBackward)
                {
                    return (this._sheetView.GetNextPageRowCount(activeRowViewportIndex) > 0);
                }
                return (this._sheetView.GetPrePageRowCount(activeRowViewportIndex) > 0);
            }

            public override bool GetColumnIsVisible(int columnIndex)
            {
                if ((this._sheetView == null) || (this._sheetView.Worksheet == null))
                {
                    return base.GetColumnIsVisible(columnIndex);
                }
                return (this._sheetView.Worksheet.GetActualColumnVisible(columnIndex, SheetArea.Cells) && (this._sheetView.Worksheet.GetActualColumnWidth(columnIndex, SheetArea.Cells) > 0.0));
            }

            public override bool GetRowIsVisible(int rowIndex)
            {
                if ((this._sheetView == null) || (this._sheetView.Worksheet == null))
                {
                    return base.GetRowIsVisible(rowIndex);
                }
                return (this._sheetView.Worksheet.GetActualRowVisible(rowIndex, SheetArea.Cells) && (this._sheetView.Worksheet.GetActualRowHeight(rowIndex, SheetArea.Cells) > 0.0));
            }

            public override bool IsMerged(TabularPosition position, out TabularRange range)
            {
                range = new TabularRange(position, 1, 1);
                if ((this._sheetView.Worksheet != null) && (this._sheetView.Worksheet.SpanModel != null))
                {
                    CellRange range2 = this._sheetView.Worksheet.SpanModel.Find(position.Row, position.Column);
                    if (range2 != null)
                    {
                        range = new TabularRange(position.Area, range2.Row, range2.Column, range2.RowCount, range2.ColumnCount);
                        return true;
                    }
                }
                return false;
            }

            public override void ScrollToNextPageOfColumns()
            {
                NavigatorHelper.ScrollToNextPageOfColumns(this._sheetView);
            }

            public override void ScrollToNextPageOfRows()
            {
                NavigatorHelper.ScrollToNextPageOfRows(this._sheetView);
            }

            public override void ScrollToPreviousPageOfColumns()
            {
                NavigatorHelper.ScrollToPreviousPageOfColumns(this._sheetView);
            }

            public override void ScrollToPreviousPageOfRows()
            {
                NavigatorHelper.ScrollToPreviousPageOfRows(this._sheetView);
            }

            public override TabularRange ContentBounds
            {
                get
                {
                    if ((this._sheetView == null) || (this._sheetView.Worksheet == null))
                    {
                        return base.ContentBounds;
                    }
                    Worksheet worksheet = this._sheetView.Worksheet;
                    ViewportInfo viewportInfo = worksheet.GetViewportInfo();
                    int activeRowViewportIndex = worksheet.GetActiveRowViewportIndex();
                    int activeColumnViewportIndex = worksheet.GetActiveColumnViewportIndex();
                    int row = 0;
                    int column = 0;
                    int rowCount = worksheet.RowCount;
                    int columnCount = worksheet.ColumnCount;
                    if (viewportInfo.RowViewportCount > 1)
                    {
                        if (activeRowViewportIndex > 0)
                        {
                            row = worksheet.FrozenRowCount;
                            rowCount -= worksheet.FrozenRowCount;
                        }
                        if (activeRowViewportIndex < (viewportInfo.RowViewportCount - 1))
                        {
                            rowCount -= worksheet.FrozenTrailingRowCount;
                        }
                    }
                    if (viewportInfo.ColumnViewportCount > 1)
                    {
                        if (activeColumnViewportIndex > 0)
                        {
                            column = worksheet.FrozenColumnCount;
                            columnCount -= worksheet.FrozenColumnCount;
                        }
                        if (activeColumnViewportIndex < (viewportInfo.ColumnViewportCount - 1))
                        {
                            columnCount -= worksheet.FrozenTrailingColumnCount;
                        }
                    }
                    return new TabularRange(SheetArea.Cells, row, column, rowCount, columnCount);
                }
            }

            public override TabularRange CurrentViewport
            {
                get
                {
                    int activeColumnViewportIndex = this._sheetView.GetActiveColumnViewportIndex();
                    int activeRowViewportIndex = this._sheetView.GetActiveRowViewportIndex();
                    if (activeColumnViewportIndex == -1)
                    {
                        activeColumnViewportIndex = 0;
                    }
                    else if (activeColumnViewportIndex == this._sheetView.Worksheet.GetViewportInfo().ColumnViewportCount)
                    {
                        activeColumnViewportIndex = this._sheetView.Worksheet.GetViewportInfo().ColumnViewportCount - 1;
                    }
                    if (activeRowViewportIndex == -1)
                    {
                        activeRowViewportIndex = 0;
                    }
                    else if (activeRowViewportIndex == this._sheetView.Worksheet.GetViewportInfo().RowViewportCount)
                    {
                        activeRowViewportIndex = this._sheetView.Worksheet.GetViewportInfo().RowViewportCount - 1;
                    }
                    int viewportLeftColumn = this._sheetView.GetViewportLeftColumn(activeColumnViewportIndex);
                    int viewportRightColumn = this._sheetView.GetViewportRightColumn(activeColumnViewportIndex);
                    int viewportTopRow = this._sheetView.GetViewportTopRow(activeRowViewportIndex);
                    int viewportBottomRow = this._sheetView.GetViewportBottomRow(activeRowViewportIndex);
                    double viewportWidth = this._sheetView.GetViewportWidth(activeColumnViewportIndex);
                    double viewportHeight = this._sheetView.GetViewportHeight(activeRowViewportIndex);
                    if (NavigatorHelper.GetColumnWidth(this._sheetView.Worksheet, viewportLeftColumn, viewportRightColumn) > viewportWidth)
                    {
                        viewportRightColumn--;
                    }
                    if (NavigatorHelper.GetRowHeight(this._sheetView.Worksheet, viewportTopRow, viewportBottomRow) > viewportHeight)
                    {
                        viewportBottomRow--;
                    }
                    return new TabularRange(SheetArea.Cells, viewportTopRow, viewportLeftColumn, Math.Max(1, (viewportBottomRow - viewportTopRow) + 1), Math.Max(1, (viewportRightColumn - viewportLeftColumn) + 1));
                }
            }

            public override int TotalColumnCount
            {
                get { return this._sheetView.Worksheet.ColumnCount; }
            }

            public override int TotalRowCount
            {
                get { return this._sheetView.Worksheet.RowCount; }
            }
        }
    }
}

