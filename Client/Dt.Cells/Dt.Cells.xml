<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dt.Cells</name>
    </assembly>
    <members>
        <member name="T:Dt.Cells.UI.AutoFilterCheckBox">
            <summary>
            Represents auto filter check box to indicates the filter item take effect or not.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterCheckBox.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AutoFilterCheckBox" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterCheckBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.AutoFilterDropDownItemControl">
            <summary>
            Represents a filter dropdown dialog's text filter item.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterDropDownItemControl.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AutoFilterDropDownItemControl" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterDropDownItemControl.CanExecuteCommand">
            <summary>
            Determines whether this the command can be executed on the control.
            </summary>
            <returns>
            <c>true</c> if the command can executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterDropDownItemControl.ExecuteCommand">
            <summary>
            Executes the command on the control.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterDropDownItemControl.OnGotFocus(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus" /> event reaches this element in its route.
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterDropDownItemControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterEditor.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.AutoFilterItem">
            <summary>
            Represents filter item information for dropdown filter's text filter.
            </summary>
        </member>
        <member name="E:Dt.Cells.UI.AutoFilterItem.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterItem.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:AutoFilterItem.PropertyChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="P:Dt.Cells.UI.AutoFilterItem.Criterion">
            <summary>
            Gets or sets the filter item's value.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.AutoFilterItem.DisplayText">
            <summary>
            Gets or sets the filter item's displaytext.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.AutoFilterItem.IsChecked">
            <summary>
            Gets or sets the value indicates the filter item take effect or not.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.AutoFilterItemValueConverter">
            <summary>
            Represents a blank value converter.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterItemValueConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a filter item value to dropdown item's value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterItemValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value to a filter item value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Dt.Cells.UI.AutoFilterListBox">
            <summary>
            Represents auto filter listbox to display the filter items.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBox.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AutoFilterListBox" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBox.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element used to display a specified item.
            </summary>
            <returns>
            An  AutoFilterListBoxItem.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own ItemContainer.
            </summary>
            <param name="item">Specified item.</param>
            <returns>
            <c>true</c> if the item is its own ItemContainer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBox.OnGotFocus(Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus" /> event reaches this element in its route.
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBox.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Responds to the <see cref="E:System.Windows.UIElement.KeyDown" /> event.
            </summary>
            <param name="e">Provides data for <see cref="T:System.Windows.Input.KeyEventArgs" />.</param>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBox.PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">Element used to display the specified item.</param>
            <param name="item">Specified item.</param>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.AutoFilterListBoxItem">
            <summary>
            Represents auto filter listbox item to display the filter item.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBoxItem.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AutoFilterListBoxItem" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBoxItem.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBoxItem.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" />Â attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBoxItem.OnPointerEntered(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called before the PointerEntered event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBoxItem.OnPointerExited(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called before the PointerExited event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBoxItem.OnPointerReleased(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called before the PointerReleased event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:Dt.Cells.UI.AutoFilterListBoxItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.BaseSparklineView">
            <summary>
            Represents the base sparkline view class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.BaseSparklineView.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Positions child elements and determines the size when overridden in a derived class.
            </summary>
            <param name="finalSize"> The final area within the parent that this element uses to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Dt.Cells.UI.BaseSparklineView.Dt#Cells#Data#IThemeContextSupport#GetContext">
            <summary>
            Gets the theme context.
            </summary>
            <returns>The theme context.</returns>
        </member>
        <member name="M:Dt.Cells.UI.BaseSparklineView.Dt#Cells#Data#IThemeContextSupport#SetContext(Dt.Cells.Data.IThemeSupport)">
            <summary>
            Sets the theme context.
            </summary>
            <param name="context">The theme context.</param>
        </member>
        <member name="M:Dt.Cells.UI.BaseSparklineView.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Measures the layout size required
            for child elements and determines a size for the <see cref="M:System.Windows.FrameworkElement" /> derived class when overridden in a derived class.
            </summary>
            <param name="availableSize"> 
            The available size that this element can give to child elements.
            </param>
            <returns> 
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.BaseSparklineView.Update(Windows.Foundation.Size,System.Double)">
            <summary>
            Occurs when overridden in a derived class and used to update the sparkline in the view.
            </summary>
            <param name="size">The update size.</param>
            <param name="zoomfactor">The zoom factor to update.</param>
        </member>
        <member name="P:Dt.Cells.UI.BaseSparklineView.SparklineInfo">
            <summary>
            Gets or sets a value that indicates the sparkline.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.BaseSparklineView.SparklineType">
            <summary>
            Gets the type of the sparkline.
            </summary>
            <value>
            The type of the sparkline.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.BaseSparklineView.SparklineViewInfo">
            <summary>
            Gets the sparkline view info.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.BaseSparklineView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.ChartTitleView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.FloatingObjectContainer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.PictureView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.SelectionFrame.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.SpreadChartBaseView">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.SpreadChartBaseView.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.SpreadChartBaseView.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.SpreadChartBaseView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.StrikethroughView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.TabsPresenter">
            <summary>
            hdt å¤§è°æ´
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.TabsPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.DataValidationInputMessagePopUp">
            <summary>
            Represents the data validation input message tooltip
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationInputMessagePopUp.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DataValidationInputMessagePopUp" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationInputMessagePopUp.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.DataValidationListBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.DataValidationListBox.CommandParameterProperty">
            <summary>
            Indicates the command parameter dependency property.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.DataValidationListBox.CommandProperty">
            <summary>
            Indicates a command dependency property.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBox.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:AutoFilterListBox" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBox.CanExecuteCommand">
            <summary>
            Determines whether this the command can be executed on the control.
            </summary>
            <returns>
            <c>true</c> if the command can executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBox.ExecuteCommand">
            <summary>
            Executes the command on the control.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBox.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element used to display a specified item.
            </summary>
            <returns>
            An  DataValidationListBoxItem.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own ItemContainer.
            </summary>
            <param name="item">Specified item.</param>
            <returns>
            <c>true</c> if the item is its own ItemContainer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBox.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBox.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Responds to the <see cref="E:System.Windows.UIElement.KeyDown" /> event.
            </summary>
            <param name="e">Provides data for <see cref="T:System.Windows.Input.KeyEventArgs" />.</param>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBox.PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">Element used to display the specified item.</param>
            <param name="item">Specified item.</param>
        </member>
        <member name="P:Dt.Cells.UI.DataValidationListBox.Command">
            <summary>
            Gets or sets the command to the control.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DataValidationListBox.CommandParameter">
            <summary>
            Gets or sets the command parameter.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBox.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.DataValidationListBoxItem">
            <summary>
            Represents a DataValidation valid item.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBoxItem.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:DataValidationListBoxItem" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBoxItem.OnPointerPressed(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called before the PointerPressed event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBoxItem.OnPointerReleased(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called before the PointerReleased event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationListBoxItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.DataValidationListItem">
            <summary>
            Represent DataValidation list item.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DataValidationListItem.TextSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DataValidationListItem.Value">
            <summary>
            The item value.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.DataValidationNullValueConverter">
            <summary>
            Represents a data validation null value converter.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationNullValueConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a data validation list item value to dropdown item's value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language.</param>
            <returns>
            A converted value. If original value is null, return " ", otherwise, return the original value.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.DataValidationNullValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>
            Converts a value to a DataValidate list item value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="language">The language.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Dt.Cells.UI.InvalidDataPresenter">
            <summary>
            Represents the invalid data.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.InvalidDataPresenter.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:InvalidDataPresenter" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.InvalidDataPresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.ActionEventArgs">
            <summary>
            Provides data for spread action related events.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ActionEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ActionEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ActionEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates whether the action is performed successfully. The default is <c>false</c>.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.CellCancelEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.CellCancelEventArgs.Column">
            <summary>
            Gets the column index of the cell.
            </summary>
            <value>The column index of the cell.</value>
        </member>
        <member name="P:Dt.Cells.UI.CellCancelEventArgs.Row">
            <summary>
            Gets the row index of the cell.
            </summary>
            <value>The row index of the cell.</value>
        </member>
        <member name="T:Dt.Cells.UI.CellClickEventArgs">
            <summary>
            Represents the event data for the CellClick events for the GcSpread component; occurs when the user clicks the mouse button with the pointer on a cell. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.CellClickEventArgs.ButtonType">
            <summary>
            Gets the mouse button that is clicked.
            </summary>
            <value>The mouse button that is clicked.</value>
        </member>
        <member name="P:Dt.Cells.UI.CellClickEventArgs.Column">
            <summary>
            Gets the column index of the clicked cell.
            </summary>
            <value>The column index of the clicked cell.</value>
        </member>
        <member name="P:Dt.Cells.UI.CellClickEventArgs.Row">
            <summary>
            Gets the row index of the clicked cell.
            </summary>
            <value>The row index of the clicked cell.</value>
        </member>
        <member name="P:Dt.Cells.UI.CellClickEventArgs.SheetArea">
            <summary>
            Gets the area the clicked cell is in.
            </summary>
            <value>The area the clicked cell is in.</value>
        </member>
        <member name="T:Dt.Cells.UI.CellDoubleClickEventArgs">
            <summary>
            Represents the event data for the CellDoubleClick events for the GcSpreadSheet component; occurs when the user double-clicks the mouse button with the pointer on a cell. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.CellDoubleClickEventArgs.Column">
            <summary>
            Gets the column index of the clicked cell.
            </summary>
            <value>The column index of the clicked cell.</value>
        </member>
        <member name="P:Dt.Cells.UI.CellDoubleClickEventArgs.Row">
            <summary>
            Gets the row index of the clicked cell.
            </summary>
            <value>The row index of the clicked cell.</value>
        </member>
        <member name="P:Dt.Cells.UI.CellDoubleClickEventArgs.SheetArea">
            <summary>
            Gets the area the clicked cell is in.
            </summary>
            <value>The area the clicked cell is in.</value>
        </member>
        <member name="T:Dt.Cells.UI.CellEventArgs">
            <summary>
            Represents the event data for cell related events.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.CellEventArgs.Column">
            <summary>
            Gets the column index of the cell.
            </summary>
            <value>The column index of the cell.</value>
        </member>
        <member name="P:Dt.Cells.UI.CellEventArgs.Row">
            <summary>
            Gets the row index of the cell.
            </summary>
            <value>The row index of the cell.</value>
        </member>
        <member name="T:Dt.Cells.UI.CellTextRenderingEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.CellTextRenderingEventArgs.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CellTextRenderingEventArgs" /> class.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <param name="text">The text.</param>
        </member>
        <member name="P:Dt.Cells.UI.CellTextRenderingEventArgs.CellText">
            <summary>
            Gets or sets the cell text.
            </summary>
            <value>
            The cell text.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.CellValueApplyingEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.CellValueApplyingEventArgs.#ctor(System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CellValueApplyingEventArgs" /> class.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Dt.Cells.UI.CellValueApplyingEventArgs.CellValue">
            <summary>
            Gets or sets the cell value.
            </summary>
            <value>
            The cell value.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.ClipboardPastedEventArgs">
            <summary>
            Represents the event data for the ClipboardPasting event for the GcSpreadSheet component; occurs when the user invokes the Clipboard paste action. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ClipboardPastedEventArgs.CellRange">
            <summary>
            Gets the cell range when pasting.
            </summary>
            <value>The pasted cell range.</value>
        </member>
        <member name="P:Dt.Cells.UI.ClipboardPastedEventArgs.PasteOption">
            <summary>
            Gets the ClipboardPasteOptions value when pasting.
            </summary>
            <value>The ClipboardPasteOptions value when pasting.</value>
        </member>
        <member name="P:Dt.Cells.UI.ClipboardPastedEventArgs.SourceRange">
            <summary>
            Gets the source range.
            </summary>
            <value>
            The source range.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ClipboardPastedEventArgs.SourceSheet">
            <summary>
            Gets the source sheet.
            </summary>
            <value>
            The source sheet.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ClipboardPastedEventArgs.Worksheet">
            <summary>
            Gets the worksheet.
            </summary>
            <value>
            The worksheet.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.ClipboardPastingEventArgs">
            <summary>
            Represents the event data for the ClipboardPasting event for the GcSpreadSheet component; occurs when the user invokes the Clipboard paste action. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ClipboardPastingEventArgs.CellRange">
            <summary>
            Gets the cell range for pasting.
            </summary>
            <value>Pasted cell range.</value>
        </member>
        <member name="P:Dt.Cells.UI.ClipboardPastingEventArgs.IsCutting">
            <summary>
            Gets a value indicating whether is cutting.
            </summary>
            <value>
            <c>true</c> if is cutting; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ClipboardPastingEventArgs.PasteOption">
            <summary>
            Gets the ClipboardPasteOptions value when pasting.
            </summary>
            <value>ClipboardPasteOptions value when pasting.</value>
        </member>
        <member name="P:Dt.Cells.UI.ClipboardPastingEventArgs.SourceRange">
            <summary>
            Gets the soruce range.
            </summary>
            <value>
            The soruce range.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ClipboardPastingEventArgs.SourceSheet">
            <summary>
            Gets the source sheet.
            </summary>
            <value>
            The source sheet.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ClipboardPastingEventArgs.Worksheet">
            <summary>
            Gets the worksheet for patsting.
            </summary>
            <value>
            The worksheet.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.ColumnViewportWidthChangedEventArgs">
            <summary>
            Represents the event data for the ColumnViewportWidthChanged event for the GcSpreadSheet component, which occurs when the width of a viewport column has changed. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ColumnViewportWidthChangedEventArgs.DeltaViewportWidth">
            <summary>
            Gets the changed value for the viewport column width.
            </summary>
            <value>The changed value of the viewport column width.</value>
        </member>
        <member name="P:Dt.Cells.UI.ColumnViewportWidthChangedEventArgs.ViewportIndex">
            <summary>
            Gets the index of the viewport column whose width has changed.
            </summary>
            <value>The index of the viewport column whose width has changed.</value>
        </member>
        <member name="T:Dt.Cells.UI.ColumnViewportWidthChangingEventArgs">
            <summary>
            Represents the event data for the ColumnViewportWidthChanging event for the GcSpreadSheet component, which occurs when the width of a viewport column is changing. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ColumnViewportWidthChangingEventArgs.DeltaViewportWidth">
            <summary>
            Gets the changed value for the viewport column width.
            </summary>
            <value>The changed value of the viewport column width.</value>
        </member>
        <member name="P:Dt.Cells.UI.ColumnViewportWidthChangingEventArgs.ViewportIndex">
            <summary>
            Gets the index of the viewport column whose width is changing.
            </summary>
            <value>The index of the viewport column whose width is changing.</value>
        </member>
        <member name="T:Dt.Cells.UI.ColumnWidthChangedEventArgs">
            <summary>
            Represents the event data for the ColumnWidthChanged event for the GcSpreadSheet component; occurs when the width of a column has changed. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ColumnWidthChangedEventArgs.ColumnList">
            <summary>
            Gets the list of columns whose widths have changed.
            </summary>
            <value>Columns whose widths have changed.</value>
        </member>
        <member name="P:Dt.Cells.UI.ColumnWidthChangedEventArgs.Header">
            <summary>
            Gets whether the column indexes are row header columns.
            </summary>
            <value>A <c>bool</c> value that indicates whether the column indexes are row header columns.</value>
        </member>
        <member name="T:Dt.Cells.UI.ColumnWidthChangingEventArgs">
            <summary>
            Represents the event data for the ColumnWidthChanging event for the GcSpreadSheet component; occurs when the width of a column is changing. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ColumnWidthChangingEventArgs.ColumnList">
            <summary>
            Gets the list of columns whose widths are changing.
            </summary>
            <value>Columns whose widths are changing.</value>
        </member>
        <member name="P:Dt.Cells.UI.ColumnWidthChangingEventArgs.Header">
            <summary>
            Gets whether the column indexes are row header columns.
            </summary>
            <value>A <c>bool</c> value that indicates whether the column indexes are row header columns.</value>
        </member>
        <member name="T:Dt.Cells.UI.DragDropBlockCompletedEventArgs">
            <summary>
            Represents the event data for the DragDropBlockCompleted event for the GcSpreadSheet component; occurs when the dragging and dropping of a range of cells is completed. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockCompletedEventArgs.ColumnCount">
            <summary>
            Gets the column count of the cell range being dragged.
            </summary>
            <value>Column count of the cell range being dragged.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockCompletedEventArgs.Copy">
            <summary>
            Gets whether the source range is copied.
            </summary>
            <value>A <c>bool</c> value that indicates whether the source range is copied.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockCompletedEventArgs.CopyOption">
            <summary>
            Gets the CopyOption value for the drag and drop operation.
            </summary>
            <value>The CopyOption value for the drag and drop operation.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockCompletedEventArgs.FromColumn">
            <summary>
            Gets the column index of the top left cell of the source range (range being dragged).  
            </summary>
            <value>The column index of the top left cell of the source range (range being dragged).</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockCompletedEventArgs.FromRow">
            <summary>
            Gets the row index of the top left cell of the source range (range being dragged).  
            </summary>
            <value>The row index of the top left cell of the source range (range being dragged).</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockCompletedEventArgs.Insert">
            <summary>
            Gets whether the source range is inserted.
            </summary>
            <value>A <c>bool</c> value that indicates whether the source range is inserted.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockCompletedEventArgs.RowCount">
            <summary>
            Gets the row count of the cell range being dragged.
            </summary>
            <value>Row count of cell range being dragged.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockCompletedEventArgs.ToColumn">
            <summary>
            Gets the column index of the bottom right cell of the destination range (where selection is dropped). 
            </summary>
            <value>The column index of the bottom right cell of the destination range (where selection is dropped)</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockCompletedEventArgs.ToRow">
            <summary>
            Gets the row index of the top left cell of the destination range (where selection is dropped).  
            </summary>
            <value>The row index of the top left cell of the destination range (where selection is dropped)</value>
        </member>
        <member name="T:Dt.Cells.UI.DragDropBlockEventArgs">
            <summary>
            Represents the event data for the DragDropBlock event for the GcSpreadSheet component; occurs when a range of cells is being dragged and dropped.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockEventArgs.ColumnCount">
            <summary>
            Gets the column count of the cell range being dragged.
            </summary>
            <value>Column count of the cell range being dragged.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockEventArgs.Copy">
            <summary>
            Gets whether the source range is copied.
            </summary>
            <value>A <c>bool</c> value that indicates whether the source range is copied</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockEventArgs.CopyOption">
            <summary>
            Gets the CopyOption value for the drag and drop operation.
            </summary>
            <value>The CopyOption value for the drag and drop operation.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockEventArgs.FromColumn">
            <summary>
            Gets the column index of the top left cell of the source range (range being dragged).  
            </summary>
            <value>The column index of the top left cell of the source range (range being dragged)</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockEventArgs.FromRow">
            <summary>
            Gets the row index of the top left cell of the source range (range being dragged).  
            </summary>
            <value>The row index of the top left cell of the source range (range being dragged).</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockEventArgs.Insert">
            <summary>
            Gets whether the source range is inserted.
            </summary>
            <value>A <c>bool</c> value that indicates whether the source range is inserted.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockEventArgs.RowCount">
            <summary>
            Gets the row count of the cell range being dragged.
            </summary>
            <value>Row count of cell range being dragged.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockEventArgs.ToColumn">
            <summary>
            Gets the column index of the bottom right cell of the destination range (where selection is dropped). 
            </summary>
            <value>The column index of the bottom right cell of the destination range (where selection is dropped)</value>
        </member>
        <member name="P:Dt.Cells.UI.DragDropBlockEventArgs.ToRow">
            <summary>
            Gets the row index of the top left cell of the destination range (where selection is dropped).  
            </summary>
            <value>The row index of the top left cell of the destination range (where selection is dropped)</value>
        </member>
        <member name="T:Dt.Cells.UI.DragFillBlockCompletedEventArgs">
            <summary>
            Represents the event data for the DragFillBlockCompleted event for the GcSpreadSheet component; occurs when the dragging and filling of a range of cells is completed. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DragFillBlockCompletedEventArgs.AutoFillType">
            <summary>
            Gets the AutoFillType value used for the fill operation.  
            </summary>
            <value>The AutoFillType value used for the fill operation.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragFillBlockCompletedEventArgs.FillDirection">
            <summary>
            Gets the direction of the fill.  
            </summary>
            <value>The direction of the fill.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragFillBlockCompletedEventArgs.FillRange">
            <summary>
            Gets the range used for the fill operation.  
            </summary>
            <value>The range used for the fill operation.</value>
        </member>
        <member name="T:Dt.Cells.UI.DragFillBlockEventArgs">
            <summary>
            Represents the event data for the DragFillBlock event for the GcSpreadSheet component; occurs when the range of cells is being dragged and filled. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DragFillBlockEventArgs.AutoFillType">
            <summary>
            Gets the AutoFillType value used for the fill operation.  
            </summary>
            <value>The AutoFillType value used for the fill operation.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragFillBlockEventArgs.FillDirection">
            <summary>
            Gets the direction of the fill.  
            </summary>
            <value>The direction of the fill.</value>
        </member>
        <member name="P:Dt.Cells.UI.DragFillBlockEventArgs.FillRange">
            <summary>
            Gets the range used for the fill operation.  
            </summary>
            <value>The range used for the fill operation.</value>
        </member>
        <member name="T:Dt.Cells.UI.EditCellEventArgs">
            <summary>
            Represents the event data for the EditChange and EditEnd events for the GcSpreadSheet component.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.EditCellEventArgs.Column">
            <summary>
            Gets the cell column index.
            </summary>
            <value>The column index of the cell.</value>
        </member>
        <member name="P:Dt.Cells.UI.EditCellEventArgs.Row">
            <summary>
            Gets the cell row index.
            </summary>
            <value>The cell row index.</value>
        </member>
        <member name="T:Dt.Cells.UI.EditCellStartingEventArgs">
            <summary>
            Represents the event data for the EditStarting event for the GcSpreadSheet component; occurs when a cell goes into edit mode.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.EditCellStartingEventArgs.Column">
            <summary>
            Gets the column index of the cell.
            </summary>
            <value>The column index of the cell.</value>
        </member>
        <member name="P:Dt.Cells.UI.EditCellStartingEventArgs.Row">
            <summary>
            Gets the row index of the cell.
            </summary>
            <value>The row index of the cell.</value>
        </member>
        <member name="T:Dt.Cells.UI.EnterCellEventArgs">
            <summary>
            Represents the event data for the EnterCell event for the GcSpreadSheet component; occurs when the focus enters a cell.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.EnterCellEventArgs.Column">
            <summary>
            Gets the row index of the cell being entered.
            </summary>
            <value>The row index of the cell being entered.</value>
        </member>
        <member name="P:Dt.Cells.UI.EnterCellEventArgs.Row">
            <summary>
            Gets the column index of the cell being entered.
            </summary>
            <value>The column index of the cell being entered.</value>
        </member>
        <member name="T:Dt.Cells.UI.FloatingObjectPastedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.FloatingObjectPastedEventArgs.PastedObject">
            <summary>
            Gets the pasted object.
            </summary>
            <value>
            The pasted object.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.FloatingObjectPastedEventArgs.Worksheet">
            <summary>
            Gets the worksheet.
            </summary>
            <value>
            The worksheet.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.InvalidOperationEventArgs">
            <summary>
            Represents the event for an invalid operation.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.InvalidOperationEventArgs.Context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.InvalidOperationEventArgs.Message">
            <summary>
            Gets the description of the invalid operation.
            </summary>
            <value>The description of the invalid operation.</value>
        </member>
        <member name="P:Dt.Cells.UI.InvalidOperationEventArgs.Operation">
            <summary>
            Gets the operation.
            </summary>
            <value>
            The operation.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.LeaveCellEventArgs">
            <summary>
            Represents the event data for the LeaveCell event for the GcSpreadSheet component; occurs when focus leaves a cell. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.LeaveCellEventArgs.Column">
            <summary>
            Gets the column index of the cell being left.
            </summary>
            <value>The column index of the cell being left.</value>
        </member>
        <member name="P:Dt.Cells.UI.LeaveCellEventArgs.Row">
            <summary>
            Gets the row index of the cell being left.
            </summary>
            <value>The row index of the cell being left.</value>
        </member>
        <member name="P:Dt.Cells.UI.LeaveCellEventArgs.ToColumn">
            <summary>
            Gets the automatic column.
            </summary>
            <value>
            The automatic column.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.LeaveCellEventArgs.ToRow">
            <summary>
            Gets the automatic row.
            </summary>
            <value>
            The automatic row.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.RangeFilteredEventArgs">
            <summary>
            Represents the event data for the RangeFiltered event for the GcSpreadSheet component; occurs when the column has been automatically filtered. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RangeFilteredEventArgs.Column">
            <summary>
            Gets the index of the column that was automatically filtered.  
            </summary>
            <value>The index of the column that was automatically filtered.</value>
        </member>
        <member name="P:Dt.Cells.UI.RangeFilteredEventArgs.FilterValues">
            <summary>
            Gets the values to filter the column by. 
            </summary>
            <value>The values to filter the column by.</value>
        </member>
        <member name="T:Dt.Cells.UI.RangeFilteringEventArgs">
            <summary>
            Represents the event data for the RangeFiltering event for the GcSpreadSheet component; occurs when columns are being automatically filtered. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RangeFilteringEventArgs.Column">
            <summary>
            Gets the index of the column to be automatically filtered. 
            </summary>
            <value>The index of the column to be automatically filtered.</value>
        </member>
        <member name="P:Dt.Cells.UI.RangeFilteringEventArgs.FilterValues">
            <summary>
            Gets the values to filter the column by. 
            </summary>
            <value>The values to filter the column by.</value>
        </member>
        <member name="T:Dt.Cells.UI.RangeGroupStateChangedEventArgs">
            <summary>
            Represents the event data for the RangeGroupStateChanged event for an outline (range group) of rows and columns in the GcSpreadSheet component.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RangeGroupStateChangedEventArgs.Index">
            <summary>
            Gets the index of the RangeGroupInfo object whose state has changed.
            </summary>
            <value>The index of the RangeGroupInfo object whose state has changed.</value>
        </member>
        <member name="P:Dt.Cells.UI.RangeGroupStateChangedEventArgs.IsRowGroup">
            <summary>
            Gets whether the outline (range group) is a group of rows.  
            </summary>
            <value>A <c>bool</c> value that indicates whether the outline (range group) is a group of rows.</value>
        </member>
        <member name="P:Dt.Cells.UI.RangeGroupStateChangedEventArgs.Level">
            <summary>
            Gets the level of the RangeGroupInfo object whose state has changed.
            </summary>
            <value>The level of the RangeGroupInfo object whose state has changed.</value>
        </member>
        <member name="T:Dt.Cells.UI.RangeGroupStateChangingEventArgs">
            <summary>
            Represents the event data for the RangeGroupStateChanging event for an outline (range group) of rows and columns in the GcSpreadSheet component.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RangeGroupStateChangingEventArgs.Index">
            <summary>
            Gets the index of the RangeGroupInfo object whose state is changing.
            </summary>
            <value>The index of the RangeGroupInfo object whose state is changing.</value>
        </member>
        <member name="P:Dt.Cells.UI.RangeGroupStateChangingEventArgs.IsRowGroup">
            <summary>
            Gets whether the outline (range group) is a group of rows.  
            </summary>
            <value>A <c>bool</c> value that indicates whether the outline (range group) is a group of rows.</value>
        </member>
        <member name="P:Dt.Cells.UI.RangeGroupStateChangingEventArgs.Level">
            <summary>
            Gets the level of the RangeGroupInfo object whose state is changing.
            </summary>
            <value>The level of the RangeGroupInfo object whose state is changing.</value>
        </member>
        <member name="T:Dt.Cells.UI.RangeSortedEventArgs">
            <summary>
            Represents the event data for the RangeSorted event for the GcSpreadSheet component; occurs when columns are being automatically sorted. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RangeSortedEventArgs.Ascending">
            <summary>
            Gets whether the automatic sort is ascending.
            </summary>
            <value>A <c>bool</c> value that indicates whether the automatic sort is ascending.</value>
        </member>
        <member name="P:Dt.Cells.UI.RangeSortedEventArgs.Column">
            <summary>
            Gets the index of the column to be automatically sorted.
            </summary>
            <value>The index of the column to be automatically sorted.</value>
        </member>
        <member name="T:Dt.Cells.UI.RangeSortingEventArgs">
            <summary>
            Represents the event data for the RangeSorting event for the GcSpreadSheet component; occurs when columns are being automatically sorted. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RangeSortingEventArgs.Ascending">
            <summary>
            Gets whether the automatic sort is ascending.
            </summary>
            <value>A <c>bool</c> value that indicates whether the automatic sort is ascending.</value>
        </member>
        <member name="P:Dt.Cells.UI.RangeSortingEventArgs.Column">
            <summary>
            Gets the index of the column to be automatically sorted.
            </summary>
            <value>The index of the column to be automatically sorted.</value>
        </member>
        <member name="T:Dt.Cells.UI.RowHeightChangedEventArgs">
            <summary>
            Represents the event data for the RowHeightChanged event for the GcSpreadSheet component; occurs when the height of a row has changed. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RowHeightChangedEventArgs.Header">
            <summary>
            Gets whether the rows indexes are column header rows.
            </summary>
            <value>A <c>bool</c> value that indicates whether the rows indexes are column header rows.</value>
        </member>
        <member name="P:Dt.Cells.UI.RowHeightChangedEventArgs.RowList">
            <summary>
            Gets the list of rows whose heights have changed.
            </summary>
            <value>Rows whose heights have changed.</value>
        </member>
        <member name="T:Dt.Cells.UI.RowHeightChangingEventArgs">
            <summary>
            Represents the event data for the RowHeightChanging event for the GcSpreadSheet component; occurs when the height of a row is changing. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RowHeightChangingEventArgs.Header">
            <summary>
            Gets whether the rows indexes are column header rows.
            </summary>
            <value>A <c>bool</c> value that indicates whether the rows indexes are column header rows.</value>
        </member>
        <member name="P:Dt.Cells.UI.RowHeightChangingEventArgs.RowList">
            <summary>
            Gets the list of rows whose heights are changing.
            </summary>
            <value>Rows whose heights are changing.</value>
        </member>
        <member name="T:Dt.Cells.UI.RowViewportHeightChangedEventArgs">
            <summary>
            Represents the event data for the RowViewportHeightChanged event for the GcSpreadSheet component, which occurs when the height of a viewport row has changed. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RowViewportHeightChangedEventArgs.DeltaViewportHeight">
            <summary>
            Gets the changed value of the viewport row height.
            </summary>
            <value>The changed value of the viewport row height.</value>
        </member>
        <member name="P:Dt.Cells.UI.RowViewportHeightChangedEventArgs.ViewportIndex">
            <summary>
            Gets the index of the viewport row whose height has changed.
            </summary>
            <value>The index of the viewport row whose height has changed.</value>
        </member>
        <member name="T:Dt.Cells.UI.RowViewportHeightChangingEventArgs">
            <summary>
            Represents the event data for the RowViewportHeightChanging event for the GcSpreadSheet component, which occurs when the height of a viewport row is changing. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RowViewportHeightChangingEventArgs.DeltaViewportHeight">
            <summary>
            Gets the changed value of the viewport row height.
            </summary>
            <value>The changed value of the viewport row height.</value>
        </member>
        <member name="P:Dt.Cells.UI.RowViewportHeightChangingEventArgs.ViewportIndex">
            <summary>
            Gets the index of the viewport row whose height is changing.
            </summary>
            <value>The index of the viewport row whose height is changing.</value>
        </member>
        <member name="T:Dt.Cells.UI.SelectionChangingEventArgs">
            <summary>
            Represents the event data for the SelectionChanging event for the GcSpreadSheet component; occurs when the user is selecting another range of cells.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.SelectionChangingEventArgs.NewSelections">
            <summary>
            Gets the new selection ranges. 
            </summary>
            <value>The new selection ranges.</value>
        </member>
        <member name="P:Dt.Cells.UI.SelectionChangingEventArgs.OldSelections">
            <summary>
            Gets the old selection ranges.
            </summary>
            <value>The old selection ranges.</value>
        </member>
        <member name="T:Dt.Cells.UI.SheetTabClickEventArgs">
            <summary>
            Represents the event data for the SheetTabClick event for the GcSpreadSheet component; occurs when the user clicks the mouse button with the pointer on the sheet name tab. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.SheetTabClickEventArgs.SheetTabIndex">
            <summary>
            Gets the index of the sheet tab that is clicked.
            </summary>
            <value>The index of the sheet tab that is clicked.</value>
        </member>
        <member name="T:Dt.Cells.UI.SheetTabDoubleClickEventArgs">
            <summary>
            Represents the event data for the SheetTabDoubleClick event for the GcSpreadSheet component; occurs when the user double-clicks on a sheet name tab.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.SheetTabDoubleClickEventArgs.SheetTabIndex">
            <summary>
            Gets the index of the sheet tab that is clicked.
            </summary>
            <value>The index of the sheet tab that is clicked.</value>
        </member>
        <member name="T:Dt.Cells.UI.TouchToolbarOpeningEventArgs">
            <summary>
            Represents the event arguments for the TouchStripOpening event.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.TouchToolbarOpeningEventArgs.Area">
            <summary>
            Specifies the location of the touch strip pop up.
            </summary>
            <value>
            One of the <see cref="T:TouchToolbarShowingArea" /> values.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.TouchToolbarOpeningEventArgs.X">
            <summary>
            Gets or sets the horizontal tapped position.
            </summary>
            <value>
            An integer that indicates the horizontal tapped position.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.TouchToolbarOpeningEventArgs.Y">
            <summary>
            Gets or sets the vertical tapped position.
            </summary>
            <value>
            An integer that indicates the vertical tapped position.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.UndoRedoEventArgs">
            <summary>
            epresents the event data when user execute a undo/redo action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.UndoRedoEventArgs.#ctor(Dt.Cells.UI.UndoRedoOperation,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UndoRedoEventArgs" /> class.
            </summary>
            <param name="undoRedo">The undo redo.</param>
            <param name="action">The action.</param>
        </member>
        <member name="P:Dt.Cells.UI.UndoRedoEventArgs.Action">
            <summary>
            Gets the current action string.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.UndoRedoEventArgs.UndoRedo">
            <summary>
            Gets a value indicating whether it is a undo or redo action.
            </summary>
            <value>
            The undo redo.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.UserErrorEventArgs">
            <summary>
            Represents the event data for the Error event for the control; 
            occurs when errors are generated by user interaction.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.UserErrorEventArgs.#ctor(System.Object,System.Int32,System.Int32,System.String,System.Exception)">
            <summary>
            Creates a new object with the Error event arguments.
            </summary>
            <param name="owner">The owner.</param>
            <param name="row">The row index of the cell with the editor that raised the event.</param>
            <param name="column">The column index of the cell with the editor that raised the event.</param>
            <param name="errorMessage">The text describing the error.</param>
            <param name="exception">The exception being thrown.</param>
        </member>
        <member name="P:Dt.Cells.UI.UserErrorEventArgs.Column">
            <summary>
            Gets the column index of the cell with the editor that raised the event.
            </summary>
            <value>The column index of the cell with the editor that raised the event.</value>
        </member>
        <member name="P:Dt.Cells.UI.UserErrorEventArgs.ErrorMessage">
            <summary>
            Gets the text description of the error.
            </summary>
            <value>The text description of the error.</value>
        </member>
        <member name="P:Dt.Cells.UI.UserErrorEventArgs.Exception">
            <summary>
            Gets the exception thrown by the error.
            </summary>
            <value>The exception thrown by the error.</value>
        </member>
        <member name="P:Dt.Cells.UI.UserErrorEventArgs.Owner">
            <summary>
            Gets the view that contains the cell with the editor that raised the event.
            </summary>
            <value>The view that contains the cell with the editor that raised the event.</value>
        </member>
        <member name="P:Dt.Cells.UI.UserErrorEventArgs.Row">
            <summary>
            Gets the row index of the cell with the editor that raised the event.
            </summary>
            <value>The row index of the cell with the editor that raised the event.</value>
        </member>
        <member name="T:Dt.Cells.UI.UserFormulaEnteredEventArgs">
            <summary>
            Represents the event data for the UserFormulaEntered event for the GcSpreadSheet component; occurs when the user has entered a formula in a cell. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.UserFormulaEnteredEventArgs.Column">
            <summary>
            Gets the column index of the cell in which the user entered a formula.
            </summary>
            <value>The column index of the cell in which the user entered a formula.</value>
        </member>
        <member name="P:Dt.Cells.UI.UserFormulaEnteredEventArgs.Formula">
            <summary>
            Gets the formula that the user entered.
            </summary>
            <value>The formula that the user entered.</value>
        </member>
        <member name="P:Dt.Cells.UI.UserFormulaEnteredEventArgs.Row">
            <summary>
            Gets the row index of the cell in which the user entered a formula. 
            </summary>
            <value>The row index of the cell in which the user entered a formula.</value>
        </member>
        <member name="T:Dt.Cells.UI.ValidationDragDropBlockEventArgs">
            <summary>
            Represents the event data for the DragDropBlock event for the GcSpreadSheet component; occurs when a range of cells is being dragged and dropped.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ValidationDragDropBlockEventArgs.ColumnCount">
            <summary>
            Gets the column count of the cell range being dragged.
            </summary>
            <value>Column count of the cell range being dragged.</value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationDragDropBlockEventArgs.Copy">
            <summary>
            Gets whether the source range is copied.
            </summary>
            <value>A <c>bool</c> value that indicates whether the source range is copied</value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationDragDropBlockEventArgs.FromColumn">
            <summary>
            Gets the column index of the top left cell of the source range (range being dragged).  
            </summary>
            <value>The column index of the top left cell of the source range (range being dragged)</value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationDragDropBlockEventArgs.FromRow">
            <summary>
            Gets the row index of the top left cell of the source range (range being dragged).  
            </summary>
            <value>The row index of the top left cell of the source range (range being dragged).</value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationDragDropBlockEventArgs.Handle">
            <summary>
            Gets or sets whether the event is handled.
            </summary>
            <value>
            <c>true</c> if [handle]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationDragDropBlockEventArgs.Insert">
            <summary>
            Gets whether the source range is inserted.
            </summary>
            <value>A <c>bool</c> value that indicates whether the source range is inserted.</value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationDragDropBlockEventArgs.InvalidMessage">
            <summary>
            Gets or sets the invalid message.
            </summary>
            <value>
            The invalid message.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationDragDropBlockEventArgs.IsInvalid">
            <summary>
            Gets or sets whether the value is valid.
            </summary>
            <value>
            <c>true</c> if [is valid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationDragDropBlockEventArgs.RowCount">
            <summary>
            Gets the row count of the cell range being dragged.
            </summary>
            <value>Row count of cell range being dragged.</value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationDragDropBlockEventArgs.ToColumn">
            <summary>
            Gets the column index of the bottom right cell of the destination range (where selection is dropped). 
            </summary>
            <value>The column index of the bottom right cell of the destination range (where selection is dropped)</value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationDragDropBlockEventArgs.ToRow">
            <summary>
            Gets the row index of the top left cell of the destination range (where selection is dropped).  
            </summary>
            <value>The row index of the top left cell of the destination range (where selection is dropped)</value>
        </member>
        <member name="T:Dt.Cells.UI.ValidationErrorEventArgs">
            <summary>
            Represents the data for the CellChanged event.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ValidationErrorEventArgs.Column">
            <summary>
            Gets the column index.
            </summary>
            <value>The column index.</value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationErrorEventArgs.Row">
            <summary>
            Gets the row index.
            </summary>
            <value>The row index.</value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationErrorEventArgs.ValidationResult">
            <summary>
            Gets or sets the policy that the user can set to determine how to process the error.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ValidationErrorEventArgs.Validator">
            <summary>
            Gets the validator which caused this error. 
            This validator is a copy of the real validator, so any modifications to this validator do not take effect.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.ValidationPastingEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ValidationPastingEventArgs.FromRange">
            <summary>
            Gets the source range.
            </summary>
            <value>
            The source range.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationPastingEventArgs.FromSheet">
            <summary>
            Gets the source sheet.
            </summary>
            <value>
            The source sheet.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationPastingEventArgs.Handle">
            <summary>
            Gets or sets whether the event is handled.
            </summary>
            <value>
            <c>true</c> if [handle]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationPastingEventArgs.InvalidMessage">
            <summary>
            Gets or sets the invalid message.
            </summary>
            <value>
            The invalid message.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationPastingEventArgs.IsCutting">
            <summary>
            Gets a value that indicates whether the data is cut.
            </summary>
            <value>
            <c>true</c> if [is cutting]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationPastingEventArgs.IsInvalid">
            <summary>
            Gets or sets whether the value is invalid.
            </summary>
            <value>
            <c>true</c> if [is invalid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationPastingEventArgs.PastingRange">
            <summary>
            Gets the pasting range.
            </summary>
            <value>
            The pasting range.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationPastingEventArgs.ToRange">
            <summary>
            Gets the cell range when pasting.
            </summary>
            <value>The pasted cell range.</value>
        </member>
        <member name="P:Dt.Cells.UI.ValidationPastingEventArgs.ToWorksheet">
            <summary>
            Gets the worksheet.
            </summary>
            <value>
            The worksheet.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.ViewportEventArgs">
            <summary>
            Represents the event data for the TopRowChanged or LeftColumnChanged event in the GcSpreadSheet component; occurs when the top row view or the left column view changes. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ViewportEventArgs.NewIndex">
            <summary>
            Gets the index of the new viewport index.
            </summary>
            <value>The index of the new viewport index.</value>
        </member>
        <member name="P:Dt.Cells.UI.ViewportEventArgs.OldIndex">
            <summary>
            Gets the index of the previous viewport index.
            </summary>
            <value>The index of the previous viewport index.</value>
        </member>
        <member name="P:Dt.Cells.UI.ViewportEventArgs.ViewportIndex">
            <summary>
            Gets the index of the viewport in which the change occurred. 
            </summary>
            <value>The index of the viewport in which the change occurred.</value>
        </member>
        <member name="T:Dt.Cells.UI.ZoomEventArgs">
            <summary>
            Represents the event data for the UserZooming event for the GcSpreadSheet component; occurs when the user zooms. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ZoomEventArgs.NewZoomFactor">
            <summary>
            Gets the new zoom factor.
            </summary>
            <value>The new zoom factor.</value>
        </member>
        <member name="P:Dt.Cells.UI.ZoomEventArgs.OldZoomFactor">
            <summary>
            Gets the old zoom factor.
            </summary>
            <value>The old zoom factor.</value>
        </member>
        <member name="T:Dt.Cells.UI.SheetLayout">
            <summary>
            Represents the layout information of a <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpread" /> control.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.SheetLayout.ColumnPaneCount">
            <summary>
            Gets the column pane count.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.SheetLayout.RowPaneCount">
            <summary>
            Gets the row pane count.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.IDrawingObjectProvider">
            <summary>
            Represents a class that can be attached to a <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpreadSheet" /> control by 
            <see cref="T:GrapeCity.Windows.SpreadSheet.UI.DrawingObjectManager.DrawingObjectManager" /> to provide custom drawing
            objects.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.IDrawingObjectProvider.GetDrawingObjects(Dt.Cells.Data.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return a list of custom drawing objects.
            </summary>
            <param name="sheet">The worksheet to get drawing objects. </param>
            <param name="row">The base row index.</param>
            <param name="column">The base column index.</param>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Cells.UI.IUndo">
            <summary>
            Specifies that a command or operation can be undone.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.IUndo.SaveState">
            <summary>
            Saves the state for undoing the command or operation.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.IUndo.Undo(System.Object)">
            <summary>
            Undoes the command or operation.
            </summary>
            <param name="parameter">
            The parameter to undo the command or operation.
            </param>
            <returns>
            <c>true</c> if an undo operation on the command or operation succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UI.IUndo.CanUndo">
            <summary>
            Gets a value that indicates whether the command or operation can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.ExcelPrinter">
            <summary>
            æå°ç®¡çç±»
            0. PrintManager.ShowPrintUIAsync()æ¾ç¤ºæå°å¯¹è¯æ¡
            1. PrintTaskSourceRequestedHandlerè®¾ç½®æå°åæ°ååå®¹
            2. PrintDocument.Paginateçæé¢è§é¡µé¢ï¼è®¾ç½®é¡µæ°
            3. PrintDocument.GetPreviewPageæ¾ç¤ºç¹å®é¢è§é¡µé¢
            4. æä¸æå°PrintDocument.AddPagesè¾åºæç»æå°é¡µéå
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.Print(System.String)">
            <summary>
            æ¾ç¤ºæå°é¢è§å¯¹è¯æ¡
            </summary>
            <param name="p_jobName"></param>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.OnPrintTaskRequested(Windows.Graphics.Printing.PrintManager,Windows.Graphics.Printing.PrintTaskRequestedEventArgs)">
            <summary>
            å¤çæå°è¯·æ±
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.OnPaginate(System.Object,Windows.UI.Xaml.Printing.PaginateEventArgs)">
            <summary>
            æå°åæ°ååæ¶çæé¢è§é¡µé¢
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.OnGetPreviewPage(System.Object,Windows.UI.Xaml.Printing.GetPreviewPageEventArgs)">
            <summary>
            æ¾ç¤ºç¹å®é¢è§é¡µé¢
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.OnAddPages(System.Object,Windows.UI.Xaml.Printing.AddPagesEventArgs)">
            <summary>
            åéæç»æå°é¡µéå
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.GetPageRange">
            <summary>
            è·åPrintInfoä¸­è®¾ç½®çé¡µé¢èå´
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.CreatePrintMask(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            çææå°é®ç½©
            </summary>
            <param name="p_tgt"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.StretchContent">
            <summary>
            å¹³éºæå°åå®¹
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.Init(Dt.Cells.UI.ExcelPrinter.Memento)">
            <summary>
            æå°è®¾ç½®
            </summary>
            <param name="p_memento"></param>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.Resume(Dt.Cells.UI.ExcelPrinter.Memento)">
            <summary>
            æ¢å¤æå°åè®¾ç½®
            </summary>
            <param name="p_memento"></param>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.GetTotalHeight(Dt.Cells.Data.Worksheet,System.Int32,Dt.Cells.Data.SheetArea)">
            <summary>
            è·å¾åå¤´æExcelå½åè¡¨æ»é«
            </summary>
            <param name="p_sheet"></param>
            <param name="p_count"></param>
            <param name="p_area"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.GetTotalWidth(Dt.Cells.Data.Worksheet,System.Int32,Dt.Cells.Data.SheetArea)">
            <summary>
            è·å¾è¡å¤´æExcelå½åè¡¨æ»å®½
            </summary>
            <param name="p_sheet"></param>
            <param name="p_count"></param>
            <param name="p_area"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.CreatePages">
            <summary>
            çæææé¡µ
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ExcelPrinter.ArrangePage(System.Int32)">
            <summary>
            æ¾ç½®é¡µé¢
            </summary>
            <param name="p_index"></param>
        </member>
        <member name="T:Dt.Cells.UI.ExcelPrinter.Memento">
            <summary>
            è®°å½Excelæå°åç¶æ
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.HeaderFooterPanel.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            ä¾æ¬¡æ°´å¹³ææ¾
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.HeaderFooterPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Dt.Cells.UI.PageInfo.XStart">
            <summary>
            æ¨ªè½´å¼å§åæ 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.PageInfo.XEnd">
            <summary>
            æ¨ªè½´ç»æåæ 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.PageInfo.YStart">
            <summary>
            çºµè½´å¼å§åæ 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.PageInfo.YEnd">
            <summary>
            çºµè½´ç»æåæ 
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.PrintPagePresenter">
            <summary>
            Represents the print view for print page.
            Include 3 parts:
            - Header(Top: HeaderMargin, Left/Right: Margin)
            - Content(Margin)
            - Footer(Bottom: FooterMargin, Left/Right: Margin)
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.PrintPagePresenter.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.PrintPaginator.Paginate">
            <summary>
            æ§è¡åé¡µ
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.TextPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.AxisAnnotation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.AxisAnnotation.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Dt.Cells.UI.AxisAnnotation.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.AxisAnnotation.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.CellLayout">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.CellLayoutModel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.ColumnDropDownList">
            <summary>
            Represents a filter dropdown dialog control.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.ColumnDropDownList.ShowIconBarProperty">
            <summary>
            Indicates the show icon bar dependency property.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ColumnDropDownList.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ColumnDropDownList" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ColumnDropDownList.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Invoked when the <see cref="E:System.Windows.UIElement.KeyDown" /> event is received.
            </summary>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:Dt.Cells.UI.ColumnDropDownList.PrepareContainerForItemOverride(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">Element used to display the specified item.</param>
            <param name="item">Specified item.</param>
        </member>
        <member name="P:Dt.Cells.UI.ColumnDropDownList.ShowIconBar">
            <summary>
            Gets or sets a value to show icon bar.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ColumnDropDownList.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.ColumnLayout">
            <summary>
            Represents a column's layout information.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ColumnLayout.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ColumnLayout class.
            </summary>
            <param name="column">
            The index of the column whose layout information is represented.
            </param>
            <param name="x">
            The X coordinate of the left side of the column.
            </param>
            <param name="width">
            The width of the column.
            </param>
        </member>
        <member name="M:Dt.Cells.UI.ColumnLayout.ContainsX(System.Double)">
            <summary>
            Indicates whether the column represented by the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.ColumnLayout" /> 
            contains the specified X coordinate.
            </summary>
            <param name="x">
            The specified X coordinate.
            </param>
            <returns>
            Returns true if the specified X coordinate is contained, otherwise, returns false.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.ColumnLayout.IntersectsWith(Windows.Foundation.Rect)">
            <summary>
            Indicates whether the column represented by the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.ColumnLayout" /> 
            intersects with the specified <see cref="T:System.Windows.Rect" />.
            </summary>
            <param name="rect">
            The specified <see cref="T:System.Rect" />.
            </param>
            <returns>
            Returns true if the column represented by the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.ColumnLayout" /> 
            intersects with the specified rectangle, otherwise, returns false.
            </returns>
        </member>
        <member name="P:Dt.Cells.UI.ColumnLayout.Column">
            <summary>
            Gets the index of the column whose layout information is represented.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ColumnLayout.Width">
            <summary>
            Gets the width of the column.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ColumnLayout.X">
            <summary>
            Gets the X coordinate of the left side of the column.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.ColumnSparklineView">
            <summary>    
            Represents the column sparkline view.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ColumnSparklineView.#ctor(Dt.Cells.Data.ColumnSparklineViewInfo)">
            <summary>
            Creates a new instance of  the column sparkline view.
            </summary>
            <param name="viewInfo">The column sparkline view information.</param>
        </member>
        <member name="M:Dt.Cells.UI.ColumnSparklineView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.ConditionalFormatView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.CustomDrawingObject">
            <summary>
            Represents a drawing object displayed in a cell.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.CustomDrawingObject.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:CustomDrawingObject" /> class.
            </summary>
            <param name="anchorRow">The anchor row index to draw the object.</param>
            <param name="anchorColumn">The anchor column index to draw the object.</param>
        </member>
        <member name="P:Dt.Cells.UI.CustomDrawingObject.RootElement">
            <summary>
            Gets the root element of the drawing object on its visual tree.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.CustomDrawingObject.ShowDrawingObjectOnly">
            <summary>
            Gets or sets a value that indicates whether to show only the drawing object.
            </summary>
            <value><c>true</c> to only show the drawing object; otherwise, <c>false</c>.</value>
            <remarks>
            If this property is set to true, the text of the cell is not shown, but, any other drawing objects (such as conditional format icons) are still shown.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.CustomFloatingObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.CustomFloatingObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CustomFloatingObject" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.CustomFloatingObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CustomFloatingObject" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Dt.Cells.UI.CustomFloatingObject.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CustomFloatingObject" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Dt.Cells.UI.CustomFloatingObject.Content">
            <summary>
            Gets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.DoubleUtil">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.DragFillContextMenu">
            <summary>
            Represents a drag fill context menu control used to apply the automatic fill type.
            </summary>
        </member>
        <member name="E:Dt.Cells.UI.DragFillContextMenu.SelectedAutoFitTypeChanged">
            <summary>
            Occurs when the selected automatic fit item has changed.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DragFillContextMenu.#ctor(Dt.Cells.Data.AutoFillType[],Dt.Cells.Data.AutoFillType)">
            <summary>
            Creates a new instance of the <see cref="T:DragFillContextMenu" /> class.
            </summary>
            <param name="items">The automatic fill items.</param>
            <param name="defaultType">The default checked automatic fill item.</param>
        </member>
        <member name="M:Dt.Cells.UI.DragFillContextMenu.#ctor">
            <summary>
            XamlTypç¨ï¼hdt
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DragFillContextMenu.Items">
            <summary>
            Gets or sets the automatic fill items.
            </summary>
            <value>
            The automatic fill items.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.DragFillContextMenu.SelectedAutoFitType">
            <summary>
            Gets or sets the selected automatic fill item.
            </summary>
            <value>
            The selected automatic fill item.
            </value>
        </member>
        <member name="M:Dt.Cells.UI.DragFillContextMenu.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.DragFillContextMenuItem">
            <summary>
            Represents a drag fill context menu item.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.DragFillContextMenuItem.IsCheckedProperty">
            <summary>
            Defines the IsChecked dependency property which indicates what automatic fill type is applied.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.DragFillContextMenuItem.TextProperty">
            <summary>
            Indicates a text dependency property of the context menu item.
            </summary>
        </member>
        <member name="E:Dt.Cells.UI.DragFillContextMenuItem.Checked">
            <summary>
            Occurs when the IsChecked property has changed.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DragFillContextMenuItem.#ctor(System.String,Dt.Cells.Data.AutoFillType)">
            <summary>
            Creates a new instance of the <see cref="T:DragFillContextMenuItem" /> class.
            </summary>
            <param name="text">The automatic drag fill context menu item text.</param>
            <param name="fillType">The automatic drag fill type that the menu item represents.</param>
        </member>
        <member name="M:Dt.Cells.UI.DragFillContextMenuItem.#ctor">
            <summary>
            XamlTypç¨ï¼hdt
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DragFillContextMenuItem.FillType">
            <summary>
            Gets or sets the automatic fill type that the context menu item represents.
            </summary>
            <value>
            The automatic fill type.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.DragFillContextMenuItem.IsChecked">
            <summary>
            Gets or sets a value that indicates whether this context menu item is checked.
            </summary>
            <value>
            <c>true</c> if this context menu item is checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.DragFillContextMenuItem.Text">
            <summary>
            Gets or sets the context menu item text.
            </summary>
            <value>
            The  context menu item text.
            </value>
        </member>
        <member name="M:Dt.Cells.UI.DragFillContextMenuItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.DragFillSmartTag">
            <summary>
            Represents a drag fill smart tag control to open a drag fill context menu.
            </summary>
        </member>
        <member name="E:Dt.Cells.UI.DragFillSmartTag.AutoFilterTypeChanged">
            <summary>
            Occurs when the automatic fill type has changed.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DragFillSmartTag.#ctor">
            <summary>
            XamlTypç¨ï¼hdt
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DragFillSmartTag.AutoFilterType">
            <summary>
            Gets or sets the type of the automatic fill after drag fill.
            </summary>
            <value>
            The type of the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.AutoFillType" />.
            </value>
        </member>
        <member name="M:Dt.Cells.UI.DragFillSmartTag.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.DrawingObjectManager">
            <summary>
            The <see cref="T:GrapeCity.Windows.SpreadSheet.UI.DrawingObjectManager" /> class is used to attach
            a <see cref="T:GrapeCity.Windows.SpreadSheet.UI.DrawingObjectProvider" />  to  <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpreadSheet" /> control. 
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.DrawingObjectManager.DrawingObjectProviderProperty">
            <summary>
            Identifies the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.DrawingObjectManager.DrawingObjecProvider" /> attached property. 
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DrawingObjectManager.GetDrawingObjectProvider(Dt.Base.Excel)">
            <summary>
            Returns the value of the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.DrawingObjectManager.IDrawingObjectProvider" />Â attached property
            for a given <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpreadSheet" /> control.
            </summary>
            <param name="element">A <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpreadSheet" /></param>
            <returns>An instance of custom <see cref="T:GrapeCity.Windows.SpreadSheet.UI.IDrawingObjectProvider" /></returns>
        </member>
        <member name="M:Dt.Cells.UI.DrawingObjectManager.SetDrawingObjectProvider(Dt.Base.Excel,Dt.Cells.UI.IDrawingObjectProvider)">
            <summary>
            Sets the value of the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.DrawingObjectManager.IDrawingObjectProvider" />Â attached property
            for a given <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpreadSheet" /> control.
            </summary>
            <param name="element">A <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpreadSheet" /></param>
            <param name="value">An instance of custom <see cref="T:GrapeCity.Windows.SpreadSheet.UI.IDrawingObjectProvider" /></param>
        </member>
        <member name="M:Dt.Cells.UI.DrawingObjectManager.ClearBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DrawingObjectManager.RestoreBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DrawingObjectManager.ApplyCompiledBindings">
            <summary>
            Obsolete method kept for binary compatibility
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.DropDownItemBaseControl">
            <summary>
            Represents a filter dropdown dialog's item base control. 
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.DropDownItemBaseControl.CommandParameterProperty">
            <summary>
            Indicates the command parameter dependency property.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.DropDownItemBaseControl.CommandProperty">
            <summary>
            Indicates a command dependency property.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.DropDownItemBaseControl.ShowIconProperty">
            <summary>
            Indicates a show icon dependency property.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemBaseControl.CanExecuteCommand">
            <summary>
            Determines whether this the command can be executed on the control.
            </summary>
            <returns>
            <c>true</c> if the command can executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemBaseControl.ExecuteCommand">
            <summary>
            Executes the command on the control.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemBaseControl.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemBaseControl.UpdateVisualState(System.Boolean)">
            <summary>
            Updates the state of the control.
            </summary>
            <param name="useTransitions">if set to <c>true</c> to transition between states; otherwise <c>false</c>.</param>
        </member>
        <member name="P:Dt.Cells.UI.DropDownItemBaseControl.Command">
            <summary>
            Gets or sets the command to the control.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DropDownItemBaseControl.CommandParameter">
            <summary>
            Gets or sets the command parameter.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.DropDownItemBaseControl.ShowIcon">
            <summary>
            Gets or sets the show icon image on the item.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemBaseControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.DropDownItemControl">
            <summary>
            Represents a filter dropdown dialog's item control.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.DropDownItemControl.IconProperty">
            <summary>
            Indicates the icon property.
            </summary>
        </member>
        <member name="E:Dt.Cells.UI.DropDownItemControl.Click">
            <summary>
            Occurs when mouse click the item.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemControl.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:DropDownItemControl" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemControl.OnClick">
            <summary>
            Called when mouse click the control to raise click event and execute command.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemControl.OnKeyDown(Windows.UI.Xaml.Input.KeyRoutedEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" />Â attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemControl.OnPointerEntered(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called before the PointerEntered event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemControl.OnPointerExited(Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called before the PointerExited event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemControl.UpdateVisualState(System.Boolean)">
            <summary>
            Updates the state of the control.
            </summary>
            <param name="useTransitions">if set to <c>true</c> to transition between states; otherwise <c>false</c>.</param>
        </member>
        <member name="P:Dt.Cells.UI.DropDownItemControl.Icon">
            <summary>
            Gets or sets the item icon image.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DropDownItemControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.EditorInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.EditorInfo.ColumnIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.EditorInfo.RowIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.EditorInfo.Sheet">
            <summary>
            Gets the sheet.
            </summary>
            <value>
            The sheet.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.EditorStatus">
            <summary>
            Represents the editor status. 
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.Extensions">
            <summary>
            Contains the extension methods.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.Extensions.AreHandlersSuspended(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Determines whether the events are suspended for the specified object.
            </summary>
            <param name="depObj">
            The DependencyObject.
            </param>
            <returns>
            <c>true</c> if the events are suspended, otherwise, returns false.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.Extensions.SetValueNoCallBack(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyProperty,System.Object)">
            <summary>
            Determines whether the value should be set without raising events.
            </summary>
            <param name="depObj">
            The DependencyObject.
            </param>
            <param name="dp">
            The DependencyProperty.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:Dt.Cells.UI.FilterButton.Bitmap">
            <summary>
            è·åè®¾ç½®æºå¾å
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.FilterButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.FormulaFunction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.FormulaFunction.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.FormulaFunction.#ctor(Dt.CalcEngine.Functions.CalcFunction)">
            <summary>
            
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:Dt.Cells.UI.FormulaFunction.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dt.Cells.UI.FormulaFunction.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.FormulaFunction.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.FormulaFunction.FullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.FormulaFunction.Function">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.FormulaFunction.MaxArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.FormulaFunction.MinArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.FormulaFunction.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.FormulaFunction.Param">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.GcGroupBase.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.GcRangeGroup.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.GcRangeGroupCorner.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.GcRangeGroupHeader.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.HeaderHitTestInformation">
            <summary>
            Represents hit test information for the headers of the spreadsheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.HeaderHitTestInformation.#ctor">
            <summary>
            Creates a new set of header hit test information.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HeaderHitTestInformation.Column">
            <summary>
            Gets the column location referred to in the header.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HeaderHitTestInformation.InColumnResize">
            <summary>
            Gets whether the location refers to a column resize area.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HeaderHitTestInformation.InRowResize">
            <summary>
            Gets whether the location refers to a row resize area.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HeaderHitTestInformation.ResizingColumn">
            <summary>
            Gets the column being resized, if the InColumnResize property is true.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HeaderHitTestInformation.ResizingRow">
            <summary>
            Gets the row being resized, if the InRowResize property is true.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HeaderHitTestInformation.Row">
            <summary>
            Gets the row location referred to in the header.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.HitTestInformation">
            <summary>
            Represents hit test information for the data area of the spreadsheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.HitTestInformation.#ctor">
            <summary>
            Creates a new set of hit test information.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HitTestInformation.ColumnViewportIndex">
            <summary>
            Gets the column viewport referred to in the spreadsheet.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HitTestInformation.FloatingObjectInfo">
            <summary>
            Gets the chart information.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HitTestInformation.FormulaSelectionInfo">
            <summary>
            Gets more detailed hit test information for the FormulaSelection.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HitTestInformation.HeaderInfo">
            <summary>
            Gets more detailed hit test information for the headers (column headers, row headers, and corner).
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HitTestInformation.HitTestType">
            <summary>
            Gets the general area referred to in the spreadsheet.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HitTestInformation.RowViewportIndex">
            <summary>
            Gets the row viewport referred to in the spreadsheet.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.HitTestInformation.ViewportInfo">
            <summary>
            Gets more detailed hit test information for the viewport.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.HitTestType">
            <summary>
            Specifies the locations in the component for the HitTest method.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.HorizontalPosition">
            <summary>
            Specifies the horizontal position of the cell or column in the component. 
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.InputDeviceType">
            <summary>
            Represents the input device type.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.KeyStroke">
            <summary>
            Represents the user's gesture of pressing a key on the computer.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.KeyStroke.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> structure 
            with the specified character.
            </summary>
            <param name="keyChar">
            Character defined by this <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> structure.
            </param>
        </member>
        <member name="M:Dt.Cells.UI.KeyStroke.#ctor(Windows.System.VirtualKey,Windows.System.VirtualKeyModifiers)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> structure 
            with the specified <see cref="T:System.Windows.Input.Key" /> and 
            <see cref="T:System.Windows.Input.ModifierKeys" />.
            </summary>
            <param name="keyCode">
            The key code defined by this <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> structure.
            </param>
            <param name="modifiers">
            The modifier keys defined by this <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> structure.
            </param>
        </member>
        <member name="M:Dt.Cells.UI.KeyStroke.#ctor(Windows.System.VirtualKey,Windows.System.VirtualKeyModifiers,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> structure 
            with the specified <see cref="T:System.Windows.Input.Key" />, <see cref="T:System.Windows.Input.ModifierKeys" />, 
            and a value that indicates whether this <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> is active on the key
            release.
            </summary>
            <param name="keyCode">
            The key code defined by this <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> structure.
            </param>
            <param name="modifiers">
            The modifier keys defined by this <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> structure.
            </param>
            <param name="onKeyRelease">
            A value that indicates whether the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> is active on the key release.
            </param>
        </member>
        <member name="P:Dt.Cells.UI.KeyStroke.KeyChar">
            <summary>
            Gets the character defined by the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> structure.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.KeyStroke.KeyCode">
            <summary>
            Gets the key code defined by the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> structure.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.KeyStroke.Modifiers">
            <summary>
            Gets the modifier keys defined by the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> structure.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.KeyStroke.OnKeyRelease">
            <summary>
            Gets a value that indicates whether the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> is active on the key release.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.KeyStroke.op_Equality(Dt.Cells.UI.KeyStroke,Dt.Cells.UI.KeyStroke)">
            <summary>
            Determines whether two <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> objects are equal.
            </summary>
            <param name="lhs">
            The first <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> (left side of equality operator). 
            </param>
            <param name="rhs">
            The second <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> (right side of equality operator).
            </param>
            <returns>
            <c>true</c> if these two <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> objects are equal; otherwise, returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.KeyStroke.op_Inequality(Dt.Cells.UI.KeyStroke,Dt.Cells.UI.KeyStroke)">
            <summary>
            Determines whether two <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> objects are not equal.
            </summary>
            <param name="lhs">
            The first <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> (left side of inequality operator). 
            </param>
            <param name="rhs">
            The second <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> (right side of inequality operator).
            </param>
            <returns>
            <c>true</c> if these two <see cref="T:GrapeCity.Windows.SpreadSheet.UI.KeyStroke" /> objects are not equal; otherwise, returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.KeyStroke.Equals(Dt.Cells.UI.KeyStroke)">
            <summary>
            Determines whether the specified <see cref="T:arPoint.Silverlight.Prototype.KeyStroke" /> is equal to the current object.
            </summary>
            <param name="other">
            The <see cref="T:arPoint.Silverlight.Prototype.KeyStroke" /> object to compare with the current object. 
            </param>
            <returns>
            Returns <c>true</c> if these two <see cref="T:arPoint.Silverlight.Prototype.KeyStroke" /> objects are equal; otherwise, returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.KeyStroke.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">
            The object to compare with the current object. 
            </param>
            <returns>
            Returns <c>true</c> if these two objects are equal; otherwise, returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.KeyStroke.GetHashCode">
            <summary>
            Generates a hash code for the current object.
            </summary>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="T:Dt.Cells.UI.LineSparklineView">
            <summary>
            Represents the line sparkline view.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.LineSparklineView.#ctor(Dt.Cells.Data.LineSparklineViewInfo)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="viewInfo">The line sparkline view information.</param>
        </member>
        <member name="M:Dt.Cells.UI.LineSparklineView.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            Positions child elements and determines the size when overridden in a derived class.
            </summary>
            <param name="finalSize"> The final area within the parent that this element uses to arrange itself and its children.</param>
            <returns> The actual size used.</returns>
        </member>
        <member name="M:Dt.Cells.UI.LineSparklineView.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Measures the layout size required
            for child elements and determines a size for the FrameworkElement's derived class when overridden in a derived class.
            </summary>
            <param name="availableSize"> 
            The available size that this element can give to child elements.
            </param>
            <returns> 
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.LineSparklineView.Update(Windows.Foundation.Size,System.Double)">
            <summary>
            Updates the sparkline in the view when overridden in a derived class.
            </summary>
            <param name="size">The updated size.</param>
            <param name="zoomfactor">The zoom factor used for the update.</param>
        </member>
        <member name="M:Dt.Cells.UI.LineSparklineView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.MouseButtonType">
            <summary>
            Represents the mouse button type.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.PictureContainer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.PointExtensions.Delta(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>
            Computes the offset vector between two points.
            </summary>
            <param name="reference">The reference.</param>
            <param name="newLocation">The new location.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.PointExtensions.Offset(Windows.Foundation.Point)">
            <summary>
            Computes the offset indicated by the X and Y values of the given <see cref="T:Point" />.
            </summary>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="T:Dt.Cells.UI.PositionInFormulaSelection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.GroupButton">
            <summary>
            Represents a <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpreadSheet" /> range group button
            that is used to expand or collapse the group.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.GroupButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.GroupHeaderButton">
            <summary>
            Represents a <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpreadSheet" /> range group header button
            that is used to expand or collapse all the groups in the same level.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.GroupHeaderButton.#ctor">
            <summary>
            Creates a new instance of the control.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.GroupHeaderButton.Level">
            <summary>
            Gets or sets a value that indicates the range group level.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.GroupHeaderButton.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.ResizeZeroIndicator">
            <summary>
            Specifies the drawing policy of the row or column when it is resized to zero.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.RowLayout">
            <summary>
            Represents a row's layout information.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.RowLayout.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the RowLayout class.
            </summary>
            <param name="row">
            The index of the row whose information is represented.
            </param>
            <param name="y">
            The Y coordinate of the top side of the row.
            </param>
            <param name="height">
            The height of the row.
            </param>
        </member>
        <member name="M:Dt.Cells.UI.RowLayout.ContainsY(System.Double)">
            <summary>
            Indicates whether the row represented by the <see cref="T:RowLayout" /> object 
            contains the specified Y coordinate.
            </summary>
            <param name="y">
            The specified Y coordinate.
            </param>
            <returns>
            Returns true if the row contains the specified Y coordinate; otherwise, returns false.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.RowLayout.IntersectsWith(Windows.Foundation.Rect)">
            <summary>
            Indicates whether the row represented by the <see cref="T:GrapeCity.Windows.SpreadSheet.UI.RowLayout" /> object 
            intersects with the specified <see cref="T:System.Windows.Rect" /> object.
            </summary>
            <param name="rect">
            The specified <see cref="T:Rect" /> object.
            </param>
            <returns>
            Returns true if the row intersects with the <see cref="T:System.Windows.Rect" /> object; otherwise, returns false.
            </returns>
        </member>
        <member name="P:Dt.Cells.UI.RowLayout.Height">
            <summary>
            Gets the row height.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RowLayout.Row">
            <summary>
            Gets the index of the row whose layout information is represented.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RowLayout.Y">
            <summary>
            Gets the Y coordinate of the top side of the row.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.ScrollBarTrackPolicy">
            <summary>
            Specifies whether the component scrolls the sheet when the user moves the scroll box.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.SeparatorDropDownItemControl">
            <summary>
            Represents a filter dropdown dialog's separator item control.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.SeparatorDropDownItemControl.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SeparatorDropDownItemControl" /> class.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.SeparatorDropDownItemControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.SheetTab">
            <summary>
            hdt å¤§è°æ´
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.SheetTab.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.SplitBoxAlignment">
            <summary>
            Specifies the placement of split boxes in the component with respect to their alignment with the scroll bars.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.SplitBoxPolicy">
            <summary>
            Specifies when the component displays the split boxes. 
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.SpreadAction">
            <summary>
            Represents the action delegate for input maps.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="T:Dt.Cells.UI.SpreadActions">
            <summary>
            Represents the actions available for input maps.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.CancelInput(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Stops cell editing and cancels input.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.Clear(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Clears the cell value.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.ClearAndEditing(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Clears the active cell value and enters edit mode.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.ClipboardCopyFloatingObjects(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Copies the floating objects to the Clipboard.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.ClipboardCutFloatingObjects(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Cuts the floating objects to the Clipboard.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.ClipboardPasteFloatingObjects(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Pastes the floating objects from the Clipboard.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.CommitInputNavigationDown(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Stops cell editing and moves the active cell to the next row.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.CommitInputNavigationTabNext(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Stops cell editing and moves the active cell to the next cell.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.CommitInputNavigationTabPrevious(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Stops cell editing and moves the active cell to the previous cell.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.CommitInputNavigationUp(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Stops cell editing and moves the active cell to the previous row.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.Copy(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Copies the selected item text to the Clipboard.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.Cut(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Cuts the selected item text to the Clipboard.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.DeleteFloatingObject(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Deletes the floating object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.InputArrayFormula(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Sets the array formula on the current active range.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.InputNewLine(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Inputs a new line in the current active cell.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.MoveFloatingObjectDown(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.MoveFloatingObjectLeft(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.MoveFloatingObjectRight(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.MoveFloatingObjectTop(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationBottom(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the last row.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationDown(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the next row.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationEnd(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the last column.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationFirst(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the first cell in the sheetview.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationHome(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the first column.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationLast(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the last cell in the sheetview.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationLeft(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the previous column.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationNext(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the next cell.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationNextFloatingObject(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Navigates to the next floating object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationNextSheet(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active sheet to the next sheet.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationPageDown(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell down one page of rows.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationPageUp(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell up one page of rows.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationPrevious(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the previous cell.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationPreviousFloatingObject(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Navigates to the previous floating object.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationPreviousSheet(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active sheet to the previous sheet.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationRight(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the next column.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationTop(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the first row.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.NavigationUp(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Moves the active cell to the previous row.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.Paste(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Pastes the specified sender.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.Redo(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Performs a redo of the most recently undone edit or action.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionAll(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Selects all objects.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionBottom(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection to the last row.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionDown(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection down one row.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionEnd(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection to the last column.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionFirst(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection to the first cell.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionHome(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection to the first column.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionLast(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection to the last cell.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionLeft(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection one column to the left.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionPageDown(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection down to include one page of rows.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionPageUp(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection up to include one page of rows.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionRight(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection one column to the right.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionTop(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection to the first row.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.SelectionUp(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Extends the selection up one row.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.StartEditing(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Starts to edit the current active cell.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.StartEditingFormula(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Starts to edit formula on the current active cell.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.Undo(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Performs an undo of the most recent edit or action.
            </summary>
            <param name="sender">The object to do the action on.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the action event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadActions.UnSelectAllFloatingObjects(System.Object,Dt.Cells.UI.ActionEventArgs)">
            <summary>
            Unselects all floating objects.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:ActionEventArgs" /> instance that contains the event data.</param>
        </member>
        <member name="M:Dt.Cells.UI.SpreadCharBaseContainer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.SpreadChartContainer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.SpreadChartView">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.SpreadChartView.SyncSpreadChartToC1Chart">
            <summary>
            å è½½äºä»¶æå·æ°æ¶ç»å¶å¾è¡¨
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.SpreadChartView.C1Chart">
            <summary>
            Gets the c1 chart.
            </summary>
            <value>
            The c1 chart.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.SpreadChartView.SpreadChart">
            <summary>
            Gets the spread chart.
            </summary>
            <value>
            The spread chart.
            </value>
        </member>
        <member name="M:Dt.Cells.UI.SpreadChartView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="P:Dt.Cells.UI.SpreadXClipboard.IsCutting">
            <summary>
            Indicates whether the action is a cut.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.SpreadXClipboard.Range">
            <summary>
            Gets the copy or cut range.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.SpreadXClipboard.Worksheet">
            <summary>
            Gets the copy or cut worksheet.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.SR`1">
            <summary>
            Represents the basic functionality used to get string information from assembly resource.
            </summary>
            <typeparam name="T">
            The type to provide the assembly information.
            </typeparam>
        </member>
        <member name="F:Dt.Cells.UI.SR`1._resources">
            <summary>
            SR will use it to reader string.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.SR`1.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.SR`1.GetString(System.String)">
            <summary>
            Returns the value of the resource with the specified name in the assembly indicated by the template type.
            </summary>
            <param name="name">
            Name of the resource to get.
            </param>
            <returns>
            The value of a resource.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.SR`1.GetString(System.Globalization.CultureInfo,System.String)">
            <summary>
            Returns the value of the resource localized for the specified culture with the specified name in the assembly 
            indicated by the template type.
            </summary>
            <param name="uiCulture">
            The CultureInfo object that represents the culture for which the resource is localized.
            </param>
            <param name="name">
            Name of the resource to get.
            </param>
            <returns>
            The value of a resource.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.SR`1.GetString(System.String,System.Object[])">
            <summary>
            Returns the value of the resource with the specified name in the assembly indicated by the template type 
            and returns the formatted string that replaced the format specification in the String 
            with the textual equivalent of the value of a corresponding Object instance in a specified array.
            </summary>
            <param name="name">
            Name of the resource to get.
            </param>
            <param name="args">
            An Object array containing zero or more objects to be formatted. 
            </param>
            <returns>
            The formatted value of a resource.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.SR`1.GetString(System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Returns the value of the resource localized for the specified culture with the specified name in the assembly 
            indicated by the template type and returns the formatted string that replaced the format specification in the 
            String with the textual equivalent of the value of a corresponding Object instance in a specified array.
            </summary>
            <param name="uiCulture">
            The CultureInfo object that represents the culture for which the resource is localized.
            </param>
            <param name="name">
            Name of the resource to get.
            </param>
            <param name="args">
            An Object array containing zero or more objects to be formatted. 
            </param>
            <returns>
            The formatted value of a resource.
            </returns>
        </member>
        <member name="F:Dt.Cells.UI.TabIndexNavigator._currentCellPosition">
            <summary>
            This a cache for current cell position, and it is base on Composite.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.TabIndexNavigator._currentRangeIndex">
            <summary>
            When make navigation in multiple selection, need cache current range index.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.TabIndexNavigator._startNavigateCellPosition">
            <summary>
            Because the Navigation action don't always start with ActiveCell, so need add another cache for the position.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.TabStrip">
            <summary>
            Represents a <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpreadSheet" /> tab strip control.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.TabStrip.UpdateTabs">
            <summary>
            Tabé¡¹ä¸ªæ°ä¸åæ¶éæ°å è½½ï¼ç¸åæ¶å·æ°åç§°
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.TabStrip.Refresh">
            <summary>
            å·æ°æ ç­¾åç§°
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.TabStrip.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.TabStripPlacement">
            <summary>
            Specifies the location of the tab strip in <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpread" />.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.TabularNavigator._currentCellPosition">
            <summary>
            This a cache for current cell position, and it is base on Tabular.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.TabularNavigator._startNavigateCellPosition">
            <summary>
            Because the Navigation action don't always start with ActiveCell, so need add another cache for the position.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.TooltipControl">
            <summary>
            Represents a control that creates a pop-up window that displays information
            for an element in the UI.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.TooltipControl.TextProperty">
            <summary>
            Identifies the <see cref="P:TooltipControl.Text" /> dependency property.
            </summary>
            <value>
            The identifier for the <see cref="P:TooltipControl.Text" /> dependency property.
            </value>
        </member>
        <member name="M:Dt.Cells.UI.TooltipControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TooltipControl" /> class.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.TooltipControl.Text">
            <summary>
            Gets or sets the text that displayed on the tool-tip.
            </summary>
            <value>
            The text displayed on the tool-tip.
            </value>
        </member>
        <member name="M:Dt.Cells.UI.TooltipControl.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.TouchToolbarShowingArea">
            <summary>
            Specifies the area where the touch strip menu bar is displayed.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.UndoManager">
            <summary>
            The <see cref="T:GrapeCity.Windows.SpreadSheet.UI.UndoManager" /> class is used to perform the
            <see cref="T:GrapeCity.Windows.SpreadSheet.UI.UndoRedo.ActionBase" /> actions. The <see cref="T:GrapeCity.Windows.SpreadSheet.UI.UndoRedo.ActionBase" /> actions 
            can be undone and redone if the <see cref="P:GrapeCity.Windows.SpreadSheet.UI.UndoRedo.ActionBase.CanUndo" /> property is <c>true</c>.
            </summary>
        </member>
        <member name="E:Dt.Cells.UI.UndoManager.Changed">
            <summary>
            Occurs when an undo or redo action occurs.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.UndoManager.#ctor(System.Object,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the UndoManager class.
            </summary>
            <param name="context">The context of the <see cref="T:UndoManager" /> class.</param>
            <param name="maxLength">The maximum level of the actions that can be undone.</param>
            <param name="allowUndo">if set to <c>true</c> allow undo; otherwise, do not allow undo.</param>
            <remarks>
            -1 indicates the maximum level is unlimited.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.UndoManager.Do(System.Windows.Input.ICommand)">
            <summary>
            Performs an <see cref="T:Action" /> and adds it to the undo list if the <see cref="T:Action" /> can be undone.
            </summary>
            <param name="action">
            The <see cref="T:Action" />.
            </param>
        </member>
        <member name="M:Dt.Cells.UI.UndoManager.GetRedoList">
            <summary>
            Returns all redo commands.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.UndoManager.GetUndoList">
            <summary>
            Returns all undo commands.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.UndoManager.Redo">
            <summary>
            Performs a redo action.
            </summary>
            <returns>
            Returns true if the redo action succeeds; otherwise, returns false.
            </returns>
        </member>
        <member name="M:Dt.Cells.UI.UndoManager.ShrinkUndoList(System.Int32)">
            <summary>
            Shrink the undo list by removing the specified count of items from the bottom of the stack.
            </summary>
            <param name="count">
            The specified count of items.
            </param>
        </member>
        <member name="M:Dt.Cells.UI.UndoManager.Undo">
            <summary>
            Performs an undo action.
            </summary>
            <returns>
            Returns true if the undo action succeeds; otherwise, returns false.
            </returns>
        </member>
        <member name="P:Dt.Cells.UI.UndoManager.CanRedo">
            <summary>
            Gets a value that indicates whether the <see cref="T:UndoManager" /> can redo an action.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.UndoManager.CanUndo">
            <summary>
            Gets a value that indicates whether the <see cref="T:UndoManager" /> can undo an action.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.UndoManager.Context">
            <summary>
            Gets the context of the <see cref="T:UndoManager" /> which is used to execute the actions. 
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.UndoManager.MaxLength">
            <summary>
            Gets the maximum level of actions that can be undone.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.UndoManager.RedoList">
            <summary>
            Gets a list of the actions that can be redone.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.UndoManager.UndoList">
            <summary>
            Gets a list of the actions that can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.UndoRedoOperation">
            <summary>
            Indicates the operation user does when undo/redo.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.VerticalPosition">
            <summary>
            Specifies the vertical position of the cell or column in the component. 
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation.#ctor">
            <summary>
            Creates a new set of viewport hit test information.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation.FloatingObject">
            <summary>
            Gets the spread chart.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation.InBottomNESWResize">
            <summary>
            Gets a value that indicates whether to resize the chart shape in the bottom NESW area.
            </summary>
            <value>
            <c>true</c> if [in bottom NESW resize chart shape]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation.InBottomNSResize">
            <summary>
            Gets a value that indicates whether to resize the chart shape in the bottom NS area.
            </summary>
            <value>
            <c>true</c> if [in bottom NS resize chart shape]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation.InBottomNWSEResize">
            <summary>
            Gets a value that indicates whether to resize the chart shape area in the bottom NWSE area.
            </summary>
            <value>
            <c>true</c> if [in bottom NWSE resize chart shape]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation.InLeftWEResize">
            <summary>
            Gets a value that indicates whether to resize the chart shape in the left WE area.
            </summary>
            <value>
            <c>true</c> if [in left WE resize chart shape]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation.InMoving">
            <summary>
            Gets a value that indicates whether the chart shape is being moved.
            </summary>
            <value>
            <c>true</c> if [in moving chart shape]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation.InRightWEResize">
            <summary>
            Gets a value that indicates whether to resize the chart shape in the right WE area.
            </summary>
            <value>
            <c>true</c> if [in right WE resize chart shape]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation.InTopNESWResize">
            <summary>
            Gets a value that indicates whether to resize the chart shape in the top NESW area.
            </summary>
            <value>
            <c>true</c> if [in top NESW resize chart shape]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation.InTopNSResize">
            <summary>
            Gets a value that indicates whether to resize the chart shape in the top NS area.
            </summary>
            <value>
            <c>true</c> if [in top NS resize chart shape]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFloatingObjectHitTestInformation.InTopNWSEResize">
            <summary>
            Gets a value that indicates whether to resize the chart shape in the top NWSE area.
            </summary>
            <value>
            <c>true</c> if [in top NWSE resize chart shape]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Dt.Cells.UI.ViewportFormulaSelectionHitTestInformation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFormulaSelectionHitTestInformation.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ViewportFormulaSelectionHitTestInformation.SelectionIndex">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.ViewportHitTestInformation">
            <summary>
            Represents hit test information for the viewports of the spreadsheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ViewportHitTestInformation.#ctor">
            <summary>
            Creates a new set of viewport hit test information.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ViewportHitTestInformation.Column">
            <summary>
            Gets the column location referred to in the viewport.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ViewportHitTestInformation.InDragFillIndicator">
            <summary>
            Gets whether the location refers to a drag fill area.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ViewportHitTestInformation.InEditor">
            <summary>
            Gets whether the location refers to an editor area when the sheet is in edit mode.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ViewportHitTestInformation.InSelectionDrag">
            <summary>
            Gets whether the location refers to a drag drop area.
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.ViewportHitTestInformation.Row">
            <summary>
            Gets the row location referred to in the viewport.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.VisualStates">
            <summary>
            Represents the visual states used in the template of a <see cref="T:GrapeCity.Windows.SpreadSheet.UI.GcSpreadSheet" /> control
            and used to specify the elements' visual states in the visual tree of the control.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.GroupActive">
            <summary>
            The active state group.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.GroupCommon">
            <summary>
            The common state group.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.GroupCurrent">
            <summary>
            The current state group.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.GroupFocus">
            <summary>
            The focus state group.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.GroupSelected">
            <summary>
            The selection state group.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StateActive">
            <summary>
            The active state.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StateCurrent">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StateDisabled">
            <summary>
            The disabled state.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StateFocused">
            <summary>
            The focused state.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StateInactive">
            <summary>
            The inactive state.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StateMouseOver">
            <summary>
            The mouse over state.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StateNormal">
            <summary>
            The normal state.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StatePressed">
            <summary>
            The pressed state.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StateRegular">
            <summary>
            The regular state.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StateSelected">
            <summary>
            The selected state.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StateUnfocused">
            <summary>
            The unfocused state.
            </summary>
        </member>
        <member name="F:Dt.Cells.UI.VisualStates.StateUnselected">
            <summary>
            The unselected state.
            </summary>
        </member>
        <member name="T:Dt.Cells.UI.WinLossSparklineView">
            <summary>
            Represents the winloss sparkline view.
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.WinLossSparklineView.#ctor(Dt.Cells.Data.WinLossSparklineViewInfo)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="viewInfo">The winloss sparkline view information.</param>
        </member>
        <member name="M:Dt.Cells.UI.WinLossSparklineView.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.CellItem">
            <summary>
            ååæ ¼é¢æ¿
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.CellItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.CellsPanel">
            <summary>
            ååæ ¼è§å£
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.CellsPanel.HideDecorationWhenPrinting">
            <summary>
            è®¾ç½®æå°æ¶éèåé¡µçº¿
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.CellsPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.ColHeaderCell.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.ColHeaderItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.ColHeaderPanel">
            <summary>
            åå¤´è§å£
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.ColHeaderPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.CornerPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.HeaderCellItem.ApplyStyle(Dt.Cells.Data.Cell)">
            <summary>
            æªå®å¨åºç¨CellItemä¸­çæ ·å¼
            </summary>
            <param name="p_cell"></param>
        </member>
        <member name="M:Dt.Cells.UI.HeaderCellItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.HeaderItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.HeaderPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.RowHeaderCell.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.RowHeaderItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.RowHeaderPanel">
            <summary>
            è¡å¤´è§å£
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.RowHeaderPanel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.BorderLayer">
            <summary>
            è°æ´ä¸ºåªç¨å¨åå®¹åºåï¼è¡/åå¤´ä¸åä½¿ç¨
            å åä»£ç å¨iOSä¸­å¸å±æ¶é ææ­»å¾ªç¯ï¼å·²å¤§æ¹
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.BorderLayer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.DecorationLayer">
            <summary>
            ä¿®é¥°å±é¢æ¿
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.DecorationLayer.#ctor(Dt.Cells.UI.CellsPanel)">
            <summary>
            æé æ¹æ³
            </summary>
            <param name="p_viewport"></param>
        </member>
        <member name="M:Dt.Cells.UI.DecorationLayer.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            æµé
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.DecorationLayer.ArrangeOverride(Windows.Foundation.Size)">
            <summary>
            å¸å±
            </summary>
            <param name="finalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.DecorationLayer.PrepareLines(System.Double,System.Double,System.Boolean,Windows.Foundation.Size)">
            <summary>
            åå¤åé¡µçº¿
            </summary>
            <param name="p_width"></param>
            <param name="p_height"></param>
            <param name="p_isHor"></param>
            <param name="p_paper"></param>
        </member>
        <member name="M:Dt.Cells.UI.DecorationLayer.CreateLine">
            <summary>
            åå»ºåé¡µçº¿
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.UI.DecorationLayer.OnPointerPressed(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            ææ½æ¥è¡¨é¡¹
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Cells.UI.DecorationLayer.OnPointerMoved(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            ææ½è¿ç¨
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dt.Cells.UI.DecorationLayer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.EditingLayer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.FloatingObjectLayer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.FloatingObjectMovingLayer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.RowsLayer">
            <summary>
            æè¡å¸å±çé¢æ¿
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.RowsLayer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="M:Dt.Cells.UI.SelectionLayer.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UI.RowItem">
            <summary>
            ååæ ¼è¡é¢æ¿
            </summary>
        </member>
        <member name="P:Dt.Cells.UI.RowItem.Row">
            <summary>
            -1è¡¨ç¤ºè¢«åæ¶
            </summary>
        </member>
        <member name="M:Dt.Cells.UI.RowItem.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.Data.BorderLinesPool">
            <summary>
            Represents a border line pool to manager the border lines. 
            </summary>
        </member>
        <member name="M:Dt.Cells.Data.BorderLinesPool.#ctor(Windows.UI.Xaml.Controls.UIElementCollection)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.Data.BorderLinesPool" /> class.
            </summary>
            <param name="elements">The border line elements.</param>
        </member>
        <member name="M:Dt.Cells.Data.BorderLinesPool.Collect">
            <summary>
            Collects all the border lines from the seek index.
            </summary>
        </member>
        <member name="M:Dt.Cells.Data.BorderLinesPool.GetSolidBrush(Windows.UI.Color)">
            <summary>
            Gets the cached solid brush from a color.
            </summary>
            <param name="color">The color.</param>
            <returns>The <see cref="T:System.Windows.Media.SolidColorBrush" /> according to the color.</returns>
        </member>
        <member name="M:Dt.Cells.Data.BorderLinesPool.Pop">
            <summary>
            Pops a border line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dt.Cells.Data.BorderLinesPool.Reset">
            <summary>
            Resets the seek point to begin.
            </summary>
        </member>
        <member name="T:Dt.Cells.Data.ComboLine">
            <summary>
            Represents a combo border line.
            </summary>
        </member>
        <member name="M:Dt.Cells.Data.ComboLine.Create(Dt.Cells.Data.BorderLinesPool,Dt.Cells.Data.BorderLine)">
            <summary>
            Creates a border line element or gets a border line element from BorderLinesPool"/&gt;.
            </summary>
            <param name="linePool">The line pool.</param>
            <param name="borderLine">The border line.</param>
            <returns>The border line</returns>
        </member>
        <member name="M:Dt.Cells.Data.ComboLine.Layout(Dt.Cells.Data.LineItem,System.Double,System.Double)">
            <summary>
            Layouts the specified border line.
            </summary>
            <param name="lineItem">The LineItem to indicate line info.</param>
            <param name="hOffset">The horizontal offset.</param>
            <param name="vOffset">The vertical offset.</param>
        </member>
        <member name="P:Dt.Cells.Data.ComboLine.X1">
            <summary>
            Gets or sets the x-coordinate of the line start point.
            </summary>
            <value>
            The x-coordinate for the start point of the line.
            </value>
        </member>
        <member name="P:Dt.Cells.Data.ComboLine.X2">
            <summary>
            Gets or sets the x-coordinate of the line end point.
            </summary>
            <value>
            The x-coordinate for the end point of the line.
            </value>
        </member>
        <member name="P:Dt.Cells.Data.ComboLine.Y1">
            <summary>
            Gets or sets the y-coordinate of the line start point.
            </summary>
            <value>
            The y-coordinate for the start point of the line.
            </value>
        </member>
        <member name="P:Dt.Cells.Data.ComboLine.Y2">
            <summary>
            Gets or sets the y-coordinate of the line end point.
            </summary>
            <value>
            The y-coordinate for the end point of the line.
            </value>
        </member>
        <member name="M:Dt.Cells.Data.ComboLine.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ActionBase">
            <summary>
            Represents the actions in the component for which the user can perform an undo or redo.
            </summary>
        </member>
        <member name="E:Dt.Cells.UndoRedo.ActionBase.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the action should execute.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ActionBase.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">
            Data used by the action. If the action does not require data to be passed, this object can be set to null.
            </param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ActionBase.Execute(System.Object)">
            <summary>
            Defines the method to be called when the action is invoked.
            </summary>
            <param name="parameter"> 
            Data used by the action. If the action does not require data to be passed, this object can be set to null.
            </param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ActionBase.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ActionBase.ResumeInvalidate(System.Object)">
            <summary>
            Resumes all Invalidate methods if the sender is Excel.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ActionBase.SuspendInvalidate(System.Object)">
            <summary>
            Suspends all Invalidate methods if the sender is Excel.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ActionFailedException">
            <summary>
            Represents an exception when the ActionBase.Execute() method does not return a success or failure value; 
            the Execute() method throws an ActionFailedException if the method fails 
            during implementation.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ActionFailedException.#ctor(Dt.Cells.UndoRedo.ActionBase)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="action">The <see cref="T:GrapeCity.Windows.SpreadSheet.UI.UndoRedo.ActionBase" />.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ActionFailedException.Action">
            <summary>
            Gets the failed action.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.AddFloatingObjectUndoAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.AddFloatingObjectUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.Data.FloatingObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction" /> class.
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="floatingObjects">The floating objects.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.AddFloatingObjectUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.AddFloatingObjectUndoAction.Execute(System.Object)">
            <summary>
            Defines the method to be called when the action is invoked.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.AddFloatingObjectUndoAction.SaveState">
            <summary>
            Saves the state for undoing the command or operation.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.AddFloatingObjectUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.AddFloatingObjectUndoAction.Undo(System.Object)">
            <summary>
            Undoes the command or operation.
            </summary>
            <param name="parameter">The parameter to undo the command or operation.</param>
            <returns>
            <c>true</c> if an undo operation on the command or operation succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.AddFloatingObjectUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the command or operation can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.CellEditExtent">
            <summary>
            Represents a cell edit action extent that supports editing a cell on the sheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.CellEditExtent.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.CellEditExtent" /> class.
            </summary>
            <param name="row">The edit row index.</param>
            <param name="column">The edit column index.</param>
            <param name="newValue">The edit cell's new value to apply.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.CellEditExtent.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.CellEditExtent.ColumnIndex">
            <summary>
            Gets the edit cell column index.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.CellEditExtent.NewValue">
            <summary>
            Gets the new value of the edit cell.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.CellEditExtent.RowIndex">
            <summary>
            Gets the edit cell row index.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.CellEditUndoAction">
            <summary>
            Represents a cell edit undo action that applies a new value to a cell on the sheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.CellEditUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.CellEditExtent)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.CellEditUndoAction" /> class.
            </summary>
            <param name="worksheet">The edit cell worksheet.</param>
            <param name="extent">The edit cell extent information.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.CellEditUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed in, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.CellEditUndoAction.Execute(System.Object)">
            <summary>
            Defines the method to be called when the action is invoked.
            </summary>
            <param name="parameter">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.CellEditUndoAction.SaveState">
            <summary>
            Saves the cell state for undoing the action before executing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.CellEditUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.CellEditUndoAction.Undo(System.Object)">
            <summary>
            Undoes the command or operation.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
            <returns>
            <c>true</c> if undoing the action succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.CellEditUndoAction.ApplyResult">
            <summary>
            Gets or sets the applied result when there is a data validator error.
            </summary>
            <value>
            The data validation result when there is a data validator error.
            </value>
        </member>
        <member name="P:Dt.Cells.UndoRedo.CellEditUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ChangeChartTypeAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ChangeChartTypeAction.#ctor(Dt.Cells.Data.SpreadChart,Dt.Cells.Data.SpreadChartType)">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.ChangeChartTypeAction" /> class.
            </summary>
            <param name="chart">The chart.</param>
            <param name="newType">The new type.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ChangeChartTypeAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ChangeChartTypeAction.Execute(System.Object)">
            <summary>
            Defines the method to be called when the action is invoked.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ChangeChartTypeAction.SaveState">
            <summary>
            Saves the state for undoing the command or operation.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ChangeChartTypeAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ChangeChartTypeAction.Undo(System.Object)">
            <summary>
            Undoes the command or operation.
            </summary>
            <param name="parameter">The parameter to undo the command or operation.</param>
            <returns>
            <c>true</c> if an undo operation on the command or operation succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ChangeChartTypeAction.CanUndo">
            <summary>
            Gets a value that indicates whether the command or operation can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ClearValueUndoAction">
            <summary>
            Represents a clear cells value undo action on the sheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClearValueUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.Data.CellRange[])">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.ClearValueUndoAction" /> class.
            </summary>
            <param name="sheet">The worksheet to clear values on.</param>
            <param name="ranges">The clear value cell ranges.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClearValueUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClearValueUndoAction.Execute(System.Object)">
            <summary>
            Executes the action on the worksheet.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClearValueUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action before executing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClearValueUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClearValueUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action using the saved state information.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
            <returns>
            <c>true</c> if undoing the action succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ClearValueUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ClearValueUndoAction.CellRanges">
            <summary>
            Gets the clear cell ranges.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ClipboardPasteExtent">
            <summary>
            Represents a Clipboard paste action extent that supports Clipboard paste on the sheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteExtent.#ctor(Dt.Cells.Data.CellRange,Dt.Cells.Data.CellRange[],System.Boolean,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.ClipboardPasteExtent" /> class.
            </summary>
            <param name="sourceRange">The source range of the copy or cut.</param>
            <param name="targetRanges">The target ranges to paste.</param>
            <param name="isCutting">if set to <c>true</c> the action is a cut; otherwise, copy.</param>
            <param name="clipboardText">The Clipboard text.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ClipboardPasteExtent.ClipboardText">
            <summary>
            Gets the text on the Clipboard.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ClipboardPasteExtent.IsCutting">
            <summary>
            Gets a value that indicates whether the operation is a Clipboard cut.
            </summary>
            <value>
            <c>true</c> if a cut; otherwise, copy.
            </value>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ClipboardPasteExtent.SourceRange">
            <summary>
            Gets the Clipboard paste source range.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ClipboardPasteExtent.TargetRanges">
            <summary>
            Gets the Clipboard paste target ranges.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ClipboardPasteFloatingObjectUndoAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteFloatingObjectUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.Data.FloatingObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction" /> class.
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="sourceFloatingObjects">The floating objects.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteFloatingObjectUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteFloatingObjectUndoAction.Execute(System.Object)">
            <summary>
            Defines the method to be called when the action is invoked.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteFloatingObjectUndoAction.SaveState">
            <summary>
            Saves the state for undoing the command or operation.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteFloatingObjectUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteFloatingObjectUndoAction.Undo(System.Object)">
            <summary>
            Undoes the command or operation.
            </summary>
            <param name="parameter">The parameter to undo the command or operation.</param>
            <returns>
            <c>true</c> if an undo operation on the command or operation succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ClipboardPasteFloatingObjectUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the command or operation can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ClipboardPasteUndoAction">
            <summary>
            Represents the Clipboard paste undo action for pasting on the sheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.ClipboardPasteExtent,Dt.Cells.Data.ClipboardPasteOptions)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.ClipboardPasteUndoAction.ClipboardPasteRangeUndoAction" /> class.
            </summary>
            <param name="srcSheet">The source worksheet of the copy or cut.</param>
            <param name="destSheet">The target sheet of the paste.</param>
            <param name="pasteExtent">The paste extent information.</param>
            <param name="option">The Clipboard pasting option that indicates which content to paste.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteUndoAction.CanExecute(System.Object)">
            <summary>
            Determines whether this instance can execute the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns>
            <c>true</c> if this instance can execute the specified sender; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteUndoAction.Execute(System.Object)">
            <summary>
            Executes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ClipboardPasteUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns></returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ClipboardPasteUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnAutoFitExtent">
            <summary>
            Represents the column automatic fit extent that supports the column automatic fit undo action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnAutoFitExtent.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="column">The column index.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnAutoFitExtent.Column">
            <summary>
            Gets the automatic fit column index.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnAutoFitUndoAction">
            <summary>
            Represents the undo actions for automatic fit of a column on a sheet. 
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnAutoFitUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.ColumnAutoFitExtent[],System.Boolean)">
            <summary>
            Creates a new undo action for column automatic fit.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="columns">The resized columns.</param>
            <param name="rowHeader">Whether the resized column is in the row header area.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnAutoFitUndoAction.CanExecute(System.Object)">
            <summary>
            Defines whether the column automatic fit action can execute.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if the action can execute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnAutoFitUndoAction.Execute(System.Object)">
            <summary>
            Performs the column automatic fit action.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnAutoFitUndoAction.SaveState">
            <summary>
            Saves undo information.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnAutoFitUndoAction.ToString">
            <summary>
            Returns a string that represents this object.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnAutoFitUndoAction.Undo(System.Object)">
            <summary>
            Undoes the column automatic fit action.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnAutoFitUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnGroupExpandExtent">
            <summary>
            Represents a column range group expand action extent that supports expanding or collapsing a column range group.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupExpandExtent.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.ColumnGroupExpandExtent" /> class.
            </summary>
            <param name="summaryIndex">The column range group summary index.</param>
            <param name="level">The column range group level.</param>
            <param name="viewportIndex">The column group viewport index.</param>
            <param name="isCollapsed">The group state, if set to <c>true</c> is collapsed; otherwise, expanded.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnGroupExpandExtent.Collapsed">
            <summary>
            Gets a value that indicates whether the column range group is collapsed.
            </summary>
            <value>
            <c>true</c> if collapsed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnGroupExpandExtent.Index">
            <summary>
            Gets the column range group summary index.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnGroupExpandExtent.Level">
            <summary>
            Gets the column range group level.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnGroupExpandExtent.ViewportIndex">
            <summary>
            Gets the index of the column range group viewport.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnGroupExpandUndoAction">
            <summary>
            Represents an undo action to expand or collapse a column range group.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupExpandUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.ColumnGroupExpandExtent)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.ColumnGroupExpandUndoAction" /> class.
            </summary>
            <param name="sheet">The worksheet.</param>
            <param name="columnExpandExtent">The column expand extent information.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupExpandUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed in, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupExpandUndoAction.Execute(System.Object)">
            <summary>
            Executes the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupExpandUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupExpandUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupExpandUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if the undo is successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnGroupExpandUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the command or operation can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnGroupExtent">
            <summary>
            Represents a column range group extent that supports a column range group undo action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupExtent.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.ColumnGroupExtent" /> class.
            </summary>
            <param name="index">The group starting index.</param>
            <param name="count">The number of columns to group.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnGroupExtent.Count">
            <summary>
            Gets the number of columns to group.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnGroupExtent.Index">
            <summary>
            Gets the group starting index.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandExtent">
            <summary>
            Represents a column range group expand action extent that supports expanding or collapsing column range groups on the same level.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandExtent.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandExtent" /> class.
            </summary>
            <param name="level">The column range group level.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandExtent.Level">
            <summary>
            Gets the column range group level.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandUndoAction">
            <summary>
            Represents a column range group action used to expand or collapse column range groups on the same level.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.ColumnGroupHeaderExpandExtent)">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandUndoAction" /> class.
            </summary>
            <param name="sheet">The worksheet.</param>
            <param name="columnGroupHeaderExpandExtent">The column group header expand extent information.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed in, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandUndoAction.Execute(System.Object)">
            <summary>
            Executes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if undo is successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnGroupHeaderExpandUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnGroupUndoAction">
            <summary>
            Represents the undo action for column range grouping on a sheet. 
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.ColumnGroupExtent)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.ColumnGroupUndoAction" /> class.
            </summary>
            <param name="sheet">The worksheet.</param>
            <param name="columnGroupExtent">The column group extent information.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Object on which the action occurred.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupUndoAction.Execute(System.Object)">
            <summary>
            Executes the column group action.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupUndoAction.SaveState">
            <summary>
            Saves the state used to undo an action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnGroupUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if undo is successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnGroupUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnResizeExtent">
            <summary>
            Represents a column resize extent that supports the column resize undo action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnResizeExtent.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new ColumnResizeExtent object.
            </summary>
            <param name="firstColumn">First column of the contiguous selection.</param>
            <param name="lastColumn">Last column of the contiguous selection.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnResizeExtent.FirstColumn">
            <summary>
            Gets the index of the first column in the contiguous selection.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnResizeExtent.LastColumn">
            <summary>
            Gets the index of the last column in the contiguous selection.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnResizeUndoAction">
            <summary>
            Represents the undo actions for resizing a column on a sheet. 
            </summary>
        </member>
        <member name="F:Dt.Cells.UndoRedo.ColumnResizeUndoAction.columns">
            <summary>
            Specifies the extent of the column width change.
            </summary>
        </member>
        <member name="F:Dt.Cells.UndoRedo.ColumnResizeUndoAction.oldsizes">
            <summary>
            Specifies the old sizes.
            </summary>
        </member>
        <member name="F:Dt.Cells.UndoRedo.ColumnResizeUndoAction.oldVisibles">
            <summary>
            Specifies the old visible items.
            </summary>
        </member>
        <member name="F:Dt.Cells.UndoRedo.ColumnResizeUndoAction.rowHeader">
            <summary>
            Specifies whether the row header is involved.
            </summary>
        </member>
        <member name="F:Dt.Cells.UndoRedo.ColumnResizeUndoAction.sheet">
            <summary>
            Specifies the sheet that contains a resized column.
            </summary>
        </member>
        <member name="F:Dt.Cells.UndoRedo.ColumnResizeUndoAction.size">
            <summary>
            Specifies the size.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnResizeUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.ColumnResizeExtent[],System.Double,System.Boolean)">
            <summary>
            Creates a new undo action for column resizing.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="columns">The resize columns.</param>
            <param name="size">The resized size.</param>
            <param name="rowHeader">Whether the column being resized is in the row header area.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnResizeUndoAction.CanExecute(System.Object)">
            <summary>
            Define whether the column resize action can execute.
            </summary>
            <param name="parameter">Object on which the action occurred.</param>
            <returns><c>true</c> if the action can execute; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnResizeUndoAction.Execute(System.Object)">
            <summary>
            Performs the column resize action.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnResizeUndoAction.SaveState">
            <summary>
            Saves undo information.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnResizeUndoAction.ToString">
            <summary>
            Returns a string that represents this object.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnResizeUndoAction.Undo(System.Object)">
            <summary>
            Undoes the column resizing action.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnResizeUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnUngroupExtent">
            <summary>
            Represents a column range group ungroup extent that supports the column range group ungroup undo action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnUngroupExtent.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.ColumnUngroupExtent" /> class.
            </summary>
            <param name="index">The group starting index.</param>
            <param name="count">The number of columns to remove.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnUngroupExtent.Count">
            <summary>
            Gets the number of columns to remove.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnUngroupExtent.Index">
            <summary>
            Gets the group starting index.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ColumnUngroupUndoAction">
            <summary>
            Represents the undo action for ungrouping a column range group on a sheet. 
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnUngroupUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.ColumnUngroupExtent)">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.ColumnUngroupUndoAction" /> class.
            </summary>
            <param name="sheet">The worksheet.</param>
            <param name="columnGroupExtent">The column ungroup extent information.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnUngroupUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Object on which the action occurred.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnUngroupUndoAction.Execute(System.Object)">
            <summary>
            Executes the ungroup action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnUngroupUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnUngroupUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ColumnUngroupUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if undo is successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ColumnUngroupUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.DataValidationResult">
            <summary>
            Represents a data validation result when a cell sets a data validator object.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.DeleteFloatingObjectUndoAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DeleteFloatingObjectUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.FloatingObjectExtent)">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction" /> class.
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DeleteFloatingObjectUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DeleteFloatingObjectUndoAction.Execute(System.Object)">
            <summary>
            Defines the method to be called when the action is invoked.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DeleteFloatingObjectUndoAction.SaveState">
            <summary>
            Saves the state for undoing the command or operation.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DeleteFloatingObjectUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DeleteFloatingObjectUndoAction.Undo(System.Object)">
            <summary>
            Undoes the command or operation.
            </summary>
            <param name="parameter">The parameter to undo the command or operation.</param>
            <returns>
            <c>true</c> if an undo operation on the command or operation succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DeleteFloatingObjectUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the command or operation can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.DragDropExtent">
            <summary>
            Represents a drag drop action extent that supports drag and drop on the sheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragDropExtent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.DragDropExtent" /> class.
            </summary>
            <param name="fromRow">The from row index.</param>
            <param name="fromColumn">The from column index.</param>
            <param name="toRow">The to row index.</param>
            <param name="toColumn">The to column index.</param>
            <param name="rowCount">The drag drop row count.</param>
            <param name="columnCount">The drag drop column count.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragDropExtent.ColumnCount">
            <summary>
            Gets the column count for the drag drop.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragDropExtent.FromColumn">
            <summary>
            Gets the from column index for the drag drop.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragDropExtent.FromRow">
            <summary>
            Gets the from row index for the drag drop.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragDropExtent.RowCount">
            <summary>
            Gets the row count for the drag drop.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragDropExtent.ToColumn">
            <summary>
            Gets the to column index for the drag drop.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragDropExtent.ToRow">
            <summary>
            Gets the to row index for the drag drop.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.DragDropUndoAction">
            <summary>
            Represents a drag drop undo action used to drag a range date and drop it to another range on the sheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragDropUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.DragDropExtent,System.Boolean,System.Boolean,Dt.Cells.Data.CopyToOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.DragDropUndoAction" /> class.
            </summary>
            <param name="sheet">The worksheet to drag and drop.</param>
            <param name="dragMoveExtent">The drag drop extent information.</param>
            <param name="copy">if set to <c>true</c> copy; otherwise, <c>false</c>.</param>
            <param name="insert">if set to <c>true</c> inserts the drag data in the drop row or column.</param>
            <param name="option">The <see cref="T:GrapeCity.Windows.SpreadSheet.Data.CopyToOption" /> indicates the content type to drag and drop.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragDropUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed in, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragDropUndoAction.Execute(System.Object)">
            <summary>
            Executes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragDropUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragDropUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragDropUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action of the saved information.
            </summary>
            <param name="parameter">The parameter to undo the action on. </param>
            <returns>
            <c>true</c> if the undo action succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragDropUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragDropUndoAction.DragDropExtent">
            <summary>
            Gets the drag drop extent for DragDropUndoAction.
            </summary>
            <value>
            The drag drop extent.
            </value>
        </member>
        <member name="T:Dt.Cells.UndoRedo.DragFillExtent">
            <summary>
            Represents a drag fill action extent to support dragging and filling a range on the sheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFillExtent.#ctor(Dt.Cells.Data.CellRange,Dt.Cells.Data.CellRange,Dt.Cells.Data.AutoFillType,Dt.Cells.Data.FillDirection)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.DragFillExtent" /> class.
            </summary>
            <param name="startRange">The drag fill start range.</param>
            <param name="fillRange">The drag fill end range.</param>
            <param name="autoFillType">The <see cref="T:GrapeCity.Windows.SpreadSheet.UI.AutoFillType" /> indicates the fill type.</param>
            <param name="fillDirection">The drag fill direction.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragFillExtent.AutoFillType">
            <summary>
            Gets the type of the drag fill.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragFillExtent.FillDirection">
            <summary>
            Gets the drag fill direction.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragFillExtent.FillRange">
            <summary>
            Gets the drag fill end range.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragFillExtent.StartRange">
            <summary>
            Gets the drag fill start range.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.DragFillUndoAction">
            <summary>
            Represents a drag fill action to drag and fill a range on the worksheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFillUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.DragFillExtent)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.DragFillUndoAction" /> class.
            </summary>
            <param name="workSheet">The drag fill worksheet.</param>
            <param name="dragFillExtent">The drag fill extent information.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFillUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFillUndoAction.Execute(System.Object)">
            <summary>
            Executes the drag fill action on the worksheet.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFillUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action before executing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFillUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFillUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action on the worksheet.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
            <returns>
            <c>true</c> if undoing the action succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragFillUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.DragFloatingObjectUndoAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFloatingObjectUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.MoveFloatingObjectExtent)">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction" /> class.
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFloatingObjectUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFloatingObjectUndoAction.Execute(System.Object)">
            <summary>
            Defines the method to be called when the action is invoked.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFloatingObjectUndoAction.SaveState">
            <summary>
            Saves the state for undoing the command or operation.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFloatingObjectUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.DragFloatingObjectUndoAction.Undo(System.Object)">
            <summary>
            Undoes the command or operation.
            </summary>
            <param name="parameter">The parameter to undo the command or operation.</param>
            <returns>
            <c>true</c> if an undo operation on the command or operation succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.DragFloatingObjectUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the command or operation can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.FloatingObjectExtent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.FloatingObjectExtent.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.FloatingObjectExtent" /> class.
            </summary>
            <param name="names">The names.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.FloatingObjectExtent.Names">
            <summary>
            Gets the names.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="T:Dt.Cells.UndoRedo.MoveFloatingObjectExtent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.MoveFloatingObjectExtent.#ctor(System.String[],System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.MoveFloatingObjectExtent" /> class.
            </summary>
            <param name="names">The names.</param>
            <param name="offsetX">The X offset.</param>
            <param name="offsetY">The Y offset.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.MoveFloatingObjectExtent.Names">
            <summary>
            Gets the names.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="P:Dt.Cells.UndoRedo.MoveFloatingObjectExtent.OffsetX">
            <summary>
            Gets the X offset.
            </summary>
            <value>
            The X offset.
            </value>
        </member>
        <member name="P:Dt.Cells.UndoRedo.MoveFloatingObjectExtent.OffsetY">
            <summary>
            Gets the Y offset.
            </summary>
            <value>
            The Y offset.
            </value>
        </member>
        <member name="T:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.MoveFloatingObjectExtent)">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction" /> class.
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction.Execute(System.Object)">
            <summary>
            Defines the method to be called when the action is invoked.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction.SaveState">
            <summary>
            Saves the state for undoing the command or operation.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction.Undo(System.Object)">
            <summary>
            Undoes the command or operation.
            </summary>
            <param name="parameter">The parameter to undo the command or operation.</param>
            <returns>
            <c>true</c> if an undo operation on the command or operation succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the command or operation can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ResizeFloatingObjectExtent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ResizeFloatingObjectExtent.#ctor(System.String[],Windows.Foundation.Rect[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.MoveFloatingObjectExtent" /> class.
            </summary>
            <param name="names">The names.</param>
            <param name="resizedRects">The resized rectangles.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ResizeFloatingObjectExtent.Names">
            <summary>
            Gets the names.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ResizeFloatingObjectExtent.ResizedRects">
            <summary>
            Gets the resized rectangles.
            </summary>
            <value>
            The resized rectangles.
            </value>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ResizeFloatingObjectUndoAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ResizeFloatingObjectUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.ResizeFloatingObjectExtent)">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.MoveFloatingObjectUndoAction" /> class.
            </summary>
            <param name="worksheet">The worksheet.</param>
            <param name="extent">The extent.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ResizeFloatingObjectUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ResizeFloatingObjectUndoAction.Execute(System.Object)">
            <summary>
            Defines the method to be called when the action is invoked.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ResizeFloatingObjectUndoAction.SaveState">
            <summary>
            Saves the state for undoing the command or operation.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ResizeFloatingObjectUndoAction.Undo(System.Object)">
            <summary>
            Undoes the command or operation.
            </summary>
            <param name="parameter">The parameter to undo the command or operation.</param>
            <returns>
            <c>true</c> if an undo operation on the command or operation succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ResizeFloatingObjectUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the command or operation can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowAutoFitExtent">
            <summary>
            Represents a row automatic fit extent that supports the row automatic fit undo action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowAutoFitExtent.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.RowAutoFitExtent" /> class.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowAutoFitExtent.Row">
            <summary>
            Gets the index of the automatically resized row.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowAutoFitUndoAction">
            <summary>
            Represents the undo actions for an automatically resized row on a sheet. 
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowAutoFitUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.RowAutoFitExtent[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.RowAutoFitUndoAction" /> class.
            </summary>
            <param name="sheet">The sheet.</param>
            <param name="rows">The automatically resized rows.</param>
            <param name="columnHeader">if set to <c>true</c> the row is in the column header.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowAutoFitUndoAction.CanExecute(System.Object)">
            <summary>
            Determines whether this row automatic resize action can execute on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns>
            <c>true</c> if this instance can execute on the specified sender; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowAutoFitUndoAction.Execute(System.Object)">
            <summary>
            Executes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowAutoFitUndoAction.SaveState">
            <summary>
            Saves the undo information.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowAutoFitUndoAction.ToString">
            <summary>
            Returns a string that represents this object.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowAutoFitUndoAction.Undo(System.Object)">
            <summary>
            Undoes the row automatic fit action.
            </summary>
            <param name="sender">Object on which the action occurs.</param>
            <returns><c>true</c> if the undo is a success; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowAutoFitUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowGroupExpandExtent">
            <summary>
            Represents a row range group expand action extent that supports expanding or collapsing the row range group.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupExpandExtent.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.RowGroupExpandExtent" /> class.
            </summary>
            <param name="summaryIndex">The row range group summary index.</param>
            <param name="level">The row range group level.</param>
            <param name="viewportIndex">The row range group viewport index.</param>
            <param name="isCollapsed">The group state is <c>true</c> if collapsed; otherwise, expanded.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowGroupExpandExtent.Collapsed">
            <summary>
            Gets a value that indicates whether the row range group is collapsed.
            </summary>
            <value>
            <c>true</c> if collapsed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowGroupExpandExtent.Index">
            <summary>
            Gets the row range group summary index.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowGroupExpandExtent.Level">
            <summary>
            Gets the row range group level.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowGroupExpandExtent.ViewportIndex">
            <summary>
            Gets the row range group viewport index.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowGroupExpandUndoAction">
            <summary>
            Represents an undo action to expand or collapse a row range group.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupExpandUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.RowGroupExpandExtent)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.RowGroupExpandUndoAction" /> class.
            </summary>
            <param name="sheet">The worksheet.</param>
            <param name="rowExpandExtent">The row expand extent information.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupExpandUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed in, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupExpandUndoAction.Execute(System.Object)">
            <summary>
            Executes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupExpandUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupExpandUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupExpandUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if undo is successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowGroupExpandUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowGroupExtent">
            <summary>
            Represents a row range group extent that supports the row range group undo action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupExtent.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.RowGroupExtent" /> class.
            </summary>
            <param name="index">The group starting index.</param>
            <param name="count">The number of rows to group.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowGroupExtent.Count">
            <summary>
            Gets the number of rows to group.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowGroupExtent.Index">
            <summary>
            Gets the group starting index.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowGroupHeaderExpandExtent">
            <summary>
            Represents a row range group expand action extent that supports expanding or collapsing row range groups on the same level.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupHeaderExpandExtent.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.RowGroupHeaderExpandExtent" /> class.
            </summary>
            <param name="level">The row range groups' level.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowGroupHeaderExpandExtent.Level">
            <summary>
            Gets the row range group level.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowGroupHeaderExpandUndoAction">
            <summary>
            Represents a row range group action used to expand or collapse row range groups on the same level.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupHeaderExpandUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.RowGroupHeaderExpandExtent)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.RowGroupHeaderExpandUndoAction" /> class.
            </summary>
            <param name="sheet">The worksheet.</param>
            <param name="rowGroupHeaderExpandExtent">The row group header expand extent information.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupHeaderExpandUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed in, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupHeaderExpandUndoAction.Execute(System.Object)">
            <summary>
            Executes the command on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupHeaderExpandUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupHeaderExpandUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupHeaderExpandUndoAction.Undo(System.Object)">
            <summary>
            Undoes the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if undo is successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowGroupHeaderExpandUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowGroupUndoAction">
            <summary>
            Represents the undo action for grouping a row range group on a sheet. 
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.RowGroupExtent)">
            <summary>
            Initializes a new instance of the <see cref="T:Dt.Cells.UndoRedo.RowGroupUndoAction" /> class.
            </summary>
            <param name="sheet">The worksheet.</param>
            <param name="rowGroupExtent">The row group extent information.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Object on which the action occurred.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupUndoAction.Execute(System.Object)">
            <summary>
            Executes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowGroupUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if undo is successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowGroupUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowResizeExtent">
            <summary>
            Represents the row resize extent that supports the row resize undo action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowResizeExtent.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new RowResizeExtent object.
            </summary>
            <param name="firstRow">First row of the contiguous selection.</param>
            <param name="lastRow">Last row of the contiguous selection.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowResizeExtent.FirstRow">
            <summary>
            Gets the index of the first row in the contiguous selection.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowResizeExtent.LastRow">
            <summary>
            Gets the index of the last row in the contiguous selection.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowResizeUndoAction">
            <summary>
            Represents the undo actions for resizing a row on a sheet. 
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowResizeUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.RowResizeExtent[],System.Double,System.Boolean)">
            <summary>
            Creates a new undo action for row resizing.
            </summary>
            <param name="sheetView">The sheet.</param>
            <param name="rows">The resize rows.</param>
            <param name="size">The resize size.</param>
            <param name="columnHeader">Whether the row being resized is in the column header area.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowResizeUndoAction.CanExecute(System.Object)">
            <summary>
            Defines whether the row resize action can execute.
            </summary>
            <param name="parameter">Object on which the action occurred.</param>
            <returns><c>true</c> if can execute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowResizeUndoAction.Execute(System.Object)">
            <summary>
            Performs the row resize action.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowResizeUndoAction.SaveState">
            <summary>
            Saves undo information.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowResizeUndoAction.ToString">
            <summary>
            Returns a string that represents this object.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowResizeUndoAction.Undo(System.Object)">
            <summary>
            Undoes the row resizing action.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowResizeUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowUngroupExtent">
            <summary>
            Represents a row ungroup extent for a row range group that supports the undo action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowUngroupExtent.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.RowUngroupExtent" /> class.
            </summary>
            <param name="index">The group starting index.</param>
            <param name="count">The number of rows to remove.</param>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowUngroupExtent.Count">
            <summary>
            Gets the number of rows to remove.
            </summary>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowUngroupExtent.Index">
            <summary>
            Gets the group starting index.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.RowUngroupUndoAction">
            <summary>
            Represents the undo action for ungrouping row range groups on a sheet. 
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowUngroupUndoAction.#ctor(Dt.Cells.Data.Worksheet,Dt.Cells.UndoRedo.RowUngroupExtent)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.RowUngroupUndoAction" /> class.
            </summary>
            <param name="sheet">The worksheet.</param>
            <param name="rowUngroupExtent">The row ungroup extent information.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowUngroupUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowUngroupUndoAction.Execute(System.Object)">
            <summary>
            Executes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowUngroupUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowUngroupUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.RowUngroupUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action on the specified sender.
            </summary>
            <param name="sender">Object on which the action occurred.</param>
            <returns><c>true</c> if undo is successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.RowUngroupUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.SetArrayFormulaUndoAction">
            <summary>
            Represents setting an array formula action on the worksheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SetArrayFormulaUndoAction.#ctor(Dt.Cells.Data.Worksheet,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.DragFillUndoAction" /> class.
            </summary>
            <param name="workSheet">The drag fill worksheet.</param>
            <param name="formula">The drag fill worksheet.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SetArrayFormulaUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SetArrayFormulaUndoAction.Execute(System.Object)">
            <summary>
            Executes the drag fill action on the worksheet.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SetArrayFormulaUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action before executing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SetArrayFormulaUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SetArrayFormulaUndoAction.Undo(System.Object)">
            <summary>
            Undoes the action on the worksheet.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
            <returns>
            <c>true</c> if undoing the action succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.SetArrayFormulaUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.SheetRenameUndoAction">
            <summary>
            Represents a rename sheet name undo action on the sheet.
            </summary>
        </member>
        <member name="F:Dt.Cells.UndoRedo.SheetRenameUndoAction.newName">
            <summary>
            The new name of the renamed worksheet.
            </summary>
        </member>
        <member name="F:Dt.Cells.UndoRedo.SheetRenameUndoAction.oldName">
            <summary>
            The previous name of the worksheet.
            </summary>
        </member>
        <member name="F:Dt.Cells.UndoRedo.SheetRenameUndoAction.worksheet">
            <summary>
            The renamed worksheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SheetRenameUndoAction.#ctor(Dt.Cells.Data.Worksheet,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.SheetRenameUndoAction" /> class.
            </summary>
            <param name="sheet">The renamed worksheet.</param>
            <param name="newName">The worksheet's new name.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SheetRenameUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can execute in its current state.
            </summary>
            <param name="parameter">Data used by the action. If the action does not require data to be passed in, this object can be set to null.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SheetRenameUndoAction.Execute(System.Object)">
            <summary>
            Defines the method to be called when the action is invoked.
            </summary>
            <param name="parameter">Object on which the action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SheetRenameUndoAction.SaveState">
            <summary>
            Saves the state for the undo action before executing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SheetRenameUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.SheetRenameUndoAction.Undo(System.Object)">
            <summary>
            Undoes the command or operation.
            </summary>
            <param name="parameter">The action to undo the action on.</param>
            <returns>
            <c>true</c> if undoing the action succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.SheetRenameUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.UndoRedo.ZoomUndoAction">
            <summary>
            Represents a zoom undo action on the sheet.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ZoomUndoAction.#ctor(Dt.Cells.Data.Worksheet,System.Single)">
            <summary>
            Creates a new instance of the <see cref="T:Dt.Cells.UndoRedo.ZoomUndoAction" /> class.
            </summary>
            <param name="sheet">The zoomed worksheet.</param>
            <param name="newZoomFactor">The new zoom factor on the worksheet.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ZoomUndoAction.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the action can be executed in its current state.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
            <returns>
            <c>true</c> if this action can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ZoomUndoAction.Execute(System.Object)">
            <summary>
            Executes the zoom action on the worksheet.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ZoomUndoAction.SaveState">
            <summary>
            Saves the state for undoing the action before executing the action.
            </summary>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ZoomUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Dt.Cells.UndoRedo.ZoomUndoAction.Undo(System.Object)">
            <summary>
            Undoes the zoom action on the worksheet.
            </summary>
            <param name="parameter">Object on which the undo action occurred.</param>
            <returns>
            <c>true</c> if undoing the action succeeds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Dt.Cells.UndoRedo.ZoomUndoAction.CanUndo">
            <summary>
            Gets a value that indicates whether the action can be undone.
            </summary>
        </member>
        <member name="T:Dt.Cells.GlobalStaticResources">
            <summary>
            Contains all the static resources defined for the application
            </summary>
        </member>
        <member name="T:Dt.Base.Excel">
            <summary>
            Represents the GcSpreadSheet worksheet viewer used to present and handle worksheet operations.
            </summary>
            <summary>
            Represents a Excel control.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.CellClick">
            <summary>
            Occurs when the user presses down the left mouse button in a cell. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.CellDoubleClick">
            <summary>
            Occurs when the user presses down the left mouse button twice (double-clicks) in a cell. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.CellTextRendering">
            <summary>
            Occurs when [cell text rendering].
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.CellValueApplying">
            <summary>
            Occurs when [cell value applying].
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ClipboardChanged">
            <summary>
            Occurs when a Clipboard change occurs that affects GcSpreadSheet.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ClipboardChanging">
            <summary>
            Occurs when the Clipboard is changing due to a GcSpreadSheet action.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ClipboardPasted">
            <summary>
            Occurs when the user has pasted from the Clipboard.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ClipboardPasting">
            <summary>
            Occurs when the user pastes from the Clipboard.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ColumnWidthChanged">
            <summary>
            Occurs when the column width has changed.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ColumnWidthChanging">
            <summary>
            Occurs when the column width is changing.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.DragDropBlock">
            <summary>
            Occurs when the user drags and drops a range of cells.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.DragDropBlockCompleted">
            <summary>
            Occurs at the completion of the user dragging and dropping a range of cells.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.DragFillBlock">
            <summary>
            Occurs when the user drags to fill a range of cells.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.DragFillBlockCompleted">
            <summary>
            Occurs at the completion of the user dragging to fill a range of cells.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.EditChange">
            <summary>
            Occurs when a cell is in edit mode and the text is changed.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.EditEnd">
            <summary>
            Occurs when a cell leaves edit mode.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.EditStarting">
            <summary>
            Occurs when a cell is going in to edit mode.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.EnterCell">
            <summary>
            Occurs when the user enters a cell. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.Error">
            <summary>
            Occurs when the user performs an invalid operation.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.FilterPopupOpening">
            <summary>
            Occurs when [filter popup opening].
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.FloatingObjectPasted">
            <summary>
            Occurs when [floating object pasted].
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.InvalidOperation">
            <summary>
            Occurs when an invalid operation is performed.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.LeaveCell">
            <summary>
            Occurs when the user leaves a cell. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.LeftColumnChanged">
            <summary>
            Occurs when the left column changes.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.RangeFiltered">
            <summary>
            Occurs when a column has just been automatically sorted.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.RangeFiltering">
            <summary>
            Occurs when a column is about to be automatically filtered.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.RangeGroupStateChanged">
            <summary>
            Occurs when the user has changed the state of outline (range group) rows
            or columns.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.RangeGroupStateChanging">
            <summary>
            Occurs before the user changes the state of outline (range group) rows
            or columns.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.RangeSorted">
            <summary>
            Occurs when a column has just been automatically sorted.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.RangeSorting">
            <summary>
            Occurs when a column is about to be automatically sorted.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.RowHeightChanged">
            <summary>
            Occurs when the row height has changed.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.RowHeightChanging">
            <summary>
            Occurs when the row height is changing.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.SelectionChanged">
            <summary>
            Occurs when the selection of cells on the sheet has changed. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.SelectionChanging">
            <summary>
            Occurs when the selection of cells on the sheet is changing.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.SheetTabClick">
            <summary>
            Occurs when the user clicks the sheet tab.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.SheetTabDoubleClick">
            <summary>
            Occurs when the user double-clicks the sheet tab.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.TopRowChanged">
            <summary>
            Occurs when the top row changes.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.TouchToolbarOpening">
            <summary>
            Occurs before GcSpreadSheet show toolstrip menu bar
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.UserFormulaEntered">
            <summary>
            Occurs when the user types a formula.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.UserZooming">
            <summary>
            Occurs when the user zooms.
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ValueChanged">
            <summary>
            Occurs when the value in the subeditor changes. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ActiveSheetChanged">
            <summary>
            Occurs when the user has changed the active sheet. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ActiveSheetChanging">
            <summary>
            Occurs when the user changes the active sheet. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ColumnViewportWidthChanged">
            <summary>
            Occurs when the user has changed a viewport column width. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ColumnViewportWidthChanging">
            <summary>
            Occurs when the user changes a viewport column width. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.RowViewportHeightChanged">
            <summary>
            Occurs when the user has changed a viewport row height. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.RowViewportHeightChanging">
            <summary>
            Occurs when the user changes a viewport row height. 
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ItemStartDrag">
            <summary>
            æ¥è¡¨é¡¹å¼å§ææ¾äºä»¶
            </summary>
        </member>
        <member name="E:Dt.Base.Excel.ItemDropped">
            <summary>
            æ¥è¡¨é¡¹ææ¾ç»æäºä»¶
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.OnItemStartDrag">
            <summary>
            è§¦åæ¥è¡¨é¡¹å¼å§ææ¾äºä»¶
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.OnItemDropped(Dt.Cells.UI.CellEventArgs)">
            <summary>
            è§¦åæ¥è¡¨é¡¹ææ¾ç»æäºä»¶
            </summary>
            <param name="p_args"></param>
        </member>
        <member name="M:Dt.Base.Excel.GetFloatingObjectZIndex(System.String)">
            <summary>
            Gets the index of the floating object Z.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.RaiseError(System.Int32,System.Int32,System.String,System.Exception)">
            <summary>
            Raises the error.
            </summary>
            <param name="row">The row</param>
            <param name="column">The column</param>
            <param name="errorMessage">The error message</param>
            <param name="exception">The exception</param>
            <returns>Return if ignore the error</returns>
        </member>
        <member name="M:Dt.Base.Excel.StartCellEditing(System.Boolean,System.String,Dt.Cells.UI.EditorStatus)">
            <summary>
            Starts to edit the active cell.
            </summary>
            <param name="selectAll">if set to <c>true</c> will select all the text when text changed during editing.</param>
            <param name="defaultText">The default text of editor.</param>
            <param name="status">The status of the editor</param>
        </member>
        <member name="M:Dt.Base.Excel.AsynSetViewportTopRow(System.Int32)">
            <summary>
            Sets the top row index async, for performance optimization 
            </summary>
            <param name="rowViewportIndex"></param>
        </member>
        <member name="P:Dt.Base.Excel.IsWorking">
            <summary>
            æ¯å¦å¼å§æ§è¡æä¸ªæä½ï¼å¦è°æ´è¡é«åå®½ãææ½ãæµ®å¨çªå£ç§»å¨...
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.HideDecorationWhenPrinting">
            <summary>
            è®¾ç½®æå°æ¶éèåé¡µçº¿
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.TrailingFreezeLineStyle">
            <summary>
            Gets or sets a value that indicates the trailing freeze line style.
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.IsColumnSplitting">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.IsRowSplitting">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dt.Base.Excel.ShowDecorationProperty">
            <summary>
            æ¯å¦æ¾ç¤ºä¿®é¥°å±
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.AddSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a cell or cells to the selection.
            </summary>
            <param name="row">The row index of the first cell to add.</param>
            <param name="column">The column index of the first cell to add.</param>
            <param name="rowCount">The number of rows to add.</param>
            <param name="columnCount">The number of columns to add.</param>
        </member>
        <member name="M:Dt.Base.Excel.ExtendSelection(System.Int32,System.Int32)">
            <summary>
            Specifies the last cell in the cell selection. 
            </summary>  
            <param name="row">The row index of the extended selection.</param>
            <param name="column">The column index of the extended selection.</param>
        </member>
        <member name="M:Dt.Base.Excel.SetSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the specified cells.
            </summary>
            <param name="row">The row index of the first cell.</param>
            <param name="column">The column index of the first cell.</param>
            <param name="rowCount">The number of rows in the selection.</param>
            <param name="columnCount">The number of columns in the selection.</param>
        </member>
        <member name="M:Dt.Base.Excel.OpenXmlOnBackground(System.IO.Stream)">
            <summary>
            æ¯Workbookä¸­çxmlå¤åºUIèç¹
            </summary>
            <param name="xmlStream"></param>
        </member>
        <member name="P:Dt.Base.Excel.Workbook">
            <summary>
            Gets the workbook associated with the control. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ActiveSheet">
            <summary>
            Gets the active sheet in the Excel control. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ActiveSheetIndex">
            <summary>
            Gets or sets the index of the active sheet in the Excel control. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.AutoRecalculation">
            <summary>
            Gets or sets whether the formula is automatically calculated. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.AutoRefresh">
             <summary>
            Gets or sets whether the Excel can auto-refresh itself.  
             </summary>
        </member>
        <member name="P:Dt.Base.Excel.CanCellOverflow">
            <summary>
            Gets or sets whether data can overflow into adjacent empty cells in the component. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.CurrentTheme">
            <summary>
            Gets or sets the current theme information for the control.
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.CurrentThemeName">
            <summary>
            Gets or sets the current theme information for the control. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.GridLineColor">
            <summary>
            Gets or sets the gridline color. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets the horizontal scroll bar visibility setting. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.NamedStyles">
            <summary>
            Gets or sets a collection of StyleInfo objects for this sheet. 
            </summary>
            <value>
            The collection of StyleInfo objects for this sheet.
            </value>
        </member>
        <member name="P:Dt.Base.Excel.Protect">
            <summary>
            Gets or sets whether this workbook is protected.  
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.LockCell">
            <summary>
            å¨æ¥è¡¨é¢è§ä¸­å®ç°ååæ ¼ä¸å¯ç¼è¾ä¸å¾è¡¨å¯æå¨
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ReferenceStyle">
            <summary>
            Gets or sets the style for cell and range references in cell formulas on this sheet. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.SheetCount">
            <summary>
            Gets or sets the number of sheets for this control. 
            </summary>
            <value>
            The number of sheets for this control.
            </value>
        </member>
        <member name="P:Dt.Base.Excel.ShowScrollTip">
            <summary>
            Gets or sets how to display the scroll tip. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.StartSheetIndex">
            <summary>
            Gets or sets the index of the start sheet in the Excel control. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.Themes">
             <summary>
            Gets themes for the control.  
             </summary>
        </member>
        <member name="P:Dt.Base.Excel.Sheets">
            <summary>
            Gets or sets the Worksheet collection for the Excel control. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ShowDragDropTip">
            <summary>
            Gets or sets a value that indicates whether to display the drag drop tip. 
            </summary>
            <value>
            true to display the drag drop tip; otherwise, false. 
            </value>
        </member>
        <member name="P:Dt.Base.Excel.ShowDragFillTip">
            <summary>
            Gets or sets a value that indicates whether to show the drag fill tip. 
            </summary>
            <value>
            true to show the drag fill tip; otherwise, false. 
            </value>
        </member>
        <member name="P:Dt.Base.Excel.ShowGridLine">
            <summary>
            Gets or sets whether gridlines are displayed. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ShowResizeTip">
            <summary>
            Gets or sets how to display the resize tip. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.VerticalScrollBarVisibility">
            <summary>
            Gets or sets the vertical scroll bar visibility setting. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.AutoClipboard">
            <summary>
            Gets or sets whether the component handles the shortcut keys for Clipboard actions. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.CanTouchMultiSelect">
            <summary>
            Indicates whether the user can select multiple ranges by touch.
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.CanUserDragDrop">
            <summary>
            Gets or sets whether to allow users to drag and drop a range.
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.CanUserDragFill">
            <summary>
            Gets or sets whether to allow users to drag and fill a range.
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.CanUserEditFormula">
            <summary>
            Gets or sets whether to allow the user to enter formulas in a cell in the component.
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.CanUserUndo">
            <summary>
            Gets or sets whether to allow the user to undo edit operations.
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.CanUserZoom">
            <summary>
            Gets or sets whether the user can scale the display of the component using the Ctrl key and the mouse wheel. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ClipBoardOptions">
            <summary>
            Gets or sets whether the component handles the shortcut keys for Clipboard actions. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ColumnSplitBoxAlignment">
            <summary>
            Gets or sets the column split box alignment. 
            </summary>
            <value>
            The column split box alignment. 
            </value>
        </member>
        <member name="P:Dt.Base.Excel.ColumnSplitBoxPolicy">
            <summary>
            Gets or sets what conditions under which the GcSpreadSheet component permits column splits. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.HorizontalScrollBarHeight">
            <summary>
            Gets or sets the height of the horizontal scroll bar. 
            </summary>
            <value>
            The height of the horizontal scroll bar. 
            </value>
        </member>
        <member name="P:Dt.Base.Excel.EditorInfo">
            <summary>
            Gets the information of the editor when the sheetview enters the formula selection mode.
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.DefaultAutoFillType">
            <summary>
            Gets or sets the default type of the automatic fill.
            </summary>
            <value>
            The default type of the automatic fill.
            </value>
        </member>
        <member name="P:Dt.Base.Excel.DocumentUri">
            <summary>
            Gets or sets the document uri of the sheet. 
            </summary>
            <value>
            The document uri of the sheet.
            </value>
        </member>
        <member name="P:Dt.Base.Excel.HorizontalScrollBarStyle">
            <summary>
            Gets or sets the horizontal scroll bar style. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.InputDeviceType">
            <summary>
            Returns the last input device type.
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.RangeGroupBackground">
            <summary>
            Gets or sets the backgroud of the range group
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.RangeGroupBorderBrush">
            <summary>
            Gets or sets the brush of the border of the range group 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.RangeGroupLineStroke">
            <summary>
            Gets or sets the stroke of the group line 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ResizeZeroIndicator">
             <summary>
            Specifies the drawing policy when the row or column is resized to zero.  
             </summary>
        </member>
        <member name="P:Dt.Base.Excel.RowSplitBoxAlignment">
            <summary>
            Gets or sets the row split box alignment. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.RowSplitBoxPolicy">
            <summary>
            Gets or sets under which conditions the Excel component permits row splits. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ScrollBarTrackPolicy">
            <summary>
            Gets or sets whether the sheet in the control scrolls when the user moves the scroll box. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ShowColumnRangeGroup">
            <summary>
            Gets or sets whether the column range group is visible. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ShowFreezeLine">
            <summary>
            Gets or sets a value that indicates whether to show freeze lines. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ShowRowRangeGroup">
            <summary>
            Gets or sets whether the row range group is visible. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.TabStripEditable">
            <summary>
            Gets or sets whether the tab strip is editable. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.TabStripInsertTab">
            <summary>
            Gets or sets whether a special tab is displayed that allows inserting new sheets. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.TabStripVisibility">
            <summary>
            Gets or sets the display policy for the sheet tab strip for this component. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.UndoManager">
            <summary>
            Gets the undo manager for the control.
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.VerticalScrollBarStyle">
            <summary>
            Gets or sets the vertical scroll bar style.
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.VerticalScrollBarWidth">
            <summary>
            Gets or sets the width of vertical scroll bars in this control. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.HorizontalScrollable">
            <summary>
            Gets or sets a value that indicates whether the horizontal scroll bar is scrollable.
            </summary>
            <value>
            <c>true</c> if the horizontal scroll bar is scrollable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Base.Excel.VerticalScrollable">
            <summary>
            Gets or sets a value that indicates whether the vertical scroll bar is scrollable.
            </summary>
            <value>
            <c>true</c> if the vertical scroll bar is scrollable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Dt.Base.Excel.CanEditOverflow">
            <summary>
            Gets or sets whether data can overflow into adjacent empty cells in the component while the cell is in edit mode. 
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ZoomFactor">
            <summary>
            Gets or sets the scaling factor for displaying this sheet.
            </summary>
            <value>The scaling factor for displaying this sheet.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Specified scaling amount is out of range; must be between 0.5 (50%) and 4.0 (400%).
            </exception>
        </member>
        <member name="P:Dt.Base.Excel.ShowSelection">
            <summary>
            è·åè®¾ç½®æ¯å¦æ¾ç¤ºéæ©åºåï¼é»è®¤true
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.ShowDecoration">
            <summary>
            è·åè®¾ç½®æ¯å¦æ¾ç¤ºä¿®é¥°å±
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.PaperSize">
            <summary>
            è·åè®¾ç½®é¡µé¢å¤§å°ï¼ä¿®é¥°å±ç»çº¿ç¨
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.DecorationRange">
            <summary>
            è·åè®¾ç½®ä¿®é¥°åºå
            </summary>
        </member>
        <member name="P:Dt.Base.Excel.IsBusy">
            <summary>
            è·åè®¾ç½®æ¯å¦å¿ç¶æ
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.OpenExcel(System.IO.Stream,Dt.Cells.Data.ExcelOpenFlags)">
            <summary>
            Opens an Excel Compound Document File and loads it into Sheet. 
            </summary>
            <param name="stream">The file stream.</param>
            <param name="openFlags">The flag used to open the file.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.SaveExcel(System.IO.Stream,Dt.Cells.Data.ExcelFileFormat,Dt.Cells.Data.ExcelSaveFlags)">
            <summary>
            Saves Sheet to an Excel Compound Document File. 
            </summary>
            <param name="stream">The stream to save to.</param>
            <param name="format">The file format.</param>
            <param name="saveFlags">Options for saving to a file.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.OpenXml(System.IO.Stream)">
            <summary>
            Loads the data on the sheet from the specified XML stream. 
            </summary>
            <param name="xmlStream">The XML stream.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.SaveXmlAsync(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the data on the sheet to the specified XML stream asynchronously. 
            </summary>
            <param name="xmlStream">The XML stream.</param>
            <param name="dataOnly">Whether to save data only.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.SavePdf(System.IO.Stream,System.Int32[],Dt.Cells.Data.PdfExportSettings)">
            <summary>
            Saves the content of the component to the specified stream asynchronously. 
            </summary>
            <param name="stream">Stream to which to save the data.</param>
            <param name="sheetIndexes">The sheet indexes.</param>
            <param name="settings">The export settings.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.OpenCSV(System.Int32,System.IO.Stream,Dt.Cells.Data.TextFileOpenFlags)">
            <summary>
            Loads the CSV (comma-separated values) file asynchronously. 
            </summary>
            <param name="sheetIndex">The destination sheet index for loading.</param>
            <param name="stream">Stream from which to load.</param>
            <param name="flags">The import flags.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.SaveCSV(System.Int32,System.IO.Stream,Dt.Cells.Data.TextFileSaveFlags)">
            <summary>
            Saves the CSV (comma-separated values) file asynchronously. 
            </summary>
            <param name="sheetIndex">The destination sheet index for saving.</param>
            <param name="stream">Stream to which to save the content.</param>
            <param name="flags">The export flags.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.OpenTextFile(System.Int32,System.IO.Stream,Dt.Cells.Data.TextFileOpenFlags,System.String,System.String,System.String)">
            <summary>
            Loads the CSV file with the specified separator asynchronously. 
            </summary>
            <param name="sheetIndex">The destination sheet index for loading.</param>
            <param name="stream">Stream from which to load.</param>
            <param name="flags">The import flags.</param>
            <param name="rowDelimiter">Row delimiter string.</param>
            <param name="columnDelimiter">Column delimiter string.</param>
            <param name="cellDelimiter">Cell delimiter string.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.SaveTextFileRangeAsync(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IO.Stream,Dt.Cells.Data.TextFileSaveFlags,System.String,System.String,System.String)">
            <summary>
            Saves the range of cells in the specified sheet as delimited text with the specified delimiters, to a stream asynchronously. 
            </summary>
            <param name="sheetIndex">The destination sheet index to save to.</param>
            <param name="row">Starting row index.</param>
            <param name="column">Starting column index.</param>
            <param name="rowCount">The number of rows.</param>
            <param name="columnCount">The number of columns.</param>
            <param name="stream">Stream to which to save the text range.</param>
            <param name="flags">The export flags.</param>
            <param name="rowDelimiter">Row delimiter string.</param>
            <param name="columnDelimiter">Column delimiter string.</param>
            <param name="cellDelimiter">Cell delimiter string.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.Defer">
            <summary>
            å»¶è¿éç»
            </summary>
            <returns></returns>
            <example>
            <code>
            using (_excel.Defer())
            {
                _excel.Sheets.AddTable("sampleTable1", 22, 5, 10, 5, TableStyles.Medium3);
            }
            </code>
            </example>
        </member>
        <member name="M:Dt.Base.Excel.RefreshAll">
            <summary>
            å·æ°æ´ä¸ªå¯è§åºåï¼å¨é¨éæ°æµéå¸å±
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.RefreshCharts">
            <summary>
            Invalidates the charts.
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.RefreshCharts(Dt.Cells.Data.SpreadChart[])">
            <summary>
            Invalidates the charts.
            </summary>
            <param name="charts">The charts.</param>
        </member>
        <member name="M:Dt.Base.Excel.RefreshRange(System.Int32,System.Int32,System.Int32,System.Int32,Dt.Cells.Data.SheetArea)">
            <summary>
            Invalidates a range state in the control; the range layout and data is updated after the invalidation.
            </summary>
            <param name="row">The start row index.</param>
            <param name="column">The start column index.</param>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
            <param name="sheetArea">The invalidated sheet area.</param>
        </member>
        <member name="M:Dt.Base.Excel.RefreshRows(System.Int32,System.Int32,Dt.Cells.Data.SheetArea)">
            <summary>
            Invalidates the row state in the control. After the invalidation, the row layout and data are updated. 
            </summary>
            <param name="row">The start row index.</param>
            <param name="rowCount">The row count.</param>
            <param name="sheetArea">The invalid sheet area.</param>
        </member>
        <member name="M:Dt.Base.Excel.RefreshColumns(System.Int32,System.Int32,Dt.Cells.Data.SheetArea)">
            <summary>
            Invalidates the column state in the control. After the invalidation, the column layout and data are updated. 
            </summary>
            <param name="column">The start column index.</param>
            <param name="columnCount">The column count.</param>
            <param name="sheetArea">The invalid sheet area</param>
        </member>
        <member name="M:Dt.Base.Excel.RefreshCustomFloatingObjects">
            <summary>
            Invalidates the custom floating objects.
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.RefreshCustomFloatingObjects(Dt.Cells.UI.CustomFloatingObject[])">
            <summary>
            Invalidates the custom floating objects.
            </summary>
            <param name="floatingObjects">The floating objects.</param>
        </member>
        <member name="M:Dt.Base.Excel.RefreshFloatingObjects">
            <summary>
            Invalidates the charts.
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.RefreshFloatingObjects(Dt.Cells.Data.FloatingObject[])">
            <summary>
            Invalidates the floating object.
            </summary>
            <param name="floatingObjects">The floating objects.</param>
        </member>
        <member name="M:Dt.Base.Excel.RefreshPictures">
            <summary>
            Invalidates the pictures.
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.RefreshPictures(Dt.Cells.Data.Picture[])">
            <summary>
            Invalidates the pictures.
            </summary>
            <param name="pictures">The pictures.</param>
        </member>
        <member name="M:Dt.Base.Excel.AddColumnViewport(System.Int32,System.Double)">
            <summary>
            Adds a new column viewport to the control. 
            </summary>
            <param name="columnViewportIndex">The column viewport index to add.</param>
            <param name="viewportWidth">The column viewport width.</param>
        </member>
        <member name="M:Dt.Base.Excel.AddCustomFunction(Dt.CalcEngine.Functions.CalcFunction)">
            <summary>
            Adds a custom function to the workbook. 
            </summary>
            <param name="function">The CalcFunction to add.</param>
        </member>
        <member name="M:Dt.Base.Excel.AddRowViewport(System.Int32,System.Double)">
            <summary>
            Adds a new row viewport to the control. 
            </summary>
            <param name="rowViewportIndex">The row viewport index to add.</param>
            <param name="viewportHeight">The row viewport height.</param>
        </member>
        <member name="M:Dt.Base.Excel.AutoFitColumn(System.Int32,System.Boolean)">
            <summary>
            Automatically fits the viewport column.
            </summary>
            <param name="column">The column index to automatically fit.</param>
            <param name="isRowHeader">The flag indicates whether sheetArea is a row header.</param>
        </member>
        <member name="M:Dt.Base.Excel.AutoFitRow(System.Int32,System.Boolean)">
            <summary>
            Automatically fits the viewport row.
            </summary>
            <param name="row">The row index.</param>
            <param name="isColumnHeader">The flag indicates whether sheetArea is a column header.</param>
        </member>
        <member name="M:Dt.Base.Excel.ClearCustomFunctions">
            <summary>
            Removes all user-defined custom functions (FunctionInfo object) on this sheet. 
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.ClearCustomName(System.String)">
            <summary>
            Clears the custom name in the workbook. 
            </summary>
            <param name="name">The custom name.</param>
        </member>
        <member name="M:Dt.Base.Excel.ClearCustomNames">
            <summary>
            Removes all custom names on this workbook. 
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.DoCommand(System.Windows.Input.ICommand)">
            <summary>
            Executes a command. 
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Dt.Base.Excel.GetActiveColumnViewportIndex">
            <summary>
            Gets the current active column viewport index in the control. 
            </summary>
            <returns>The active column viewport index.</returns>
        </member>
        <member name="M:Dt.Base.Excel.GetActiveRowViewportIndex">
            <summary>
            Gets the current active row viewport index in the control. 
            </summary>
            <returns>The active row viewport index.</returns>
        </member>
        <member name="M:Dt.Base.Excel.GetColumnViewportCount">
             <summary>
            Gets the column viewport count in the control.  
             </summary>
             <returns>The column viewport count.</returns>
        </member>
        <member name="M:Dt.Base.Excel.GetRowViewportCount">
            <summary>
            Gets the row viewport count in the control. 
            </summary>
            <returns>The row viewport count.</returns>
        </member>
        <member name="M:Dt.Base.Excel.GetCustomFunction(System.String)">
            <summary>
            Gets a custom function from the workbook.
            </summary>
            <param name="name">The function name.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.GetCustomName(System.String)">
            <summary>
            Gets custom name information from the workbook. 
            </summary>
            <param name="name">The custom name.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.GetViewportBottomRow(System.Int32)">
            <summary>
            Gets the row viewport's bottom row index. 
            </summary>
            <param name="rowViewportIndex">The row viewport index.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.GetViewportLeftColumn(System.Int32)">
            <summary>
            Gets the column viewport's left column index. 
            </summary>
            <param name="columnViewportIndex">The column viewport index.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.GetViewportRightColumn(System.Int32)">
            <summary>
            Gets the column viewport's right column index. 
            </summary>
            <param name="columnViewportIndex"></param>
            <returns>The column viewport index.</returns>
        </member>
        <member name="M:Dt.Base.Excel.GetViewportTopRow(System.Int32)">
            <summary>
            Gets the row viewport's top row index. 
            </summary>
            <param name="rowViewportIndex">The row viewport index.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.HitTest(System.Double,System.Double)">
            <summary>
            Performs a hit test. 
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.RemoveColumnViewport(System.Int32)">
            <summary>
            Removes a column viewport from the control. 
            </summary>
            <param name="columnViewportIndex">The column viewport index to remove.</param>
        </member>
        <member name="M:Dt.Base.Excel.RemoveCustomFunctions(System.String)">
            <summary>
            Removes a custom function from the workbook. 
            </summary>
            <param name="name">The function name.</param>
        </member>
        <member name="M:Dt.Base.Excel.RemoveRowViewport(System.Int32)">
            <summary>
            Removes a row viewport from the control. 
            </summary>
            <param name="rowViewportIndex">The row viewport index to remove.</param>
        </member>
        <member name="M:Dt.Base.Excel.ResetThemes">
            <summary>
            Resets the changed theme color and font name. 
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.ResumeCalcService">
            <summary>
            Resumes the calculation service. 
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.ResumeEvent">
            <summary>
            Resumes the event. 
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.Search(System.Int32,System.String,System.Int32@,System.Int32@)">
            <summary>
            Searches the text in the cells in the specified sheet. 
            </summary>
            <param name="sheetIndex">The index of the sheet on which to search.</param>
            <param name="searchString">The string for which to search.</param>
            <param name="foundRowIndex">The index of the row at which a match is found.</param>
            <param name="foundColumnIndex">The index of the column at which a match is found.</param>
        </member>
        <member name="M:Dt.Base.Excel.Search(System.Int32,System.String,Dt.Cells.Data.SearchFlags,System.Int32@,System.Int32@)">
            <summary>
            Searches the text in the cells in the specified sheet for the specified string with the specified criteria. 
            </summary>
            <param name="sheetIndex">The index of the sheet on which to search.</param>
            <param name="searchString">The string for which to search.</param>
            <param name="searchFlags">The search options.</param>
            <param name="foundRowIndex">The index of the row at which a match is found.</param>
            <param name="foundColumnIndex">The index of the column at which a match is found.</param>
        </member>
        <member name="M:Dt.Base.Excel.Search(System.Int32,System.String,Dt.Cells.Data.SearchFlags,Dt.Cells.Data.SearchOrder,System.Int32@,System.Int32@)">
            <summary>
            Searches the text in the cells in the specified sheet for the specified string with the specified criteria. 
            </summary>
            <param name="sheetIndex">The index of the sheet on which to search.</param>
            <param name="searchString">The string for which to search.</param>
            <param name="searchFlags">The search options.</param>
            <param name="searchOrder">Whether to conduct the search by column, row coordinates or row, column coordinates.</param>
            <param name="foundRowIndex">The index of the row at which a match is found.</param>
            <param name="foundColumnIndex">The index of the column at which a match is found.</param>
        </member>
        <member name="M:Dt.Base.Excel.Search(System.Int32,System.String,Dt.Cells.Data.SearchFlags,Dt.Cells.Data.SearchOrder,Dt.Cells.Data.SearchFoundFlags,System.Int32@,System.Int32@)">
            <summary>
            Searches the text in the cells in the specified sheet for the specified string with the specified criteria. 
            </summary>
            <param name="sheetIndex">The index of the sheet on which to search.</param>
            <param name="searchString">The string for which to search.</param>
            <param name="searchFlags">The SearchFlags enumeration that specifies the options of the search.</param>
            <param name="searchOrder">The SearchFlags enumeration that specifies whether the search goes by column, row coordinates or row, column coordinates.</param>
            <param name="searchTarget">The SearchFoundFlags enumeration that indicates whether the search includes the content in the cell notes, tags, or text.</param>
            <param name="foundRowIndex">The index of the row at which a match is found.</param>
            <param name="foundColumnIndex">The index of the column at which a match is found.</param>
            <returns>The found flags.</returns>
        </member>
        <member name="M:Dt.Base.Excel.Search(System.Int32,System.String,Dt.Cells.Data.SearchFlags,Dt.Cells.Data.SearchOrder,Dt.Cells.Data.SearchFoundFlags,Dt.Cells.Data.SheetArea,System.Int32@,System.Int32@)">
            <summary>
            Searches the text in the cells in the specified sheet for the specified string with the specified criteria and whether to search notes and tags as well. 
            </summary>
            <param name="sheetIndex">The index of the sheet on which to search.</param>
            <param name="searchString">The string for which to search.</param>
            <param name="searchFlags">The SearchFlags enumeration that specifies the search options.</param>
            <param name="searchOrder">The SearchFlags enumeration that specifies whether the search goes by column, row coordinates or row, column coordinates.</param>
            <param name="searchTarget">The SearchFoundFlags enumeration that indicates whether the search includes the content in the cell notes, tags, or text.</param>
            <param name="sheetArea">The area of the sheet to search.</param>
            <param name="foundRowIndex">The index of the row at which a match is found.</param>
            <param name="foundColumnIndex">The index of the column at which a match is found.</param>
            <returns>The found flags.</returns>
        </member>
        <member name="M:Dt.Base.Excel.Search(System.Int32,System.String,Dt.Cells.Data.SearchFlags,Dt.Cells.Data.SearchOrder,Dt.Cells.Data.SearchFoundFlags,Dt.Cells.Data.SheetArea,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Searches the text in the cells in the specified sheet for the specified string with the specified criteria and start location, and whether to search notes and tags as well. 
            </summary>
            <param name="sheetIndex">The index of the sheet on which to search.</param>
            <param name="searchString">The string for which to search.</param>
            <param name="searchFlags">The SearchFlags enumeration that specifies the search options.</param>
            <param name="searchOrder">The SearchFlags enumeration that specifies whether the search goes by column, row coordinates or row, column coordinates.</param>
            <param name="searchTarget">The SearchFoundFlags enumeration that indicates whether the search includes the content in the cell notes, tags, or text.</param>
            <param name="sheetArea">The area of the sheet to search.</param>
            <param name="rowStart">The index of the row at which to start.</param>
            <param name="columnStart">The index of the column at which to start.</param>
            <param name="foundRowIndex">The index of the row at which a match is found.</param>
            <param name="foundColumnIndex">The index of the column at which a match is found.</param>
            <returns>The found flags.</returns>
        </member>
        <member name="M:Dt.Base.Excel.Search(System.Int32,System.String,Dt.Cells.Data.SearchFlags,Dt.Cells.Data.SearchOrder,Dt.Cells.Data.SearchFoundFlags,Dt.Cells.Data.SheetArea,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Searches the text in the cells in the specified sheet for the specified string with the specified criteria and start and end location, and whether to search notes and tags as well. 
            </summary>
            <param name="sheetIndex">The index of the sheet on which to search.</param>
            <param name="searchString">The string for which to search.</param>
            <param name="searchFlags">The SearchFlags enumeration that specifies the search options.</param>
            <param name="searchOrder">The SearchFlags enumeration that specifies whether the search goes by column, row coordinates or row, column coordinates.</param>
            <param name="searchTarget">The SearchFoundFlags enumeration that indicates whether the search includes the content in the cell notes, tags, or text.</param>
            <param name="sheetArea">The area of the sheet to search.</param>
            <param name="rowStart">The index of the row at which to start.</param>
            <param name="columnStart">The index of the column at which to start.</param>
            <param name="rowEnd">The index of the row at which to stop searching.</param>
            <param name="columnEnd">The index of the column at which to stop searching.</param>
            <param name="foundRowIndex">The index of the row at which a match is found.</param>
            <param name="foundColumnIndex">The index of the column at which a match is found.</param>
            <returns>Returns the found flags.</returns>
        </member>
        <member name="M:Dt.Base.Excel.Search(System.Int32,System.Int32,System.String,Dt.Cells.Data.SearchFlags,Dt.Cells.Data.SearchOrder,Dt.Cells.Data.SearchFoundFlags,Dt.Cells.Data.SheetArea,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Searches the text in the cells in the specified sheet for the specified string with the specified criteria and start and end location, and whether to search notes and tags as well. 
            </summary>
            <param name="startSheetIndex">Index of the sheet on which to start the search.</param>
            <param name="endSheetIndex">Index of the sheet on which to end the search.</param>
            <param name="searchString">The string for which to search.</param>
            <param name="searchFlags">The SearchFlags enumeration that specifies the search options.</param>
            <param name="searchOrder">The SearchFlags enumeration that specifies whether the search goes by column, row coordinates or row, column coordinates.</param>
            <param name="searchTarget">The SearchFoundFlags enumeration that indicates whether the search includes the content in the cell notes, tags, or text.</param>
            <param name="sheetArea">The area of the sheet to search.</param>
            <param name="rowStart">The index of the row at which to start.</param>
            <param name="columnStart">The index of the column at which to start.</param>
            <param name="rowEnd">The index of the row at which to end.</param>
            <param name="columnEnd">The index of the column at which to end.</param>
            <param name="foundSheetIndex">The index of the sheet at which a match is found.</param>
            <param name="foundRowIndex">The row index at which a match is found.</param>
            <param name="foundColumnIndex">The column index at which a match is found.</param>
            <returns>A SearchFoundFlags enumeration that specifies what is matched. </returns>
        </member>
        <member name="M:Dt.Base.Excel.Search(System.Int32,System.Int32,System.String,Dt.Cells.Data.SearchFlags,Dt.Cells.Data.SearchOrder,Dt.Cells.Data.SearchFoundFlags,Dt.Cells.Data.SheetArea,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Searches the text in the cells in the specified sheet for the specified string with the specified criteria and start and end location, and whether to search notes and tags as well. 
            </summary>
            <param name="startSheetIndex">Index of the sheet on which to start the search.</param>
            <param name="endSheetIndex">Index of the sheet on which to end the search.</param>
            <param name="searchString">The string for which to search.</param>
            <param name="searchFlags">The SearchFlags enumeration that specifies the search options.</param>
            <param name="searchOrder">The SearchFlags enumeration that specifies whether the search goes by column, row coordinates or row, column coordinates.</param>
            <param name="searchTarget">The SearchFoundFlags enumeration that indicates whether the search includes the content in the cell notes, tags, or text.</param>
            <param name="sheetArea">The area of the sheet to search.</param>
            <param name="rowStart">The row index at which to start.</param>
            <param name="columnStart">The column index at which to start.</param>
            <param name="rowEnd">The row index at which to stop searching.</param>
            <param name="columnEnd">The column index at which to stop searching.</param>
            <param name="foundSheetIndex">The index of the sheet at which a match is found.</param>
            <param name="foundRowIndex">The index of the row at which a match is found.</param>
            <param name="foundColumnIndex">The index of the column at which a match is found.</param>
            <param name="foundString">The found string.</param>
            <returns>A SearchFoundFlags enumeration that specifies what is matched.</returns>
        </member>
        <member name="M:Dt.Base.Excel.SetActiveViewport(System.Int32,System.Int32)">
            <summary>
            Activates a viewport in the control. 
            </summary>
            <param name="rowViewportIndex">The row viewport index.</param>
            <param name="columnViewportIndex">The column viewport index.</param>
        </member>
        <member name="M:Dt.Base.Excel.SetCustomName(System.String,System.Int32,System.Int32,Dt.CalcEngine.Expressions.CalcExpression)">
            <summary>
            Sets a custom name expression to the workbook. 
            </summary>
            <param name="name">The custom name.</param>
            <param name="baseRow">The row index.</param>
            <param name="baseColumn">The column index.</param>
            <param name="expression">The CalcExpression.</param>
        </member>
        <member name="M:Dt.Base.Excel.SetCustomName(System.String,Dt.Cells.Data.Worksheet,System.Int32,System.Int32,System.String)">
            <summary>
            Sets a custom name formula to the workbook. 
            </summary>
            <param name="name">The custom name.</param>
            <param name="worksheet">The worksheet.</param>
            <param name="baseRow">The row index.</param>
            <param name="baseColumn">The column index.</param>
            <param name="formula">The formula.</param>
        </member>
        <member name="M:Dt.Base.Excel.SetCustomName(System.String,Dt.Cells.Data.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a custom name external range expression to the workbook. 
            </summary>
            <param name="name">The custom name.</param>
            <param name="worksheet">The worksheet to create the expression.</param>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <param name="rowCount">The row count.</param>
            <param name="columnCount">The column count.</param>
        </member>
        <member name="M:Dt.Base.Excel.SetViewportLeftColumn(System.Int32,System.Int32)">
            <summary>
            Sets the column viewport's left column.
            </summary>
            <param name="columnViewportIndex">The column viewport index.</param>
            <param name="value">The column index.</param>
        </member>
        <member name="M:Dt.Base.Excel.SetViewportTopRow(System.Int32,System.Int32)">
            <summary>
            Sets the row viewport's top row.
            </summary>
            <param name="rowViewportIndex">The row viewport index.</param>
            <param name="value">The row index.</param>
        </member>
        <member name="M:Dt.Base.Excel.ShowActiveCell(Dt.Cells.UI.VerticalPosition,Dt.Cells.UI.HorizontalPosition)">
            <summary>
            Moves the current active cell to the specified position. 
            </summary>
            <param name="verticalPosition">The VerticalPosition to show.</param>
            <param name="horizontalPosition">The HorizontalPosition to show.</param>
        </member>
        <member name="M:Dt.Base.Excel.ShowCell(System.Int32,System.Int32,System.Int32,System.Int32,Dt.Cells.UI.VerticalPosition,Dt.Cells.UI.HorizontalPosition)">
            <summary>
            Moves a cell to the specified position.  
            </summary>
            <param name="rowViewportIndex">The row viewport index.</param>
            <param name="columnViewportIndex">The column viewport index.</param>
            <param name="row">The cell row index to show.</param>
            <param name="column">The cell column index to show.</param>
            <param name="verticalPosition">The VerticalPosition to show.</param>
            <param name="horizontalPosition">The HorizontalPosition to show.</param>
        </member>
        <member name="M:Dt.Base.Excel.ShowColumn(System.Int32,System.Int32,Dt.Cells.UI.HorizontalPosition)">
            <summary>
            Moves a column to the specified position. 
            </summary>
            <param name="columnViewportIndex">The column viewport index.</param>
            <param name="column">The column index to show.</param>
            <param name="horizontalPosition">The HorizontalPosition to show.</param>
        </member>
        <member name="M:Dt.Base.Excel.ShowRow(System.Int32,System.Int32,Dt.Cells.UI.VerticalPosition)">
            <summary>
            Moves a row to the specified position. 
            </summary>
            <param name="rowViewportIndex">The row viewport index.</param>
            <param name="row">The row index to show.</param>
            <param name="verticalPosition">The VerticalPosition to show.</param>
        </member>
        <member name="M:Dt.Base.Excel.SuspendCalcService">
            <summary>
            Suspends the calculation service. 
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.SuspendEvent">
            <summary>
            Suspends the event. 
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.AdjustRowViewport(System.Int32,System.Double)">
            <summary>
            Adjusts the adjacent row viewport's height.
            </summary>
            <param name="rowViewportIndex">The row viewport index to adjust, it adjusts the row viewport and its next row viewport.</param>
            <param name="deltaViewportHeight">The row height adjusted offset.</param>
        </member>
        <member name="M:Dt.Base.Excel.AdjustColumnViewport(System.Int32,System.Double)">
            <summary>
            Adjusts the adjacent column viewport's width.
            </summary>
            <param name="columnViewportIndex">The column viewport index to adjust, it adjusts the column viewport and its next column viewport.</param>
            <param name="deltaViewportWidth">The column width adjusted offset.</param>
        </member>
        <member name="M:Dt.Base.Excel.ClearUndoManager">
            <summary>
            Clears all undo and redo actions in the current UndoManager. 
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.ClipboardCopy(Dt.Cells.Data.CellRange)">
            <summary>
            Copies the text of a cell range to the Clipboard.
            </summary>
            <param name="range">The copied cell range.</param>
        </member>
        <member name="M:Dt.Base.Excel.ClipboardCut(Dt.Cells.Data.CellRange)">
            <summary>
            Cuts the text of a cell range to the Clipboard.
            </summary>
            <param name="range">The cut cell range.</param>
        </member>
        <member name="M:Dt.Base.Excel.ClipboardPaste(Dt.Cells.Data.CellRange)">
            <summary>
            Pastes content from the Clipboard to a cell range on the sheet.
            </summary>
            <param name="range">The pasted cell range on the sheet.</param>
        </member>
        <member name="M:Dt.Base.Excel.ClipboardPaste(Dt.Cells.Data.CellRange,Dt.Cells.Data.ClipboardPasteOptions)">
            <summary>
            Pastes content from the Clipboard to a cell range on the sheet.
            </summary>
            <param name="range">The pasted cell range.</param>
            <param name="option">The Clipboard paste option that indicates which content type to paste.</param>
        </member>
        <member name="M:Dt.Base.Excel.GetNextPageRowCount(System.Int32)">
            <summary>
            Gets the row count when scrolling down one page.
            </summary>
            <param name="rowViewportIndex">The row viewport index one page down.</param>
            <returns>The row count when scrolling down one page.</returns>
        </member>
        <member name="M:Dt.Base.Excel.GetNextPageColumnCount(System.Int32)">
            <summary>
            Gets the column count when scrolling right one page.
            </summary>
            <param name="columnViewportIndex">The column viewport index one page to the right.</param>
            <returns>The column count when scrolling right one page.</returns>
        </member>
        <member name="M:Dt.Base.Excel.GetPrePageRowCount(System.Int32)">
            <summary>
            Gets the row count when scrolling up one page.
            </summary>
            <param name="rowViewportIndex">The row viewport index one page up.</param>
            <returns>The row count when scrolling up one page.</returns>
        </member>
        <member name="M:Dt.Base.Excel.GetPrePageColumnCount(System.Int32)">
            <summary>
            Gets the column count when scrolling left one page.
            </summary>
            <param name="columnViewportIndex">The column viewport index one page to the left.</param>
            <returns>The column count when scrolling left one page.</returns>
        </member>
        <member name="M:Dt.Base.Excel.GetSpreadChartView(System.String)">
            <summary>
            Ges the spread chart view.
            </summary>
            <param name="chartName">Name of the chart.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.SetActiveCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the active cell of the sheet.
            </summary>
            <param name="row">The active row index.</param>
            <param name="column">The active column index.</param>
            <param name="clearSelection"> if set to <c>true</c> clears the old selection.</param>
        </member>
        <member name="M:Dt.Base.Excel.SetFloatingObjectZIndex(System.String,System.Int32)">
            <summary>
            Sets the index of the floating object Z.
            </summary>
            <param name="name">The name.</param>
            <param name="zIndex">Index of the z.</param>
        </member>
        <member name="M:Dt.Base.Excel.ShowAutoFillIndicator">
            <summary>
            Displays the automatic fill indicator.
            </summary>
        </member>
        <member name="M:Dt.Base.Excel.StartCellEditing(System.Boolean,System.String)">
            <summary>
            Starts to edit the active cell.
            </summary>
            <param name="selectAll">if set to <c>true</c> selects all the text when the text is changed during editing.</param>
            <param name="defaultText">if set to <c>true</c> [default text].</param>
        </member>
        <member name="M:Dt.Base.Excel.StopCellEditing(System.Boolean)">
            <summary>
            Stops editing the active cell.
            </summary>
            <param name="cancel">if set to <c>true</c> does not apply the edited text to the cell.</param>
            <returns><c>true</c> when able to stop cell editing successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dt.Base.Excel.GetStartIndexToBringTabIntoView(System.Int32)">
            <summary>
            Calculates the start index to bring the tab into view. 
            </summary>
            <param name="tabIndex">Index of the tab.</param>
            <returns></returns>
        </member>
        <member name="M:Dt.Base.Excel.Print(Dt.Cells.Data.PrintInfo,System.Int32,System.String)">
            <summary>
            æå°Sheetåå®¹
            </summary>
            <param name="p_printInfo">æå°è®¾ç½®</param>
            <param name="p_sheetIndex">è¦æå°çSheetç´¢å¼ï¼-1è¡¨ç¤ºå½åæ´»å¨Sheet</param>
            <param name="p_title">æ é¢</param>
        </member>
        <member name="M:Dt.Base.Excel.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)">
            <summary>
            Native constructor, do not use explicitly.
            </summary>
            <remarks>
            Used by the Xamarin Runtime to materialize native 
            objects that may have been collected in the managed world.
            </remarks>
        </member>
    </members>
</doc>
